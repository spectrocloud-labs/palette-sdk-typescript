/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type { AzureMachinePoolConfigAdditionalLabels } from "./azureMachinePoolConfigAdditionalLabels";
import type { AzureMachinePoolConfigAdditionalTags } from "./azureMachinePoolConfigAdditionalTags";
import type { InstanceConfig } from "./instanceConfig";
import type { MachinePoolProperties } from "./machinePoolProperties";
import type { AzureOSDisk } from "./azureOSDisk";
import type { OsType } from "./osType";
import type { SpotVMOptions } from "./spotVMOptions";
import type { Taint } from "./taint";
import type { UpdateStrategy } from "./updateStrategy";

export interface AzureMachinePoolConfig {
  /** additionalLabels */
  additionalLabels?: AzureMachinePoolConfigAdditionalLabels;
  /** AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole */
  additionalTags?: AzureMachinePoolConfigAdditionalTags;
  azs?: string[];
  instanceConfig?: InstanceConfig;
  /** Instance type stands for VMSize in Azure */
  instanceType?: string;
  /** whether this pool is for control plane */
  isControlPlane: boolean;
  /** whether this pool is for system node Pool */
  isSystemNodePool?: boolean;
  /** labels for this pool, example: control-plane/worker, gpu, windows */
  labels?: string[];
  machinePoolProperties?: MachinePoolProperties;
  /** max size of the pool, for scaling */
  maxSize?: number;
  /** min size of the pool, for scaling */
  minSize?: number;
  name?: string;
  /** Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster */
  nodeRepaveInterval?: number;
  osDisk?: AzureOSDisk;
  osType?: OsType;
  /** size of the pool, number of machines */
  size?: number;
  spotVMOptions?: SpotVMOptions;
  /** control plane or worker taints */
  taints?: Taint[];
  updateStrategy?: UpdateStrategy;
  /** if IsControlPlane==true && useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools */
  useControlPlaneAsWorker?: boolean;
}
