/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  NotificationEvent,
  Notifications,
  NotificationsListParams,
  NotificationsObjTypeUidListParams,
  Uid,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * Returns a paginated list of notifications based on request parameters
 * @summary Returns a paginated list of notifications based on request parameters
 */
export type notificationsListResponse200 = {
  data: Notifications;
  status: 200;
};

export type notificationsListResponseComposite = notificationsListResponse200;

export type notificationsListResponse = notificationsListResponseComposite & {
  headers: Headers;
};

export const getNotificationsListUrl = (params?: NotificationsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/notifications/?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/notifications/`;
};

export const notificationsList = async (
  params?: NotificationsListParams,
  options?: RequestInit,
): Promise<notificationsListResponse> => {
  return customInstance<notificationsListResponse>(
    getNotificationsListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Creates a notification event
 * @summary Creates a notification event
 */
export type notificationsEventCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type notificationsEventCreateResponseComposite =
  notificationsEventCreateResponse201;

export type notificationsEventCreateResponse =
  notificationsEventCreateResponseComposite & {
    headers: Headers;
  };

export const getNotificationsEventCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/notifications/events`;
};

export const notificationsEventCreate = async (
  notificationEvent: NotificationEvent,
  options?: RequestInit,
): Promise<notificationsEventCreateResponse> => {
  return customInstance<notificationsEventCreateResponse>(
    getNotificationsEventCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(notificationEvent),
    },
  );
};

/**
 * Returns a list of notifications for the specified related object
 * @summary Returns a list of notifications for the specified related object
 */
export type notificationsObjTypeUidListResponse200 = {
  data: Notifications;
  status: 200;
};

export type notificationsObjTypeUidListResponseComposite =
  notificationsObjTypeUidListResponse200;

export type notificationsObjTypeUidListResponse =
  notificationsObjTypeUidListResponseComposite & {
    headers: Headers;
  };

export const getNotificationsObjTypeUidListUrl = (
  objectKind: "spectrocluster" | "clusterprofile" | "appdeployment",
  objectUid: string,
  params?: NotificationsObjTypeUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/notifications/${objectKind}/${objectUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/notifications/${objectKind}/${objectUid}`;
};

export const notificationsObjTypeUidList = async (
  objectKind: "spectrocluster" | "clusterprofile" | "appdeployment",
  objectUid: string,
  params?: NotificationsObjTypeUidListParams,
  options?: RequestInit,
): Promise<notificationsObjTypeUidListResponse> => {
  return customInstance<notificationsObjTypeUidListResponse>(
    getNotificationsObjTypeUidListUrl(objectKind, objectUid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Updates the specified notification for the acknowledgment
 * @summary Updates the specified notification for the acknowledgment
 */
export type notificationsUidAckResponse204 = {
  data: void;
  status: 204;
};

export type notificationsUidAckResponseComposite =
  notificationsUidAckResponse204;

export type notificationsUidAckResponse =
  notificationsUidAckResponseComposite & {
    headers: Headers;
  };

export const getNotificationsUidAckUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/notifications/${uid}/ack`;
};

export const notificationsUidAck = async (
  uid: string,
  options?: RequestInit,
): Promise<notificationsUidAckResponse> => {
  return customInstance<notificationsUidAckResponse>(
    getNotificationsUidAckUrl(uid),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * Updates the specified notification action as done
 * @summary Updates the specified notification action as done
 */
export type notificationsUidDoneResponse204 = {
  data: void;
  status: 204;
};

export type notificationsUidDoneResponseComposite =
  notificationsUidDoneResponse204;

export type notificationsUidDoneResponse =
  notificationsUidDoneResponseComposite & {
    headers: Headers;
  };

export const getNotificationsUidDoneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/notifications/${uid}/done`;
};

export const notificationsUidDone = async (
  uid: string,
  options?: RequestInit,
): Promise<notificationsUidDoneResponse> => {
  return customInstance<notificationsUidDoneResponse>(
    getNotificationsUidDoneUrl(uid),
    {
      ...options,
      method: "PATCH",
    },
  );
};
