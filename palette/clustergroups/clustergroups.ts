/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ClusterGroup,
  ClusterGroupEntity,
  ClusterGroupHostClusterEntity,
  ClusterGroupsDeveloperCreditUsage,
  ClusterGroupsHostClusterMetadata,
  ClusterGroupsHostClusterSummary,
  ClusterGroupsUidProfilesGetParams,
  ClusterGroupsValidateNameParams,
  SpectroClusterProfileList,
  SpectroClusterProfilesResolvedValues,
  Uid,
  V1ObjectMetaBody,
  V1SpectroClusterProfilesBody,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * @summary Create cluster groups
 */
export type clusterGroupsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterGroupsCreateResponseComposite =
  clusterGroupsCreateResponse201;

export type clusterGroupsCreateResponse =
  clusterGroupsCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups`;
};

export const clusterGroupsCreate = async (
  clusterGroupEntity: ClusterGroupEntity,
  options?: RequestInit,
): Promise<clusterGroupsCreateResponse> => {
  return customInstance<clusterGroupsCreateResponse>(
    getClusterGroupsCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterGroupEntity),
    },
  );
};

/**
 * @summary Get cluster group developer credit usage by scope
 */
export type clusterGroupsDeveloperCreditUsageGetResponse200 = {
  data: ClusterGroupsDeveloperCreditUsage;
  status: 200;
};

export type clusterGroupsDeveloperCreditUsageGetResponseComposite =
  clusterGroupsDeveloperCreditUsageGetResponse200;

export type clusterGroupsDeveloperCreditUsageGetResponse =
  clusterGroupsDeveloperCreditUsageGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsDeveloperCreditUsageGetUrl = (
  scope: "system" | "tenant",
) => {
  return `https://api.spectrocloud.com/v1/clustergroups/developerCredit/usage/${scope}`;
};

export const clusterGroupsDeveloperCreditUsageGet = async (
  scope: "system" | "tenant",
  options?: RequestInit,
): Promise<clusterGroupsDeveloperCreditUsageGetResponse> => {
  return customInstance<clusterGroupsDeveloperCreditUsageGetResponse>(
    getClusterGroupsDeveloperCreditUsageGetUrl(scope),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Retrieves a list of cluster groups host cluster summary
 */
export type clusterGroupsHostClusterSummaryResponse200 = {
  data: ClusterGroupsHostClusterSummary;
  status: 200;
};

export type clusterGroupsHostClusterSummaryResponseComposite =
  clusterGroupsHostClusterSummaryResponse200;

export type clusterGroupsHostClusterSummaryResponse =
  clusterGroupsHostClusterSummaryResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsHostClusterSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster`;
};

export const clusterGroupsHostClusterSummary = async (
  options?: RequestInit,
): Promise<clusterGroupsHostClusterSummaryResponse> => {
  return customInstance<clusterGroupsHostClusterSummaryResponse>(
    getClusterGroupsHostClusterSummaryUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Retrieves a list of cluster groups host cluster metadata
 */
export type clusterGroupsHostClusterMetadataResponse200 = {
  data: ClusterGroupsHostClusterMetadata;
  status: 200;
};

export type clusterGroupsHostClusterMetadataResponseComposite =
  clusterGroupsHostClusterMetadataResponse200;

export type clusterGroupsHostClusterMetadataResponse =
  clusterGroupsHostClusterMetadataResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsHostClusterMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster/metadata`;
};

export const clusterGroupsHostClusterMetadata = async (
  options?: RequestInit,
): Promise<clusterGroupsHostClusterMetadataResponse> => {
  return customInstance<clusterGroupsHostClusterMetadataResponse>(
    getClusterGroupsHostClusterMetadataUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Validates the cluster groups name
 */
export type clusterGroupsValidateNameResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsValidateNameResponseComposite =
  clusterGroupsValidateNameResponse204;

export type clusterGroupsValidateNameResponse =
  clusterGroupsValidateNameResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsValidateNameUrl = (
  params: ClusterGroupsValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/validate/name`;
};

export const clusterGroupsValidateName = async (
  params: ClusterGroupsValidateNameParams,
  options?: RequestInit,
): Promise<clusterGroupsValidateNameResponse> => {
  return customInstance<clusterGroupsValidateNameResponse>(
    getClusterGroupsValidateNameUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Deletes the specified cluster group
 */
export type clusterGroupsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidDeleteResponseComposite =
  clusterGroupsUidDeleteResponse204;

export type clusterGroupsUidDeleteResponse =
  clusterGroupsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const clusterGroupsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterGroupsUidDeleteResponse> => {
  return customInstance<clusterGroupsUidDeleteResponse>(
    getClusterGroupsUidDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified cluster groups
 */
export type clusterGroupsUidGetResponse200 = {
  data: ClusterGroup;
  status: 200;
};

export type clusterGroupsUidGetResponseComposite =
  clusterGroupsUidGetResponse200;

export type clusterGroupsUidGetResponse =
  clusterGroupsUidGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const clusterGroupsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterGroupsUidGetResponse> => {
  return customInstance<clusterGroupsUidGetResponse>(
    getClusterGroupsUidGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates cluster reference and host cluster config
 */
export type clusterGroupsUidHostClusterUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidHostClusterUpdateResponseComposite =
  clusterGroupsUidHostClusterUpdateResponse204;

export type clusterGroupsUidHostClusterUpdateResponse =
  clusterGroupsUidHostClusterUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidHostClusterUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/hostCluster`;
};

export const clusterGroupsUidHostClusterUpdate = async (
  uid: string,
  clusterGroupHostClusterEntity: ClusterGroupHostClusterEntity,
  options?: RequestInit,
): Promise<clusterGroupsUidHostClusterUpdateResponse> => {
  return customInstance<clusterGroupsUidHostClusterUpdateResponse>(
    getClusterGroupsUidHostClusterUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterGroupHostClusterEntity),
    },
  );
};

/**
 * @summary Updates the specified cluster groups meta
 */
export type clusterGroupsUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidMetaUpdateResponseComposite =
  clusterGroupsUidMetaUpdateResponse204;

export type clusterGroupsUidMetaUpdateResponse =
  clusterGroupsUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/meta`;
};

export const clusterGroupsUidMetaUpdate = async (
  uid: string,
  v1ObjectMetaBody: V1ObjectMetaBody,
  options?: RequestInit,
): Promise<clusterGroupsUidMetaUpdateResponse> => {
  return customInstance<clusterGroupsUidMetaUpdateResponse>(
    getClusterGroupsUidMetaUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ObjectMetaBody),
    },
  );
};

/**
 * @summary Returns the specified clustergroup's profile packs resolved values
 */
export type clusterGroupsUidPacksResolvedValuesGetResponse200 = {
  data: SpectroClusterProfilesResolvedValues;
  status: 200;
};

export type clusterGroupsUidPacksResolvedValuesGetResponseComposite =
  clusterGroupsUidPacksResolvedValuesGetResponse200;

export type clusterGroupsUidPacksResolvedValuesGetResponse =
  clusterGroupsUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidPacksResolvedValuesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/packs/resolvedValues`;
};

export const clusterGroupsUidPacksResolvedValuesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterGroupsUidPacksResolvedValuesGetResponse> => {
  return customInstance<clusterGroupsUidPacksResolvedValuesGetResponse>(
    getClusterGroupsUidPacksResolvedValuesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the associated profiles of a specified cluster group
 */
export type clusterGroupsUidProfilesGetResponse200 = {
  data: SpectroClusterProfileList;
  status: 200;
};

export type clusterGroupsUidProfilesGetResponseComposite =
  clusterGroupsUidProfilesGetResponse200;

export type clusterGroupsUidProfilesGetResponse =
  clusterGroupsUidProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidProfilesGetUrl = (
  uid: string,
  params?: ClusterGroupsUidProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const clusterGroupsUidProfilesGet = async (
  uid: string,
  params?: ClusterGroupsUidProfilesGetParams,
  options?: RequestInit,
): Promise<clusterGroupsUidProfilesGetResponse> => {
  return customInstance<clusterGroupsUidProfilesGetResponse>(
    getClusterGroupsUidProfilesGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified cluster groups profiles
 */
export type clusterGroupsUidProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidProfilesUpdateResponseComposite =
  clusterGroupsUidProfilesUpdateResponse204;

export type clusterGroupsUidProfilesUpdateResponse =
  clusterGroupsUidProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidProfilesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const clusterGroupsUidProfilesUpdate = async (
  uid: string,
  v1SpectroClusterProfilesBody: V1SpectroClusterProfilesBody,
  options?: RequestInit,
): Promise<clusterGroupsUidProfilesUpdateResponse> => {
  return customInstance<clusterGroupsUidProfilesUpdateResponse>(
    getClusterGroupsUidProfilesUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterProfilesBody),
    },
  );
};
