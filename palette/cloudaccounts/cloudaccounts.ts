/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AwsAccount,
  AwsAccounts,
  AzureAccount,
  AzureAccounts,
  CloudAccountsAwsGetParams,
  CloudAccountsAwsListParams,
  CloudAccountsAzureListParams,
  CloudAccountsCustomListParams,
  CloudAccountsGcpListParams,
  CloudAccountsListSummaryParams,
  CloudAccountsMaasListParams,
  CloudAccountsOpenStackListParams,
  CloudAccountsPatch,
  CloudAccountsSummary,
  CloudAccountsVsphereListParams,
  CustomAccount,
  CustomAccountEntity,
  CustomAccounts,
  GcpAccount,
  GcpAccounts,
  GeolocationLatlong,
  MaasAccount,
  MaasAccounts,
  MaasDomains,
  MaasPools,
  MaasSubnets,
  MaasTags,
  MaasZones,
  OpenStackAccount,
  OpenStackAccounts,
  OpenStackAzs,
  OpenStackFlavors,
  OpenStackKeypairs,
  OpenStackNetworks,
  OpenStackProjects,
  OpenStackRegions,
  OpenstackAccountsUidAzsParams,
  OpenstackAccountsUidFlavorsParams,
  OpenstackAccountsUidKeypairsParams,
  OpenstackAccountsUidNetworksParams,
  Uid,
  V1GcpAccountEntityBody,
  V1VsphereAccountBody,
  VsphereAccount,
  VsphereAccounts,
  VsphereAccountsUidClusterResParams,
  VsphereComputeClusterResources,
  VsphereDatacenters,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * @summary Retrieves a list of AWS cloud accounts
 */
export type cloudAccountsAwsListResponse200 = {
  data: AwsAccounts;
  status: 200;
};

export type cloudAccountsAwsListResponseComposite =
  cloudAccountsAwsListResponse200;

export type cloudAccountsAwsListResponse =
  cloudAccountsAwsListResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAwsListUrl = (
  params?: CloudAccountsAwsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/aws?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/aws`;
};

export const cloudAccountsAwsList = async (
  params?: CloudAccountsAwsListParams,
  options?: RequestInit,
): Promise<cloudAccountsAwsListResponse> => {
  return customInstance<cloudAccountsAwsListResponse>(
    getCloudAccountsAwsListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Creates an AWS cloud account
 */
export type cloudAccountsAwsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudAccountsAwsCreateResponseComposite =
  cloudAccountsAwsCreateResponse201;

export type cloudAccountsAwsCreateResponse =
  cloudAccountsAwsCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAwsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws`;
};

export const cloudAccountsAwsCreate = async (
  awsAccount: AwsAccount,
  options?: RequestInit,
): Promise<cloudAccountsAwsCreateResponse> => {
  return customInstance<cloudAccountsAwsCreateResponse>(
    getCloudAccountsAwsCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(awsAccount),
    },
  );
};

/**
 * @summary Deletes the specified AWS account
 */
export type cloudAccountsAwsDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsAwsDeleteResponseComposite =
  cloudAccountsAwsDeleteResponse204;

export type cloudAccountsAwsDeleteResponse =
  cloudAccountsAwsDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAwsDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const cloudAccountsAwsDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsAwsDeleteResponse> => {
  return customInstance<cloudAccountsAwsDeleteResponse>(
    getCloudAccountsAwsDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified AWS account
 */
export type cloudAccountsAwsGetResponse200 = {
  data: AwsAccount;
  status: 200;
};

export type cloudAccountsAwsGetResponseComposite =
  cloudAccountsAwsGetResponse200;

export type cloudAccountsAwsGetResponse =
  cloudAccountsAwsGetResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAwsGetUrl = (
  uid: string,
  params?: CloudAccountsAwsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const cloudAccountsAwsGet = async (
  uid: string,
  params?: CloudAccountsAwsGetParams,
  options?: RequestInit,
): Promise<cloudAccountsAwsGetResponse> => {
  return customInstance<cloudAccountsAwsGetResponse>(
    getCloudAccountsAwsGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified AWS account
 */
export type cloudAccountsAwsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsAwsUpdateResponseComposite =
  cloudAccountsAwsUpdateResponse204;

export type cloudAccountsAwsUpdateResponse =
  cloudAccountsAwsUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAwsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const cloudAccountsAwsUpdate = async (
  uid: string,
  awsAccount: AwsAccount,
  options?: RequestInit,
): Promise<cloudAccountsAwsUpdateResponse> => {
  return customInstance<cloudAccountsAwsUpdateResponse>(
    getCloudAccountsAwsUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(awsAccount),
    },
  );
};

/**
 * @summary Retrieves a list of azure cloud accounts
 */
export type cloudAccountsAzureListResponse200 = {
  data: AzureAccounts;
  status: 200;
};

export type cloudAccountsAzureListResponseComposite =
  cloudAccountsAzureListResponse200;

export type cloudAccountsAzureListResponse =
  cloudAccountsAzureListResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAzureListUrl = (
  params?: CloudAccountsAzureListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/azure?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/azure`;
};

export const cloudAccountsAzureList = async (
  params?: CloudAccountsAzureListParams,
  options?: RequestInit,
): Promise<cloudAccountsAzureListResponse> => {
  return customInstance<cloudAccountsAzureListResponse>(
    getCloudAccountsAzureListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Create azure cloud account
 */
export type cloudAccountsAzureCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudAccountsAzureCreateResponseComposite =
  cloudAccountsAzureCreateResponse201;

export type cloudAccountsAzureCreateResponse =
  cloudAccountsAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure`;
};

export const cloudAccountsAzureCreate = async (
  azureAccount: AzureAccount,
  options?: RequestInit,
): Promise<cloudAccountsAzureCreateResponse> => {
  return customInstance<cloudAccountsAzureCreateResponse>(
    getCloudAccountsAzureCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(azureAccount),
    },
  );
};

/**
 * @summary Deletes the specified azure account
 */
export type cloudAccountsAzureDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsAzureDeleteResponseComposite =
  cloudAccountsAzureDeleteResponse204;

export type cloudAccountsAzureDeleteResponse =
  cloudAccountsAzureDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAzureDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const cloudAccountsAzureDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsAzureDeleteResponse> => {
  return customInstance<cloudAccountsAzureDeleteResponse>(
    getCloudAccountsAzureDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified azure cloud account
 */
export type cloudAccountsAzureGetResponse200 = {
  data: AzureAccount;
  status: 200;
};

export type cloudAccountsAzureGetResponseComposite =
  cloudAccountsAzureGetResponse200;

export type cloudAccountsAzureGetResponse =
  cloudAccountsAzureGetResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAzureGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const cloudAccountsAzureGet = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsAzureGetResponse> => {
  return customInstance<cloudAccountsAzureGetResponse>(
    getCloudAccountsAzureGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified azure account
 */
export type cloudAccountsAzureUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsAzureUpdateResponseComposite =
  cloudAccountsAzureUpdateResponse204;

export type cloudAccountsAzureUpdateResponse =
  cloudAccountsAzureUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsAzureUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const cloudAccountsAzureUpdate = async (
  uid: string,
  azureAccount: AzureAccount,
  options?: RequestInit,
): Promise<cloudAccountsAzureUpdateResponse> => {
  return customInstance<cloudAccountsAzureUpdateResponse>(
    getCloudAccountsAzureUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(azureAccount),
    },
  );
};

/**
 * @summary Retrieves a list of cloud accounts by cloud type
 */
export type cloudAccountsCustomListResponse200 = {
  data: CustomAccounts;
  status: 200;
};

export type cloudAccountsCustomListResponseComposite =
  cloudAccountsCustomListResponse200;

export type cloudAccountsCustomListResponse =
  cloudAccountsCustomListResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsCustomListUrl = (
  cloudType: string,
  params?: CloudAccountsCustomListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}`;
};

export const cloudAccountsCustomList = async (
  cloudType: string,
  params?: CloudAccountsCustomListParams,
  options?: RequestInit,
): Promise<cloudAccountsCustomListResponse> => {
  return customInstance<cloudAccountsCustomListResponse>(
    getCloudAccountsCustomListUrl(cloudType, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Creates an cloud account of specific cloud type
 */
export type cloudAccountsCustomCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudAccountsCustomCreateResponseComposite =
  cloudAccountsCustomCreateResponse201;

export type cloudAccountsCustomCreateResponse =
  cloudAccountsCustomCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsCustomCreateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}`;
};

export const cloudAccountsCustomCreate = async (
  cloudType: string,
  customAccountEntity: CustomAccountEntity,
  options?: RequestInit,
): Promise<cloudAccountsCustomCreateResponse> => {
  return customInstance<cloudAccountsCustomCreateResponse>(
    getCloudAccountsCustomCreateUrl(cloudType),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(customAccountEntity),
    },
  );
};

/**
 * @summary Deletes the specified account by cloud type
 */
export type cloudAccountsCustomDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsCustomDeleteResponseComposite =
  cloudAccountsCustomDeleteResponse204;

export type cloudAccountsCustomDeleteResponse =
  cloudAccountsCustomDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsCustomDeleteUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const cloudAccountsCustomDelete = async (
  cloudType: string,
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsCustomDeleteResponse> => {
  return customInstance<cloudAccountsCustomDeleteResponse>(
    getCloudAccountsCustomDeleteUrl(cloudType, uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified account by cloud type
 */
export type cloudAccountsCustomGetResponse200 = {
  data: CustomAccount;
  status: 200;
};

export type cloudAccountsCustomGetResponseComposite =
  cloudAccountsCustomGetResponse200;

export type cloudAccountsCustomGetResponse =
  cloudAccountsCustomGetResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsCustomGetUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const cloudAccountsCustomGet = async (
  cloudType: string,
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsCustomGetResponse> => {
  return customInstance<cloudAccountsCustomGetResponse>(
    getCloudAccountsCustomGetUrl(cloudType, uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified account by cloud type
 */
export type cloudAccountsCustomUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsCustomUpdateResponseComposite =
  cloudAccountsCustomUpdateResponse204;

export type cloudAccountsCustomUpdateResponse =
  cloudAccountsCustomUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsCustomUpdateUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const cloudAccountsCustomUpdate = async (
  cloudType: string,
  uid: string,
  customAccountEntity: CustomAccountEntity,
  options?: RequestInit,
): Promise<cloudAccountsCustomUpdateResponse> => {
  return customInstance<cloudAccountsCustomUpdateResponse>(
    getCloudAccountsCustomUpdateUrl(cloudType, uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(customAccountEntity),
    },
  );
};

/**
 * @summary Retrieves a list of gcp cloud accounts
 */
export type cloudAccountsGcpListResponse200 = {
  data: GcpAccounts;
  status: 200;
};

export type cloudAccountsGcpListResponseComposite =
  cloudAccountsGcpListResponse200;

export type cloudAccountsGcpListResponse =
  cloudAccountsGcpListResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsGcpListUrl = (
  params?: CloudAccountsGcpListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/gcp?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/gcp`;
};

export const cloudAccountsGcpList = async (
  params?: CloudAccountsGcpListParams,
  options?: RequestInit,
): Promise<cloudAccountsGcpListResponse> => {
  return customInstance<cloudAccountsGcpListResponse>(
    getCloudAccountsGcpListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Creates a GCP cloud account
 */
export type cloudAccountsGcpCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudAccountsGcpCreateResponseComposite =
  cloudAccountsGcpCreateResponse201;

export type cloudAccountsGcpCreateResponse =
  cloudAccountsGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp`;
};

export const cloudAccountsGcpCreate = async (
  v1GcpAccountEntityBody: V1GcpAccountEntityBody,
  options?: RequestInit,
): Promise<cloudAccountsGcpCreateResponse> => {
  return customInstance<cloudAccountsGcpCreateResponse>(
    getCloudAccountsGcpCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpAccountEntityBody),
    },
  );
};

/**
 * @summary Deletes the specified GCP account
 */
export type cloudAccountsGcpDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsGcpDeleteResponseComposite =
  cloudAccountsGcpDeleteResponse204;

export type cloudAccountsGcpDeleteResponse =
  cloudAccountsGcpDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsGcpDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const cloudAccountsGcpDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsGcpDeleteResponse> => {
  return customInstance<cloudAccountsGcpDeleteResponse>(
    getCloudAccountsGcpDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified GCP cloud account
 */
export type cloudAccountsGcpGetResponse200 = {
  data: GcpAccount;
  status: 200;
};

export type cloudAccountsGcpGetResponseComposite =
  cloudAccountsGcpGetResponse200;

export type cloudAccountsGcpGetResponse =
  cloudAccountsGcpGetResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsGcpGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const cloudAccountsGcpGet = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsGcpGetResponse> => {
  return customInstance<cloudAccountsGcpGetResponse>(
    getCloudAccountsGcpGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified GCP account
 */
export type cloudAccountsGcpUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsGcpUpdateResponseComposite =
  cloudAccountsGcpUpdateResponse204;

export type cloudAccountsGcpUpdateResponse =
  cloudAccountsGcpUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsGcpUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const cloudAccountsGcpUpdate = async (
  uid: string,
  v1GcpAccountEntityBody: V1GcpAccountEntityBody,
  options?: RequestInit,
): Promise<cloudAccountsGcpUpdateResponse> => {
  return customInstance<cloudAccountsGcpUpdateResponse>(
    getCloudAccountsGcpUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpAccountEntityBody),
    },
  );
};

/**
 * @summary Retrieves a list of Maas cloud accounts
 */
export type cloudAccountsMaasListResponse200 = {
  data: MaasAccounts;
  status: 200;
};

export type cloudAccountsMaasListResponseComposite =
  cloudAccountsMaasListResponse200;

export type cloudAccountsMaasListResponse =
  cloudAccountsMaasListResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsMaasListUrl = (
  params?: CloudAccountsMaasListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/maas?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/maas`;
};

export const cloudAccountsMaasList = async (
  params?: CloudAccountsMaasListParams,
  options?: RequestInit,
): Promise<cloudAccountsMaasListResponse> => {
  return customInstance<cloudAccountsMaasListResponse>(
    getCloudAccountsMaasListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Creates an Maas cloud account
 */
export type cloudAccountsMaasCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudAccountsMaasCreateResponseComposite =
  cloudAccountsMaasCreateResponse201;

export type cloudAccountsMaasCreateResponse =
  cloudAccountsMaasCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsMaasCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas`;
};

export const cloudAccountsMaasCreate = async (
  maasAccount: MaasAccount,
  options?: RequestInit,
): Promise<cloudAccountsMaasCreateResponse> => {
  return customInstance<cloudAccountsMaasCreateResponse>(
    getCloudAccountsMaasCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(maasAccount),
    },
  );
};

/**
 * @summary Deletes the specified Maas account
 */
export type cloudAccountsMaasDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsMaasDeleteResponseComposite =
  cloudAccountsMaasDeleteResponse204;

export type cloudAccountsMaasDeleteResponse =
  cloudAccountsMaasDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsMaasDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const cloudAccountsMaasDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsMaasDeleteResponse> => {
  return customInstance<cloudAccountsMaasDeleteResponse>(
    getCloudAccountsMaasDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified Maas account
 */
export type cloudAccountsMaasGetResponse200 = {
  data: MaasAccount;
  status: 200;
};

export type cloudAccountsMaasGetResponseComposite =
  cloudAccountsMaasGetResponse200;

export type cloudAccountsMaasGetResponse =
  cloudAccountsMaasGetResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsMaasGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const cloudAccountsMaasGet = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsMaasGetResponse> => {
  return customInstance<cloudAccountsMaasGetResponse>(
    getCloudAccountsMaasGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Patches the specified CloudAccount Maas
 */
export type cloudAccountsMaasPatchResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsMaasPatchResponseComposite =
  cloudAccountsMaasPatchResponse204;

export type cloudAccountsMaasPatchResponse =
  cloudAccountsMaasPatchResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsMaasPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const cloudAccountsMaasPatch = async (
  uid: string,
  cloudAccountsPatch: CloudAccountsPatch,
  options?: RequestInit,
): Promise<cloudAccountsMaasPatchResponse> => {
  return customInstance<cloudAccountsMaasPatchResponse>(
    getCloudAccountsMaasPatchUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(cloudAccountsPatch),
    },
  );
};

/**
 * @summary Updates the specified Maas account
 */
export type cloudAccountsMaasUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsMaasUpdateResponseComposite =
  cloudAccountsMaasUpdateResponse204;

export type cloudAccountsMaasUpdateResponse =
  cloudAccountsMaasUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsMaasUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const cloudAccountsMaasUpdate = async (
  uid: string,
  maasAccount: MaasAccount,
  options?: RequestInit,
): Promise<cloudAccountsMaasUpdateResponse> => {
  return customInstance<cloudAccountsMaasUpdateResponse>(
    getCloudAccountsMaasUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(maasAccount),
    },
  );
};

/**
 * @summary Get the maas azs for a given account
 */
export type maasAccountsUidAzsResponse200 = {
  data: MaasZones;
  status: 200;
};

export type maasAccountsUidAzsResponseComposite = maasAccountsUidAzsResponse200;

export type maasAccountsUidAzsResponse = maasAccountsUidAzsResponseComposite & {
  headers: Headers;
};

export const getMaasAccountsUidAzsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/azs`;
};

export const maasAccountsUidAzs = async (
  uid: string,
  options?: RequestInit,
): Promise<maasAccountsUidAzsResponse> => {
  return customInstance<maasAccountsUidAzsResponse>(
    getMaasAccountsUidAzsUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the maas domains for a given account
 */
export type maasAccountsUidDomainsResponse200 = {
  data: MaasDomains;
  status: 200;
};

export type maasAccountsUidDomainsResponseComposite =
  maasAccountsUidDomainsResponse200;

export type maasAccountsUidDomainsResponse =
  maasAccountsUidDomainsResponseComposite & {
    headers: Headers;
  };

export const getMaasAccountsUidDomainsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/domains`;
};

export const maasAccountsUidDomains = async (
  uid: string,
  options?: RequestInit,
): Promise<maasAccountsUidDomainsResponse> => {
  return customInstance<maasAccountsUidDomainsResponse>(
    getMaasAccountsUidDomainsUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the maas pools for a given account
 */
export type maasAccountsUidPoolsResponse200 = {
  data: MaasPools;
  status: 200;
};

export type maasAccountsUidPoolsResponseComposite =
  maasAccountsUidPoolsResponse200;

export type maasAccountsUidPoolsResponse =
  maasAccountsUidPoolsResponseComposite & {
    headers: Headers;
  };

export const getMaasAccountsUidPoolsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/resourcePools`;
};

export const maasAccountsUidPools = async (
  uid: string,
  options?: RequestInit,
): Promise<maasAccountsUidPoolsResponse> => {
  return customInstance<maasAccountsUidPoolsResponse>(
    getMaasAccountsUidPoolsUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the maas subnets for a given account
 */
export type maasAccountsUidSubnetsResponse200 = {
  data: MaasSubnets;
  status: 200;
};

export type maasAccountsUidSubnetsResponseComposite =
  maasAccountsUidSubnetsResponse200;

export type maasAccountsUidSubnetsResponse =
  maasAccountsUidSubnetsResponseComposite & {
    headers: Headers;
  };

export const getMaasAccountsUidSubnetsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/subnets`;
};

export const maasAccountsUidSubnets = async (
  uid: string,
  options?: RequestInit,
): Promise<maasAccountsUidSubnetsResponse> => {
  return customInstance<maasAccountsUidSubnetsResponse>(
    getMaasAccountsUidSubnetsUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the maas tags for a given account
 */
export type maasAccountsUidTagsResponse200 = {
  data: MaasTags;
  status: 200;
};

export type maasAccountsUidTagsResponseComposite =
  maasAccountsUidTagsResponse200;

export type maasAccountsUidTagsResponse =
  maasAccountsUidTagsResponseComposite & {
    headers: Headers;
  };

export const getMaasAccountsUidTagsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/tags`;
};

export const maasAccountsUidTags = async (
  uid: string,
  options?: RequestInit,
): Promise<maasAccountsUidTagsResponse> => {
  return customInstance<maasAccountsUidTagsResponse>(
    getMaasAccountsUidTagsUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Retrieves a list of OpenStack cloud accounts
 */
export type cloudAccountsOpenStackListResponse200 = {
  data: OpenStackAccounts;
  status: 200;
};

export type cloudAccountsOpenStackListResponseComposite =
  cloudAccountsOpenStackListResponse200;

export type cloudAccountsOpenStackListResponse =
  cloudAccountsOpenStackListResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsOpenStackListUrl = (
  params?: CloudAccountsOpenStackListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack`;
};

export const cloudAccountsOpenStackList = async (
  params?: CloudAccountsOpenStackListParams,
  options?: RequestInit,
): Promise<cloudAccountsOpenStackListResponse> => {
  return customInstance<cloudAccountsOpenStackListResponse>(
    getCloudAccountsOpenStackListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Creates a OpenStack cloud account
 */
export type cloudAccountsOpenStackCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudAccountsOpenStackCreateResponseComposite =
  cloudAccountsOpenStackCreateResponse201;

export type cloudAccountsOpenStackCreateResponse =
  cloudAccountsOpenStackCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsOpenStackCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack`;
};

export const cloudAccountsOpenStackCreate = async (
  openStackAccount: OpenStackAccount,
  options?: RequestInit,
): Promise<cloudAccountsOpenStackCreateResponse> => {
  return customInstance<cloudAccountsOpenStackCreateResponse>(
    getCloudAccountsOpenStackCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(openStackAccount),
    },
  );
};

/**
 * @summary Deletes the specified OpenStack account
 */
export type cloudAccountsOpenStackDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsOpenStackDeleteResponseComposite =
  cloudAccountsOpenStackDeleteResponse204;

export type cloudAccountsOpenStackDeleteResponse =
  cloudAccountsOpenStackDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsOpenStackDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const cloudAccountsOpenStackDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsOpenStackDeleteResponse> => {
  return customInstance<cloudAccountsOpenStackDeleteResponse>(
    getCloudAccountsOpenStackDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified OpenStack account
 */
export type cloudAccountsOpenStackGetResponse200 = {
  data: OpenStackAccount;
  status: 200;
};

export type cloudAccountsOpenStackGetResponseComposite =
  cloudAccountsOpenStackGetResponse200;

export type cloudAccountsOpenStackGetResponse =
  cloudAccountsOpenStackGetResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsOpenStackGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const cloudAccountsOpenStackGet = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsOpenStackGetResponse> => {
  return customInstance<cloudAccountsOpenStackGetResponse>(
    getCloudAccountsOpenStackGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified OpenStack account
 */
export type cloudAccountsOpenStackUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsOpenStackUpdateResponseComposite =
  cloudAccountsOpenStackUpdateResponse204;

export type cloudAccountsOpenStackUpdateResponse =
  cloudAccountsOpenStackUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsOpenStackUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const cloudAccountsOpenStackUpdate = async (
  uid: string,
  openStackAccount: OpenStackAccount,
  options?: RequestInit,
): Promise<cloudAccountsOpenStackUpdateResponse> => {
  return customInstance<cloudAccountsOpenStackUpdateResponse>(
    getCloudAccountsOpenStackUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(openStackAccount),
    },
  );
};

/**
 * @summary Get the openstack azs for a given account and region
 */
export type openstackAccountsUidAzsResponse200 = {
  data: OpenStackAzs;
  status: 200;
};

export type openstackAccountsUidAzsResponseComposite =
  openstackAccountsUidAzsResponse200;

export type openstackAccountsUidAzsResponse =
  openstackAccountsUidAzsResponseComposite & {
    headers: Headers;
  };

export const getOpenstackAccountsUidAzsUrl = (
  uid: string,
  params?: OpenstackAccountsUidAzsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/azs`;
};

export const openstackAccountsUidAzs = async (
  uid: string,
  params?: OpenstackAccountsUidAzsParams,
  options?: RequestInit,
): Promise<openstackAccountsUidAzsResponse> => {
  return customInstance<openstackAccountsUidAzsResponse>(
    getOpenstackAccountsUidAzsUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the openstack keypairs for a given account and scope
 */
export type openstackAccountsUidFlavorsResponse200 = {
  data: OpenStackFlavors;
  status: 200;
};

export type openstackAccountsUidFlavorsResponseComposite =
  openstackAccountsUidFlavorsResponse200;

export type openstackAccountsUidFlavorsResponse =
  openstackAccountsUidFlavorsResponseComposite & {
    headers: Headers;
  };

export const getOpenstackAccountsUidFlavorsUrl = (
  uid: string,
  params?: OpenstackAccountsUidFlavorsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/flavors?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/flavors`;
};

export const openstackAccountsUidFlavors = async (
  uid: string,
  params?: OpenstackAccountsUidFlavorsParams,
  options?: RequestInit,
): Promise<openstackAccountsUidFlavorsResponse> => {
  return customInstance<openstackAccountsUidFlavorsResponse>(
    getOpenstackAccountsUidFlavorsUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the openstack keypairs for a given account and scope
 */
export type openstackAccountsUidKeypairsResponse200 = {
  data: OpenStackKeypairs;
  status: 200;
};

export type openstackAccountsUidKeypairsResponseComposite =
  openstackAccountsUidKeypairsResponse200;

export type openstackAccountsUidKeypairsResponse =
  openstackAccountsUidKeypairsResponseComposite & {
    headers: Headers;
  };

export const getOpenstackAccountsUidKeypairsUrl = (
  uid: string,
  params?: OpenstackAccountsUidKeypairsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/keypairs`;
};

export const openstackAccountsUidKeypairs = async (
  uid: string,
  params?: OpenstackAccountsUidKeypairsParams,
  options?: RequestInit,
): Promise<openstackAccountsUidKeypairsResponse> => {
  return customInstance<openstackAccountsUidKeypairsResponse>(
    getOpenstackAccountsUidKeypairsUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the openstack networks for a given account and scope
 */
export type openstackAccountsUidNetworksResponse200 = {
  data: OpenStackNetworks;
  status: 200;
};

export type openstackAccountsUidNetworksResponseComposite =
  openstackAccountsUidNetworksResponse200;

export type openstackAccountsUidNetworksResponse =
  openstackAccountsUidNetworksResponseComposite & {
    headers: Headers;
  };

export const getOpenstackAccountsUidNetworksUrl = (
  uid: string,
  params?: OpenstackAccountsUidNetworksParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/networks`;
};

export const openstackAccountsUidNetworks = async (
  uid: string,
  params?: OpenstackAccountsUidNetworksParams,
  options?: RequestInit,
): Promise<openstackAccountsUidNetworksResponse> => {
  return customInstance<openstackAccountsUidNetworksResponse>(
    getOpenstackAccountsUidNetworksUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the openstack projects for a given account
 */
export type openstackAccountsUidProjectsResponse200 = {
  data: OpenStackProjects;
  status: 200;
};

export type openstackAccountsUidProjectsResponseComposite =
  openstackAccountsUidProjectsResponse200;

export type openstackAccountsUidProjectsResponse =
  openstackAccountsUidProjectsResponseComposite & {
    headers: Headers;
  };

export const getOpenstackAccountsUidProjectsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/projects`;
};

export const openstackAccountsUidProjects = async (
  uid: string,
  options?: RequestInit,
): Promise<openstackAccountsUidProjectsResponse> => {
  return customInstance<openstackAccountsUidProjectsResponse>(
    getOpenstackAccountsUidProjectsUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the openstack regions for a given account
 */
export type openstackAccountsUidRegionsResponse200 = {
  data: OpenStackRegions;
  status: 200;
};

export type openstackAccountsUidRegionsResponseComposite =
  openstackAccountsUidRegionsResponse200;

export type openstackAccountsUidRegionsResponse =
  openstackAccountsUidRegionsResponseComposite & {
    headers: Headers;
  };

export const getOpenstackAccountsUidRegionsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/regions`;
};

export const openstackAccountsUidRegions = async (
  uid: string,
  options?: RequestInit,
): Promise<openstackAccountsUidRegionsResponse> => {
  return customInstance<openstackAccountsUidRegionsResponse>(
    getOpenstackAccountsUidRegionsUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Retrieves a list of cloud accounts summary
 */
export type cloudAccountsListSummaryResponse200 = {
  data: CloudAccountsSummary;
  status: 200;
};

export type cloudAccountsListSummaryResponseComposite =
  cloudAccountsListSummaryResponse200;

export type cloudAccountsListSummaryResponse =
  cloudAccountsListSummaryResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsListSummaryUrl = (
  params?: CloudAccountsListSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/summary`;
};

export const cloudAccountsListSummary = async (
  params?: CloudAccountsListSummaryParams,
  options?: RequestInit,
): Promise<cloudAccountsListSummaryResponse> => {
  return customInstance<cloudAccountsListSummaryResponse>(
    getCloudAccountsListSummaryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Retrieves a list of vSphere cloud accounts
 */
export type cloudAccountsVsphereListResponse200 = {
  data: VsphereAccounts;
  status: 200;
};

export type cloudAccountsVsphereListResponseComposite =
  cloudAccountsVsphereListResponse200;

export type cloudAccountsVsphereListResponse =
  cloudAccountsVsphereListResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsVsphereListUrl = (
  params?: CloudAccountsVsphereListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/vsphere?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/vsphere`;
};

export const cloudAccountsVsphereList = async (
  params?: CloudAccountsVsphereListParams,
  options?: RequestInit,
): Promise<cloudAccountsVsphereListResponse> => {
  return customInstance<cloudAccountsVsphereListResponse>(
    getCloudAccountsVsphereListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Creates a vSphere cloud account
 */
export type cloudAccountsVsphereCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudAccountsVsphereCreateResponseComposite =
  cloudAccountsVsphereCreateResponse201;

export type cloudAccountsVsphereCreateResponse =
  cloudAccountsVsphereCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsVsphereCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere`;
};

export const cloudAccountsVsphereCreate = async (
  v1VsphereAccountBody: V1VsphereAccountBody,
  options?: RequestInit,
): Promise<cloudAccountsVsphereCreateResponse> => {
  return customInstance<cloudAccountsVsphereCreateResponse>(
    getCloudAccountsVsphereCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereAccountBody),
    },
  );
};

/**
 * @summary Deletes the specified vSphere account
 */
export type cloudAccountsVsphereDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsVsphereDeleteResponseComposite =
  cloudAccountsVsphereDeleteResponse204;

export type cloudAccountsVsphereDeleteResponse =
  cloudAccountsVsphereDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsVsphereDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const cloudAccountsVsphereDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsVsphereDeleteResponse> => {
  return customInstance<cloudAccountsVsphereDeleteResponse>(
    getCloudAccountsVsphereDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified vSphere account
 */
export type cloudAccountsVsphereGetResponse200 = {
  data: VsphereAccount;
  status: 200;
};

export type cloudAccountsVsphereGetResponseComposite =
  cloudAccountsVsphereGetResponse200;

export type cloudAccountsVsphereGetResponse =
  cloudAccountsVsphereGetResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsVsphereGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const cloudAccountsVsphereGet = async (
  uid: string,
  options?: RequestInit,
): Promise<cloudAccountsVsphereGetResponse> => {
  return customInstance<cloudAccountsVsphereGetResponse>(
    getCloudAccountsVsphereGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified VSphere account
 */
export type cloudAccountsVsphereUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudAccountsVsphereUpdateResponseComposite =
  cloudAccountsVsphereUpdateResponse204;

export type cloudAccountsVsphereUpdateResponse =
  cloudAccountsVsphereUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudAccountsVsphereUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const cloudAccountsVsphereUpdate = async (
  uid: string,
  v1VsphereAccountBody: V1VsphereAccountBody,
  options?: RequestInit,
): Promise<cloudAccountsVsphereUpdateResponse> => {
  return customInstance<cloudAccountsVsphereUpdateResponse>(
    getCloudAccountsVsphereUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereAccountBody),
    },
  );
};

/**
 * @summary Get the vSphere computecluster resources for the given overlord account
 */
export type vsphereAccountsUidClusterResResponse200 = {
  data: VsphereComputeClusterResources;
  status: 200;
};

export type vsphereAccountsUidClusterResResponseComposite =
  vsphereAccountsUidClusterResResponse200;

export type vsphereAccountsUidClusterResResponse =
  vsphereAccountsUidClusterResResponseComposite & {
    headers: Headers;
  };

export const getVsphereAccountsUidClusterResUrl = (
  uid: string,
  params: VsphereAccountsUidClusterResParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/computecluster/resources?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/computecluster/resources`;
};

export const vsphereAccountsUidClusterRes = async (
  uid: string,
  params: VsphereAccountsUidClusterResParams,
  options?: RequestInit,
): Promise<vsphereAccountsUidClusterResResponse> => {
  return customInstance<vsphereAccountsUidClusterResResponse>(
    getVsphereAccountsUidClusterResUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the vSphere datacenters & datacluster for the given overlord account
 */
export type vsphereAccountsUidDatacentersResponse200 = {
  data: VsphereDatacenters;
  status: 200;
};

export type vsphereAccountsUidDatacentersResponseComposite =
  vsphereAccountsUidDatacentersResponse200;

export type vsphereAccountsUidDatacentersResponse =
  vsphereAccountsUidDatacentersResponseComposite & {
    headers: Headers;
  };

export const getVsphereAccountsUidDatacentersUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/datacenters`;
};

export const vsphereAccountsUidDatacenters = async (
  uid: string,
  options?: RequestInit,
): Promise<vsphereAccountsUidDatacentersResponse> => {
  return customInstance<vsphereAccountsUidDatacentersResponse>(
    getVsphereAccountsUidDatacentersUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update the geolocation annotation
 */
export type accountsGeolocationPatchResponse204 = {
  data: void;
  status: 204;
};

export type accountsGeolocationPatchResponseComposite =
  accountsGeolocationPatchResponse204;

export type accountsGeolocationPatchResponse =
  accountsGeolocationPatchResponseComposite & {
    headers: Headers;
  };

export const getAccountsGeolocationPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/${uid}/geoLocation`;
};

export const accountsGeolocationPatch = async (
  uid: string,
  geolocationLatlong: GeolocationLatlong,
  options?: RequestInit,
): Promise<accountsGeolocationPatchResponse> => {
  return customInstance<accountsGeolocationPatchResponse>(
    getAccountsGeolocationPatchUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(geolocationLatlong),
    },
  );
};
