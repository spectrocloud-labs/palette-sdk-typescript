/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AlertEntity,
  Channel,
  Macros,
  Project,
  ProjectActiveResources,
  ProjectAlertComponents,
  ProjectCleanup,
  ProjectClusterSettings,
  ProjectTeamsEntity,
  ProjectUsersEntity,
  ProjectsUidDeleteParams,
  Uid,
  V1ChannelBody,
  V1MacrosBody,
  V1NodesAutoRemediationSettingsBody,
  V1ObjectMetaBody,
  V1ProjectEntityBody,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * @summary Creates a project
 */
export type projectsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type projectsCreateResponseComposite = projectsCreateResponse201;

export type projectsCreateResponse = projectsCreateResponseComposite & {
  headers: Headers;
};

export const getProjectsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/projects`;
};

export const projectsCreate = async (
  v1ProjectEntityBody: V1ProjectEntityBody,
  options?: RequestInit,
): Promise<projectsCreateResponse> => {
  return customInstance<projectsCreateResponse>(getProjectsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectEntityBody),
  });
};

/**
 * @summary Retrieves a list of supported alerts for a project
 */
export type projectsAlertsResponse200 = {
  data: ProjectAlertComponents;
  status: 200;
};

export type projectsAlertsResponseComposite = projectsAlertsResponse200;

export type projectsAlertsResponse = projectsAlertsResponseComposite & {
  headers: Headers;
};

export const getProjectsAlertsUrl = () => {
  return `https://api.spectrocloud.com/v1/projects/alerts`;
};

export const projectsAlerts = async (
  options?: RequestInit,
): Promise<projectsAlertsResponse> => {
  return customInstance<projectsAlertsResponse>(getProjectsAlertsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Deletes the specified project
 */
export type projectsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidDeleteResponseComposite = projectsUidDeleteResponse204;

export type projectsUidDeleteResponse = projectsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getProjectsUidDeleteUrl = (
  uid: string,
  params?: ProjectsUidDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/projects/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const projectsUidDelete = async (
  uid: string,
  projectCleanup: ProjectCleanup,
  params?: ProjectsUidDeleteParams,
  options?: RequestInit,
): Promise<projectsUidDeleteResponse> => {
  return customInstance<projectsUidDeleteResponse>(
    getProjectsUidDeleteUrl(uid, params),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(projectCleanup),
    },
  );
};

/**
 * @summary Returns the specified project
 */
export type projectsUidGetResponse200 = {
  data: Project;
  status: 200;
};

export type projectsUidGetResponseComposite = projectsUidGetResponse200;

export type projectsUidGetResponse = projectsUidGetResponseComposite & {
  headers: Headers;
};

export const getProjectsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const projectsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<projectsUidGetResponse> => {
  return customInstance<projectsUidGetResponse>(getProjectsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Updates the specified project
 */
export type projectsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidUpdateResponseComposite = projectsUidUpdateResponse204;

export type projectsUidUpdateResponse = projectsUidUpdateResponseComposite & {
  headers: Headers;
};

export const getProjectsUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const projectsUidUpdate = async (
  uid: string,
  v1ProjectEntityBody: V1ProjectEntityBody,
  options?: RequestInit,
): Promise<projectsUidUpdateResponse> => {
  return customInstance<projectsUidUpdateResponse>(
    getProjectsUidUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ProjectEntityBody),
    },
  );
};

/**
 * @summary Deletes the specified alert to the specified project
 */
export type projectsUidAlertDeleteResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidAlertDeleteResponseComposite =
  projectsUidAlertDeleteResponse204;

export type projectsUidAlertDeleteResponse =
  projectsUidAlertDeleteResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidAlertDeleteUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const projectsUidAlertDelete = async (
  uid: string,
  component: string,
  options?: RequestInit,
): Promise<projectsUidAlertDeleteResponse> => {
  return customInstance<projectsUidAlertDeleteResponse>(
    getProjectsUidAlertDeleteUrl(uid, component),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Create the specified alert to the specified project
 */
export type projectsUidAlertCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type projectsUidAlertCreateResponseComposite =
  projectsUidAlertCreateResponse201;

export type projectsUidAlertCreateResponse =
  projectsUidAlertCreateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidAlertCreateUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const projectsUidAlertCreate = async (
  uid: string,
  component: string,
  v1ChannelBody: V1ChannelBody,
  options?: RequestInit,
): Promise<projectsUidAlertCreateResponse> => {
  return customInstance<projectsUidAlertCreateResponse>(
    getProjectsUidAlertCreateUrl(uid, component),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ChannelBody),
    },
  );
};

/**
 * @summary Upsert the specified alert to the specified project
 */
export type projectsUidAlertUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidAlertUpdateResponseComposite =
  projectsUidAlertUpdateResponse204;

export type projectsUidAlertUpdateResponse =
  projectsUidAlertUpdateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidAlertUpdateUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const projectsUidAlertUpdate = async (
  uid: string,
  component: string,
  alertEntity: AlertEntity,
  options?: RequestInit,
): Promise<projectsUidAlertUpdateResponse> => {
  return customInstance<projectsUidAlertUpdateResponse>(
    getProjectsUidAlertUpdateUrl(uid, component),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(alertEntity),
    },
  );
};

/**
 * @summary Deletes the specified alert of the specified project
 */
export type projectsUidAlertsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidAlertsUidDeleteResponseComposite =
  projectsUidAlertsUidDeleteResponse204;

export type projectsUidAlertsUidDeleteResponse =
  projectsUidAlertsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidAlertsUidDeleteUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const projectsUidAlertsUidDelete = async (
  uid: string,
  component: string,
  alertUid: string,
  options?: RequestInit,
): Promise<projectsUidAlertsUidDeleteResponse> => {
  return customInstance<projectsUidAlertsUidDeleteResponse>(
    getProjectsUidAlertsUidDeleteUrl(uid, component, alertUid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Get the specified alert of the specified project
 */
export type projectsUidAlertsUidGetResponse200 = {
  data: Channel;
  status: 200;
};

export type projectsUidAlertsUidGetResponseComposite =
  projectsUidAlertsUidGetResponse200;

export type projectsUidAlertsUidGetResponse =
  projectsUidAlertsUidGetResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidAlertsUidGetUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const projectsUidAlertsUidGet = async (
  uid: string,
  component: string,
  alertUid: string,
  options?: RequestInit,
): Promise<projectsUidAlertsUidGetResponse> => {
  return customInstance<projectsUidAlertsUidGetResponse>(
    getProjectsUidAlertsUidGetUrl(uid, component, alertUid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update the specified alert of the specified project
 */
export type projectsUidAlertsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidAlertsUidUpdateResponseComposite =
  projectsUidAlertsUidUpdateResponse204;

export type projectsUidAlertsUidUpdateResponse =
  projectsUidAlertsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidAlertsUidUpdateUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const projectsUidAlertsUidUpdate = async (
  uid: string,
  component: string,
  alertUid: string,
  v1ChannelBody: V1ChannelBody,
  options?: RequestInit,
): Promise<projectsUidAlertsUidUpdateResponse> => {
  return customInstance<projectsUidAlertsUidUpdateResponse>(
    getProjectsUidAlertsUidUpdateUrl(uid, component, alertUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ChannelBody),
    },
  );
};

/**
 * @summary Delete the macros for the specified project by macro name
 */
export type projectsUidMacrosDeleteByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidMacrosDeleteByMacroNameResponseComposite =
  projectsUidMacrosDeleteByMacroNameResponse204;

export type projectsUidMacrosDeleteByMacroNameResponse =
  projectsUidMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidMacrosDeleteByMacroNameUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const projectsUidMacrosDeleteByMacroName = async (
  uid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<projectsUidMacrosDeleteByMacroNameResponse> => {
  return customInstance<projectsUidMacrosDeleteByMacroNameResponse>(
    getProjectsUidMacrosDeleteByMacroNameUrl(uid),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MacrosBody),
    },
  );
};

/**
 * @summary List the macros of the specified project
 */
export type projectsUidMacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type projectsUidMacrosListResponseComposite =
  projectsUidMacrosListResponse200;

export type projectsUidMacrosListResponse =
  projectsUidMacrosListResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidMacrosListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const projectsUidMacrosList = async (
  uid: string,
  options?: RequestInit,
): Promise<projectsUidMacrosListResponse> => {
  return customInstance<projectsUidMacrosListResponse>(
    getProjectsUidMacrosListUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update the macros for the specified project by macro name
 */
export type projectsUidMacrosUpdateByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidMacrosUpdateByMacroNameResponseComposite =
  projectsUidMacrosUpdateByMacroNameResponse204;

export type projectsUidMacrosUpdateByMacroNameResponse =
  projectsUidMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidMacrosUpdateByMacroNameUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const projectsUidMacrosUpdateByMacroName = async (
  uid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<projectsUidMacrosUpdateByMacroNameResponse> => {
  return customInstance<projectsUidMacrosUpdateByMacroNameResponse>(
    getProjectsUidMacrosUpdateByMacroNameUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MacrosBody),
    },
  );
};

/**
 * @summary Create or add new macros for the specified project
 */
export type projectsUidMacrosCreateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidMacrosCreateResponseComposite =
  projectsUidMacrosCreateResponse204;

export type projectsUidMacrosCreateResponse =
  projectsUidMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidMacrosCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const projectsUidMacrosCreate = async (
  uid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<projectsUidMacrosCreateResponse> => {
  return customInstance<projectsUidMacrosCreateResponse>(
    getProjectsUidMacrosCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MacrosBody),
    },
  );
};

/**
 * @summary Update the macros of the specified project
 */
export type projectsUidMacrosUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidMacrosUpdateResponseComposite =
  projectsUidMacrosUpdateResponse204;

export type projectsUidMacrosUpdateResponse =
  projectsUidMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidMacrosUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const projectsUidMacrosUpdate = async (
  uid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<projectsUidMacrosUpdateResponse> => {
  return customInstance<projectsUidMacrosUpdateResponse>(
    getProjectsUidMacrosUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MacrosBody),
    },
  );
};

/**
 * @summary Update the metadata of the specified project
 */
export type projectsUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidMetaUpdateResponseComposite =
  projectsUidMetaUpdateResponse204;

export type projectsUidMetaUpdateResponse =
  projectsUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/meta`;
};

export const projectsUidMetaUpdate = async (
  uid: string,
  v1ObjectMetaBody: V1ObjectMetaBody,
  options?: RequestInit,
): Promise<projectsUidMetaUpdateResponse> => {
  return customInstance<projectsUidMetaUpdateResponse>(
    getProjectsUidMetaUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ObjectMetaBody),
    },
  );
};

/**
 * @summary Get project cluster settings
 */
export type projectClusterSettingsGetResponse200 = {
  data: ProjectClusterSettings;
  status: 200;
};

export type projectClusterSettingsGetResponseComposite =
  projectClusterSettingsGetResponse200;

export type projectClusterSettingsGetResponse =
  projectClusterSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getProjectClusterSettingsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/preferences/clusterSettings`;
};

export const projectClusterSettingsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<projectClusterSettingsGetResponse> => {
  return customInstance<projectClusterSettingsGetResponse>(
    getProjectClusterSettingsGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update project clusters nodes auto remediation setting
 */
export type projectClustersNodesAutoRemediationSettingUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectClustersNodesAutoRemediationSettingUpdateResponseComposite =
  projectClustersNodesAutoRemediationSettingUpdateResponse204;

export type projectClustersNodesAutoRemediationSettingUpdateResponse =
  projectClustersNodesAutoRemediationSettingUpdateResponseComposite & {
    headers: Headers;
  };

export const getProjectClustersNodesAutoRemediationSettingUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/preferences/clusterSettings/nodesAutoRemediationSetting`;
};

export const projectClustersNodesAutoRemediationSettingUpdate = async (
  uid: string,
  v1NodesAutoRemediationSettingsBody: V1NodesAutoRemediationSettingsBody,
  options?: RequestInit,
): Promise<projectClustersNodesAutoRemediationSettingUpdateResponse> => {
  return customInstance<projectClustersNodesAutoRemediationSettingUpdateResponse>(
    getProjectClustersNodesAutoRemediationSettingUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1NodesAutoRemediationSettingsBody),
    },
  );
};

/**
 * @summary Update the teams association to the specified project
 */
export type projectsUidTeamsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidTeamsUpdateResponseComposite =
  projectsUidTeamsUpdateResponse204;

export type projectsUidTeamsUpdateResponse =
  projectsUidTeamsUpdateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidTeamsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/teams`;
};

export const projectsUidTeamsUpdate = async (
  uid: string,
  projectTeamsEntity: ProjectTeamsEntity,
  options?: RequestInit,
): Promise<projectsUidTeamsUpdateResponse> => {
  return customInstance<projectsUidTeamsUpdateResponse>(
    getProjectsUidTeamsUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(projectTeamsEntity),
    },
  );
};

/**
 * @summary Update the users association to the specified project
 */
export type projectsUidUsersUpdateResponse204 = {
  data: void;
  status: 204;
};

export type projectsUidUsersUpdateResponseComposite =
  projectsUidUsersUpdateResponse204;

export type projectsUidUsersUpdateResponse =
  projectsUidUsersUpdateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidUsersUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/users`;
};

export const projectsUidUsersUpdate = async (
  uid: string,
  projectUsersEntity: ProjectUsersEntity,
  options?: RequestInit,
): Promise<projectsUidUsersUpdateResponse> => {
  return customInstance<projectsUidUsersUpdateResponse>(
    getProjectsUidUsersUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(projectUsersEntity),
    },
  );
};

/**
 * @summary Validate and returns active resource of project before delete
 */
export type projectsUidValidateResponse200 = {
  data: ProjectActiveResources;
  status: 200;
};

export type projectsUidValidateResponseComposite =
  projectsUidValidateResponse200;

export type projectsUidValidateResponse =
  projectsUidValidateResponseComposite & {
    headers: Headers;
  };

export const getProjectsUidValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/validate`;
};

export const projectsUidValidate = async (
  uid: string,
  options?: RequestInit,
): Promise<projectsUidValidateResponse> => {
  return customInstance<projectsUidValidateResponse>(
    getProjectsUidValidateUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};
