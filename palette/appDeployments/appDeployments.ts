/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AppDeployment,
  AppDeploymentClusterGroupEntity,
  AppDeploymentProfileEntity,
  AppDeploymentProfileSpec,
  AppDeploymentProfileVersions,
  AppDeploymentVirtualClusterEntity,
  AppDeploymentsUidProfileApplyParams,
  AppTier,
  AppTierManifests,
  Manifest,
  Uid,
  V1AppTierUpdateEntityBody,
  V1ManifestRefUpdateEntityBody,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * @summary Creates a application deployment in the virtual cluster
 */
export type appDeploymentsVirtualClusterCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type appDeploymentsVirtualClusterCreateResponseComposite =
  appDeploymentsVirtualClusterCreateResponse201;

export type appDeploymentsVirtualClusterCreateResponse =
  appDeploymentsVirtualClusterCreateResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsVirtualClusterCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/appDeployments`;
};

export const appDeploymentsVirtualClusterCreate = async (
  appDeploymentVirtualClusterEntity: AppDeploymentVirtualClusterEntity,
  options?: RequestInit,
): Promise<appDeploymentsVirtualClusterCreateResponse> => {
  return customInstance<appDeploymentsVirtualClusterCreateResponse>(
    getAppDeploymentsVirtualClusterCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(appDeploymentVirtualClusterEntity),
    },
  );
};

/**
 * @summary Creates a application deployment in one of virtual clusters in the cluster group
 */
export type appDeploymentsClusterGroupCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type appDeploymentsClusterGroupCreateResponseComposite =
  appDeploymentsClusterGroupCreateResponse201;

export type appDeploymentsClusterGroupCreateResponse =
  appDeploymentsClusterGroupCreateResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsClusterGroupCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/appDeployments/clusterGroup`;
};

export const appDeploymentsClusterGroupCreate = async (
  appDeploymentClusterGroupEntity: AppDeploymentClusterGroupEntity,
  options?: RequestInit,
): Promise<appDeploymentsClusterGroupCreateResponse> => {
  return customInstance<appDeploymentsClusterGroupCreateResponse>(
    getAppDeploymentsClusterGroupCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(appDeploymentClusterGroupEntity),
    },
  );
};

/**
 * @summary Deletes the specified application deployment
 */
export type appDeploymentsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type appDeploymentsUidDeleteResponseComposite =
  appDeploymentsUidDeleteResponse204;

export type appDeploymentsUidDeleteResponse =
  appDeploymentsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}`;
};

export const appDeploymentsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<appDeploymentsUidDeleteResponse> => {
  return customInstance<appDeploymentsUidDeleteResponse>(
    getAppDeploymentsUidDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified application deployment
 */
export type appDeploymentsUidGetResponse200 = {
  data: AppDeployment;
  status: 200;
};

export type appDeploymentsUidGetResponseComposite =
  appDeploymentsUidGetResponse200;

export type appDeploymentsUidGetResponse =
  appDeploymentsUidGetResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}`;
};

export const appDeploymentsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<appDeploymentsUidGetResponse> => {
  return customInstance<appDeploymentsUidGetResponse>(
    getAppDeploymentsUidGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns profile of the specified application deployment
 */
export type appDeploymentsUidProfileGetResponse200 = {
  data: AppDeploymentProfileSpec;
  status: 200;
};

export type appDeploymentsUidProfileGetResponseComposite =
  appDeploymentsUidProfileGetResponse200;

export type appDeploymentsUidProfileGetResponse =
  appDeploymentsUidProfileGetResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsUidProfileGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile`;
};

export const appDeploymentsUidProfileGet = async (
  uid: string,
  options?: RequestInit,
): Promise<appDeploymentsUidProfileGetResponse> => {
  return customInstance<appDeploymentsUidProfileGetResponse>(
    getAppDeploymentsUidProfileGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified application deployment profile
 */
export type appDeploymentsUidProfileUpdateResponse204 = {
  data: void;
  status: 204;
};

export type appDeploymentsUidProfileUpdateResponseComposite =
  appDeploymentsUidProfileUpdateResponse204;

export type appDeploymentsUidProfileUpdateResponse =
  appDeploymentsUidProfileUpdateResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsUidProfileUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile`;
};

export const appDeploymentsUidProfileUpdate = async (
  uid: string,
  appDeploymentProfileEntity: AppDeploymentProfileEntity,
  options?: RequestInit,
): Promise<appDeploymentsUidProfileUpdateResponse> => {
  return customInstance<appDeploymentsUidProfileUpdateResponse>(
    getAppDeploymentsUidProfileUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(appDeploymentProfileEntity),
    },
  );
};

/**
 * @summary Apply the application deployment profile updates
 */
export type appDeploymentsUidProfileApplyResponse204 = {
  data: void;
  status: 204;
};

export type appDeploymentsUidProfileApplyResponseComposite =
  appDeploymentsUidProfileApplyResponse204;

export type appDeploymentsUidProfileApplyResponse =
  appDeploymentsUidProfileApplyResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsUidProfileApplyUrl = (
  uid: string,
  params?: AppDeploymentsUidProfileApplyParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/apply?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/apply`;
};

export const appDeploymentsUidProfileApply = async (
  uid: string,
  params?: AppDeploymentsUidProfileApplyParams,
  options?: RequestInit,
): Promise<appDeploymentsUidProfileApplyResponse> => {
  return customInstance<appDeploymentsUidProfileApplyResponse>(
    getAppDeploymentsUidProfileApplyUrl(uid, params),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * @summary Returns the specified application deployment profile tier information
 */
export type appDeploymentsProfileTiersUidGetResponse200 = {
  data: AppTier;
  status: 200;
};

export type appDeploymentsProfileTiersUidGetResponseComposite =
  appDeploymentsProfileTiersUidGetResponse200;

export type appDeploymentsProfileTiersUidGetResponse =
  appDeploymentsProfileTiersUidGetResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsProfileTiersUidGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}`;
};

export const appDeploymentsProfileTiersUidGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<appDeploymentsProfileTiersUidGetResponse> => {
  return customInstance<appDeploymentsProfileTiersUidGetResponse>(
    getAppDeploymentsProfileTiersUidGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified application deployment profile tier information
 */
export type appDeploymentsProfileTiersUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type appDeploymentsProfileTiersUidUpdateResponseComposite =
  appDeploymentsProfileTiersUidUpdateResponse204;

export type appDeploymentsProfileTiersUidUpdateResponse =
  appDeploymentsProfileTiersUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsProfileTiersUidUpdateUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}`;
};

export const appDeploymentsProfileTiersUidUpdate = async (
  uid: string,
  tierUid: string,
  v1AppTierUpdateEntityBody: V1AppTierUpdateEntityBody,
  options?: RequestInit,
): Promise<appDeploymentsProfileTiersUidUpdateResponse> => {
  return customInstance<appDeploymentsProfileTiersUidUpdateResponse>(
    getAppDeploymentsProfileTiersUidUpdateUrl(uid, tierUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AppTierUpdateEntityBody),
    },
  );
};

/**
 * @summary Retrieves a list of manifests of the specified application deployment profile tier
 */
export type appDeploymentsProfileTiersUidManifestsGetResponse200 = {
  data: AppTierManifests;
  status: 200;
};

export type appDeploymentsProfileTiersUidManifestsGetResponseComposite =
  appDeploymentsProfileTiersUidManifestsGetResponse200;

export type appDeploymentsProfileTiersUidManifestsGetResponse =
  appDeploymentsProfileTiersUidManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsProfileTiersUidManifestsGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}/manifests`;
};

export const appDeploymentsProfileTiersUidManifestsGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<appDeploymentsProfileTiersUidManifestsGetResponse> => {
  return customInstance<appDeploymentsProfileTiersUidManifestsGetResponse>(
    getAppDeploymentsProfileTiersUidManifestsGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the specified application deployment tier manifest information
 */
export type appDeploymentsProfileTiersManifestsUidGetResponse200 = {
  data: Manifest;
  status: 200;
};

export type appDeploymentsProfileTiersManifestsUidGetResponseComposite =
  appDeploymentsProfileTiersManifestsUidGetResponse200;

export type appDeploymentsProfileTiersManifestsUidGetResponse =
  appDeploymentsProfileTiersManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsProfileTiersManifestsUidGetUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const appDeploymentsProfileTiersManifestsUidGet = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<appDeploymentsProfileTiersManifestsUidGetResponse> => {
  return customInstance<appDeploymentsProfileTiersManifestsUidGetResponse>(
    getAppDeploymentsProfileTiersManifestsUidGetUrl(uid, tierUid, manifestUid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified application deployment tier manifest information
 */
export type appDeploymentsProfileTiersManifestsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type appDeploymentsProfileTiersManifestsUidUpdateResponseComposite =
  appDeploymentsProfileTiersManifestsUidUpdateResponse204;

export type appDeploymentsProfileTiersManifestsUidUpdateResponse =
  appDeploymentsProfileTiersManifestsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsProfileTiersManifestsUidUpdateUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const appDeploymentsProfileTiersManifestsUidUpdate = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  v1ManifestRefUpdateEntityBody: V1ManifestRefUpdateEntityBody,
  options?: RequestInit,
): Promise<appDeploymentsProfileTiersManifestsUidUpdateResponse> => {
  return customInstance<appDeploymentsProfileTiersManifestsUidUpdateResponse>(
    getAppDeploymentsProfileTiersManifestsUidUpdateUrl(
      uid,
      tierUid,
      manifestUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestRefUpdateEntityBody),
    },
  );
};

/**
 * @summary Retrieves a list of profile versions of the specified application deployment
 */
export type appDeploymentsUidProfileVersionsGetResponse200 = {
  data: AppDeploymentProfileVersions;
  status: 200;
};

export type appDeploymentsUidProfileVersionsGetResponseComposite =
  appDeploymentsUidProfileVersionsGetResponse200;

export type appDeploymentsUidProfileVersionsGetResponse =
  appDeploymentsUidProfileVersionsGetResponseComposite & {
    headers: Headers;
  };

export const getAppDeploymentsUidProfileVersionsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/versions`;
};

export const appDeploymentsUidProfileVersionsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<appDeploymentsUidProfileVersionsGetResponse> => {
  return customInstance<appDeploymentsUidProfileVersionsGetResponse>(
    getAppDeploymentsUidProfileVersionsGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};
