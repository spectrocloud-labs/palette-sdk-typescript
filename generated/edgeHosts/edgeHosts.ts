/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  EdgeHostClusterEntity,
  EdgeHostConfig,
  EdgeHostDevice,
  EdgeHostDeviceEntity,
  EdgeHostDeviceHostCheckSum,
  EdgeHostDeviceHostPairingKey,
  EdgeHostDeviceMetaUpdateEntity,
  EdgeHostDevicesUidGetParams,
  EdgeHostDevicesUidPackManifestsUidGetParams,
  EdgeHostDevicesUidProfilesGetParams,
  EdgeHostHealth,
  EdgeHostVsphereCloudProperties,
  EdgeHostsMeta,
  EdgeHostsMetadataQuickFilterGetParams,
  EdgeHostsTags,
  EdgeToken,
  EdgeTokenActiveState,
  EdgeTokenEntity,
  EdgeTokenUpdate,
  EdgeTokens,
  Manifest,
  SpectroClusterProfileList,
  SpectroTunnelConfig,
  SpectroTunnelStatus,
  Uid,
  V1EdgeHostDeviceBody,
  V1SpectroClusterPacksStatusEntityBody,
  V1SpectroClusterProfilesBody,
} from ".././schemas";

/**
 * @summary Create the edge host device
 */
export type edgeHostDevicesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type edgeHostDevicesCreateResponseComposite =
  edgeHostDevicesCreateResponse201;

export type edgeHostDevicesCreateResponse =
  edgeHostDevicesCreateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts`;
};

export const edgeHostDevicesCreate = async (
  edgeHostDeviceEntity: EdgeHostDeviceEntity,
  options?: RequestInit,
): Promise<edgeHostDevicesCreateResponse> => {
  const res = await fetch(getEdgeHostDevicesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeHostDeviceEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesCreateResponse;
};

/**
 * @summary Retrieves a list of edge hosts metadata matching the filter condition
 */
export type edgeHostsMetadataQuickFilterGetResponse200 = {
  data: EdgeHostsMeta;
  status: 200;
};

export type edgeHostsMetadataQuickFilterGetResponseComposite =
  edgeHostsMetadataQuickFilterGetResponse200;

export type edgeHostsMetadataQuickFilterGetResponse =
  edgeHostsMetadataQuickFilterGetResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostsMetadataQuickFilterGetUrl = (
  params?: EdgeHostsMetadataQuickFilterGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/metadata`;
};

export const edgeHostsMetadataQuickFilterGet = async (
  params?: EdgeHostsMetadataQuickFilterGetParams,
  options?: RequestInit,
): Promise<edgeHostsMetadataQuickFilterGetResponse> => {
  const res = await fetch(getEdgeHostsMetadataQuickFilterGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostsMetadataQuickFilterGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostsMetadataQuickFilterGetResponse;
};

/**
 * @summary Registers the edge host device
 */
export type edgeHostDevicesRegisterResponse200 = {
  data: EdgeHostDevice;
  status: 200;
};

export type edgeHostDevicesRegisterResponseComposite =
  edgeHostDevicesRegisterResponse200;

export type edgeHostDevicesRegisterResponse =
  edgeHostDevicesRegisterResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesRegisterUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/register`;
};

export const edgeHostDevicesRegister = async (
  v1EdgeHostDeviceBody: V1EdgeHostDeviceBody,
  options?: RequestInit,
): Promise<edgeHostDevicesRegisterResponse> => {
  const res = await fetch(getEdgeHostDevicesRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDeviceBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesRegisterResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesRegisterResponse;
};

/**
 * @summary Retrieves a list of edge hosts tags
 */
export type edgeHostsTagsGetResponse200 = {
  data: EdgeHostsTags;
  status: 200;
};

export type edgeHostsTagsGetResponseComposite = edgeHostsTagsGetResponse200;

export type edgeHostsTagsGetResponse = edgeHostsTagsGetResponseComposite & {
  headers: Headers;
};

export const getEdgeHostsTagsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tags`;
};

export const edgeHostsTagsGet = async (
  options?: RequestInit,
): Promise<edgeHostsTagsGetResponse> => {
  const res = await fetch(getEdgeHostsTagsGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostsTagsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostsTagsGetResponse;
};

/**
 * @summary Retrieves a list of edge tokens
 */
export type edgeTokensListResponse200 = {
  data: EdgeTokens;
  status: 200;
};

export type edgeTokensListResponseComposite = edgeTokensListResponse200;

export type edgeTokensListResponse = edgeTokensListResponseComposite & {
  headers: Headers;
};

export const getEdgeTokensListUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens`;
};

export const edgeTokensList = async (
  options?: RequestInit,
): Promise<edgeTokensListResponse> => {
  const res = await fetch(getEdgeTokensListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeTokensListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeTokensListResponse;
};

/**
 * @summary Create the edge token
 */
export type edgeTokensCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type edgeTokensCreateResponseComposite = edgeTokensCreateResponse201;

export type edgeTokensCreateResponse = edgeTokensCreateResponseComposite & {
  headers: Headers;
};

export const getEdgeTokensCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens`;
};

export const edgeTokensCreate = async (
  edgeTokenEntity: EdgeTokenEntity,
  options?: RequestInit,
): Promise<edgeTokensCreateResponse> => {
  const res = await fetch(getEdgeTokensCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeTokenEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeTokensCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeTokensCreateResponse;
};

/**
 * @summary Deletes the specified edge token
 */
export type edgeTokensUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type edgeTokensUidDeleteResponseComposite =
  edgeTokensUidDeleteResponse204;

export type edgeTokensUidDeleteResponse =
  edgeTokensUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getEdgeTokensUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const edgeTokensUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<edgeTokensUidDeleteResponse> => {
  const res = await fetch(getEdgeTokensUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeTokensUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeTokensUidDeleteResponse;
};

/**
 * @summary Returns the specified edge token
 */
export type edgeTokensUidGetResponse200 = {
  data: EdgeToken;
  status: 200;
};

export type edgeTokensUidGetResponseComposite = edgeTokensUidGetResponse200;

export type edgeTokensUidGetResponse = edgeTokensUidGetResponseComposite & {
  headers: Headers;
};

export const getEdgeTokensUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const edgeTokensUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<edgeTokensUidGetResponse> => {
  const res = await fetch(getEdgeTokensUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeTokensUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeTokensUidGetResponse;
};

/**
 * @summary Updates the specified edge token
 */
export type edgeTokensUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeTokensUidUpdateResponseComposite =
  edgeTokensUidUpdateResponse204;

export type edgeTokensUidUpdateResponse =
  edgeTokensUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeTokensUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const edgeTokensUidUpdate = async (
  uid: string,
  edgeTokenUpdate: EdgeTokenUpdate,
  options?: RequestInit,
): Promise<edgeTokensUidUpdateResponse> => {
  const res = await fetch(getEdgeTokensUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeTokenUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeTokensUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeTokensUidUpdateResponse;
};

/**
 * @summary Revoke or re-activate the edge token access
 */
export type edgeTokensUidStateResponse204 = {
  data: void;
  status: 204;
};

export type edgeTokensUidStateResponseComposite = edgeTokensUidStateResponse204;

export type edgeTokensUidStateResponse = edgeTokensUidStateResponseComposite & {
  headers: Headers;
};

export const getEdgeTokensUidStateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}/state`;
};

export const edgeTokensUidState = async (
  uid: string,
  edgeTokenActiveState: EdgeTokenActiveState,
  options?: RequestInit,
): Promise<edgeTokensUidStateResponse> => {
  const res = await fetch(getEdgeTokensUidStateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeTokenActiveState),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeTokensUidStateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeTokensUidStateResponse;
};

/**
 * @summary Deletes the specified edge host device
 */
export type edgeHostDevicesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidDeleteResponseComposite =
  edgeHostDevicesUidDeleteResponse204;

export type edgeHostDevicesUidDeleteResponse =
  edgeHostDevicesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const edgeHostDevicesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<edgeHostDevicesUidDeleteResponse> => {
  const res = await fetch(getEdgeHostDevicesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidDeleteResponse;
};

/**
 * @summary Returns the specified edge host device
 */
export type edgeHostDevicesUidGetResponse200 = {
  data: EdgeHostDevice;
  status: 200;
};

export type edgeHostDevicesUidGetResponseComposite =
  edgeHostDevicesUidGetResponse200;

export type edgeHostDevicesUidGetResponse =
  edgeHostDevicesUidGetResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidGetUrl = (
  uid: string,
  params?: EdgeHostDevicesUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const edgeHostDevicesUidGet = async (
  uid: string,
  params?: EdgeHostDevicesUidGetParams,
  options?: RequestInit,
): Promise<edgeHostDevicesUidGetResponse> => {
  const res = await fetch(getEdgeHostDevicesUidGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidGetResponse;
};

/**
 * @summary Updates the specified edge host device
 */
export type edgeHostDevicesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidUpdateResponseComposite =
  edgeHostDevicesUidUpdateResponse204;

export type edgeHostDevicesUidUpdateResponse =
  edgeHostDevicesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const edgeHostDevicesUidUpdate = async (
  uid: string,
  v1EdgeHostDeviceBody: V1EdgeHostDeviceBody,
  options?: RequestInit,
): Promise<edgeHostDevicesUidUpdateResponse> => {
  const res = await fetch(getEdgeHostDevicesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDeviceBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidUpdateResponse;
};

/**
 * @summary Deassociate the clusters to the edge host
 */
export type edgeHostDevicesUidClusterDeassociateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidClusterDeassociateResponseComposite =
  edgeHostDevicesUidClusterDeassociateResponse204;

export type edgeHostDevicesUidClusterDeassociateResponse =
  edgeHostDevicesUidClusterDeassociateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidClusterDeassociateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/cluster/associate`;
};

export const edgeHostDevicesUidClusterDeassociate = async (
  uid: string,
  options?: RequestInit,
): Promise<edgeHostDevicesUidClusterDeassociateResponse> => {
  const res = await fetch(getEdgeHostDevicesUidClusterDeassociateUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidClusterDeassociateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidClusterDeassociateResponse;
};

/**
 * @summary Associate the clusters to the edge host
 */
export type edgeHostDevicesUidClusterAssociateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidClusterAssociateResponseComposite =
  edgeHostDevicesUidClusterAssociateResponse204;

export type edgeHostDevicesUidClusterAssociateResponse =
  edgeHostDevicesUidClusterAssociateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidClusterAssociateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/cluster/associate`;
};

export const edgeHostDevicesUidClusterAssociate = async (
  uid: string,
  edgeHostClusterEntity: EdgeHostClusterEntity,
  options?: RequestInit,
): Promise<edgeHostDevicesUidClusterAssociateResponse> => {
  const res = await fetch(getEdgeHostDevicesUidClusterAssociateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeHostClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidClusterAssociateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidClusterAssociateResponse;
};

/**
 * @summary Get the specified edge host device configuration
 */
export type edgeHostDevicesUidConfigGetResponse200 = {
  data: EdgeHostConfig;
  status: 200;
};

export type edgeHostDevicesUidConfigGetResponseComposite =
  edgeHostDevicesUidConfigGetResponse200;

export type edgeHostDevicesUidConfigGetResponse =
  edgeHostDevicesUidConfigGetResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/config`;
};

export const edgeHostDevicesUidConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<edgeHostDevicesUidConfigGetResponse> => {
  const res = await fetch(getEdgeHostDevicesUidConfigGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidConfigGetResponse;
};

/**
 * @summary Updates the edge host health
 */
export type edgeHostDevicesHealthUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesHealthUpdateResponseComposite =
  edgeHostDevicesHealthUpdateResponse204;

export type edgeHostDevicesHealthUpdateResponse =
  edgeHostDevicesHealthUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesHealthUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/health`;
};

export const edgeHostDevicesHealthUpdate = async (
  uid: string,
  edgeHostHealth: EdgeHostHealth,
  options?: RequestInit,
): Promise<edgeHostDevicesHealthUpdateResponse> => {
  const res = await fetch(getEdgeHostDevicesHealthUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeHostHealth),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesHealthUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesHealthUpdateResponse;
};

/**
 * @summary Update the specified edge host device host check sum
 */
export type edgeHostDeviceHostCheckSumUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDeviceHostCheckSumUpdateResponseComposite =
  edgeHostDeviceHostCheckSumUpdateResponse204;

export type edgeHostDeviceHostCheckSumUpdateResponse =
  edgeHostDeviceHostCheckSumUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDeviceHostCheckSumUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/hostCheckSum`;
};

export const edgeHostDeviceHostCheckSumUpdate = async (
  uid: string,
  edgeHostDeviceHostCheckSum: EdgeHostDeviceHostCheckSum,
  options?: RequestInit,
): Promise<edgeHostDeviceHostCheckSumUpdateResponse> => {
  const res = await fetch(getEdgeHostDeviceHostCheckSumUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeHostDeviceHostCheckSum),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDeviceHostCheckSumUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDeviceHostCheckSumUpdateResponse;
};

/**
 * @summary Update the specified edge host device host pairing key
 */
export type edgeHostDeviceHostPairingKeyUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDeviceHostPairingKeyUpdateResponseComposite =
  edgeHostDeviceHostPairingKeyUpdateResponse204;

export type edgeHostDeviceHostPairingKeyUpdateResponse =
  edgeHostDeviceHostPairingKeyUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDeviceHostPairingKeyUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/hostPairingKey`;
};

export const edgeHostDeviceHostPairingKeyUpdate = async (
  uid: string,
  edgeHostDeviceHostPairingKey: EdgeHostDeviceHostPairingKey,
  options?: RequestInit,
): Promise<edgeHostDeviceHostPairingKeyUpdateResponse> => {
  const res = await fetch(getEdgeHostDeviceHostPairingKeyUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeHostDeviceHostPairingKey),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDeviceHostPairingKeyUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDeviceHostPairingKeyUpdateResponse;
};

/**
 * @summary Updates the specified edge host device meta
 */
export type edgeHostDevicesUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidMetaUpdateResponseComposite =
  edgeHostDevicesUidMetaUpdateResponse204;

export type edgeHostDevicesUidMetaUpdateResponse =
  edgeHostDevicesUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/meta`;
};

export const edgeHostDevicesUidMetaUpdate = async (
  uid: string,
  edgeHostDeviceMetaUpdateEntity: EdgeHostDeviceMetaUpdateEntity,
  options?: RequestInit,
): Promise<edgeHostDevicesUidMetaUpdateResponse> => {
  const res = await fetch(getEdgeHostDevicesUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeHostDeviceMetaUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidMetaUpdateResponse;
};

/**
 * @summary Returns the specified edge host's manifest
 */
export type edgeHostDevicesUidPackManifestsUidGetResponse200 = {
  data: Manifest;
  status: 200;
};

export type edgeHostDevicesUidPackManifestsUidGetResponseComposite =
  edgeHostDevicesUidPackManifestsUidGetResponse200;

export type edgeHostDevicesUidPackManifestsUidGetResponse =
  edgeHostDevicesUidPackManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidPackManifestsUidGetUrl = (
  uid: string,
  manifestUid: string,
  params?: EdgeHostDevicesUidPackManifestsUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}/pack/manifests/${manifestUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}/pack/manifests/${manifestUid}`;
};

export const edgeHostDevicesUidPackManifestsUidGet = async (
  uid: string,
  manifestUid: string,
  params?: EdgeHostDevicesUidPackManifestsUidGetParams,
  options?: RequestInit,
): Promise<edgeHostDevicesUidPackManifestsUidGetResponse> => {
  const res = await fetch(
    getEdgeHostDevicesUidPackManifestsUidGetUrl(uid, manifestUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidPackManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidPackManifestsUidGetResponse;
};

/**
 * @summary Patch update specified edge host's packs status
 */
export type edgeHostDevicesUidPacksStatusPatchResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidPacksStatusPatchResponseComposite =
  edgeHostDevicesUidPacksStatusPatchResponse204;

export type edgeHostDevicesUidPacksStatusPatchResponse =
  edgeHostDevicesUidPacksStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidPacksStatusPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/packs/status`;
};

export const edgeHostDevicesUidPacksStatusPatch = async (
  uid: string,
  v1SpectroClusterPacksStatusEntityBody: V1SpectroClusterPacksStatusEntityBody,
  options?: RequestInit,
): Promise<edgeHostDevicesUidPacksStatusPatchResponse> => {
  const res = await fetch(getEdgeHostDevicesUidPacksStatusPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterPacksStatusEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidPacksStatusPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidPacksStatusPatchResponse;
};

/**
 * @summary Returns the associated profiles of a specified edge host device
 */
export type edgeHostDevicesUidProfilesGetResponse200 = {
  data: SpectroClusterProfileList;
  status: 200;
};

export type edgeHostDevicesUidProfilesGetResponseComposite =
  edgeHostDevicesUidProfilesGetResponse200;

export type edgeHostDevicesUidProfilesGetResponse =
  edgeHostDevicesUidProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidProfilesGetUrl = (
  uid: string,
  params?: EdgeHostDevicesUidProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles`;
};

export const edgeHostDevicesUidProfilesGet = async (
  uid: string,
  params?: EdgeHostDevicesUidProfilesGetParams,
  options?: RequestInit,
): Promise<edgeHostDevicesUidProfilesGetResponse> => {
  const res = await fetch(getEdgeHostDevicesUidProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidProfilesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidProfilesGetResponse;
};

/**
 * @summary Associate cluster profiles to the specified edge host device
 */
export type edgeHostDevicesUidProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidProfilesUpdateResponseComposite =
  edgeHostDevicesUidProfilesUpdateResponse204;

export type edgeHostDevicesUidProfilesUpdateResponse =
  edgeHostDevicesUidProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidProfilesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles`;
};

export const edgeHostDevicesUidProfilesUpdate = async (
  uid: string,
  v1SpectroClusterProfilesBody: V1SpectroClusterProfilesBody,
  options?: RequestInit,
): Promise<edgeHostDevicesUidProfilesUpdateResponse> => {
  const res = await fetch(getEdgeHostDevicesUidProfilesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfilesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidProfilesUpdateResponse;
};

/**
 * @summary Reset the cluster through edge host
 */
export type v1EdgeHostsUidResetResponse204 = {
  data: void;
  status: 204;
};

export type v1EdgeHostsUidResetResponseComposite =
  v1EdgeHostsUidResetResponse204;

export type v1EdgeHostsUidResetResponse =
  v1EdgeHostsUidResetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostsUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/reset`;
};

export const v1EdgeHostsUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeHostsUidResetResponse> => {
  const res = await fetch(getV1EdgeHostsUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostsUidResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostsUidResetResponse;
};

/**
 * @summary Download the specified edge host device spc
 */
export type edgeHostDevicesUidSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type edgeHostDevicesUidSpcDownloadResponseComposite =
  edgeHostDevicesUidSpcDownloadResponse200;

export type edgeHostDevicesUidSpcDownloadResponse =
  edgeHostDevicesUidSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidSpcDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/spc/download`;
};

export const edgeHostDevicesUidSpcDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<edgeHostDevicesUidSpcDownloadResponse> => {
  const res = await fetch(getEdgeHostDevicesUidSpcDownloadUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidSpcDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidSpcDownloadResponse;
};

/**
 * @summary Updates the specified edge host device tunnel configuration
 */
export type edgeHostDevicesUidTunnelConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidTunnelConfigUpdateResponseComposite =
  edgeHostDevicesUidTunnelConfigUpdateResponse204;

export type edgeHostDevicesUidTunnelConfigUpdateResponse =
  edgeHostDevicesUidTunnelConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidTunnelConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/tunnelConfig`;
};

export const edgeHostDevicesUidTunnelConfigUpdate = async (
  uid: string,
  spectroTunnelConfig: SpectroTunnelConfig,
  options?: RequestInit,
): Promise<edgeHostDevicesUidTunnelConfigUpdateResponse> => {
  const res = await fetch(getEdgeHostDevicesUidTunnelConfigUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(spectroTunnelConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidTunnelConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidTunnelConfigUpdateResponse;
};

/**
 * @summary Updates the edge host tunnel status
 */
export type edgeHostDevicesUidTunnelStatusUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidTunnelStatusUpdateResponseComposite =
  edgeHostDevicesUidTunnelStatusUpdateResponse204;

export type edgeHostDevicesUidTunnelStatusUpdateResponse =
  edgeHostDevicesUidTunnelStatusUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidTunnelStatusUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/tunnelStatus`;
};

export const edgeHostDevicesUidTunnelStatusUpdate = async (
  uid: string,
  spectroTunnelStatus: SpectroTunnelStatus,
  options?: RequestInit,
): Promise<edgeHostDevicesUidTunnelStatusUpdateResponse> => {
  const res = await fetch(getEdgeHostDevicesUidTunnelStatusUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(spectroTunnelStatus),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidTunnelStatusUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidTunnelStatusUpdateResponse;
};

/**
 * @summary Updates the specified edge host device vsphere properties
 */
export type edgeHostDevicesUidVspherePropertiesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type edgeHostDevicesUidVspherePropertiesUpdateResponseComposite =
  edgeHostDevicesUidVspherePropertiesUpdateResponse204;

export type edgeHostDevicesUidVspherePropertiesUpdateResponse =
  edgeHostDevicesUidVspherePropertiesUpdateResponseComposite & {
    headers: Headers;
  };

export const getEdgeHostDevicesUidVspherePropertiesUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/vsphere/properties`;
};

export const edgeHostDevicesUidVspherePropertiesUpdate = async (
  uid: string,
  edgeHostVsphereCloudProperties: EdgeHostVsphereCloudProperties,
  options?: RequestInit,
): Promise<edgeHostDevicesUidVspherePropertiesUpdateResponse> => {
  const res = await fetch(
    getEdgeHostDevicesUidVspherePropertiesUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(edgeHostVsphereCloudProperties),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostDevicesUidVspherePropertiesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostDevicesUidVspherePropertiesUpdateResponse;
};
