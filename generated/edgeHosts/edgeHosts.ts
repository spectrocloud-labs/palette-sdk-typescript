/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  EdgeHostClusterEntity,
  EdgeHostConfig,
  EdgeHostDevice,
  EdgeHostDeviceBody,
  EdgeHostDeviceEntity,
  EdgeHostDeviceHostCheckSum,
  EdgeHostDeviceHostPairingKey,
  EdgeHostDeviceMetaUpdateEntity,
  EdgeHostDevicesUidGetParams,
  EdgeHostDevicesUidPackManifestsUidGetParams,
  EdgeHostDevicesUidProfilesGetParams,
  EdgeHostHealth,
  EdgeHostVsphereCloudProperties,
  EdgeHostsMeta,
  EdgeHostsMetadataQuickFilterGetParams,
  EdgeHostsTags,
  EdgeToken,
  EdgeTokenActiveState,
  EdgeTokenEntity,
  EdgeTokenUpdate,
  EdgeTokens,
  Manifest,
  SpectroClusterPacksStatusEntityBody,
  SpectroClusterProfileList,
  SpectroClusterProfilesBody,
  SpectroTunnelConfig,
  SpectroTunnelStatus,
  Uid,
} from ".././schemas";

/**
 * @summary Create the edge host device
 */
export type EdgeHostDevicesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type EdgeHostDevicesCreateResponseComposite =
  EdgeHostDevicesCreateResponse201;

export type EdgeHostDevicesCreateResponse =
  EdgeHostDevicesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts`;
};

export const EdgeHostDevicesCreate = async (
  EdgeHostDeviceEntity: EdgeHostDeviceEntity,
  options?: RequestInit,
): Promise<EdgeHostDevicesCreateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostDeviceEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesCreateResponse;
};

/**
 * @summary Retrieves a list of edge hosts metadata matching the filter condition
 */
export type EdgeHostsMetadataQuickFilterGetResponse200 = {
  data: EdgeHostsMeta;
  status: 200;
};

export type EdgeHostsMetadataQuickFilterGetResponseComposite =
  EdgeHostsMetadataQuickFilterGetResponse200;

export type EdgeHostsMetadataQuickFilterGetResponse =
  EdgeHostsMetadataQuickFilterGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostsMetadataQuickFilterGetUrl = (
  params?: EdgeHostsMetadataQuickFilterGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/metadata`;
};

export const EdgeHostsMetadataQuickFilterGet = async (
  params?: EdgeHostsMetadataQuickFilterGetParams,
  options?: RequestInit,
): Promise<EdgeHostsMetadataQuickFilterGetResponse> => {
  const res = await fetch(getV1EdgeHostsMetadataQuickFilterGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostsMetadataQuickFilterGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostsMetadataQuickFilterGetResponse;
};

/**
 * @summary Registers the edge host device
 */
export type EdgeHostDevicesRegisterResponse200 = {
  data: EdgeHostDevice;
  status: 200;
};

export type EdgeHostDevicesRegisterResponseComposite =
  EdgeHostDevicesRegisterResponse200;

export type EdgeHostDevicesRegisterResponse =
  EdgeHostDevicesRegisterResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesRegisterUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/register`;
};

export const EdgeHostDevicesRegister = async (
  EdgeHostDeviceBody: EdgeHostDeviceBody,
  options?: RequestInit,
): Promise<EdgeHostDevicesRegisterResponse> => {
  const res = await fetch(getV1EdgeHostDevicesRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostDeviceBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesRegisterResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesRegisterResponse;
};

/**
 * @summary Retrieves a list of edge hosts tags
 */
export type EdgeHostsTagsGetResponse200 = {
  data: EdgeHostsTags;
  status: 200;
};

export type EdgeHostsTagsGetResponseComposite = EdgeHostsTagsGetResponse200;

export type EdgeHostsTagsGetResponse = EdgeHostsTagsGetResponseComposite & {
  headers: Headers;
};

export const getV1EdgeHostsTagsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tags`;
};

export const EdgeHostsTagsGet = async (
  options?: RequestInit,
): Promise<EdgeHostsTagsGetResponse> => {
  const res = await fetch(getV1EdgeHostsTagsGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostsTagsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostsTagsGetResponse;
};

/**
 * @summary Retrieves a list of edge tokens
 */
export type EdgeTokensListResponse200 = {
  data: EdgeTokens;
  status: 200;
};

export type EdgeTokensListResponseComposite = EdgeTokensListResponse200;

export type EdgeTokensListResponse = EdgeTokensListResponseComposite & {
  headers: Headers;
};

export const getV1EdgeTokensListUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens`;
};

export const EdgeTokensList = async (
  options?: RequestInit,
): Promise<EdgeTokensListResponse> => {
  const res = await fetch(getV1EdgeTokensListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeTokensListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeTokensListResponse;
};

/**
 * @summary Create the edge token
 */
export type EdgeTokensCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type EdgeTokensCreateResponseComposite = EdgeTokensCreateResponse201;

export type EdgeTokensCreateResponse = EdgeTokensCreateResponseComposite & {
  headers: Headers;
};

export const getV1EdgeTokensCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens`;
};

export const EdgeTokensCreate = async (
  EdgeTokenEntity: EdgeTokenEntity,
  options?: RequestInit,
): Promise<EdgeTokensCreateResponse> => {
  const res = await fetch(getV1EdgeTokensCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeTokenEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeTokensCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeTokensCreateResponse;
};

/**
 * @summary Deletes the specified edge token
 */
export type EdgeTokensUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type EdgeTokensUidDeleteResponseComposite =
  EdgeTokensUidDeleteResponse204;

export type EdgeTokensUidDeleteResponse =
  EdgeTokensUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeTokensUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const EdgeTokensUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeTokensUidDeleteResponse> => {
  const res = await fetch(getV1EdgeTokensUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeTokensUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeTokensUidDeleteResponse;
};

/**
 * @summary Returns the specified edge token
 */
export type EdgeTokensUidGetResponse200 = {
  data: EdgeToken;
  status: 200;
};

export type EdgeTokensUidGetResponseComposite = EdgeTokensUidGetResponse200;

export type EdgeTokensUidGetResponse = EdgeTokensUidGetResponseComposite & {
  headers: Headers;
};

export const getV1EdgeTokensUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const EdgeTokensUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeTokensUidGetResponse> => {
  const res = await fetch(getV1EdgeTokensUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeTokensUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeTokensUidGetResponse;
};

/**
 * @summary Updates the specified edge token
 */
export type EdgeTokensUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeTokensUidUpdateResponseComposite =
  EdgeTokensUidUpdateResponse204;

export type EdgeTokensUidUpdateResponse =
  EdgeTokensUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeTokensUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const EdgeTokensUidUpdate = async (
  uid: string,
  EdgeTokenUpdate: EdgeTokenUpdate,
  options?: RequestInit,
): Promise<EdgeTokensUidUpdateResponse> => {
  const res = await fetch(getV1EdgeTokensUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeTokenUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeTokensUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeTokensUidUpdateResponse;
};

/**
 * @summary Revoke or re-activate the edge token access
 */
export type EdgeTokensUidStateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeTokensUidStateResponseComposite =
  EdgeTokensUidStateResponse204;

export type EdgeTokensUidStateResponse =
  EdgeTokensUidStateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeTokensUidStateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}/state`;
};

export const EdgeTokensUidState = async (
  uid: string,
  EdgeTokenActiveState: EdgeTokenActiveState,
  options?: RequestInit,
): Promise<EdgeTokensUidStateResponse> => {
  const res = await fetch(getV1EdgeTokensUidStateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeTokenActiveState),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeTokensUidStateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeTokensUidStateResponse;
};

/**
 * @summary Deletes the specified edge host device
 */
export type EdgeHostDevicesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidDeleteResponseComposite =
  EdgeHostDevicesUidDeleteResponse204;

export type EdgeHostDevicesUidDeleteResponse =
  EdgeHostDevicesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const EdgeHostDevicesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidDeleteResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidDeleteResponse;
};

/**
 * @summary Returns the specified edge host device
 */
export type EdgeHostDevicesUidGetResponse200 = {
  data: EdgeHostDevice;
  status: 200;
};

export type EdgeHostDevicesUidGetResponseComposite =
  EdgeHostDevicesUidGetResponse200;

export type EdgeHostDevicesUidGetResponse =
  EdgeHostDevicesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidGetUrl = (
  uid: string,
  params?: EdgeHostDevicesUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const EdgeHostDevicesUidGet = async (
  uid: string,
  params?: EdgeHostDevicesUidGetParams,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidGetResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidGetResponse;
};

/**
 * @summary Updates the specified edge host device
 */
export type EdgeHostDevicesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidUpdateResponseComposite =
  EdgeHostDevicesUidUpdateResponse204;

export type EdgeHostDevicesUidUpdateResponse =
  EdgeHostDevicesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const EdgeHostDevicesUidUpdate = async (
  uid: string,
  EdgeHostDeviceBody: EdgeHostDeviceBody,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostDeviceBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidUpdateResponse;
};

/**
 * @summary Deassociate the clusters to the edge host
 */
export type EdgeHostDevicesUidClusterDeassociateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidClusterDeassociateResponseComposite =
  EdgeHostDevicesUidClusterDeassociateResponse204;

export type EdgeHostDevicesUidClusterDeassociateResponse =
  EdgeHostDevicesUidClusterDeassociateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidClusterDeassociateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/cluster/associate`;
};

export const EdgeHostDevicesUidClusterDeassociate = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidClusterDeassociateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidClusterDeassociateUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidClusterDeassociateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidClusterDeassociateResponse;
};

/**
 * @summary Associate the clusters to the edge host
 */
export type EdgeHostDevicesUidClusterAssociateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidClusterAssociateResponseComposite =
  EdgeHostDevicesUidClusterAssociateResponse204;

export type EdgeHostDevicesUidClusterAssociateResponse =
  EdgeHostDevicesUidClusterAssociateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidClusterAssociateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/cluster/associate`;
};

export const EdgeHostDevicesUidClusterAssociate = async (
  uid: string,
  EdgeHostClusterEntity: EdgeHostClusterEntity,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidClusterAssociateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidClusterAssociateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidClusterAssociateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidClusterAssociateResponse;
};

/**
 * @summary Get the specified edge host device configuration
 */
export type EdgeHostDevicesUidConfigGetResponse200 = {
  data: EdgeHostConfig;
  status: 200;
};

export type EdgeHostDevicesUidConfigGetResponseComposite =
  EdgeHostDevicesUidConfigGetResponse200;

export type EdgeHostDevicesUidConfigGetResponse =
  EdgeHostDevicesUidConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/config`;
};

export const EdgeHostDevicesUidConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidConfigGetResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidConfigGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidConfigGetResponse;
};

/**
 * @summary Updates the edge host health
 */
export type EdgeHostDevicesHealthUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesHealthUpdateResponseComposite =
  EdgeHostDevicesHealthUpdateResponse204;

export type EdgeHostDevicesHealthUpdateResponse =
  EdgeHostDevicesHealthUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesHealthUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/health`;
};

export const EdgeHostDevicesHealthUpdate = async (
  uid: string,
  EdgeHostHealth: EdgeHostHealth,
  options?: RequestInit,
): Promise<EdgeHostDevicesHealthUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesHealthUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostHealth),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesHealthUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesHealthUpdateResponse;
};

/**
 * @summary Update the specified edge host device host check sum
 */
export type EdgeHostDeviceHostCheckSumUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDeviceHostCheckSumUpdateResponseComposite =
  EdgeHostDeviceHostCheckSumUpdateResponse204;

export type EdgeHostDeviceHostCheckSumUpdateResponse =
  EdgeHostDeviceHostCheckSumUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDeviceHostCheckSumUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/hostCheckSum`;
};

export const EdgeHostDeviceHostCheckSumUpdate = async (
  uid: string,
  EdgeHostDeviceHostCheckSum: EdgeHostDeviceHostCheckSum,
  options?: RequestInit,
): Promise<EdgeHostDeviceHostCheckSumUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDeviceHostCheckSumUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostDeviceHostCheckSum),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDeviceHostCheckSumUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDeviceHostCheckSumUpdateResponse;
};

/**
 * @summary Update the specified edge host device host pairing key
 */
export type EdgeHostDeviceHostPairingKeyUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDeviceHostPairingKeyUpdateResponseComposite =
  EdgeHostDeviceHostPairingKeyUpdateResponse204;

export type EdgeHostDeviceHostPairingKeyUpdateResponse =
  EdgeHostDeviceHostPairingKeyUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDeviceHostPairingKeyUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/hostPairingKey`;
};

export const EdgeHostDeviceHostPairingKeyUpdate = async (
  uid: string,
  EdgeHostDeviceHostPairingKey: EdgeHostDeviceHostPairingKey,
  options?: RequestInit,
): Promise<EdgeHostDeviceHostPairingKeyUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDeviceHostPairingKeyUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostDeviceHostPairingKey),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDeviceHostPairingKeyUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDeviceHostPairingKeyUpdateResponse;
};

/**
 * @summary Updates the specified edge host device meta
 */
export type EdgeHostDevicesUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidMetaUpdateResponseComposite =
  EdgeHostDevicesUidMetaUpdateResponse204;

export type EdgeHostDevicesUidMetaUpdateResponse =
  EdgeHostDevicesUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/meta`;
};

export const EdgeHostDevicesUidMetaUpdate = async (
  uid: string,
  EdgeHostDeviceMetaUpdateEntity: EdgeHostDeviceMetaUpdateEntity,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidMetaUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostDeviceMetaUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidMetaUpdateResponse;
};

/**
 * @summary Returns the specified edge host's manifest
 */
export type EdgeHostDevicesUidPackManifestsUidGetResponse200 = {
  data: Manifest;
  status: 200;
};

export type EdgeHostDevicesUidPackManifestsUidGetResponseComposite =
  EdgeHostDevicesUidPackManifestsUidGetResponse200;

export type EdgeHostDevicesUidPackManifestsUidGetResponse =
  EdgeHostDevicesUidPackManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidPackManifestsUidGetUrl = (
  uid: string,
  manifestUid: string,
  params?: EdgeHostDevicesUidPackManifestsUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}/pack/manifests/${manifestUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}/pack/manifests/${manifestUid}`;
};

export const EdgeHostDevicesUidPackManifestsUidGet = async (
  uid: string,
  manifestUid: string,
  params?: EdgeHostDevicesUidPackManifestsUidGetParams,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidPackManifestsUidGetResponse> => {
  const res = await fetch(
    getV1EdgeHostDevicesUidPackManifestsUidGetUrl(uid, manifestUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidPackManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidPackManifestsUidGetResponse;
};

/**
 * @summary Patch update specified edge host's packs status
 */
export type EdgeHostDevicesUidPacksStatusPatchResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidPacksStatusPatchResponseComposite =
  EdgeHostDevicesUidPacksStatusPatchResponse204;

export type EdgeHostDevicesUidPacksStatusPatchResponse =
  EdgeHostDevicesUidPacksStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidPacksStatusPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/packs/status`;
};

export const EdgeHostDevicesUidPacksStatusPatch = async (
  uid: string,
  SpectroClusterPacksStatusEntityBody: SpectroClusterPacksStatusEntityBody,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidPacksStatusPatchResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidPacksStatusPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterPacksStatusEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidPacksStatusPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidPacksStatusPatchResponse;
};

/**
 * @summary Returns the associated profiles of a specified edge host device
 */
export type EdgeHostDevicesUidProfilesGetResponse200 = {
  data: SpectroClusterProfileList;
  status: 200;
};

export type EdgeHostDevicesUidProfilesGetResponseComposite =
  EdgeHostDevicesUidProfilesGetResponse200;

export type EdgeHostDevicesUidProfilesGetResponse =
  EdgeHostDevicesUidProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidProfilesGetUrl = (
  uid: string,
  params?: EdgeHostDevicesUidProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles`;
};

export const EdgeHostDevicesUidProfilesGet = async (
  uid: string,
  params?: EdgeHostDevicesUidProfilesGetParams,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidProfilesGetResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidProfilesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidProfilesGetResponse;
};

/**
 * @summary Associate cluster profiles to the specified edge host device
 */
export type EdgeHostDevicesUidProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidProfilesUpdateResponseComposite =
  EdgeHostDevicesUidProfilesUpdateResponse204;

export type EdgeHostDevicesUidProfilesUpdateResponse =
  EdgeHostDevicesUidProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidProfilesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles`;
};

export const EdgeHostDevicesUidProfilesUpdate = async (
  uid: string,
  SpectroClusterProfilesBody: SpectroClusterProfilesBody,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidProfilesUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidProfilesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterProfilesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidProfilesUpdateResponse;
};

/**
 * @summary Reset the cluster through edge host
 */
export type EdgeHostsUidResetResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostsUidResetResponseComposite =
  EdgeHostsUidResetResponse204;

export type EdgeHostsUidResetResponse =
  EdgeHostsUidResetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostsUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/reset`;
};

export const EdgeHostsUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeHostsUidResetResponse> => {
  const res = await fetch(getV1EdgeHostsUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostsUidResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostsUidResetResponse;
};

/**
 * @summary Download the specified edge host device spc
 */
export type EdgeHostDevicesUidSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type EdgeHostDevicesUidSpcDownloadResponseComposite =
  EdgeHostDevicesUidSpcDownloadResponse200;

export type EdgeHostDevicesUidSpcDownloadResponse =
  EdgeHostDevicesUidSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidSpcDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/spc/download`;
};

export const EdgeHostDevicesUidSpcDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidSpcDownloadResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidSpcDownloadUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidSpcDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidSpcDownloadResponse;
};

/**
 * @summary Updates the specified edge host device tunnel configuration
 */
export type EdgeHostDevicesUidTunnelConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidTunnelConfigUpdateResponseComposite =
  EdgeHostDevicesUidTunnelConfigUpdateResponse204;

export type EdgeHostDevicesUidTunnelConfigUpdateResponse =
  EdgeHostDevicesUidTunnelConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidTunnelConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/tunnelConfig`;
};

export const EdgeHostDevicesUidTunnelConfigUpdate = async (
  uid: string,
  SpectroTunnelConfig: SpectroTunnelConfig,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidTunnelConfigUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidTunnelConfigUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroTunnelConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidTunnelConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidTunnelConfigUpdateResponse;
};

/**
 * @summary Updates the edge host tunnel status
 */
export type EdgeHostDevicesUidTunnelStatusUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidTunnelStatusUpdateResponseComposite =
  EdgeHostDevicesUidTunnelStatusUpdateResponse204;

export type EdgeHostDevicesUidTunnelStatusUpdateResponse =
  EdgeHostDevicesUidTunnelStatusUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidTunnelStatusUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/tunnelStatus`;
};

export const EdgeHostDevicesUidTunnelStatusUpdate = async (
  uid: string,
  SpectroTunnelStatus: SpectroTunnelStatus,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidTunnelStatusUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidTunnelStatusUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroTunnelStatus),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidTunnelStatusUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidTunnelStatusUpdateResponse;
};

/**
 * @summary Updates the specified edge host device vsphere properties
 */
export type EdgeHostDevicesUidVspherePropertiesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EdgeHostDevicesUidVspherePropertiesUpdateResponseComposite =
  EdgeHostDevicesUidVspherePropertiesUpdateResponse204;

export type EdgeHostDevicesUidVspherePropertiesUpdateResponse =
  EdgeHostDevicesUidVspherePropertiesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidVspherePropertiesUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/vsphere/properties`;
};

export const EdgeHostDevicesUidVspherePropertiesUpdate = async (
  uid: string,
  EdgeHostVsphereCloudProperties: EdgeHostVsphereCloudProperties,
  options?: RequestInit,
): Promise<EdgeHostDevicesUidVspherePropertiesUpdateResponse> => {
  const res = await fetch(
    getV1EdgeHostDevicesUidVspherePropertiesUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EdgeHostVsphereCloudProperties),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostDevicesUidVspherePropertiesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostDevicesUidVspherePropertiesUpdateResponse;
};
