/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AuthTokenSettings,
  AwsCreditAccountEntity,
  DataSinkConfig,
  DataSinkConfigBody,
  DeveloperCredit,
  FipsSettings,
  Invoice,
  LoginBannerSettings,
  Macros,
  MacrosBody,
  NodesAutoRemediationSettingsBody,
  RateConfig,
  TenantAddressPatch,
  TenantAssetCert,
  TenantAssetCertBody,
  TenantAssetCerts,
  TenantClusterSettings,
  TenantDomains,
  TenantEmailPatch,
  TenantEnableClusterGroup,
  TenantFreemium,
  TenantFreemiumUsage,
  TenantOidcClientSpec,
  TenantPasswordPolicyEntity,
  TenantResourceLimits,
  TenantResourceLimitsEntity,
  TenantSamlRequestSpec,
  TenantSamlSpec,
  TenantSsoAuthProvidersEntity,
  TenantsCreditAccountDeleteParams,
  Uid,
} from ".././schemas";

/**
 * @summary Update tenant address
 */
export type PatchTenantAddressResponse204 = {
  data: void;
  status: 204;
};

export type PatchTenantAddressResponseComposite =
  PatchTenantAddressResponse204;

export type PatchTenantAddressResponse =
  PatchTenantAddressResponseComposite & {
    headers: Headers;
  };

export const getV1PatchTenantAddressUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/address`;
};

export const PatchTenantAddress = async (
  tenantUid: string,
  TenantAddressPatch: TenantAddressPatch,
  options?: RequestInit,
): Promise<PatchTenantAddressResponse> => {
  const res = await fetch(getV1PatchTenantAddressUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantAddressPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PatchTenantAddressResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PatchTenantAddressResponse;
};

/**
 * @summary lists the certificates for the tenant
 */
export type TenantUIdAssetsCertsListResponse200 = {
  data: TenantAssetCerts;
  status: 200;
};

export type TenantUIdAssetsCertsListResponseComposite =
  TenantUIdAssetsCertsListResponse200;

export type TenantUIdAssetsCertsListResponse =
  TenantUIdAssetsCertsListResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUIdAssetsCertsListUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs`;
};

export const TenantUIdAssetsCertsList = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUIdAssetsCertsListResponse> => {
  const res = await fetch(getV1TenantUIdAssetsCertsListUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUIdAssetsCertsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUIdAssetsCertsListResponse;
};

/**
 * @summary create the tenant certificate
 */
export type TenantUidAssetsCertsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type TenantUidAssetsCertsCreateResponseComposite =
  TenantUidAssetsCertsCreateResponse201;

export type TenantUidAssetsCertsCreateResponse =
  TenantUidAssetsCertsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs`;
};

export const TenantUidAssetsCertsCreate = async (
  tenantUid: string,
  TenantAssetCertBody: TenantAssetCertBody,
  options?: RequestInit,
): Promise<TenantUidAssetsCertsCreateResponse> => {
  const res = await fetch(getV1TenantUidAssetsCertsCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantAssetCertBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsCertsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsCertsCreateResponse;
};

/**
 * @summary deletes the tenant certificate
 */
export type TenantUidAssetsCertsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidAssetsCertsUidDeleteResponseComposite =
  TenantUidAssetsCertsUidDeleteResponse204;

export type TenantUidAssetsCertsUidDeleteResponse =
  TenantUidAssetsCertsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidDeleteUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const TenantUidAssetsCertsUidDelete = async (
  tenantUid: string,
  certificateUid: string,
  options?: RequestInit,
): Promise<TenantUidAssetsCertsUidDeleteResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidDeleteUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsCertsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsCertsUidDeleteResponse;
};

/**
 * @summary Returns the ca certificate for the tenant
 */
export type TenantUidAssetsCertsUidGetResponse200 = {
  data: TenantAssetCert;
  status: 200;
};

export type TenantUidAssetsCertsUidGetResponseComposite =
  TenantUidAssetsCertsUidGetResponse200;

export type TenantUidAssetsCertsUidGetResponse =
  TenantUidAssetsCertsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidGetUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const TenantUidAssetsCertsUidGet = async (
  tenantUid: string,
  certificateUid: string,
  options?: RequestInit,
): Promise<TenantUidAssetsCertsUidGetResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidGetUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsCertsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsCertsUidGetResponse;
};

/**
 * @summary updates the tenant certificate
 */
export type TenantUidAssetsCertsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidAssetsCertsUidUpdateResponseComposite =
  TenantUidAssetsCertsUidUpdateResponse204;

export type TenantUidAssetsCertsUidUpdateResponse =
  TenantUidAssetsCertsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidUpdateUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const TenantUidAssetsCertsUidUpdate = async (
  tenantUid: string,
  certificateUid: string,
  TenantAssetCertBody: TenantAssetCertBody,
  options?: RequestInit,
): Promise<TenantUidAssetsCertsUidUpdateResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidUpdateUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(TenantAssetCertBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsCertsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsCertsUidUpdateResponse;
};

/**
 * @summary deletes the tenant data sink config
 */
export type TenantUidAssetsDataSinksDeleteResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidAssetsDataSinksDeleteResponseComposite =
  TenantUidAssetsDataSinksDeleteResponse204;

export type TenantUidAssetsDataSinksDeleteResponse =
  TenantUidAssetsDataSinksDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksDeleteUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const TenantUidAssetsDataSinksDelete = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidAssetsDataSinksDeleteResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksDeleteUrl(tenantUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsDataSinksDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsDataSinksDeleteResponse;
};

/**
 * @summary Returns data sink config of tenant
 */
export type TenantUidAssetsDataSinksGetResponse200 = {
  data: DataSinkConfig;
  status: 200;
};

export type TenantUidAssetsDataSinksGetResponseComposite =
  TenantUidAssetsDataSinksGetResponse200;

export type TenantUidAssetsDataSinksGetResponse =
  TenantUidAssetsDataSinksGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const TenantUidAssetsDataSinksGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidAssetsDataSinksGetResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsDataSinksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsDataSinksGetResponse;
};

/**
 * @summary create data sink config
 */
export type TenantUidAssetsDataSinksCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type TenantUidAssetsDataSinksCreateResponseComposite =
  TenantUidAssetsDataSinksCreateResponse201;

export type TenantUidAssetsDataSinksCreateResponse =
  TenantUidAssetsDataSinksCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const TenantUidAssetsDataSinksCreate = async (
  tenantUid: string,
  DataSinkConfigBody: DataSinkConfigBody,
  options?: RequestInit,
): Promise<TenantUidAssetsDataSinksCreateResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(DataSinkConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsDataSinksCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsDataSinksCreateResponse;
};

/**
 * @summary updates the tenant data sink config
 */
export type TenantUidAssetsDataSinksUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidAssetsDataSinksUpdateResponseComposite =
  TenantUidAssetsDataSinksUpdateResponse204;

export type TenantUidAssetsDataSinksUpdateResponse =
  TenantUidAssetsDataSinksUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const TenantUidAssetsDataSinksUpdate = async (
  tenantUid: string,
  DataSinkConfigBody: DataSinkConfigBody,
  options?: RequestInit,
): Promise<TenantUidAssetsDataSinksUpdateResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(DataSinkConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAssetsDataSinksUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAssetsDataSinksUpdateResponse;
};

/**
 * @summary Get tenant auth token settings
 */
export type TenantUidAuthTokenSettingsGetResponse200 = {
  data: AuthTokenSettings;
  status: 200;
};

export type TenantUidAuthTokenSettingsGetResponseComposite =
  TenantUidAuthTokenSettingsGetResponse200;

export type TenantUidAuthTokenSettingsGetResponse =
  TenantUidAuthTokenSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAuthTokenSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/authTokenSettings`;
};

export const TenantUidAuthTokenSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidAuthTokenSettingsGetResponse> => {
  const res = await fetch(getV1TenantUidAuthTokenSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAuthTokenSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAuthTokenSettingsGetResponse;
};

/**
 * @summary Update tenant auth token settings
 */
export type TenantUidAuthTokenSettingsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidAuthTokenSettingsUpdateResponseComposite =
  TenantUidAuthTokenSettingsUpdateResponse204;

export type TenantUidAuthTokenSettingsUpdateResponse =
  TenantUidAuthTokenSettingsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAuthTokenSettingsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/authTokenSettings`;
};

export const TenantUidAuthTokenSettingsUpdate = async (
  tenantUid: string,
  AuthTokenSettings: AuthTokenSettings,
  options?: RequestInit,
): Promise<TenantUidAuthTokenSettingsUpdateResponse> => {
  const res = await fetch(getV1TenantUidAuthTokenSettingsUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AuthTokenSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidAuthTokenSettingsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidAuthTokenSettingsUpdateResponse;
};

/**
 * @summary Tenant to accept the contract agreement
 */
export type TenantsUidContractAcceptResponse204 = {
  data: void;
  status: 204;
};

export type TenantsUidContractAcceptResponseComposite =
  TenantsUidContractAcceptResponse204;

export type TenantsUidContractAcceptResponse =
  TenantsUidContractAcceptResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidContractAcceptUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/contract/accept`;
};

export const TenantsUidContractAccept = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantsUidContractAcceptResponse> => {
  const res = await fetch(getV1TenantsUidContractAcceptUrl(tenantUid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsUidContractAcceptResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsUidContractAcceptResponse;
};

/**
 * @summary Deletes the aws credit account for tenants
 */
export type TenantsCreditAccountDeleteResponse204 = {
  data: void;
  status: 204;
};

export type TenantsCreditAccountDeleteResponseComposite =
  TenantsCreditAccountDeleteResponse204;

export type TenantsCreditAccountDeleteResponse =
  TenantsCreditAccountDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsCreditAccountDeleteUrl = (
  tenantUid: string,
  params?: TenantsCreditAccountDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws`;
};

export const TenantsCreditAccountDelete = async (
  tenantUid: string,
  params?: TenantsCreditAccountDeleteParams,
  options?: RequestInit,
): Promise<TenantsCreditAccountDeleteResponse> => {
  const res = await fetch(
    getV1TenantsCreditAccountDeleteUrl(tenantUid, params),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsCreditAccountDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsCreditAccountDeleteResponse;
};

/**
 * @summary Get the credit accounts for the tenants with free tier access
 */
export type TenantsCreditAccountGetResponse200 = {
  data: AwsCreditAccountEntity;
  status: 200;
};

export type TenantsCreditAccountGetResponseComposite =
  TenantsCreditAccountGetResponse200;

export type TenantsCreditAccountGetResponse =
  TenantsCreditAccountGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsCreditAccountGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws`;
};

export const TenantsCreditAccountGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantsCreditAccountGetResponse> => {
  const res = await fetch(getV1TenantsCreditAccountGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsCreditAccountGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsCreditAccountGetResponse;
};

/**
 * @summary retrieves the domains for tenant
 */
export type TenantUidDomainsGetResponse200 = {
  data: TenantDomains;
  status: 200;
};

export type TenantUidDomainsGetResponseComposite =
  TenantUidDomainsGetResponse200;

export type TenantUidDomainsGetResponse =
  TenantUidDomainsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidDomainsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/domains`;
};

export const TenantUidDomainsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidDomainsGetResponse> => {
  const res = await fetch(getV1TenantUidDomainsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidDomainsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidDomainsGetResponse;
};

/**
 * @summary creates or updates domains for tenant
 */
export type TenantUidDomainsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidDomainsUpdateResponseComposite =
  TenantUidDomainsUpdateResponse204;

export type TenantUidDomainsUpdateResponse =
  TenantUidDomainsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidDomainsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/domains`;
};

export const TenantUidDomainsUpdate = async (
  tenantUid: string,
  TenantDomains: TenantDomains,
  options?: RequestInit,
): Promise<TenantUidDomainsUpdateResponse> => {
  const res = await fetch(getV1TenantUidDomainsUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantDomains),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidDomainsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidDomainsUpdateResponse;
};

/**
 * @summary Update tenant emailId
 */
export type PatchTenantEmailIdResponse204 = {
  data: void;
  status: 204;
};

export type PatchTenantEmailIdResponseComposite =
  PatchTenantEmailIdResponse204;

export type PatchTenantEmailIdResponse =
  PatchTenantEmailIdResponseComposite & {
    headers: Headers;
  };

export const getV1PatchTenantEmailIdUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/emailId`;
};

export const PatchTenantEmailId = async (
  tenantUid: string,
  TenantEmailPatch: TenantEmailPatch,
  options?: RequestInit,
): Promise<PatchTenantEmailIdResponse> => {
  const res = await fetch(getV1PatchTenantEmailIdUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantEmailPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PatchTenantEmailIdResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PatchTenantEmailIdResponse;
};

/**
 * @summary Get tenant level freemium configuration
 */
export type TenantFreemiumGetResponse200 = {
  data: TenantFreemium;
  status: 200;
};

export type TenantFreemiumGetResponseComposite =
  TenantFreemiumGetResponse200;

export type TenantFreemiumGetResponse =
  TenantFreemiumGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFreemiumGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemium`;
};

export const TenantFreemiumGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantFreemiumGetResponse> => {
  const res = await fetch(getV1TenantFreemiumGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantFreemiumGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantFreemiumGetResponse;
};

/**
 * @summary Update tenant freemium configuration
 */
export type TenantFreemiumUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantFreemiumUpdateResponseComposite =
  TenantFreemiumUpdateResponse204;

export type TenantFreemiumUpdateResponse =
  TenantFreemiumUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFreemiumUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemium`;
};

export const TenantFreemiumUpdate = async (
  tenantUid: string,
  TenantFreemium: TenantFreemium,
  options?: RequestInit,
): Promise<TenantFreemiumUpdateResponse> => {
  const res = await fetch(getV1TenantFreemiumUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantFreemium),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantFreemiumUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantFreemiumUpdateResponse;
};

/**
 * @summary Get tenant freemium usage
 */
export type TenantFreemiumUsageGetResponse200 = {
  data: TenantFreemiumUsage;
  status: 200;
};

export type TenantFreemiumUsageGetResponseComposite =
  TenantFreemiumUsageGetResponse200;

export type TenantFreemiumUsageGetResponse =
  TenantFreemiumUsageGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFreemiumUsageGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemiumUsage`;
};

export const TenantFreemiumUsageGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantFreemiumUsageGetResponse> => {
  const res = await fetch(getV1TenantFreemiumUsageGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantFreemiumUsageGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantFreemiumUsageGetResponse;
};

/**
 * @summary Returns a specified invoice
 */
export type InvoicesUidGetResponse200 = {
  data: Invoice;
  status: 200;
};

export type InvoicesUidGetResponseComposite = InvoicesUidGetResponse200;

export type InvoicesUidGetResponse = InvoicesUidGetResponseComposite & {
  headers: Headers;
};

export const getV1InvoicesUidGetUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}`;
};

export const InvoicesUidGet = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<InvoicesUidGetResponse> => {
  const res = await fetch(getV1InvoicesUidGetUrl(tenantUid, invoiceUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: InvoicesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as InvoicesUidGetResponse;
};

/**
 * @summary Downloads the specified invoice report
 */
export type InvoiceUidReportInvoicePdfResponse200 = {
  data: Blob;
  status: 200;
};

export type InvoiceUidReportInvoicePdfResponseComposite =
  InvoiceUidReportInvoicePdfResponse200;

export type InvoiceUidReportInvoicePdfResponse =
  InvoiceUidReportInvoicePdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportInvoicePdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/invoice/pdf`;
};

export const InvoiceUidReportInvoicePdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<InvoiceUidReportInvoicePdfResponse> => {
  const res = await fetch(
    getV1InvoiceUidReportInvoicePdfUrl(tenantUid, invoiceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: InvoiceUidReportInvoicePdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as InvoiceUidReportInvoicePdfResponse;
};

/**
 * @summary Downloads the specified monthly invoice report
 */
export type InvoiceUidReportPdfResponse200 = {
  data: Blob;
  status: 200;
};

export type InvoiceUidReportPdfResponseComposite =
  InvoiceUidReportPdfResponse200;

export type InvoiceUidReportPdfResponse =
  InvoiceUidReportPdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportPdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/pdf`;
};

export const InvoiceUidReportPdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<InvoiceUidReportPdfResponse> => {
  const res = await fetch(getV1InvoiceUidReportPdfUrl(tenantUid, invoiceUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: InvoiceUidReportPdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as InvoiceUidReportPdfResponse;
};

/**
 * @summary Downloads the specified tenant usage
 */
export type InvoiceUidReportUsagePdfResponse200 = {
  data: Blob;
  status: 200;
};

export type InvoiceUidReportUsagePdfResponseComposite =
  InvoiceUidReportUsagePdfResponse200;

export type InvoiceUidReportUsagePdfResponse =
  InvoiceUidReportUsagePdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportUsagePdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/usage/pdf`;
};

export const InvoiceUidReportUsagePdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<InvoiceUidReportUsagePdfResponse> => {
  const res = await fetch(
    getV1InvoiceUidReportUsagePdfUrl(tenantUid, invoiceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: InvoiceUidReportUsagePdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as InvoiceUidReportUsagePdfResponse;
};

/**
 * @summary Get tenant login banner settings
 */
export type TenantUidLoginBannerGetResponse200 = {
  data: LoginBannerSettings;
  status: 200;
};

export type TenantUidLoginBannerGetResponseComposite =
  TenantUidLoginBannerGetResponse200;

export type TenantUidLoginBannerGetResponse =
  TenantUidLoginBannerGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidLoginBannerGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/loginBanner`;
};

export const TenantUidLoginBannerGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidLoginBannerGetResponse> => {
  const res = await fetch(getV1TenantUidLoginBannerGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidLoginBannerGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidLoginBannerGetResponse;
};

/**
 * @summary Update tenant login banner settings
 */
export type TenantUidLoginBannerUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidLoginBannerUpdateResponseComposite =
  TenantUidLoginBannerUpdateResponse204;

export type TenantUidLoginBannerUpdateResponse =
  TenantUidLoginBannerUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidLoginBannerUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/loginBanner`;
};

export const TenantUidLoginBannerUpdate = async (
  tenantUid: string,
  LoginBannerSettings: LoginBannerSettings,
  options?: RequestInit,
): Promise<TenantUidLoginBannerUpdateResponse> => {
  const res = await fetch(getV1TenantUidLoginBannerUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(LoginBannerSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidLoginBannerUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidLoginBannerUpdateResponse;
};

/**
 * @summary Delete the macros for the specified tenant by given macro name
 */
export type TenantsUidMacrosDeleteByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type TenantsUidMacrosDeleteByMacroNameResponseComposite =
  TenantsUidMacrosDeleteByMacroNameResponse204;

export type TenantsUidMacrosDeleteByMacroNameResponse =
  TenantsUidMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosDeleteByMacroNameUrl = (
  tenantUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const TenantsUidMacrosDeleteByMacroName = async (
  tenantUid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<TenantsUidMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(
    getV1TenantsUidMacrosDeleteByMacroNameUrl(tenantUid),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MacrosBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsUidMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsUidMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the specified tenant
 */
export type TenantsUidMacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type TenantsUidMacrosListResponseComposite =
  TenantsUidMacrosListResponse200;

export type TenantsUidMacrosListResponse =
  TenantsUidMacrosListResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosListUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const TenantsUidMacrosList = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantsUidMacrosListResponse> => {
  const res = await fetch(getV1TenantsUidMacrosListUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsUidMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsUidMacrosListResponse;
};

/**
 * @summary Update the macros for the specified tenant by given macro name
 */
export type TenantsUidMacrosUpdateByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type TenantsUidMacrosUpdateByMacroNameResponseComposite =
  TenantsUidMacrosUpdateByMacroNameResponse204;

export type TenantsUidMacrosUpdateByMacroNameResponse =
  TenantsUidMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosUpdateByMacroNameUrl = (
  tenantUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const TenantsUidMacrosUpdateByMacroName = async (
  tenantUid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<TenantsUidMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(
    getV1TenantsUidMacrosUpdateByMacroNameUrl(tenantUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MacrosBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsUidMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsUidMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the specified tenant
 */
export type TenantsUidMacrosCreateResponse204 = {
  data: void;
  status: 204;
};

export type TenantsUidMacrosCreateResponseComposite =
  TenantsUidMacrosCreateResponse204;

export type TenantsUidMacrosCreateResponse =
  TenantsUidMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const TenantsUidMacrosCreate = async (
  tenantUid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<TenantsUidMacrosCreateResponse> => {
  const res = await fetch(getV1TenantsUidMacrosCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsUidMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsUidMacrosCreateResponse;
};

/**
 * @summary Update the macros of the specified tenant
 */
export type TenantsUidMacrosUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantsUidMacrosUpdateResponseComposite =
  TenantsUidMacrosUpdateResponse204;

export type TenantsUidMacrosUpdateResponse =
  TenantsUidMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const TenantsUidMacrosUpdate = async (
  tenantUid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<TenantsUidMacrosUpdateResponse> => {
  const res = await fetch(getV1TenantsUidMacrosUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantsUidMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantsUidMacrosUpdateResponse;
};

/**
 * @summary Returns the oidc Spec for tenant
 */
export type TenantUidOidcConfigGetResponse200 = {
  data: TenantOidcClientSpec;
  status: 200;
};

export type TenantUidOidcConfigGetResponseComposite =
  TenantUidOidcConfigGetResponse200;

export type TenantUidOidcConfigGetResponse =
  TenantUidOidcConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidOidcConfigGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/oidc/config`;
};

export const TenantUidOidcConfigGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidOidcConfigGetResponse> => {
  const res = await fetch(getV1TenantUidOidcConfigGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidOidcConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidOidcConfigGetResponse;
};

/**
 * @summary Associates the  oidc Spec for the tenant
 */
export type TenantUidOidcConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidOidcConfigUpdateResponseComposite =
  TenantUidOidcConfigUpdateResponse204;

export type TenantUidOidcConfigUpdateResponse =
  TenantUidOidcConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidOidcConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/oidc/config`;
};

export const TenantUidOidcConfigUpdate = async (
  tenantUid: string,
  TenantOidcClientSpec: TenantOidcClientSpec,
  options?: RequestInit,
): Promise<TenantUidOidcConfigUpdateResponse> => {
  const res = await fetch(getV1TenantUidOidcConfigUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantOidcClientSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidOidcConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidOidcConfigUpdateResponse;
};

/**
 * @summary retrieves the password policy for tenant
 */
export type TenantUidPasswordPolicyGetResponse200 = {
  data: TenantPasswordPolicyEntity;
  status: 200;
};

export type TenantUidPasswordPolicyGetResponseComposite =
  TenantUidPasswordPolicyGetResponse200;

export type TenantUidPasswordPolicyGetResponse =
  TenantUidPasswordPolicyGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidPasswordPolicyGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/password/policy`;
};

export const TenantUidPasswordPolicyGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidPasswordPolicyGetResponse> => {
  const res = await fetch(getV1TenantUidPasswordPolicyGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidPasswordPolicyGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidPasswordPolicyGetResponse;
};

/**
 * @summary creates or updates a password policy for tenant
 */
export type TenantUidPasswordPolicyUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidPasswordPolicyUpdateResponseComposite =
  TenantUidPasswordPolicyUpdateResponse204;

export type TenantUidPasswordPolicyUpdateResponse =
  TenantUidPasswordPolicyUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidPasswordPolicyUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/password/policy`;
};

export const TenantUidPasswordPolicyUpdate = async (
  tenantUid: string,
  TenantPasswordPolicyEntity: TenantPasswordPolicyEntity,
  options?: RequestInit,
): Promise<TenantUidPasswordPolicyUpdateResponse> => {
  const res = await fetch(getV1TenantUidPasswordPolicyUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantPasswordPolicyEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidPasswordPolicyUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidPasswordPolicyUpdateResponse;
};

/**
 * @summary Get is cluster group enabled for a specific tenant
 */
export type TenantPrefClusterGroupGetResponse200 = {
  data: TenantEnableClusterGroup;
  status: 200;
};

export type TenantPrefClusterGroupGetResponseComposite =
  TenantPrefClusterGroupGetResponse200;

export type TenantPrefClusterGroupGetResponse =
  TenantPrefClusterGroupGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantPrefClusterGroupGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterGroup`;
};

export const TenantPrefClusterGroupGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantPrefClusterGroupGetResponse> => {
  const res = await fetch(getV1TenantPrefClusterGroupGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantPrefClusterGroupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantPrefClusterGroupGetResponse;
};

/**
 * @summary Enable or Disable cluster group for a specific tenant
 */
export type TenantPrefClusterGroupUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantPrefClusterGroupUpdateResponseComposite =
  TenantPrefClusterGroupUpdateResponse204;

export type TenantPrefClusterGroupUpdateResponse =
  TenantPrefClusterGroupUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantPrefClusterGroupUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterGroup`;
};

export const TenantPrefClusterGroupUpdate = async (
  tenantUid: string,
  TenantEnableClusterGroup: TenantEnableClusterGroup,
  options?: RequestInit,
): Promise<TenantPrefClusterGroupUpdateResponse> => {
  const res = await fetch(getV1TenantPrefClusterGroupUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantEnableClusterGroup),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantPrefClusterGroupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantPrefClusterGroupUpdateResponse;
};

/**
 * @summary Get tenant cluster settings
 */
export type TenantClusterSettingsGetResponse200 = {
  data: TenantClusterSettings;
  status: 200;
};

export type TenantClusterSettingsGetResponseComposite =
  TenantClusterSettingsGetResponse200;

export type TenantClusterSettingsGetResponse =
  TenantClusterSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantClusterSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterSettings`;
};

export const TenantClusterSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantClusterSettingsGetResponse> => {
  const res = await fetch(getV1TenantClusterSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantClusterSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantClusterSettingsGetResponse;
};

/**
 * @summary Update tenant clusters nodes auto remediation setting
 */
export type TenantClustersNodesAutoRemediationSettingUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantClustersNodesAutoRemediationSettingUpdateResponseComposite =
  TenantClustersNodesAutoRemediationSettingUpdateResponse204;

export type TenantClustersNodesAutoRemediationSettingUpdateResponse =
  TenantClustersNodesAutoRemediationSettingUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantClustersNodesAutoRemediationSettingUpdateUrl = (
  tenantUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterSettings/nodesAutoRemediationSetting`;
};

export const TenantClustersNodesAutoRemediationSettingUpdate = async (
  tenantUid: string,
  NodesAutoRemediationSettingsBody: NodesAutoRemediationSettingsBody,
  options?: RequestInit,
): Promise<TenantClustersNodesAutoRemediationSettingUpdateResponse> => {
  const res = await fetch(
    getV1TenantClustersNodesAutoRemediationSettingUpdateUrl(tenantUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(NodesAutoRemediationSettingsBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantClustersNodesAutoRemediationSettingUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantClustersNodesAutoRemediationSettingUpdateResponse;
};

/**
 * @summary Get developer credit enabled for a specific tenant
 */
export type TenantDeveloperCreditGetResponse200 = {
  data: DeveloperCredit;
  status: 200;
};

export type TenantDeveloperCreditGetResponseComposite =
  TenantDeveloperCreditGetResponse200;

export type TenantDeveloperCreditGetResponse =
  TenantDeveloperCreditGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantDeveloperCreditGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/developerCredit`;
};

export const TenantDeveloperCreditGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantDeveloperCreditGetResponse> => {
  const res = await fetch(getV1TenantDeveloperCreditGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantDeveloperCreditGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantDeveloperCreditGetResponse;
};

/**
 * @summary update developer credit for a specific tenant
 */
export type TenantDeveloperCreditUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantDeveloperCreditUpdateResponseComposite =
  TenantDeveloperCreditUpdateResponse204;

export type TenantDeveloperCreditUpdateResponse =
  TenantDeveloperCreditUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantDeveloperCreditUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/developerCredit`;
};

export const TenantDeveloperCreditUpdate = async (
  tenantUid: string,
  DeveloperCredit: DeveloperCredit,
  options?: RequestInit,
): Promise<TenantDeveloperCreditUpdateResponse> => {
  const res = await fetch(getV1TenantDeveloperCreditUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(DeveloperCredit),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantDeveloperCreditUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantDeveloperCreditUpdateResponse;
};

/**
 * @summary Get tenant fips settings
 */
export type TenantFipsSettingsGetResponse200 = {
  data: FipsSettings;
  status: 200;
};

export type TenantFipsSettingsGetResponseComposite =
  TenantFipsSettingsGetResponse200;

export type TenantFipsSettingsGetResponse =
  TenantFipsSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFipsSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/fips`;
};

export const TenantFipsSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantFipsSettingsGetResponse> => {
  const res = await fetch(getV1TenantFipsSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantFipsSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantFipsSettingsGetResponse;
};

/**
 * @summary Update tenant fips setting
 */
export type TenantFipsSettingsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantFipsSettingsUpdateResponseComposite =
  TenantFipsSettingsUpdateResponse204;

export type TenantFipsSettingsUpdateResponse =
  TenantFipsSettingsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFipsSettingsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/fips`;
};

export const TenantFipsSettingsUpdate = async (
  tenantUid: string,
  FipsSettings: FipsSettings,
  options?: RequestInit,
): Promise<TenantFipsSettingsUpdateResponse> => {
  const res = await fetch(getV1TenantFipsSettingsUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(FipsSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantFipsSettingsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantFipsSettingsUpdateResponse;
};

/**
 * @summary Get all rate config for public and private cloud
 */
export type RateConfigGetResponse200 = {
  data: RateConfig;
  status: 200;
};

export type RateConfigGetResponseComposite = RateConfigGetResponse200;

export type RateConfigGetResponse = RateConfigGetResponseComposite & {
  headers: Headers;
};

export const getV1RateConfigGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/rateConfig`;
};

export const RateConfigGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<RateConfigGetResponse> => {
  const res = await fetch(getV1RateConfigGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RateConfigGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RateConfigGetResponse;
};

/**
 * @summary updates the rate config for public and private cloud
 */
export type RateConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type RateConfigUpdateResponseComposite = RateConfigUpdateResponse204;

export type RateConfigUpdateResponse = RateConfigUpdateResponseComposite & {
  headers: Headers;
};

export const getV1RateConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/rateConfig`;
};

export const RateConfigUpdate = async (
  tenantUid: string,
  RateConfig: RateConfig,
  options?: RequestInit,
): Promise<RateConfigUpdateResponse> => {
  const res = await fetch(getV1RateConfigUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(RateConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RateConfigUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RateConfigUpdateResponse;
};

/**
 * @summary Get tenant level resource limits configuration
 */
export type TenantResourceLimitsGetResponse200 = {
  data: TenantResourceLimits;
  status: 200;
};

export type TenantResourceLimitsGetResponseComposite =
  TenantResourceLimitsGetResponse200;

export type TenantResourceLimitsGetResponse =
  TenantResourceLimitsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantResourceLimitsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/resourceLimits`;
};

export const TenantResourceLimitsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantResourceLimitsGetResponse> => {
  const res = await fetch(getV1TenantResourceLimitsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantResourceLimitsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantResourceLimitsGetResponse;
};

/**
 * @summary Update tenant resource limits configuration
 */
export type TenantResourceLimitsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantResourceLimitsUpdateResponseComposite =
  TenantResourceLimitsUpdateResponse204;

export type TenantResourceLimitsUpdateResponse =
  TenantResourceLimitsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantResourceLimitsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/resourceLimits`;
};

export const TenantResourceLimitsUpdate = async (
  tenantUid: string,
  TenantResourceLimitsEntity: TenantResourceLimitsEntity,
  options?: RequestInit,
): Promise<TenantResourceLimitsUpdateResponse> => {
  const res = await fetch(getV1TenantResourceLimitsUpdateUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantResourceLimitsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantResourceLimitsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantResourceLimitsUpdateResponse;
};

/**
 * @summary Returns the specified service provider metadata and Saml Spec for tenant
 */
export type TenantUidSamlConfigSpecGetResponse200 = {
  data: TenantSamlSpec;
  status: 200;
};

export type TenantUidSamlConfigSpecGetResponseComposite =
  TenantUidSamlConfigSpecGetResponse200;

export type TenantUidSamlConfigSpecGetResponse =
  TenantUidSamlConfigSpecGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSamlConfigSpecGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/saml/config`;
};

export const TenantUidSamlConfigSpecGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidSamlConfigSpecGetResponse> => {
  const res = await fetch(getV1TenantUidSamlConfigSpecGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidSamlConfigSpecGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidSamlConfigSpecGetResponse;
};

/**
 * @summary Associates the specified federation metadata for the tenant
 */
export type TenantUidSamlConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidSamlConfigUpdateResponseComposite =
  TenantUidSamlConfigUpdateResponse204;

export type TenantUidSamlConfigUpdateResponse =
  TenantUidSamlConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSamlConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/saml/config`;
};

export const TenantUidSamlConfigUpdate = async (
  tenantUid: string,
  TenantSamlRequestSpec: TenantSamlRequestSpec,
  options?: RequestInit,
): Promise<TenantUidSamlConfigUpdateResponse> => {
  const res = await fetch(getV1TenantUidSamlConfigUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantSamlRequestSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidSamlConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidSamlConfigUpdateResponse;
};

/**
 * @summary get sso logins for the tenants
 */
export type TenantUidSsoAuthProvidersGetResponse200 = {
  data: TenantSsoAuthProvidersEntity;
  status: 200;
};

export type TenantUidSsoAuthProvidersGetResponseComposite =
  TenantUidSsoAuthProvidersGetResponse200;

export type TenantUidSsoAuthProvidersGetResponse =
  TenantUidSsoAuthProvidersGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSsoAuthProvidersGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/sso/auth/providers`;
};

export const TenantUidSsoAuthProvidersGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<TenantUidSsoAuthProvidersGetResponse> => {
  const res = await fetch(getV1TenantUidSsoAuthProvidersGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidSsoAuthProvidersGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidSsoAuthProvidersGetResponse;
};

/**
 * @summary enable sso logins for the tenants
 */
export type TenantUidSsoAuthProvidersUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TenantUidSsoAuthProvidersUpdateResponseComposite =
  TenantUidSsoAuthProvidersUpdateResponse204;

export type TenantUidSsoAuthProvidersUpdateResponse =
  TenantUidSsoAuthProvidersUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSsoAuthProvidersUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/sso/auth/providers`;
};

export const TenantUidSsoAuthProvidersUpdate = async (
  tenantUid: string,
  TenantSsoAuthProvidersEntity: TenantSsoAuthProvidersEntity,
  options?: RequestInit,
): Promise<TenantUidSsoAuthProvidersUpdateResponse> => {
  const res = await fetch(getV1TenantUidSsoAuthProvidersUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TenantSsoAuthProvidersEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TenantUidSsoAuthProvidersUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TenantUidSsoAuthProvidersUpdateResponse;
};
