/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AuthTokenSettings,
  AwsCreditAccountEntity,
  DataSinkConfig,
  DeveloperCredit,
  FipsSettings,
  Invoice,
  LoginBannerSettings,
  Macros,
  RateConfig,
  TenantAddressPatch,
  TenantAssetCert,
  TenantAssetCerts,
  TenantClusterSettings,
  TenantDomains,
  TenantEmailPatch,
  TenantEnableClusterGroup,
  TenantFreemium,
  TenantFreemiumUsage,
  TenantOidcClientSpec,
  TenantPasswordPolicyEntity,
  TenantResourceLimits,
  TenantResourceLimitsEntity,
  TenantSamlRequestSpec,
  TenantSamlSpec,
  TenantSsoAuthProvidersEntity,
  TenantsCreditAccountDeleteParams,
  Uid,
  V1DataSinkConfigBody,
  V1MacrosBody,
  V1NodesAutoRemediationSettingsBody,
  V1TenantAssetCertBody,
} from ".././schemas";

/**
 * @summary Update tenant address
 */
export type patchTenantAddressResponse204 = {
  data: void;
  status: 204;
};

export type patchTenantAddressResponseComposite = patchTenantAddressResponse204;

export type patchTenantAddressResponse = patchTenantAddressResponseComposite & {
  headers: Headers;
};

export const getPatchTenantAddressUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/address`;
};

export const patchTenantAddress = async (
  tenantUid: string,
  tenantAddressPatch: TenantAddressPatch,
  options?: RequestInit,
): Promise<patchTenantAddressResponse> => {
  const res = await fetch(getPatchTenantAddressUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantAddressPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: patchTenantAddressResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as patchTenantAddressResponse;
};

/**
 * @summary lists the certificates for the tenant
 */
export type v1TenantUIdAssetsCertsListResponse200 = {
  data: TenantAssetCerts;
  status: 200;
};

export type v1TenantUIdAssetsCertsListResponseComposite =
  v1TenantUIdAssetsCertsListResponse200;

export type v1TenantUIdAssetsCertsListResponse =
  v1TenantUIdAssetsCertsListResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUIdAssetsCertsListUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs`;
};

export const v1TenantUIdAssetsCertsList = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUIdAssetsCertsListResponse> => {
  const res = await fetch(getV1TenantUIdAssetsCertsListUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUIdAssetsCertsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUIdAssetsCertsListResponse;
};

/**
 * @summary create the tenant certificate
 */
export type v1TenantUidAssetsCertsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type v1TenantUidAssetsCertsCreateResponseComposite =
  v1TenantUidAssetsCertsCreateResponse201;

export type v1TenantUidAssetsCertsCreateResponse =
  v1TenantUidAssetsCertsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs`;
};

export const v1TenantUidAssetsCertsCreate = async (
  tenantUid: string,
  v1TenantAssetCertBody: V1TenantAssetCertBody,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsCreateResponse> => {
  const res = await fetch(getV1TenantUidAssetsCertsCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantAssetCertBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsCreateResponse;
};

/**
 * @summary deletes the tenant certificate
 */
export type v1TenantUidAssetsCertsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidAssetsCertsUidDeleteResponseComposite =
  v1TenantUidAssetsCertsUidDeleteResponse204;

export type v1TenantUidAssetsCertsUidDeleteResponse =
  v1TenantUidAssetsCertsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidDeleteUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const v1TenantUidAssetsCertsUidDelete = async (
  tenantUid: string,
  certificateUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsUidDeleteResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidDeleteUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsUidDeleteResponse;
};

/**
 * @summary Returns the ca certificate for the tenant
 */
export type v1TenantUidAssetsCertsUidGetResponse200 = {
  data: TenantAssetCert;
  status: 200;
};

export type v1TenantUidAssetsCertsUidGetResponseComposite =
  v1TenantUidAssetsCertsUidGetResponse200;

export type v1TenantUidAssetsCertsUidGetResponse =
  v1TenantUidAssetsCertsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidGetUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const v1TenantUidAssetsCertsUidGet = async (
  tenantUid: string,
  certificateUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsUidGetResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidGetUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsUidGetResponse;
};

/**
 * @summary updates the tenant certificate
 */
export type v1TenantUidAssetsCertsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidAssetsCertsUidUpdateResponseComposite =
  v1TenantUidAssetsCertsUidUpdateResponse204;

export type v1TenantUidAssetsCertsUidUpdateResponse =
  v1TenantUidAssetsCertsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidUpdateUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const v1TenantUidAssetsCertsUidUpdate = async (
  tenantUid: string,
  certificateUid: string,
  v1TenantAssetCertBody: V1TenantAssetCertBody,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsUidUpdateResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidUpdateUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1TenantAssetCertBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsUidUpdateResponse;
};

/**
 * @summary deletes the tenant data sink config
 */
export type v1TenantUidAssetsDataSinksDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidAssetsDataSinksDeleteResponseComposite =
  v1TenantUidAssetsDataSinksDeleteResponse204;

export type v1TenantUidAssetsDataSinksDeleteResponse =
  v1TenantUidAssetsDataSinksDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksDeleteUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksDelete = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksDeleteResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksDeleteUrl(tenantUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksDeleteResponse;
};

/**
 * @summary Returns data sink config of tenant
 */
export type v1TenantUidAssetsDataSinksGetResponse200 = {
  data: DataSinkConfig;
  status: 200;
};

export type v1TenantUidAssetsDataSinksGetResponseComposite =
  v1TenantUidAssetsDataSinksGetResponse200;

export type v1TenantUidAssetsDataSinksGetResponse =
  v1TenantUidAssetsDataSinksGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksGetResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksGetResponse;
};

/**
 * @summary create data sink config
 */
export type v1TenantUidAssetsDataSinksCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type v1TenantUidAssetsDataSinksCreateResponseComposite =
  v1TenantUidAssetsDataSinksCreateResponse201;

export type v1TenantUidAssetsDataSinksCreateResponse =
  v1TenantUidAssetsDataSinksCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksCreate = async (
  tenantUid: string,
  v1DataSinkConfigBody: V1DataSinkConfigBody,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksCreateResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1DataSinkConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksCreateResponse;
};

/**
 * @summary updates the tenant data sink config
 */
export type v1TenantUidAssetsDataSinksUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidAssetsDataSinksUpdateResponseComposite =
  v1TenantUidAssetsDataSinksUpdateResponse204;

export type v1TenantUidAssetsDataSinksUpdateResponse =
  v1TenantUidAssetsDataSinksUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksUpdate = async (
  tenantUid: string,
  v1DataSinkConfigBody: V1DataSinkConfigBody,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksUpdateResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1DataSinkConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksUpdateResponse;
};

/**
 * @summary Get tenant auth token settings
 */
export type tenantUidAuthTokenSettingsGetResponse200 = {
  data: AuthTokenSettings;
  status: 200;
};

export type tenantUidAuthTokenSettingsGetResponseComposite =
  tenantUidAuthTokenSettingsGetResponse200;

export type tenantUidAuthTokenSettingsGetResponse =
  tenantUidAuthTokenSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getTenantUidAuthTokenSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/authTokenSettings`;
};

export const tenantUidAuthTokenSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantUidAuthTokenSettingsGetResponse> => {
  const res = await fetch(getTenantUidAuthTokenSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantUidAuthTokenSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantUidAuthTokenSettingsGetResponse;
};

/**
 * @summary Update tenant auth token settings
 */
export type tenantUidAuthTokenSettingsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tenantUidAuthTokenSettingsUpdateResponseComposite =
  tenantUidAuthTokenSettingsUpdateResponse204;

export type tenantUidAuthTokenSettingsUpdateResponse =
  tenantUidAuthTokenSettingsUpdateResponseComposite & {
    headers: Headers;
  };

export const getTenantUidAuthTokenSettingsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/authTokenSettings`;
};

export const tenantUidAuthTokenSettingsUpdate = async (
  tenantUid: string,
  authTokenSettings: AuthTokenSettings,
  options?: RequestInit,
): Promise<tenantUidAuthTokenSettingsUpdateResponse> => {
  const res = await fetch(getTenantUidAuthTokenSettingsUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(authTokenSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantUidAuthTokenSettingsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantUidAuthTokenSettingsUpdateResponse;
};

/**
 * @summary Tenant to accept the contract agreement
 */
export type tenantsUidContractAcceptResponse204 = {
  data: void;
  status: 204;
};

export type tenantsUidContractAcceptResponseComposite =
  tenantsUidContractAcceptResponse204;

export type tenantsUidContractAcceptResponse =
  tenantsUidContractAcceptResponseComposite & {
    headers: Headers;
  };

export const getTenantsUidContractAcceptUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/contract/accept`;
};

export const tenantsUidContractAccept = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantsUidContractAcceptResponse> => {
  const res = await fetch(getTenantsUidContractAcceptUrl(tenantUid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsUidContractAcceptResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsUidContractAcceptResponse;
};

/**
 * @summary Deletes the aws credit account for tenants
 */
export type tenantsCreditAccountDeleteResponse204 = {
  data: void;
  status: 204;
};

export type tenantsCreditAccountDeleteResponseComposite =
  tenantsCreditAccountDeleteResponse204;

export type tenantsCreditAccountDeleteResponse =
  tenantsCreditAccountDeleteResponseComposite & {
    headers: Headers;
  };

export const getTenantsCreditAccountDeleteUrl = (
  tenantUid: string,
  params?: TenantsCreditAccountDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws`;
};

export const tenantsCreditAccountDelete = async (
  tenantUid: string,
  params?: TenantsCreditAccountDeleteParams,
  options?: RequestInit,
): Promise<tenantsCreditAccountDeleteResponse> => {
  const res = await fetch(getTenantsCreditAccountDeleteUrl(tenantUid, params), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsCreditAccountDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsCreditAccountDeleteResponse;
};

/**
 * @summary Get the credit accounts for the tenants with free tier access
 */
export type tenantsCreditAccountGetResponse200 = {
  data: AwsCreditAccountEntity;
  status: 200;
};

export type tenantsCreditAccountGetResponseComposite =
  tenantsCreditAccountGetResponse200;

export type tenantsCreditAccountGetResponse =
  tenantsCreditAccountGetResponseComposite & {
    headers: Headers;
  };

export const getTenantsCreditAccountGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws`;
};

export const tenantsCreditAccountGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantsCreditAccountGetResponse> => {
  const res = await fetch(getTenantsCreditAccountGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsCreditAccountGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsCreditAccountGetResponse;
};

/**
 * @summary retrieves the domains for tenant
 */
export type v1TenantUidDomainsGetResponse200 = {
  data: TenantDomains;
  status: 200;
};

export type v1TenantUidDomainsGetResponseComposite =
  v1TenantUidDomainsGetResponse200;

export type v1TenantUidDomainsGetResponse =
  v1TenantUidDomainsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidDomainsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/domains`;
};

export const v1TenantUidDomainsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidDomainsGetResponse> => {
  const res = await fetch(getV1TenantUidDomainsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidDomainsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidDomainsGetResponse;
};

/**
 * @summary creates or updates domains for tenant
 */
export type v1TenantUidDomainsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidDomainsUpdateResponseComposite =
  v1TenantUidDomainsUpdateResponse204;

export type v1TenantUidDomainsUpdateResponse =
  v1TenantUidDomainsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidDomainsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/domains`;
};

export const v1TenantUidDomainsUpdate = async (
  tenantUid: string,
  tenantDomains: TenantDomains,
  options?: RequestInit,
): Promise<v1TenantUidDomainsUpdateResponse> => {
  const res = await fetch(getV1TenantUidDomainsUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantDomains),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidDomainsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidDomainsUpdateResponse;
};

/**
 * @summary Update tenant emailId
 */
export type patchTenantEmailIdResponse204 = {
  data: void;
  status: 204;
};

export type patchTenantEmailIdResponseComposite = patchTenantEmailIdResponse204;

export type patchTenantEmailIdResponse = patchTenantEmailIdResponseComposite & {
  headers: Headers;
};

export const getPatchTenantEmailIdUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/emailId`;
};

export const patchTenantEmailId = async (
  tenantUid: string,
  tenantEmailPatch: TenantEmailPatch,
  options?: RequestInit,
): Promise<patchTenantEmailIdResponse> => {
  const res = await fetch(getPatchTenantEmailIdUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantEmailPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: patchTenantEmailIdResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as patchTenantEmailIdResponse;
};

/**
 * @summary Get tenant level freemium configuration
 */
export type tenantFreemiumGetResponse200 = {
  data: TenantFreemium;
  status: 200;
};

export type tenantFreemiumGetResponseComposite = tenantFreemiumGetResponse200;

export type tenantFreemiumGetResponse = tenantFreemiumGetResponseComposite & {
  headers: Headers;
};

export const getTenantFreemiumGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemium`;
};

export const tenantFreemiumGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantFreemiumGetResponse> => {
  const res = await fetch(getTenantFreemiumGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantFreemiumGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantFreemiumGetResponse;
};

/**
 * @summary Update tenant freemium configuration
 */
export type tenantFreemiumUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tenantFreemiumUpdateResponseComposite =
  tenantFreemiumUpdateResponse204;

export type tenantFreemiumUpdateResponse =
  tenantFreemiumUpdateResponseComposite & {
    headers: Headers;
  };

export const getTenantFreemiumUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemium`;
};

export const tenantFreemiumUpdate = async (
  tenantUid: string,
  tenantFreemium: TenantFreemium,
  options?: RequestInit,
): Promise<tenantFreemiumUpdateResponse> => {
  const res = await fetch(getTenantFreemiumUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantFreemium),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantFreemiumUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantFreemiumUpdateResponse;
};

/**
 * @summary Get tenant freemium usage
 */
export type tenantFreemiumUsageGetResponse200 = {
  data: TenantFreemiumUsage;
  status: 200;
};

export type tenantFreemiumUsageGetResponseComposite =
  tenantFreemiumUsageGetResponse200;

export type tenantFreemiumUsageGetResponse =
  tenantFreemiumUsageGetResponseComposite & {
    headers: Headers;
  };

export const getTenantFreemiumUsageGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemiumUsage`;
};

export const tenantFreemiumUsageGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantFreemiumUsageGetResponse> => {
  const res = await fetch(getTenantFreemiumUsageGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantFreemiumUsageGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantFreemiumUsageGetResponse;
};

/**
 * @summary Returns a specified invoice
 */
export type invoicesUidGetResponse200 = {
  data: Invoice;
  status: 200;
};

export type invoicesUidGetResponseComposite = invoicesUidGetResponse200;

export type invoicesUidGetResponse = invoicesUidGetResponseComposite & {
  headers: Headers;
};

export const getInvoicesUidGetUrl = (tenantUid: string, invoiceUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}`;
};

export const invoicesUidGet = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<invoicesUidGetResponse> => {
  const res = await fetch(getInvoicesUidGetUrl(tenantUid, invoiceUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: invoicesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as invoicesUidGetResponse;
};

/**
 * @summary Downloads the specified invoice report
 */
export type v1InvoiceUidReportInvoicePdfResponse200 = {
  data: Blob;
  status: 200;
};

export type v1InvoiceUidReportInvoicePdfResponseComposite =
  v1InvoiceUidReportInvoicePdfResponse200;

export type v1InvoiceUidReportInvoicePdfResponse =
  v1InvoiceUidReportInvoicePdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportInvoicePdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/invoice/pdf`;
};

export const v1InvoiceUidReportInvoicePdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<v1InvoiceUidReportInvoicePdfResponse> => {
  const res = await fetch(
    getV1InvoiceUidReportInvoicePdfUrl(tenantUid, invoiceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1InvoiceUidReportInvoicePdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1InvoiceUidReportInvoicePdfResponse;
};

/**
 * @summary Downloads the specified monthly invoice report
 */
export type v1InvoiceUidReportPdfResponse200 = {
  data: Blob;
  status: 200;
};

export type v1InvoiceUidReportPdfResponseComposite =
  v1InvoiceUidReportPdfResponse200;

export type v1InvoiceUidReportPdfResponse =
  v1InvoiceUidReportPdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportPdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/pdf`;
};

export const v1InvoiceUidReportPdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<v1InvoiceUidReportPdfResponse> => {
  const res = await fetch(getV1InvoiceUidReportPdfUrl(tenantUid, invoiceUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1InvoiceUidReportPdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1InvoiceUidReportPdfResponse;
};

/**
 * @summary Downloads the specified tenant usage
 */
export type v1InvoiceUidReportUsagePdfResponse200 = {
  data: Blob;
  status: 200;
};

export type v1InvoiceUidReportUsagePdfResponseComposite =
  v1InvoiceUidReportUsagePdfResponse200;

export type v1InvoiceUidReportUsagePdfResponse =
  v1InvoiceUidReportUsagePdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportUsagePdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/usage/pdf`;
};

export const v1InvoiceUidReportUsagePdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<v1InvoiceUidReportUsagePdfResponse> => {
  const res = await fetch(
    getV1InvoiceUidReportUsagePdfUrl(tenantUid, invoiceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1InvoiceUidReportUsagePdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1InvoiceUidReportUsagePdfResponse;
};

/**
 * @summary Get tenant login banner settings
 */
export type tenantUidLoginBannerGetResponse200 = {
  data: LoginBannerSettings;
  status: 200;
};

export type tenantUidLoginBannerGetResponseComposite =
  tenantUidLoginBannerGetResponse200;

export type tenantUidLoginBannerGetResponse =
  tenantUidLoginBannerGetResponseComposite & {
    headers: Headers;
  };

export const getTenantUidLoginBannerGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/loginBanner`;
};

export const tenantUidLoginBannerGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantUidLoginBannerGetResponse> => {
  const res = await fetch(getTenantUidLoginBannerGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantUidLoginBannerGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantUidLoginBannerGetResponse;
};

/**
 * @summary Update tenant login banner settings
 */
export type tenantUidLoginBannerUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tenantUidLoginBannerUpdateResponseComposite =
  tenantUidLoginBannerUpdateResponse204;

export type tenantUidLoginBannerUpdateResponse =
  tenantUidLoginBannerUpdateResponseComposite & {
    headers: Headers;
  };

export const getTenantUidLoginBannerUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/loginBanner`;
};

export const tenantUidLoginBannerUpdate = async (
  tenantUid: string,
  loginBannerSettings: LoginBannerSettings,
  options?: RequestInit,
): Promise<tenantUidLoginBannerUpdateResponse> => {
  const res = await fetch(getTenantUidLoginBannerUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginBannerSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantUidLoginBannerUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantUidLoginBannerUpdateResponse;
};

/**
 * @summary Delete the macros for the specified tenant by given macro name
 */
export type tenantsUidMacrosDeleteByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type tenantsUidMacrosDeleteByMacroNameResponseComposite =
  tenantsUidMacrosDeleteByMacroNameResponse204;

export type tenantsUidMacrosDeleteByMacroNameResponse =
  tenantsUidMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getTenantsUidMacrosDeleteByMacroNameUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const tenantsUidMacrosDeleteByMacroName = async (
  tenantUid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<tenantsUidMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(getTenantsUidMacrosDeleteByMacroNameUrl(tenantUid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsUidMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsUidMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the specified tenant
 */
export type tenantsUidMacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type tenantsUidMacrosListResponseComposite =
  tenantsUidMacrosListResponse200;

export type tenantsUidMacrosListResponse =
  tenantsUidMacrosListResponseComposite & {
    headers: Headers;
  };

export const getTenantsUidMacrosListUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const tenantsUidMacrosList = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantsUidMacrosListResponse> => {
  const res = await fetch(getTenantsUidMacrosListUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsUidMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsUidMacrosListResponse;
};

/**
 * @summary Update the macros for the specified tenant by given macro name
 */
export type tenantsUidMacrosUpdateByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type tenantsUidMacrosUpdateByMacroNameResponseComposite =
  tenantsUidMacrosUpdateByMacroNameResponse204;

export type tenantsUidMacrosUpdateByMacroNameResponse =
  tenantsUidMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getTenantsUidMacrosUpdateByMacroNameUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const tenantsUidMacrosUpdateByMacroName = async (
  tenantUid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<tenantsUidMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(getTenantsUidMacrosUpdateByMacroNameUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsUidMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsUidMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the specified tenant
 */
export type tenantsUidMacrosCreateResponse204 = {
  data: void;
  status: 204;
};

export type tenantsUidMacrosCreateResponseComposite =
  tenantsUidMacrosCreateResponse204;

export type tenantsUidMacrosCreateResponse =
  tenantsUidMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getTenantsUidMacrosCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const tenantsUidMacrosCreate = async (
  tenantUid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<tenantsUidMacrosCreateResponse> => {
  const res = await fetch(getTenantsUidMacrosCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsUidMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsUidMacrosCreateResponse;
};

/**
 * @summary Update the macros of the specified tenant
 */
export type tenantsUidMacrosUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tenantsUidMacrosUpdateResponseComposite =
  tenantsUidMacrosUpdateResponse204;

export type tenantsUidMacrosUpdateResponse =
  tenantsUidMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getTenantsUidMacrosUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const tenantsUidMacrosUpdate = async (
  tenantUid: string,
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<tenantsUidMacrosUpdateResponse> => {
  const res = await fetch(getTenantsUidMacrosUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantsUidMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantsUidMacrosUpdateResponse;
};

/**
 * @summary Returns the oidc Spec for tenant
 */
export type v1TenantUidOidcConfigGetResponse200 = {
  data: TenantOidcClientSpec;
  status: 200;
};

export type v1TenantUidOidcConfigGetResponseComposite =
  v1TenantUidOidcConfigGetResponse200;

export type v1TenantUidOidcConfigGetResponse =
  v1TenantUidOidcConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidOidcConfigGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/oidc/config`;
};

export const v1TenantUidOidcConfigGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidOidcConfigGetResponse> => {
  const res = await fetch(getV1TenantUidOidcConfigGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidOidcConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidOidcConfigGetResponse;
};

/**
 * @summary Associates the  oidc Spec for the tenant
 */
export type v1TenantUidOidcConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidOidcConfigUpdateResponseComposite =
  v1TenantUidOidcConfigUpdateResponse204;

export type v1TenantUidOidcConfigUpdateResponse =
  v1TenantUidOidcConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidOidcConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/oidc/config`;
};

export const v1TenantUidOidcConfigUpdate = async (
  tenantUid: string,
  tenantOidcClientSpec: TenantOidcClientSpec,
  options?: RequestInit,
): Promise<v1TenantUidOidcConfigUpdateResponse> => {
  const res = await fetch(getV1TenantUidOidcConfigUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantOidcClientSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidOidcConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidOidcConfigUpdateResponse;
};

/**
 * @summary retrieves the password policy for tenant
 */
export type v1TenantUidPasswordPolicyGetResponse200 = {
  data: TenantPasswordPolicyEntity;
  status: 200;
};

export type v1TenantUidPasswordPolicyGetResponseComposite =
  v1TenantUidPasswordPolicyGetResponse200;

export type v1TenantUidPasswordPolicyGetResponse =
  v1TenantUidPasswordPolicyGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidPasswordPolicyGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/password/policy`;
};

export const v1TenantUidPasswordPolicyGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidPasswordPolicyGetResponse> => {
  const res = await fetch(getV1TenantUidPasswordPolicyGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidPasswordPolicyGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidPasswordPolicyGetResponse;
};

/**
 * @summary creates or updates a password policy for tenant
 */
export type v1TenantUidPasswordPolicyUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidPasswordPolicyUpdateResponseComposite =
  v1TenantUidPasswordPolicyUpdateResponse204;

export type v1TenantUidPasswordPolicyUpdateResponse =
  v1TenantUidPasswordPolicyUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidPasswordPolicyUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/password/policy`;
};

export const v1TenantUidPasswordPolicyUpdate = async (
  tenantUid: string,
  tenantPasswordPolicyEntity: TenantPasswordPolicyEntity,
  options?: RequestInit,
): Promise<v1TenantUidPasswordPolicyUpdateResponse> => {
  const res = await fetch(getV1TenantUidPasswordPolicyUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantPasswordPolicyEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidPasswordPolicyUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidPasswordPolicyUpdateResponse;
};

/**
 * @summary Get is cluster group enabled for a specific tenant
 */
export type v1TenantPrefClusterGroupGetResponse200 = {
  data: TenantEnableClusterGroup;
  status: 200;
};

export type v1TenantPrefClusterGroupGetResponseComposite =
  v1TenantPrefClusterGroupGetResponse200;

export type v1TenantPrefClusterGroupGetResponse =
  v1TenantPrefClusterGroupGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantPrefClusterGroupGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterGroup`;
};

export const v1TenantPrefClusterGroupGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantPrefClusterGroupGetResponse> => {
  const res = await fetch(getV1TenantPrefClusterGroupGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantPrefClusterGroupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantPrefClusterGroupGetResponse;
};

/**
 * @summary Enable or Disable cluster group for a specific tenant
 */
export type v1TenantPrefClusterGroupUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantPrefClusterGroupUpdateResponseComposite =
  v1TenantPrefClusterGroupUpdateResponse204;

export type v1TenantPrefClusterGroupUpdateResponse =
  v1TenantPrefClusterGroupUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantPrefClusterGroupUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterGroup`;
};

export const v1TenantPrefClusterGroupUpdate = async (
  tenantUid: string,
  tenantEnableClusterGroup: TenantEnableClusterGroup,
  options?: RequestInit,
): Promise<v1TenantPrefClusterGroupUpdateResponse> => {
  const res = await fetch(getV1TenantPrefClusterGroupUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantEnableClusterGroup),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantPrefClusterGroupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantPrefClusterGroupUpdateResponse;
};

/**
 * @summary Get tenant cluster settings
 */
export type tenantClusterSettingsGetResponse200 = {
  data: TenantClusterSettings;
  status: 200;
};

export type tenantClusterSettingsGetResponseComposite =
  tenantClusterSettingsGetResponse200;

export type tenantClusterSettingsGetResponse =
  tenantClusterSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getTenantClusterSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterSettings`;
};

export const tenantClusterSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantClusterSettingsGetResponse> => {
  const res = await fetch(getTenantClusterSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantClusterSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantClusterSettingsGetResponse;
};

/**
 * @summary Update tenant clusters nodes auto remediation setting
 */
export type tenantClustersNodesAutoRemediationSettingUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tenantClustersNodesAutoRemediationSettingUpdateResponseComposite =
  tenantClustersNodesAutoRemediationSettingUpdateResponse204;

export type tenantClustersNodesAutoRemediationSettingUpdateResponse =
  tenantClustersNodesAutoRemediationSettingUpdateResponseComposite & {
    headers: Headers;
  };

export const getTenantClustersNodesAutoRemediationSettingUpdateUrl = (
  tenantUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterSettings/nodesAutoRemediationSetting`;
};

export const tenantClustersNodesAutoRemediationSettingUpdate = async (
  tenantUid: string,
  v1NodesAutoRemediationSettingsBody: V1NodesAutoRemediationSettingsBody,
  options?: RequestInit,
): Promise<tenantClustersNodesAutoRemediationSettingUpdateResponse> => {
  const res = await fetch(
    getTenantClustersNodesAutoRemediationSettingUpdateUrl(tenantUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1NodesAutoRemediationSettingsBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantClustersNodesAutoRemediationSettingUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantClustersNodesAutoRemediationSettingUpdateResponse;
};

/**
 * @summary Get developer credit enabled for a specific tenant
 */
export type v1TenantDeveloperCreditGetResponse200 = {
  data: DeveloperCredit;
  status: 200;
};

export type v1TenantDeveloperCreditGetResponseComposite =
  v1TenantDeveloperCreditGetResponse200;

export type v1TenantDeveloperCreditGetResponse =
  v1TenantDeveloperCreditGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantDeveloperCreditGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/developerCredit`;
};

export const v1TenantDeveloperCreditGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantDeveloperCreditGetResponse> => {
  const res = await fetch(getV1TenantDeveloperCreditGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantDeveloperCreditGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantDeveloperCreditGetResponse;
};

/**
 * @summary update developer credit for a specific tenant
 */
export type v1TenantDeveloperCreditUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantDeveloperCreditUpdateResponseComposite =
  v1TenantDeveloperCreditUpdateResponse204;

export type v1TenantDeveloperCreditUpdateResponse =
  v1TenantDeveloperCreditUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantDeveloperCreditUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/developerCredit`;
};

export const v1TenantDeveloperCreditUpdate = async (
  tenantUid: string,
  developerCredit: DeveloperCredit,
  options?: RequestInit,
): Promise<v1TenantDeveloperCreditUpdateResponse> => {
  const res = await fetch(getV1TenantDeveloperCreditUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(developerCredit),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantDeveloperCreditUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantDeveloperCreditUpdateResponse;
};

/**
 * @summary Get tenant fips settings
 */
export type tenantFipsSettingsGetResponse200 = {
  data: FipsSettings;
  status: 200;
};

export type tenantFipsSettingsGetResponseComposite =
  tenantFipsSettingsGetResponse200;

export type tenantFipsSettingsGetResponse =
  tenantFipsSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getTenantFipsSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/fips`;
};

export const tenantFipsSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantFipsSettingsGetResponse> => {
  const res = await fetch(getTenantFipsSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantFipsSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantFipsSettingsGetResponse;
};

/**
 * @summary Update tenant fips setting
 */
export type tenantFipsSettingsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tenantFipsSettingsUpdateResponseComposite =
  tenantFipsSettingsUpdateResponse204;

export type tenantFipsSettingsUpdateResponse =
  tenantFipsSettingsUpdateResponseComposite & {
    headers: Headers;
  };

export const getTenantFipsSettingsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/fips`;
};

export const tenantFipsSettingsUpdate = async (
  tenantUid: string,
  fipsSettings: FipsSettings,
  options?: RequestInit,
): Promise<tenantFipsSettingsUpdateResponse> => {
  const res = await fetch(getTenantFipsSettingsUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(fipsSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantFipsSettingsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantFipsSettingsUpdateResponse;
};

/**
 * @summary Get all rate config for public and private cloud
 */
export type rateConfigGetResponse200 = {
  data: RateConfig;
  status: 200;
};

export type rateConfigGetResponseComposite = rateConfigGetResponse200;

export type rateConfigGetResponse = rateConfigGetResponseComposite & {
  headers: Headers;
};

export const getRateConfigGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/rateConfig`;
};

export const rateConfigGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<rateConfigGetResponse> => {
  const res = await fetch(getRateConfigGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rateConfigGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rateConfigGetResponse;
};

/**
 * @summary updates the rate config for public and private cloud
 */
export type rateConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type rateConfigUpdateResponseComposite = rateConfigUpdateResponse204;

export type rateConfigUpdateResponse = rateConfigUpdateResponseComposite & {
  headers: Headers;
};

export const getRateConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/rateConfig`;
};

export const rateConfigUpdate = async (
  tenantUid: string,
  rateConfig: RateConfig,
  options?: RequestInit,
): Promise<rateConfigUpdateResponse> => {
  const res = await fetch(getRateConfigUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(rateConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rateConfigUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rateConfigUpdateResponse;
};

/**
 * @summary Get tenant level resource limits configuration
 */
export type tenantResourceLimitsGetResponse200 = {
  data: TenantResourceLimits;
  status: 200;
};

export type tenantResourceLimitsGetResponseComposite =
  tenantResourceLimitsGetResponse200;

export type tenantResourceLimitsGetResponse =
  tenantResourceLimitsGetResponseComposite & {
    headers: Headers;
  };

export const getTenantResourceLimitsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/resourceLimits`;
};

export const tenantResourceLimitsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<tenantResourceLimitsGetResponse> => {
  const res = await fetch(getTenantResourceLimitsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantResourceLimitsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantResourceLimitsGetResponse;
};

/**
 * @summary Update tenant resource limits configuration
 */
export type tenantResourceLimitsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tenantResourceLimitsUpdateResponseComposite =
  tenantResourceLimitsUpdateResponse204;

export type tenantResourceLimitsUpdateResponse =
  tenantResourceLimitsUpdateResponseComposite & {
    headers: Headers;
  };

export const getTenantResourceLimitsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/resourceLimits`;
};

export const tenantResourceLimitsUpdate = async (
  tenantUid: string,
  tenantResourceLimitsEntity: TenantResourceLimitsEntity,
  options?: RequestInit,
): Promise<tenantResourceLimitsUpdateResponse> => {
  const res = await fetch(getTenantResourceLimitsUpdateUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantResourceLimitsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tenantResourceLimitsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tenantResourceLimitsUpdateResponse;
};

/**
 * @summary Returns the specified service provider metadata and Saml Spec for tenant
 */
export type v1TenantUidSamlConfigSpecGetResponse200 = {
  data: TenantSamlSpec;
  status: 200;
};

export type v1TenantUidSamlConfigSpecGetResponseComposite =
  v1TenantUidSamlConfigSpecGetResponse200;

export type v1TenantUidSamlConfigSpecGetResponse =
  v1TenantUidSamlConfigSpecGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSamlConfigSpecGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/saml/config`;
};

export const v1TenantUidSamlConfigSpecGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidSamlConfigSpecGetResponse> => {
  const res = await fetch(getV1TenantUidSamlConfigSpecGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSamlConfigSpecGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSamlConfigSpecGetResponse;
};

/**
 * @summary Associates the specified federation metadata for the tenant
 */
export type v1TenantUidSamlConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidSamlConfigUpdateResponseComposite =
  v1TenantUidSamlConfigUpdateResponse204;

export type v1TenantUidSamlConfigUpdateResponse =
  v1TenantUidSamlConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSamlConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/saml/config`;
};

export const v1TenantUidSamlConfigUpdate = async (
  tenantUid: string,
  tenantSamlRequestSpec: TenantSamlRequestSpec,
  options?: RequestInit,
): Promise<v1TenantUidSamlConfigUpdateResponse> => {
  const res = await fetch(getV1TenantUidSamlConfigUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantSamlRequestSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSamlConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSamlConfigUpdateResponse;
};

/**
 * @summary get sso logins for the tenants
 */
export type v1TenantUidSsoAuthProvidersGetResponse200 = {
  data: TenantSsoAuthProvidersEntity;
  status: 200;
};

export type v1TenantUidSsoAuthProvidersGetResponseComposite =
  v1TenantUidSsoAuthProvidersGetResponse200;

export type v1TenantUidSsoAuthProvidersGetResponse =
  v1TenantUidSsoAuthProvidersGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSsoAuthProvidersGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/sso/auth/providers`;
};

export const v1TenantUidSsoAuthProvidersGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidSsoAuthProvidersGetResponse> => {
  const res = await fetch(getV1TenantUidSsoAuthProvidersGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSsoAuthProvidersGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSsoAuthProvidersGetResponse;
};

/**
 * @summary enable sso logins for the tenants
 */
export type v1TenantUidSsoAuthProvidersUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TenantUidSsoAuthProvidersUpdateResponseComposite =
  v1TenantUidSsoAuthProvidersUpdateResponse204;

export type v1TenantUidSsoAuthProvidersUpdateResponse =
  v1TenantUidSsoAuthProvidersUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSsoAuthProvidersUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/sso/auth/providers`;
};

export const v1TenantUidSsoAuthProvidersUpdate = async (
  tenantUid: string,
  tenantSsoAuthProvidersEntity: TenantSsoAuthProvidersEntity,
  options?: RequestInit,
): Promise<v1TenantUidSsoAuthProvidersUpdateResponse> => {
  const res = await fetch(getV1TenantUidSsoAuthProvidersUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenantSsoAuthProvidersEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSsoAuthProvidersUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSsoAuthProvidersUpdateResponse;
};
