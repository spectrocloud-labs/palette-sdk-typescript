/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  BulkEvents,
  Event,
  Events,
  EventsComponentsListParams,
  EventsComponentsObjTypeUidListParams,
  Uid,
  Uids,
} from ".././schemas";

/**
 * Returns a paginated list of component events based on request parameters
 * @summary Returns a paginated list of component events based on request parameters
 */
export type eventsComponentsListResponse200 = {
  data: Events;
  status: 200;
};

export type eventsComponentsListResponseComposite =
  eventsComponentsListResponse200;

export type eventsComponentsListResponse =
  eventsComponentsListResponseComposite & {
    headers: Headers;
  };

export const getEventsComponentsListUrl = (
  params?: EventsComponentsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/events/components?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/events/components`;
};

export const eventsComponentsList = async (
  params?: EventsComponentsListParams,
  options?: RequestInit,
): Promise<eventsComponentsListResponse> => {
  const res = await fetch(getEventsComponentsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: eventsComponentsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as eventsComponentsListResponse;
};

/**
 * Creates a component event
 * @summary Creates a component event
 */
export type eventsComponentsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type eventsComponentsCreateResponseComposite =
  eventsComponentsCreateResponse201;

export type eventsComponentsCreateResponse =
  eventsComponentsCreateResponseComposite & {
    headers: Headers;
  };

export const getEventsComponentsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/events/components`;
};

export const eventsComponentsCreate = async (
  event: Event,
  options?: RequestInit,
): Promise<eventsComponentsCreateResponse> => {
  const res = await fetch(getEventsComponentsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(event),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: eventsComponentsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as eventsComponentsCreateResponse;
};

/**
 * Creates the component events in bulk
 * @summary Creates the component events in bulk
 */
export type eventsComponentsCreateBulkResponse201 = {
  data: Uids;
  status: 201;
};

export type eventsComponentsCreateBulkResponseComposite =
  eventsComponentsCreateBulkResponse201;

export type eventsComponentsCreateBulkResponse =
  eventsComponentsCreateBulkResponseComposite & {
    headers: Headers;
  };

export const getEventsComponentsCreateBulkUrl = () => {
  return `https://api.spectrocloud.com/v1/events/components/bulk`;
};

export const eventsComponentsCreateBulk = async (
  bulkEvents: BulkEvents,
  options?: RequestInit,
): Promise<eventsComponentsCreateBulkResponse> => {
  const res = await fetch(getEventsComponentsCreateBulkUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(bulkEvents),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: eventsComponentsCreateBulkResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as eventsComponentsCreateBulkResponse;
};

/**
 * @summary Delete all the components events for the specified related object
 */
export type eventsComponentsObjTypeUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type eventsComponentsObjTypeUidDeleteResponseComposite =
  eventsComponentsObjTypeUidDeleteResponse204;

export type eventsComponentsObjTypeUidDeleteResponse =
  eventsComponentsObjTypeUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getEventsComponentsObjTypeUidDeleteUrl = (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
) => {
  return `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}`;
};

export const eventsComponentsObjTypeUidDelete = async (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  options?: RequestInit,
): Promise<eventsComponentsObjTypeUidDeleteResponse> => {
  const res = await fetch(
    getEventsComponentsObjTypeUidDeleteUrl(objectKind, objectUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: eventsComponentsObjTypeUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as eventsComponentsObjTypeUidDeleteResponse;
};

/**
 * Returns a list of components events for the specified related object
 * @summary Returns a list of components events for the specified related object
 */
export type eventsComponentsObjTypeUidListResponse200 = {
  data: Events;
  status: 200;
};

export type eventsComponentsObjTypeUidListResponseComposite =
  eventsComponentsObjTypeUidListResponse200;

export type eventsComponentsObjTypeUidListResponse =
  eventsComponentsObjTypeUidListResponseComposite & {
    headers: Headers;
  };

export const getEventsComponentsObjTypeUidListUrl = (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  params?: EventsComponentsObjTypeUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}`;
};

export const eventsComponentsObjTypeUidList = async (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  params?: EventsComponentsObjTypeUidListParams,
  options?: RequestInit,
): Promise<eventsComponentsObjTypeUidListResponse> => {
  const res = await fetch(
    getEventsComponentsObjTypeUidListUrl(objectKind, objectUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: eventsComponentsObjTypeUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as eventsComponentsObjTypeUidListResponse;
};
