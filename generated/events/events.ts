/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  BulkEvents,
  Event,
  Events,
  EventsComponentsListParams,
  EventsComponentsObjTypeUidListParams,
  Uid,
  Uids,
} from ".././schemas";

/**
 * Returns a paginated list of component events based on request parameters
 * @summary Returns a paginated list of component events based on request parameters
 */
export type EventsComponentsListResponse200 = {
  data: Events;
  status: 200;
};

export type EventsComponentsListResponseComposite =
  EventsComponentsListResponse200;

export type EventsComponentsListResponse =
  EventsComponentsListResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsListUrl = (
  params?: EventsComponentsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/events/components?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/events/components`;
};

export const EventsComponentsList = async (
  params?: EventsComponentsListParams,
  options?: RequestInit,
): Promise<EventsComponentsListResponse> => {
  const res = await fetch(getV1EventsComponentsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EventsComponentsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EventsComponentsListResponse;
};

/**
 * Creates a component event
 * @summary Creates a component event
 */
export type EventsComponentsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type EventsComponentsCreateResponseComposite =
  EventsComponentsCreateResponse201;

export type EventsComponentsCreateResponse =
  EventsComponentsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/events/components`;
};

export const EventsComponentsCreate = async (
  Event: Event,
  options?: RequestInit,
): Promise<EventsComponentsCreateResponse> => {
  const res = await fetch(getV1EventsComponentsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(Event),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EventsComponentsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EventsComponentsCreateResponse;
};

/**
 * Creates the component events in bulk
 * @summary Creates the component events in bulk
 */
export type EventsComponentsCreateBulkResponse201 = {
  data: Uids;
  status: 201;
};

export type EventsComponentsCreateBulkResponseComposite =
  EventsComponentsCreateBulkResponse201;

export type EventsComponentsCreateBulkResponse =
  EventsComponentsCreateBulkResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsCreateBulkUrl = () => {
  return `https://api.spectrocloud.com/v1/events/components/bulk`;
};

export const EventsComponentsCreateBulk = async (
  BulkEvents: BulkEvents,
  options?: RequestInit,
): Promise<EventsComponentsCreateBulkResponse> => {
  const res = await fetch(getV1EventsComponentsCreateBulkUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(BulkEvents),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EventsComponentsCreateBulkResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EventsComponentsCreateBulkResponse;
};

/**
 * @summary Delete all the components events for the specified related object
 */
export type EventsComponentsObjTypeUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type EventsComponentsObjTypeUidDeleteResponseComposite =
  EventsComponentsObjTypeUidDeleteResponse204;

export type EventsComponentsObjTypeUidDeleteResponse =
  EventsComponentsObjTypeUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsObjTypeUidDeleteUrl = (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
) => {
  return `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}`;
};

export const EventsComponentsObjTypeUidDelete = async (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  options?: RequestInit,
): Promise<EventsComponentsObjTypeUidDeleteResponse> => {
  const res = await fetch(
    getV1EventsComponentsObjTypeUidDeleteUrl(objectKind, objectUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EventsComponentsObjTypeUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EventsComponentsObjTypeUidDeleteResponse;
};

/**
 * Returns a list of components events for the specified related object
 * @summary Returns a list of components events for the specified related object
 */
export type EventsComponentsObjTypeUidListResponse200 = {
  data: Events;
  status: 200;
};

export type EventsComponentsObjTypeUidListResponseComposite =
  EventsComponentsObjTypeUidListResponse200;

export type EventsComponentsObjTypeUidListResponse =
  EventsComponentsObjTypeUidListResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsObjTypeUidListUrl = (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  params?: EventsComponentsObjTypeUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}`;
};

export const EventsComponentsObjTypeUidList = async (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  params?: EventsComponentsObjTypeUidListParams,
  options?: RequestInit,
): Promise<EventsComponentsObjTypeUidListResponse> => {
  const res = await fetch(
    getV1EventsComponentsObjTypeUidListUrl(objectKind, objectUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EventsComponentsObjTypeUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EventsComponentsObjTypeUidListResponse;
};
