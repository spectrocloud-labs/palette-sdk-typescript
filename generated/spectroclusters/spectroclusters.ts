/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ApiEndpoint,
  ClusterBackup,
  ClusterBackupLocationType,
  ClusterComplianceOnDemandConfig,
  ClusterComplianceScan,
  ClusterComplianceScanLogs,
  ClusterCondition,
  ClusterDefinitionEntity,
  ClusterEdgeInstallerConfig,
  ClusterFeatureBackupGetParams,
  ClusterFeatureDriverLogDownloadParams,
  ClusterFeatureKubeBenchLogGetParams,
  ClusterFeatureKubeHunterLogGetParams,
  ClusterFeatureLogFetcherGetParams,
  ClusterFeatureLogFetcherLogDownloadParams,
  ClusterFeatureLogFetcherLogUpdateBody,
  ClusterFeatureLogFetcherLogUpdateParams,
  ClusterFeatureRestoreGetParams,
  ClusterFeatureSonobuoyLogGetParams,
  ClusterHelmCharts,
  ClusterHybridSettingsEntity,
  ClusterLogFetcher,
  ClusterLogFetcherRequest,
  ClusterManifests,
  ClusterMetaAttributeEntity,
  ClusterNamespaceResource,
  ClusterNamespaceResourceInputEntity,
  ClusterNamespaceResources,
  ClusterNamespaceResourcesUpdateEntity,
  ClusterNamespaces,
  ClusterNamespacesGetParams,
  ClusterNotificationUpdateEntity,
  ClusterRbac,
  ClusterRbacInputEntity,
  ClusterRbacResourcesUpdateEntity,
  ClusterRbacs,
  ClusterRefs,
  ClusterRestore,
  ClusterRestoreConfig,
  ClusterScanLogKubeBench,
  ClusterScanLogKubeHunter,
  ClusterScanLogSonobuoy,
  ClusterScanLogSyft,
  ClusterUpgradeSettingsEntity,
  ClusterVMSnapshotsListParams,
  ClusterVirtualMachine,
  ClusterVirtualMachineList,
  ClusterVirtualPacksValues,
  ControlPlaneHealthCheckTimeoutEntity,
  EdgeHostDevices,
  HostClusterConfigEntity,
  KubeBenchEntity,
  KubeHunterEntity,
  LifecycleConfigEntity,
  LoadBalancerService,
  MachineCertificates,
  Manifest,
  ManifestRefInputEntities,
  OsPatchEntity,
  PackManifests,
  SectroClusterK8sDashboardUrl,
  SonobuoyEntity,
  SpcApply,
  SpcPatchTimeEntity,
  SpectroAwsClusterImportEntity,
  SpectroAwsClusterRateEntity,
  SpectroAzureClusterImportEntity,
  SpectroCluster,
  SpectroClusterAssetEntity,
  SpectroClusterAssetFrpKubeConfig,
  SpectroClusterAssetKubeConfig,
  SpectroClusterAssetKubeConfigClient,
  SpectroClusterAssetManifest,
  SpectroClusterAssetTokenKubeConfig,
  SpectroClusterHeartbeat,
  SpectroClusterHybridPoolsMetadata,
  SpectroClusterK8sCertificate,
  SpectroClusterKubeCtlRedirect,
  SpectroClusterLocationInputEntity,
  SpectroClusterOidcSpec,
  SpectroClusterPackConfigList,
  SpectroClusterPackProperties,
  SpectroClusterProfileList,
  SpectroClusterProfileUpdates,
  SpectroClusterProfilesDeleteEntity,
  SpectroClusterProfilesPacksManifests,
  SpectroClusterProfilesResolvedValues,
  SpectroClusterRate,
  SpectroClusterRepave,
  SpectroClusterRepaveValidationResponse,
  SpectroClusterStatusEntity,
  SpectroClusterTags,
  SpectroClusterUidUpgrades,
  SpectroClusterVMCloneEntity,
  SpectroClusterValidatorResponse,
  SpectroClusterVariableUpdateEntity,
  SpectroClusterVariables,
  SpectroClustersAksRateParams,
  SpectroClustersAwsRateParams,
  SpectroClustersAzureRateParams,
  SpectroClustersDeleteParams,
  SpectroClustersEdgeNativeRateParams,
  SpectroClustersEksRateParams,
  SpectroClustersGcpRateParams,
  SpectroClustersGenericRateParams,
  SpectroClustersGetParams,
  SpectroClustersGetProfilesPacksManifestsParams,
  SpectroClustersGetProfilesParams,
  SpectroClustersGkeRateParams,
  SpectroClustersMaasRateParams,
  SpectroClustersOpenStackRateParams,
  SpectroClustersPacksRefUpdateParams,
  SpectroClustersPatchProfilesParams,
  SpectroClustersUidKubeConfigParams,
  SpectroClustersUidPackManifestsUidGetParams,
  SpectroClustersUidPackPropertiesParams,
  SpectroClustersUidRateParams,
  SpectroClustersUpdateProfilesParams,
  SpectroClustersVMAddVolumeParams,
  SpectroClustersVMCloneParams,
  SpectroClustersVMCreateParams,
  SpectroClustersVMDeleteParams,
  SpectroClustersVMGetParams,
  SpectroClustersVMListParams,
  SpectroClustersVMMigrateParams,
  SpectroClustersVMPauseParams,
  SpectroClustersVMRemoveVolumeParams,
  SpectroClustersVMRestartParams,
  SpectroClustersVMResumeParams,
  SpectroClustersVMStartParams,
  SpectroClustersVMStopParams,
  SpectroClustersVMUpdateParams,
  SpectroClustersValidateNameParams,
  SpectroClustersVsphereRateParams,
  SpectroEdgeNativeClusterImportEntity,
  SpectroEdgeNativeClusterRateEntity,
  SpectroEksClusterRateEntity,
  SpectroGcpClusterImportEntity,
  SpectroGenericClusterImportEntity,
  SpectroGenericClusterRateEntity,
  SpectroMaasClusterImportEntity,
  SpectroMaasClusterRateEntity,
  SpectroOpenStackClusterImportEntity,
  SpectroOpenStackClusterRateEntity,
  SpectroVsphereClusterImportEntity,
  SpectroVsphereClusterRateEntity,
  SyftEntity,
  SyftScanLogImageSBOMGetParams,
  Uid,
  V1ClusterBackupConfigBody,
  V1ClusterComplianceScheduleConfigBody,
  V1ClusterUpgradeSettingsEntityBody,
  V1ClusterVirtualMachineBody,
  V1ObjectMetaInputEntitySchemaBody,
  V1SpectroAwsClusterEntityBody,
  V1SpectroAzureClusterEntityBody,
  V1SpectroAzureClusterRateEntityBody,
  V1SpectroClusterPacksEntityBody,
  V1SpectroClusterPacksStatusEntityBody,
  V1SpectroClusterProfilesBody,
  V1SpectroCustomClusterEntityBody,
  V1SpectroEdgeNativeClusterEntityBody,
  V1SpectroEksClusterEntityBody,
  V1SpectroGcpClusterEntityBody,
  V1SpectroGcpClusterRateEntityBody,
  V1SpectroMaasClusterEntityBody,
  V1SpectroOpenStackClusterEntityBody,
  V1SpectroVirtualClusterEntityBody,
  V1SpectroVsphereClusterEntityBody,
  V1VirtualMachineSnapshotBody,
  VMAddVolumeEntity,
  VMRemoveVolumeEntity,
  VMSnapshotCreateParams,
  VMSnapshotDeleteParams,
  VMSnapshotGetParams,
  VMSnapshotUpdateParams,
  VirtualClustersPacksValuesParams,
  VirtualMachineSnapshot,
  VirtualMachineSnapshotList,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * @summary Creates an AKS cluster
 */
export type spectroClustersAksCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersAksCreateResponseComposite =
  spectroClustersAksCreateResponse201;

export type spectroClustersAksCreateResponse =
  spectroClustersAksCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAksCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aks`;
};

export const spectroClustersAksCreate = async (
  v1SpectroAzureClusterEntityBody: V1SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersAksCreateResponse> => {
  return customInstance<spectroClustersAksCreateResponse>(
    getSpectroClustersAksCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAzureClusterEntityBody),
    },
  );
};

/**
 * @summary Get AKS cluster estimated rate information
 */
export type spectroClustersAksRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersAksRateResponseComposite =
  spectroClustersAksRateResponse200;

export type spectroClustersAksRateResponse =
  spectroClustersAksRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAksRateUrl = (
  params?: SpectroClustersAksRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/aks/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/aks/rate`;
};

export const spectroClustersAksRate = async (
  v1SpectroAzureClusterRateEntityBody: V1SpectroAzureClusterRateEntityBody,
  params?: SpectroClustersAksRateParams,
  options?: RequestInit,
): Promise<spectroClustersAksRateResponse> => {
  return customInstance<spectroClustersAksRateResponse>(
    getSpectroClustersAksRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAzureClusterRateEntityBody),
    },
  );
};

/**
 * @summary Validates AKS cluster create operation
 */
export type spectroClustersAksValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersAksValidateResponseComposite =
  spectroClustersAksValidateResponse200;

export type spectroClustersAksValidateResponse =
  spectroClustersAksValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAksValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aks/validate`;
};

export const spectroClustersAksValidate = async (
  v1SpectroAzureClusterEntityBody: V1SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersAksValidateResponse> => {
  return customInstance<spectroClustersAksValidateResponse>(
    getSpectroClustersAksValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAzureClusterEntityBody),
    },
  );
};

/**
 * @summary Creates an AWS cluster
 */
export type spectroClustersAwsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersAwsCreateResponseComposite =
  spectroClustersAwsCreateResponse201;

export type spectroClustersAwsCreateResponse =
  spectroClustersAwsCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAwsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws`;
};

export const spectroClustersAwsCreate = async (
  v1SpectroAwsClusterEntityBody: V1SpectroAwsClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersAwsCreateResponse> => {
  return customInstance<spectroClustersAwsCreateResponse>(
    getSpectroClustersAwsCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAwsClusterEntityBody),
    },
  );
};

/**
 * @summary Imports an AWS cluster
 */
export type spectroClustersAwsImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersAwsImportResponseComposite =
  spectroClustersAwsImportResponse201;

export type spectroClustersAwsImportResponse =
  spectroClustersAwsImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAwsImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws/import`;
};

export const spectroClustersAwsImport = async (
  spectroAwsClusterImportEntity: SpectroAwsClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersAwsImportResponse> => {
  return customInstance<spectroClustersAwsImportResponse>(
    getSpectroClustersAwsImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroAwsClusterImportEntity),
    },
  );
};

/**
 * @summary Get AWS cluster estimated rate information
 */
export type spectroClustersAwsRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersAwsRateResponseComposite =
  spectroClustersAwsRateResponse200;

export type spectroClustersAwsRateResponse =
  spectroClustersAwsRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAwsRateUrl = (
  params?: SpectroClustersAwsRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/aws/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/aws/rate`;
};

export const spectroClustersAwsRate = async (
  spectroAwsClusterRateEntity: SpectroAwsClusterRateEntity,
  params?: SpectroClustersAwsRateParams,
  options?: RequestInit,
): Promise<spectroClustersAwsRateResponse> => {
  return customInstance<spectroClustersAwsRateResponse>(
    getSpectroClustersAwsRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroAwsClusterRateEntity),
    },
  );
};

/**
 * @summary Validates AWS cluster create operation
 */
export type spectroClustersAwsValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersAwsValidateResponseComposite =
  spectroClustersAwsValidateResponse200;

export type spectroClustersAwsValidateResponse =
  spectroClustersAwsValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAwsValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws/validate`;
};

export const spectroClustersAwsValidate = async (
  v1SpectroAwsClusterEntityBody: V1SpectroAwsClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersAwsValidateResponse> => {
  return customInstance<spectroClustersAwsValidateResponse>(
    getSpectroClustersAwsValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAwsClusterEntityBody),
    },
  );
};

/**
 * @summary Creates an Azure cluster
 */
export type spectroClustersAzureCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersAzureCreateResponseComposite =
  spectroClustersAzureCreateResponse201;

export type spectroClustersAzureCreateResponse =
  spectroClustersAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure`;
};

export const spectroClustersAzureCreate = async (
  v1SpectroAzureClusterEntityBody: V1SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersAzureCreateResponse> => {
  return customInstance<spectroClustersAzureCreateResponse>(
    getSpectroClustersAzureCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAzureClusterEntityBody),
    },
  );
};

/**
 * @summary Imports an Azure cluster
 */
export type spectroClustersAzureImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersAzureImportResponseComposite =
  spectroClustersAzureImportResponse201;

export type spectroClustersAzureImportResponse =
  spectroClustersAzureImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAzureImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure/import`;
};

export const spectroClustersAzureImport = async (
  spectroAzureClusterImportEntity: SpectroAzureClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersAzureImportResponse> => {
  return customInstance<spectroClustersAzureImportResponse>(
    getSpectroClustersAzureImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroAzureClusterImportEntity),
    },
  );
};

/**
 * @summary Get Azure cluster estimated rate information
 */
export type spectroClustersAzureRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersAzureRateResponseComposite =
  spectroClustersAzureRateResponse200;

export type spectroClustersAzureRateResponse =
  spectroClustersAzureRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAzureRateUrl = (
  params?: SpectroClustersAzureRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/azure/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/azure/rate`;
};

export const spectroClustersAzureRate = async (
  v1SpectroAzureClusterRateEntityBody: V1SpectroAzureClusterRateEntityBody,
  params?: SpectroClustersAzureRateParams,
  options?: RequestInit,
): Promise<spectroClustersAzureRateResponse> => {
  return customInstance<spectroClustersAzureRateResponse>(
    getSpectroClustersAzureRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAzureClusterRateEntityBody),
    },
  );
};

/**
 * @summary Validates Azure cluster create operation
 */
export type spectroClustersAzureValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersAzureValidateResponseComposite =
  spectroClustersAzureValidateResponse200;

export type spectroClustersAzureValidateResponse =
  spectroClustersAzureValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersAzureValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure/validate`;
};

export const spectroClustersAzureValidate = async (
  v1SpectroAzureClusterEntityBody: V1SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersAzureValidateResponse> => {
  return customInstance<spectroClustersAzureValidateResponse>(
    getSpectroClustersAzureValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroAzureClusterEntityBody),
    },
  );
};

/**
 * @summary Creates a Custom cluster
 */
export type spectroClustersCustomCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersCustomCreateResponseComposite =
  spectroClustersCustomCreateResponse201;

export type spectroClustersCustomCreateResponse =
  spectroClustersCustomCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersCustomCreateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/cloudTypes/${cloudType}`;
};

export const spectroClustersCustomCreate = async (
  cloudType: string,
  v1SpectroCustomClusterEntityBody: V1SpectroCustomClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersCustomCreateResponse> => {
  return customInstance<spectroClustersCustomCreateResponse>(
    getSpectroClustersCustomCreateUrl(cloudType),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroCustomClusterEntityBody),
    },
  );
};

/**
 * @summary Validates Custom cluster create operation
 */
export type spectroClustersCustomValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersCustomValidateResponseComposite =
  spectroClustersCustomValidateResponse200;

export type spectroClustersCustomValidateResponse =
  spectroClustersCustomValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersCustomValidateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/cloudTypes/${cloudType}/validate`;
};

export const spectroClustersCustomValidate = async (
  cloudType: string,
  v1SpectroCustomClusterEntityBody: V1SpectroCustomClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersCustomValidateResponse> => {
  return customInstance<spectroClustersCustomValidateResponse>(
    getSpectroClustersCustomValidateUrl(cloudType),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroCustomClusterEntityBody),
    },
  );
};

/**
 * @summary Cluster configuration for the edge installer
 */
export type spectroClustersConfigEdgeInstallerResponse200 = {
  data: ClusterEdgeInstallerConfig;
  status: 200;
};

export type spectroClustersConfigEdgeInstallerResponseComposite =
  spectroClustersConfigEdgeInstallerResponse200;

export type spectroClustersConfigEdgeInstallerResponse =
  spectroClustersConfigEdgeInstallerResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersConfigEdgeInstallerUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/config/edgeInstaller`;
};

export const spectroClustersConfigEdgeInstaller = async (
  options?: RequestInit,
): Promise<spectroClustersConfigEdgeInstallerResponse> => {
  return customInstance<spectroClustersConfigEdgeInstallerResponse>(
    getSpectroClustersConfigEdgeInstallerUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Creates an EdgeNative cluster
 */
export type spectroClustersEdgeNativeCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersEdgeNativeCreateResponseComposite =
  spectroClustersEdgeNativeCreateResponse201;

export type spectroClustersEdgeNativeCreateResponse =
  spectroClustersEdgeNativeCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersEdgeNativeCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native`;
};

export const spectroClustersEdgeNativeCreate = async (
  v1SpectroEdgeNativeClusterEntityBody: V1SpectroEdgeNativeClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersEdgeNativeCreateResponse> => {
  return customInstance<spectroClustersEdgeNativeCreateResponse>(
    getSpectroClustersEdgeNativeCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroEdgeNativeClusterEntityBody),
    },
  );
};

/**
 * @summary Imports an EdgeNative cluster
 */
export type spectroClustersEdgeNativeImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersEdgeNativeImportResponseComposite =
  spectroClustersEdgeNativeImportResponse201;

export type spectroClustersEdgeNativeImportResponse =
  spectroClustersEdgeNativeImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersEdgeNativeImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native/import`;
};

export const spectroClustersEdgeNativeImport = async (
  spectroEdgeNativeClusterImportEntity: SpectroEdgeNativeClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersEdgeNativeImportResponse> => {
  return customInstance<spectroClustersEdgeNativeImportResponse>(
    getSpectroClustersEdgeNativeImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroEdgeNativeClusterImportEntity),
    },
  );
};

/**
 * @summary Get edge-native cluster estimated rate information
 */
export type spectroClustersEdgeNativeRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersEdgeNativeRateResponseComposite =
  spectroClustersEdgeNativeRateResponse200;

export type spectroClustersEdgeNativeRateResponse =
  spectroClustersEdgeNativeRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersEdgeNativeRateUrl = (
  params?: SpectroClustersEdgeNativeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/edge-native/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/edge-native/rate`;
};

export const spectroClustersEdgeNativeRate = async (
  spectroEdgeNativeClusterRateEntity: SpectroEdgeNativeClusterRateEntity,
  params?: SpectroClustersEdgeNativeRateParams,
  options?: RequestInit,
): Promise<spectroClustersEdgeNativeRateResponse> => {
  return customInstance<spectroClustersEdgeNativeRateResponse>(
    getSpectroClustersEdgeNativeRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroEdgeNativeClusterRateEntity),
    },
  );
};

/**
 * @summary Validates edge-native cluster create operation
 */
export type spectroClustersEdgeNativeValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersEdgeNativeValidateResponseComposite =
  spectroClustersEdgeNativeValidateResponse200;

export type spectroClustersEdgeNativeValidateResponse =
  spectroClustersEdgeNativeValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersEdgeNativeValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native/validate`;
};

export const spectroClustersEdgeNativeValidate = async (
  v1SpectroEdgeNativeClusterEntityBody: V1SpectroEdgeNativeClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersEdgeNativeValidateResponse> => {
  return customInstance<spectroClustersEdgeNativeValidateResponse>(
    getSpectroClustersEdgeNativeValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroEdgeNativeClusterEntityBody),
    },
  );
};

/**
 * @summary Creates an EKS cluster
 */
export type spectroClustersEksCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersEksCreateResponseComposite =
  spectroClustersEksCreateResponse201;

export type spectroClustersEksCreateResponse =
  spectroClustersEksCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersEksCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/eks`;
};

export const spectroClustersEksCreate = async (
  v1SpectroEksClusterEntityBody: V1SpectroEksClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersEksCreateResponse> => {
  return customInstance<spectroClustersEksCreateResponse>(
    getSpectroClustersEksCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroEksClusterEntityBody),
    },
  );
};

/**
 * @summary Get EKS cluster estimated rate information
 */
export type spectroClustersEksRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersEksRateResponseComposite =
  spectroClustersEksRateResponse200;

export type spectroClustersEksRateResponse =
  spectroClustersEksRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersEksRateUrl = (
  params?: SpectroClustersEksRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/eks/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/eks/rate`;
};

export const spectroClustersEksRate = async (
  spectroEksClusterRateEntity: SpectroEksClusterRateEntity,
  params?: SpectroClustersEksRateParams,
  options?: RequestInit,
): Promise<spectroClustersEksRateResponse> => {
  return customInstance<spectroClustersEksRateResponse>(
    getSpectroClustersEksRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroEksClusterRateEntity),
    },
  );
};

/**
 * @summary Validates EKS cluster create operation
 */
export type spectroClustersEksValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersEksValidateResponseComposite =
  spectroClustersEksValidateResponse200;

export type spectroClustersEksValidateResponse =
  spectroClustersEksValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersEksValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/eks/validate`;
};

export const spectroClustersEksValidate = async (
  v1SpectroEksClusterEntityBody: V1SpectroEksClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersEksValidateResponse> => {
  return customInstance<spectroClustersEksValidateResponse>(
    getSpectroClustersEksValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroEksClusterEntityBody),
    },
  );
};

/**
 * @summary Returns the cluster object references based on locationUid
 */
export type v1ClusterFeatureBackupLocationUidGetResponse200 = {
  data: ClusterRefs;
  status: 200;
};

export type v1ClusterFeatureBackupLocationUidGetResponseComposite =
  v1ClusterFeatureBackupLocationUidGetResponse200;

export type v1ClusterFeatureBackupLocationUidGetResponse =
  v1ClusterFeatureBackupLocationUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupLocationUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/features/backup/locations/${uid}`;
};

export const v1ClusterFeatureBackupLocationUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupLocationUidGetResponse> => {
  return customInstance<v1ClusterFeatureBackupLocationUidGetResponse>(
    getV1ClusterFeatureBackupLocationUidGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Change cluster backup location
 */
export type v1ClusterFeatureBackupLocationUidChangeResponse204 = {
  data: void;
  status: 204;
};

export type v1ClusterFeatureBackupLocationUidChangeResponseComposite =
  v1ClusterFeatureBackupLocationUidChangeResponse204;

export type v1ClusterFeatureBackupLocationUidChangeResponse =
  v1ClusterFeatureBackupLocationUidChangeResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupLocationUidChangeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/features/backup/locations/${uid}`;
};

export const v1ClusterFeatureBackupLocationUidChange = async (
  uid: string,
  clusterBackupLocationType: ClusterBackupLocationType,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupLocationUidChangeResponse> => {
  return customInstance<v1ClusterFeatureBackupLocationUidChangeResponse>(
    getV1ClusterFeatureBackupLocationUidChangeUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterBackupLocationType),
    },
  );
};

/**
 * @summary Download log fetcher logs for cluster by log fetcher uid
 */
export type clusterFeatureLogFetcherLogDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type clusterFeatureLogFetcherLogDownloadResponseComposite =
  clusterFeatureLogFetcherLogDownloadResponse200;

export type clusterFeatureLogFetcherLogDownloadResponse =
  clusterFeatureLogFetcherLogDownloadResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureLogFetcherLogDownloadUrl = (
  uid: string,
  params?: ClusterFeatureLogFetcherLogDownloadParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/download?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/download`;
};

export const clusterFeatureLogFetcherLogDownload = async (
  uid: string,
  params?: ClusterFeatureLogFetcherLogDownloadParams,
  options?: RequestInit,
): Promise<clusterFeatureLogFetcherLogDownloadResponse> => {
  return customInstance<clusterFeatureLogFetcherLogDownloadResponse>(
    getClusterFeatureLogFetcherLogDownloadUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update log fetcher logs by log fetcher uid
 */
export type clusterFeatureLogFetcherLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureLogFetcherLogUpdateResponseComposite =
  clusterFeatureLogFetcherLogUpdateResponse204;

export type clusterFeatureLogFetcherLogUpdateResponse =
  clusterFeatureLogFetcherLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureLogFetcherLogUpdateUrl = (
  uid: string,
  params?: ClusterFeatureLogFetcherLogUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/log?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/log`;
};

export const clusterFeatureLogFetcherLogUpdate = async (
  uid: string,
  clusterFeatureLogFetcherLogUpdateBody: ClusterFeatureLogFetcherLogUpdateBody,
  params?: ClusterFeatureLogFetcherLogUpdateParams,
  options?: RequestInit,
): Promise<clusterFeatureLogFetcherLogUpdateResponse> => {
  const formData = new FormData();
  if (clusterFeatureLogFetcherLogUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, clusterFeatureLogFetcherLogUpdateBody.fileName);
  }

  return customInstance<clusterFeatureLogFetcherLogUpdateResponse>(
    getClusterFeatureLogFetcherLogUpdateUrl(uid, params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

/**
 * @summary Creates a GCP cluster
 */
export type spectroClustersGcpCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersGcpCreateResponseComposite =
  spectroClustersGcpCreateResponse201;

export type spectroClustersGcpCreateResponse =
  spectroClustersGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp`;
};

export const spectroClustersGcpCreate = async (
  v1SpectroGcpClusterEntityBody: V1SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersGcpCreateResponse> => {
  return customInstance<spectroClustersGcpCreateResponse>(
    getSpectroClustersGcpCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroGcpClusterEntityBody),
    },
  );
};

/**
 * @summary Imports a GCP cluster
 */
export type spectroClustersGcpImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersGcpImportResponseComposite =
  spectroClustersGcpImportResponse201;

export type spectroClustersGcpImportResponse =
  spectroClustersGcpImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGcpImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp/import`;
};

export const spectroClustersGcpImport = async (
  spectroGcpClusterImportEntity: SpectroGcpClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersGcpImportResponse> => {
  return customInstance<spectroClustersGcpImportResponse>(
    getSpectroClustersGcpImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroGcpClusterImportEntity),
    },
  );
};

/**
 * @summary Get GCP cluster estimated rate information
 */
export type spectroClustersGcpRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersGcpRateResponseComposite =
  spectroClustersGcpRateResponse200;

export type spectroClustersGcpRateResponse =
  spectroClustersGcpRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGcpRateUrl = (
  params?: SpectroClustersGcpRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/gcp/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/gcp/rate`;
};

export const spectroClustersGcpRate = async (
  v1SpectroGcpClusterRateEntityBody: V1SpectroGcpClusterRateEntityBody,
  params?: SpectroClustersGcpRateParams,
  options?: RequestInit,
): Promise<spectroClustersGcpRateResponse> => {
  return customInstance<spectroClustersGcpRateResponse>(
    getSpectroClustersGcpRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroGcpClusterRateEntityBody),
    },
  );
};

/**
 * @summary Validates GCP cluster create operation
 */
export type spectroClustersGcpValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersGcpValidateResponseComposite =
  spectroClustersGcpValidateResponse200;

export type spectroClustersGcpValidateResponse =
  spectroClustersGcpValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGcpValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp/validate`;
};

export const spectroClustersGcpValidate = async (
  v1SpectroGcpClusterEntityBody: V1SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersGcpValidateResponse> => {
  return customInstance<spectroClustersGcpValidateResponse>(
    getSpectroClustersGcpValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroGcpClusterEntityBody),
    },
  );
};

/**
 * The machines information will be captured, whereas the cloud specific configuration info will not be retrieved
 * @summary Imports a cluster of any cloud type in generic way
 */
export type spectroClustersGenericImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersGenericImportResponseComposite =
  spectroClustersGenericImportResponse201;

export type spectroClustersGenericImportResponse =
  spectroClustersGenericImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGenericImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/generic/import`;
};

export const spectroClustersGenericImport = async (
  spectroGenericClusterImportEntity: SpectroGenericClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersGenericImportResponse> => {
  return customInstance<spectroClustersGenericImportResponse>(
    getSpectroClustersGenericImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroGenericClusterImportEntity),
    },
  );
};

/**
 * @summary Get generic cluster estimated rate information
 */
export type spectroClustersGenericRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersGenericRateResponseComposite =
  spectroClustersGenericRateResponse200;

export type spectroClustersGenericRateResponse =
  spectroClustersGenericRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGenericRateUrl = (
  params?: SpectroClustersGenericRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/generic/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/generic/rate`;
};

export const spectroClustersGenericRate = async (
  spectroGenericClusterRateEntity: SpectroGenericClusterRateEntity,
  params?: SpectroClustersGenericRateParams,
  options?: RequestInit,
): Promise<spectroClustersGenericRateResponse> => {
  return customInstance<spectroClustersGenericRateResponse>(
    getSpectroClustersGenericRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroGenericClusterRateEntity),
    },
  );
};

/**
 * @summary Creates an GKE cluster
 */
export type spectroClustersGkeCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersGkeCreateResponseComposite =
  spectroClustersGkeCreateResponse201;

export type spectroClustersGkeCreateResponse =
  spectroClustersGkeCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGkeCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gke`;
};

export const spectroClustersGkeCreate = async (
  v1SpectroGcpClusterEntityBody: V1SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersGkeCreateResponse> => {
  return customInstance<spectroClustersGkeCreateResponse>(
    getSpectroClustersGkeCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroGcpClusterEntityBody),
    },
  );
};

/**
 * @summary Get GKE cluster estimated rate information
 */
export type spectroClustersGkeRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersGkeRateResponseComposite =
  spectroClustersGkeRateResponse200;

export type spectroClustersGkeRateResponse =
  spectroClustersGkeRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGkeRateUrl = (
  params?: SpectroClustersGkeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/gke/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/gke/rate`;
};

export const spectroClustersGkeRate = async (
  v1SpectroGcpClusterRateEntityBody: V1SpectroGcpClusterRateEntityBody,
  params?: SpectroClustersGkeRateParams,
  options?: RequestInit,
): Promise<spectroClustersGkeRateResponse> => {
  return customInstance<spectroClustersGkeRateResponse>(
    getSpectroClustersGkeRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroGcpClusterRateEntityBody),
    },
  );
};

/**
 * @summary Validates GKE cluster create operation
 */
export type spectroClustersGkeValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersGkeValidateResponseComposite =
  spectroClustersGkeValidateResponse200;

export type spectroClustersGkeValidateResponse =
  spectroClustersGkeValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGkeValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gke/validate`;
};

export const spectroClustersGkeValidate = async (
  v1SpectroGcpClusterEntityBody: V1SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersGkeValidateResponse> => {
  return customInstance<spectroClustersGkeValidateResponse>(
    getSpectroClustersGkeValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroGcpClusterEntityBody),
    },
  );
};

/**
 * @summary Creates a MAAS cluster
 */
export type spectroClustersMaasCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersMaasCreateResponseComposite =
  spectroClustersMaasCreateResponse201;

export type spectroClustersMaasCreateResponse =
  spectroClustersMaasCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMaasCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas`;
};

export const spectroClustersMaasCreate = async (
  v1SpectroMaasClusterEntityBody: V1SpectroMaasClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersMaasCreateResponse> => {
  return customInstance<spectroClustersMaasCreateResponse>(
    getSpectroClustersMaasCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroMaasClusterEntityBody),
    },
  );
};

/**
 * @summary Imports a Maas cluster
 */
export type spectroClustersMaasImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersMaasImportResponseComposite =
  spectroClustersMaasImportResponse201;

export type spectroClustersMaasImportResponse =
  spectroClustersMaasImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMaasImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas/import`;
};

export const spectroClustersMaasImport = async (
  spectroMaasClusterImportEntity: SpectroMaasClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersMaasImportResponse> => {
  return customInstance<spectroClustersMaasImportResponse>(
    getSpectroClustersMaasImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroMaasClusterImportEntity),
    },
  );
};

/**
 * @summary Get maas cluster estimated rate information
 */
export type spectroClustersMaasRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersMaasRateResponseComposite =
  spectroClustersMaasRateResponse200;

export type spectroClustersMaasRateResponse =
  spectroClustersMaasRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMaasRateUrl = (
  params?: SpectroClustersMaasRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/maas/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/maas/rate`;
};

export const spectroClustersMaasRate = async (
  spectroMaasClusterRateEntity: SpectroMaasClusterRateEntity,
  params?: SpectroClustersMaasRateParams,
  options?: RequestInit,
): Promise<spectroClustersMaasRateResponse> => {
  return customInstance<spectroClustersMaasRateResponse>(
    getSpectroClustersMaasRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroMaasClusterRateEntity),
    },
  );
};

/**
 * @summary Validates MAAS cluster create operation
 */
export type spectroClustersMaasValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersMaasValidateResponseComposite =
  spectroClustersMaasValidateResponse200;

export type spectroClustersMaasValidateResponse =
  spectroClustersMaasValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMaasValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas/validate`;
};

export const spectroClustersMaasValidate = async (
  v1SpectroMaasClusterEntityBody: V1SpectroMaasClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersMaasValidateResponse> => {
  return customInstance<spectroClustersMaasValidateResponse>(
    getSpectroClustersMaasValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroMaasClusterEntityBody),
    },
  );
};

/**
 * @summary Creates a OpenStack cluster
 */
export type spectroClustersOpenStackCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersOpenStackCreateResponseComposite =
  spectroClustersOpenStackCreateResponse201;

export type spectroClustersOpenStackCreateResponse =
  spectroClustersOpenStackCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersOpenStackCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack`;
};

export const spectroClustersOpenStackCreate = async (
  v1SpectroOpenStackClusterEntityBody: V1SpectroOpenStackClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersOpenStackCreateResponse> => {
  return customInstance<spectroClustersOpenStackCreateResponse>(
    getSpectroClustersOpenStackCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroOpenStackClusterEntityBody),
    },
  );
};

/**
 * @summary Imports an OpenStack cluster
 */
export type spectroClustersOpenStackImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersOpenStackImportResponseComposite =
  spectroClustersOpenStackImportResponse201;

export type spectroClustersOpenStackImportResponse =
  spectroClustersOpenStackImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersOpenStackImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack/import`;
};

export const spectroClustersOpenStackImport = async (
  spectroOpenStackClusterImportEntity: SpectroOpenStackClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersOpenStackImportResponse> => {
  return customInstance<spectroClustersOpenStackImportResponse>(
    getSpectroClustersOpenStackImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroOpenStackClusterImportEntity),
    },
  );
};

/**
 * @summary Get openstack cluster estimated rate information
 */
export type spectroClustersOpenStackRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersOpenStackRateResponseComposite =
  spectroClustersOpenStackRateResponse200;

export type spectroClustersOpenStackRateResponse =
  spectroClustersOpenStackRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersOpenStackRateUrl = (
  params?: SpectroClustersOpenStackRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/openstack/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/openstack/rate`;
};

export const spectroClustersOpenStackRate = async (
  spectroOpenStackClusterRateEntity: SpectroOpenStackClusterRateEntity,
  params?: SpectroClustersOpenStackRateParams,
  options?: RequestInit,
): Promise<spectroClustersOpenStackRateResponse> => {
  return customInstance<spectroClustersOpenStackRateResponse>(
    getSpectroClustersOpenStackRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroOpenStackClusterRateEntity),
    },
  );
};

/**
 * @summary Validates OpenStack cluster create operation
 */
export type spectroClustersOpenStackValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersOpenStackValidateResponseComposite =
  spectroClustersOpenStackValidateResponse200;

export type spectroClustersOpenStackValidateResponse =
  spectroClustersOpenStackValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersOpenStackValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack/validate`;
};

export const spectroClustersOpenStackValidate = async (
  v1SpectroOpenStackClusterEntityBody: V1SpectroOpenStackClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersOpenStackValidateResponse> => {
  return customInstance<spectroClustersOpenStackValidateResponse>(
    getSpectroClustersOpenStackValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroOpenStackClusterEntityBody),
    },
  );
};

/**
 * @summary Downloads the cluster definition archive file
 */
export type spectroClustersSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersSpcDownloadResponseComposite =
  spectroClustersSpcDownloadResponse200;

export type spectroClustersSpcDownloadResponse =
  spectroClustersSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersSpcDownloadUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/spc/download`;
};

export const spectroClustersSpcDownload = async (
  clusterDefinitionEntity: ClusterDefinitionEntity,
  options?: RequestInit,
): Promise<spectroClustersSpcDownloadResponse> => {
  return customInstance<spectroClustersSpcDownloadResponse>(
    getSpectroClustersSpcDownloadUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterDefinitionEntity),
    },
  );
};

/**
 * @summary Retrieves a list of spectrocluster tags
 */
export type spectroClustersTagsGetResponse200 = {
  data: SpectroClusterTags;
  status: 200;
};

export type spectroClustersTagsGetResponseComposite =
  spectroClustersTagsGetResponse200;

export type spectroClustersTagsGetResponse =
  spectroClustersTagsGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersTagsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/tags`;
};

export const spectroClustersTagsGet = async (
  options?: RequestInit,
): Promise<spectroClustersTagsGetResponse> => {
  return customInstance<spectroClustersTagsGetResponse>(
    getSpectroClustersTagsGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get cluster settings by context
 */
export type spectroClustersUpgradeSettingsGetResponse200 = {
  data: ClusterUpgradeSettingsEntity;
  status: 200;
};

export type spectroClustersUpgradeSettingsGetResponseComposite =
  spectroClustersUpgradeSettingsGetResponse200;

export type spectroClustersUpgradeSettingsGetResponse =
  spectroClustersUpgradeSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpgradeSettingsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/upgrade/settings`;
};

export const spectroClustersUpgradeSettingsGet = async (
  options?: RequestInit,
): Promise<spectroClustersUpgradeSettingsGetResponse> => {
  return customInstance<spectroClustersUpgradeSettingsGetResponse>(
    getSpectroClustersUpgradeSettingsGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update all clusters upgrade settings
 */
export type spectroClustersUpgradeSettingsResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUpgradeSettingsResponseComposite =
  spectroClustersUpgradeSettingsResponse204;

export type spectroClustersUpgradeSettingsResponse =
  spectroClustersUpgradeSettingsResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpgradeSettingsUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/upgrade/settings`;
};

export const spectroClustersUpgradeSettings = async (
  v1ClusterUpgradeSettingsEntityBody: V1ClusterUpgradeSettingsEntityBody,
  options?: RequestInit,
): Promise<spectroClustersUpgradeSettingsResponse> => {
  return customInstance<spectroClustersUpgradeSettingsResponse>(
    getSpectroClustersUpgradeSettingsUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterUpgradeSettingsEntityBody),
    },
  );
};

/**
 * @summary Validates the cluster name
 */
export type spectroClustersValidateNameResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersValidateNameResponseComposite =
  spectroClustersValidateNameResponse204;

export type spectroClustersValidateNameResponse =
  spectroClustersValidateNameResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersValidateNameUrl = (
  params?: SpectroClustersValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/validate/name`;
};

export const spectroClustersValidateName = async (
  params?: SpectroClustersValidateNameParams,
  options?: RequestInit,
): Promise<spectroClustersValidateNameResponse> => {
  return customInstance<spectroClustersValidateNameResponse>(
    getSpectroClustersValidateNameUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Validates spectro cluster packs
 */
export type spectroClustersValidatePacksResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersValidatePacksResponseComposite =
  spectroClustersValidatePacksResponse200;

export type spectroClustersValidatePacksResponse =
  spectroClustersValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersValidatePacksUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/validate/packs`;
};

export const spectroClustersValidatePacks = async (
  v1SpectroClusterPacksEntityBody: V1SpectroClusterPacksEntityBody,
  options?: RequestInit,
): Promise<spectroClustersValidatePacksResponse> => {
  return customInstance<spectroClustersValidatePacksResponse>(
    getSpectroClustersValidatePacksUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterPacksEntityBody),
    },
  );
};

/**
 * @summary Creates a virtual cluster
 */
export type spectroClustersVirtualCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersVirtualCreateResponseComposite =
  spectroClustersVirtualCreateResponse201;

export type spectroClustersVirtualCreateResponse =
  spectroClustersVirtualCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVirtualCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/virtual`;
};

export const spectroClustersVirtualCreate = async (
  v1SpectroVirtualClusterEntityBody: V1SpectroVirtualClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersVirtualCreateResponse> => {
  return customInstance<spectroClustersVirtualCreateResponse>(
    getSpectroClustersVirtualCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroVirtualClusterEntityBody),
    },
  );
};

/**
 * @summary Get the cluster pack values yaml
 */
export type virtualClustersPacksValuesResponse200 = {
  data: ClusterVirtualPacksValues;
  status: 200;
};

export type virtualClustersPacksValuesResponseComposite =
  virtualClustersPacksValuesResponse200;

export type virtualClustersPacksValuesResponse =
  virtualClustersPacksValuesResponseComposite & {
    headers: Headers;
  };

export const getVirtualClustersPacksValuesUrl = (
  params?: VirtualClustersPacksValuesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/virtual/packs/values?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/virtual/packs/values`;
};

export const virtualClustersPacksValues = async (
  params?: VirtualClustersPacksValuesParams,
  options?: RequestInit,
): Promise<virtualClustersPacksValuesResponse> => {
  return customInstance<virtualClustersPacksValuesResponse>(
    getVirtualClustersPacksValuesUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Validates virtual cluster create operation
 */
export type spectroClustersVirtualValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersVirtualValidateResponseComposite =
  spectroClustersVirtualValidateResponse200;

export type spectroClustersVirtualValidateResponse =
  spectroClustersVirtualValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVirtualValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/virtual/validate`;
};

export const spectroClustersVirtualValidate = async (
  v1SpectroVirtualClusterEntityBody: V1SpectroVirtualClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersVirtualValidateResponse> => {
  return customInstance<spectroClustersVirtualValidateResponse>(
    getSpectroClustersVirtualValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroVirtualClusterEntityBody),
    },
  );
};

/**
 * @summary Creates a vSphere cluster
 */
export type spectroClustersVsphereCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersVsphereCreateResponseComposite =
  spectroClustersVsphereCreateResponse201;

export type spectroClustersVsphereCreateResponse =
  spectroClustersVsphereCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVsphereCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere`;
};

export const spectroClustersVsphereCreate = async (
  v1SpectroVsphereClusterEntityBody: V1SpectroVsphereClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersVsphereCreateResponse> => {
  return customInstance<spectroClustersVsphereCreateResponse>(
    getSpectroClustersVsphereCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroVsphereClusterEntityBody),
    },
  );
};

/**
 * @summary Imports a vSphere cluster
 */
export type spectroClustersVsphereImportResponse201 = {
  data: Uid;
  status: 201;
};

export type spectroClustersVsphereImportResponseComposite =
  spectroClustersVsphereImportResponse201;

export type spectroClustersVsphereImportResponse =
  spectroClustersVsphereImportResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVsphereImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere/import`;
};

export const spectroClustersVsphereImport = async (
  spectroVsphereClusterImportEntity: SpectroVsphereClusterImportEntity,
  options?: RequestInit,
): Promise<spectroClustersVsphereImportResponse> => {
  return customInstance<spectroClustersVsphereImportResponse>(
    getSpectroClustersVsphereImportUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroVsphereClusterImportEntity),
    },
  );
};

/**
 * @summary Get vSphere cluster estimated rate information
 */
export type spectroClustersVsphereRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersVsphereRateResponseComposite =
  spectroClustersVsphereRateResponse200;

export type spectroClustersVsphereRateResponse =
  spectroClustersVsphereRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVsphereRateUrl = (
  params?: SpectroClustersVsphereRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/vsphere/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/vsphere/rate`;
};

export const spectroClustersVsphereRate = async (
  spectroVsphereClusterRateEntity: SpectroVsphereClusterRateEntity,
  params?: SpectroClustersVsphereRateParams,
  options?: RequestInit,
): Promise<spectroClustersVsphereRateResponse> => {
  return customInstance<spectroClustersVsphereRateResponse>(
    getSpectroClustersVsphereRateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroVsphereClusterRateEntity),
    },
  );
};

/**
 * @summary Validates vSphere cluster create operation
 */
export type spectroClustersVsphereValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersVsphereValidateResponseComposite =
  spectroClustersVsphereValidateResponse200;

export type spectroClustersVsphereValidateResponse =
  spectroClustersVsphereValidateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVsphereValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere/validate`;
};

export const spectroClustersVsphereValidate = async (
  v1SpectroVsphereClusterEntityBody: V1SpectroVsphereClusterEntityBody,
  options?: RequestInit,
): Promise<spectroClustersVsphereValidateResponse> => {
  return customInstance<spectroClustersVsphereValidateResponse>(
    getSpectroClustersVsphereValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroVsphereClusterEntityBody),
    },
  );
};

/**
 * @summary Deletes the specified cluster
 */
export type spectroClustersDeleteResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersDeleteResponseComposite =
  spectroClustersDeleteResponse204;

export type spectroClustersDeleteResponse =
  spectroClustersDeleteResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersDeleteUrl = (
  uid: string,
  params?: SpectroClustersDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}`;
};

export const spectroClustersDelete = async (
  uid: string,
  params?: SpectroClustersDeleteParams,
  options?: RequestInit,
): Promise<spectroClustersDeleteResponse> => {
  return customInstance<spectroClustersDeleteResponse>(
    getSpectroClustersDeleteUrl(uid, params),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified cluster
 */
export type spectroClustersGetResponse200 = {
  data: SpectroCluster;
  status: 200;
};

export type spectroClustersGetResponseComposite = spectroClustersGetResponse200;

export type spectroClustersGetResponse = spectroClustersGetResponseComposite & {
  headers: Headers;
};

export const getSpectroClustersGetUrl = (
  uid: string,
  params?: SpectroClustersGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}`;
};

export const spectroClustersGet = async (
  uid: string,
  params?: SpectroClustersGetParams,
  options?: RequestInit,
): Promise<spectroClustersGetResponse> => {
  return customInstance<spectroClustersGetResponse>(
    getSpectroClustersGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the cluster asset doc
 */
export type spectroClustersUidAssetsGetResponse200 = {
  data: SpectroClusterAssetEntity;
  status: 200;
};

export type spectroClustersUidAssetsGetResponseComposite =
  spectroClustersUidAssetsGetResponse200;

export type spectroClustersUidAssetsGetResponse =
  spectroClustersUidAssetsGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidAssetsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets`;
};

export const spectroClustersUidAssetsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidAssetsGetResponse> => {
  return customInstance<spectroClustersUidAssetsGetResponse>(
    getSpectroClustersUidAssetsGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Associate the assets for the cluster
 */
export type spectroClustersUidAssetsResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidAssetsResponseComposite =
  spectroClustersUidAssetsResponse204;

export type spectroClustersUidAssetsResponse =
  spectroClustersUidAssetsResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidAssetsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets`;
};

export const spectroClustersUidAssets = async (
  uid: string,
  spectroClusterAssetEntity: SpectroClusterAssetEntity,
  options?: RequestInit,
): Promise<spectroClustersUidAssetsResponse> => {
  return customInstance<spectroClustersUidAssetsResponse>(
    getSpectroClustersUidAssetsUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterAssetEntity),
    },
  );
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type spectroClustersUidAdminKubeConfigResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersUidAdminKubeConfigResponseComposite =
  spectroClustersUidAdminKubeConfigResponse200;

export type spectroClustersUidAdminKubeConfigResponse =
  spectroClustersUidAdminKubeConfigResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidAdminKubeConfigUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminKubeconfig`;
};

export const spectroClustersUidAdminKubeConfig = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidAdminKubeConfigResponse> => {
  return customInstance<spectroClustersUidAdminKubeConfigResponse>(
    getSpectroClustersUidAdminKubeConfigUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Deletes the cluster's token kube config data
 */
export type spectroClustersUidTokenKubeConfigDeleteResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidTokenKubeConfigDeleteResponseComposite =
  spectroClustersUidTokenKubeConfigDeleteResponse204;

export type spectroClustersUidTokenKubeConfigDeleteResponse =
  spectroClustersUidTokenKubeConfigDeleteResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidTokenKubeConfigDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const spectroClustersUidTokenKubeConfigDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidTokenKubeConfigDeleteResponse> => {
  return customInstance<spectroClustersUidTokenKubeConfigDeleteResponse>(
    getSpectroClustersUidTokenKubeConfigDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified cluster's token kube config file
 */
export type spectroClustersUidTokenKubeConfigGetResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersUidTokenKubeConfigGetResponseComposite =
  spectroClustersUidTokenKubeConfigGetResponse200;

export type spectroClustersUidTokenKubeConfigGetResponse =
  spectroClustersUidTokenKubeConfigGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidTokenKubeConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const spectroClustersUidTokenKubeConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidTokenKubeConfigGetResponse> => {
  return customInstance<spectroClustersUidTokenKubeConfigGetResponse>(
    getSpectroClustersUidTokenKubeConfigGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the cluster's token kube config data
 */
export type spectroClustersUidTokenKubeConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidTokenKubeConfigUpdateResponseComposite =
  spectroClustersUidTokenKubeConfigUpdateResponse204;

export type spectroClustersUidTokenKubeConfigUpdateResponse =
  spectroClustersUidTokenKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidTokenKubeConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const spectroClustersUidTokenKubeConfigUpdate = async (
  uid: string,
  spectroClusterAssetTokenKubeConfig: SpectroClusterAssetTokenKubeConfig,
  options?: RequestInit,
): Promise<spectroClustersUidTokenKubeConfigUpdateResponse> => {
  return customInstance<spectroClustersUidTokenKubeConfigUpdateResponse>(
    getSpectroClustersUidTokenKubeConfigUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterAssetTokenKubeConfig),
    },
  );
};

/**
 * @summary Deletes the cluster's frp kube config client data
 */
export type spectroClustersUidFrpKubeConfigDeleteResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidFrpKubeConfigDeleteResponseComposite =
  spectroClustersUidFrpKubeConfigDeleteResponse204;

export type spectroClustersUidFrpKubeConfigDeleteResponse =
  spectroClustersUidFrpKubeConfigDeleteResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidFrpKubeConfigDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const spectroClustersUidFrpKubeConfigDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidFrpKubeConfigDeleteResponse> => {
  return customInstance<spectroClustersUidFrpKubeConfigDeleteResponse>(
    getSpectroClustersUidFrpKubeConfigDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified cluster's frp kube config file
 */
export type spectroClustersUidFrpKubeConfigGetResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersUidFrpKubeConfigGetResponseComposite =
  spectroClustersUidFrpKubeConfigGetResponse200;

export type spectroClustersUidFrpKubeConfigGetResponse =
  spectroClustersUidFrpKubeConfigGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidFrpKubeConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const spectroClustersUidFrpKubeConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidFrpKubeConfigGetResponse> => {
  return customInstance<spectroClustersUidFrpKubeConfigGetResponse>(
    getSpectroClustersUidFrpKubeConfigGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the cluster's frp kube config data
 */
export type spectroClustersUidFrpKubeConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidFrpKubeConfigUpdateResponseComposite =
  spectroClustersUidFrpKubeConfigUpdateResponse204;

export type spectroClustersUidFrpKubeConfigUpdateResponse =
  spectroClustersUidFrpKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidFrpKubeConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const spectroClustersUidFrpKubeConfigUpdate = async (
  uid: string,
  spectroClusterAssetFrpKubeConfig: SpectroClusterAssetFrpKubeConfig,
  options?: RequestInit,
): Promise<spectroClustersUidFrpKubeConfigUpdateResponse> => {
  return customInstance<spectroClustersUidFrpKubeConfigUpdateResponse>(
    getSpectroClustersUidFrpKubeConfigUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterAssetFrpKubeConfig),
    },
  );
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type spectroClustersUidKubeConfigResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersUidKubeConfigResponseComposite =
  spectroClustersUidKubeConfigResponse200;

export type spectroClustersUidKubeConfigResponse =
  spectroClustersUidKubeConfigResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidKubeConfigUrl = (
  uid: string,
  params?: SpectroClustersUidKubeConfigParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig`;
};

export const spectroClustersUidKubeConfig = async (
  uid: string,
  params?: SpectroClustersUidKubeConfigParams,
  options?: RequestInit,
): Promise<spectroClustersUidKubeConfigResponse> => {
  return customInstance<spectroClustersUidKubeConfigResponse>(
    getSpectroClustersUidKubeConfigUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the cluster's manifest data
 */
export type spectroClustersUidKubeConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidKubeConfigUpdateResponseComposite =
  spectroClustersUidKubeConfigUpdateResponse204;

export type spectroClustersUidKubeConfigUpdateResponse =
  spectroClustersUidKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidKubeConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig`;
};

export const spectroClustersUidKubeConfigUpdate = async (
  uid: string,
  spectroClusterAssetKubeConfig: SpectroClusterAssetKubeConfig,
  options?: RequestInit,
): Promise<spectroClustersUidKubeConfigUpdateResponse> => {
  return customInstance<spectroClustersUidKubeConfigUpdateResponse>(
    getSpectroClustersUidKubeConfigUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterAssetKubeConfig),
    },
  );
};

/**
 * @summary Deletes the cluster's kube config client data
 */
export type spectroClustersUidKubeConfigClientDeleteResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidKubeConfigClientDeleteResponseComposite =
  spectroClustersUidKubeConfigClientDeleteResponse204;

export type spectroClustersUidKubeConfigClientDeleteResponse =
  spectroClustersUidKubeConfigClientDeleteResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidKubeConfigClientDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const spectroClustersUidKubeConfigClientDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidKubeConfigClientDeleteResponse> => {
  return customInstance<spectroClustersUidKubeConfigClientDeleteResponse>(
    getSpectroClustersUidKubeConfigClientDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified cluster's kube config client file
 */
export type spectroClustersUidKubeConfigClientGetResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersUidKubeConfigClientGetResponseComposite =
  spectroClustersUidKubeConfigClientGetResponse200;

export type spectroClustersUidKubeConfigClientGetResponse =
  spectroClustersUidKubeConfigClientGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidKubeConfigClientGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const spectroClustersUidKubeConfigClientGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidKubeConfigClientGetResponse> => {
  return customInstance<spectroClustersUidKubeConfigClientGetResponse>(
    getSpectroClustersUidKubeConfigClientGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the cluster's kube config client data
 */
export type spectroClustersUidKubeConfigClientUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidKubeConfigClientUpdateResponseComposite =
  spectroClustersUidKubeConfigClientUpdateResponse204;

export type spectroClustersUidKubeConfigClientUpdateResponse =
  spectroClustersUidKubeConfigClientUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidKubeConfigClientUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const spectroClustersUidKubeConfigClientUpdate = async (
  uid: string,
  spectroClusterAssetKubeConfigClient: SpectroClusterAssetKubeConfigClient,
  options?: RequestInit,
): Promise<spectroClustersUidKubeConfigClientUpdateResponse> => {
  return customInstance<spectroClustersUidKubeConfigClientUpdateResponse>(
    getSpectroClustersUidKubeConfigClientUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterAssetKubeConfigClient),
    },
  );
};

/**
 * @summary Returns the specified cluster's manifest data
 */
export type spectroClustersUidManifestGetResponse200 = {
  data: string;
  status: 200;
};

export type spectroClustersUidManifestGetResponseComposite =
  spectroClustersUidManifestGetResponse200;

export type spectroClustersUidManifestGetResponse =
  spectroClustersUidManifestGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/manifest`;
};

export const spectroClustersUidManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidManifestGetResponse> => {
  return customInstance<spectroClustersUidManifestGetResponse>(
    getSpectroClustersUidManifestGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified cluster's manifest data
 */
export type spectroClustersUidManifestUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidManifestUpdateResponseComposite =
  spectroClustersUidManifestUpdateResponse204;

export type spectroClustersUidManifestUpdateResponse =
  spectroClustersUidManifestUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidManifestUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/manifest`;
};

export const spectroClustersUidManifestUpdate = async (
  uid: string,
  spectroClusterAssetManifest: SpectroClusterAssetManifest,
  options?: RequestInit,
): Promise<spectroClustersUidManifestUpdateResponse> => {
  return customInstance<spectroClustersUidManifestUpdateResponse>(
    getSpectroClustersUidManifestUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterAssetManifest),
    },
  );
};

/**
 * @summary Updates the specified cluster meta attribute
 */
export type spectroClustersUidClusterMetaAttributeUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidClusterMetaAttributeUpdateResponseComposite =
  spectroClustersUidClusterMetaAttributeUpdateResponse204;

export type spectroClustersUidClusterMetaAttributeUpdateResponse =
  spectroClustersUidClusterMetaAttributeUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidClusterMetaAttributeUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/clusterMetaAttribute`;
};

export const spectroClustersUidClusterMetaAttributeUpdate = async (
  uid: string,
  clusterMetaAttributeEntity: ClusterMetaAttributeEntity,
  options?: RequestInit,
): Promise<spectroClustersUidClusterMetaAttributeUpdateResponse> => {
  return customInstance<spectroClustersUidClusterMetaAttributeUpdateResponse>(
    getSpectroClustersUidClusterMetaAttributeUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterMetaAttributeEntity),
    },
  );
};

/**
 * @summary Updates the specified cluster controlPlane health check timeout
 */
export type v1ControlPlaneHealthCheckTimeoutUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1ControlPlaneHealthCheckTimeoutUpdateResponseComposite =
  v1ControlPlaneHealthCheckTimeoutUpdateResponse204;

export type v1ControlPlaneHealthCheckTimeoutUpdateResponse =
  v1ControlPlaneHealthCheckTimeoutUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ControlPlaneHealthCheckTimeoutUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/controlPlaneHealthCheckTimeout`;
};

export const v1ControlPlaneHealthCheckTimeoutUpdate = async (
  uid: string,
  controlPlaneHealthCheckTimeoutEntity: ControlPlaneHealthCheckTimeoutEntity,
  options?: RequestInit,
): Promise<v1ControlPlaneHealthCheckTimeoutUpdateResponse> => {
  return customInstance<v1ControlPlaneHealthCheckTimeoutUpdateResponse>(
    getV1ControlPlaneHealthCheckTimeoutUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(controlPlaneHealthCheckTimeoutEntity),
    },
  );
};

/**
 * @summary Updates the specified cluster host config
 */
export type v1HostClusterConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1HostClusterConfigUpdateResponseComposite =
  v1HostClusterConfigUpdateResponse204;

export type v1HostClusterConfigUpdateResponse =
  v1HostClusterConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1HostClusterConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/hostCluster`;
};

export const v1HostClusterConfigUpdate = async (
  uid: string,
  hostClusterConfigEntity: HostClusterConfigEntity,
  options?: RequestInit,
): Promise<v1HostClusterConfigUpdateResponse> => {
  return customInstance<v1HostClusterConfigUpdateResponse>(
    getV1HostClusterConfigUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(hostClusterConfigEntity),
    },
  );
};

/**
 * @summary Updates the specified cluster Life cycle configuration
 */
export type spectroClustersUidLifecycleConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidLifecycleConfigUpdateResponseComposite =
  spectroClustersUidLifecycleConfigUpdateResponse204;

export type spectroClustersUidLifecycleConfigUpdateResponse =
  spectroClustersUidLifecycleConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidLifecycleConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/lifecycleConfig`;
};

export const spectroClustersUidLifecycleConfigUpdate = async (
  uid: string,
  lifecycleConfigEntity: LifecycleConfigEntity,
  options?: RequestInit,
): Promise<spectroClustersUidLifecycleConfigUpdateResponse> => {
  return customInstance<spectroClustersUidLifecycleConfigUpdateResponse>(
    getSpectroClustersUidLifecycleConfigUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(lifecycleConfigEntity),
    },
  );
};

/**
 * @summary Updates the specified cluster OS patch configuration
 */
export type spectroClustersUidOsPatchUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidOsPatchUpdateResponseComposite =
  spectroClustersUidOsPatchUpdateResponse204;

export type spectroClustersUidOsPatchUpdateResponse =
  spectroClustersUidOsPatchUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidOsPatchUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/osPatch`;
};

export const spectroClustersUidOsPatchUpdate = async (
  uid: string,
  osPatchEntity: OsPatchEntity,
  options?: RequestInit,
): Promise<spectroClustersUidOsPatchUpdateResponse> => {
  return customInstance<spectroClustersUidOsPatchUpdateResponse>(
    getSpectroClustersUidOsPatchUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(osPatchEntity),
    },
  );
};

/**
 * @summary Retrieves namespaces for the specified cluster
 */
export type spectroClustersUidConfigNamespacesGetResponse200 = {
  data: ClusterNamespaceResources;
  status: 200;
};

export type spectroClustersUidConfigNamespacesGetResponseComposite =
  spectroClustersUidConfigNamespacesGetResponse200;

export type spectroClustersUidConfigNamespacesGetResponse =
  spectroClustersUidConfigNamespacesGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigNamespacesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces`;
};

export const spectroClustersUidConfigNamespacesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidConfigNamespacesGetResponse> => {
  return customInstance<spectroClustersUidConfigNamespacesGetResponse>(
    getSpectroClustersUidConfigNamespacesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates namespaces for the specified cluster
 */
export type spectroClustersUidConfigNamespacesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidConfigNamespacesUpdateResponseComposite =
  spectroClustersUidConfigNamespacesUpdateResponse204;

export type spectroClustersUidConfigNamespacesUpdateResponse =
  spectroClustersUidConfigNamespacesUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigNamespacesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces`;
};

export const spectroClustersUidConfigNamespacesUpdate = async (
  uid: string,
  clusterNamespaceResourcesUpdateEntity: ClusterNamespaceResourcesUpdateEntity,
  options?: RequestInit,
): Promise<spectroClustersUidConfigNamespacesUpdateResponse> => {
  return customInstance<spectroClustersUidConfigNamespacesUpdateResponse>(
    getSpectroClustersUidConfigNamespacesUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterNamespaceResourcesUpdateEntity),
    },
  );
};

/**
 * @summary Retrieves the specified namespace of the cluster
 */
export type spectroClustersUidConfigNamespacesUidGetResponse200 = {
  data: ClusterNamespaceResource;
  status: 200;
};

export type spectroClustersUidConfigNamespacesUidGetResponseComposite =
  spectroClustersUidConfigNamespacesUidGetResponse200;

export type spectroClustersUidConfigNamespacesUidGetResponse =
  spectroClustersUidConfigNamespacesUidGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigNamespacesUidGetUrl = (
  uid: string,
  namespaceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces/${namespaceUid}`;
};

export const spectroClustersUidConfigNamespacesUidGet = async (
  uid: string,
  namespaceUid: string,
  options?: RequestInit,
): Promise<spectroClustersUidConfigNamespacesUidGetResponse> => {
  return customInstance<spectroClustersUidConfigNamespacesUidGetResponse>(
    getSpectroClustersUidConfigNamespacesUidGetUrl(uid, namespaceUid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified namespace of the cluster
 */
export type spectroClustersUidConfigNamespacesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidConfigNamespacesUidUpdateResponseComposite =
  spectroClustersUidConfigNamespacesUidUpdateResponse204;

export type spectroClustersUidConfigNamespacesUidUpdateResponse =
  spectroClustersUidConfigNamespacesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigNamespacesUidUpdateUrl = (
  uid: string,
  namespaceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces/${namespaceUid}`;
};

export const spectroClustersUidConfigNamespacesUidUpdate = async (
  uid: string,
  namespaceUid: string,
  clusterNamespaceResourceInputEntity: ClusterNamespaceResourceInputEntity,
  options?: RequestInit,
): Promise<spectroClustersUidConfigNamespacesUidUpdateResponse> => {
  return customInstance<spectroClustersUidConfigNamespacesUidUpdateResponse>(
    getSpectroClustersUidConfigNamespacesUidUpdateUrl(uid, namespaceUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterNamespaceResourceInputEntity),
    },
  );
};

/**
 * @summary Retrieves RBAC information for the specified cluster
 */
export type spectroClustersUidConfigRbacsGetResponse200 = {
  data: ClusterRbacs;
  status: 200;
};

export type spectroClustersUidConfigRbacsGetResponseComposite =
  spectroClustersUidConfigRbacsGetResponse200;

export type spectroClustersUidConfigRbacsGetResponse =
  spectroClustersUidConfigRbacsGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigRbacsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs`;
};

export const spectroClustersUidConfigRbacsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidConfigRbacsGetResponse> => {
  return customInstance<spectroClustersUidConfigRbacsGetResponse>(
    getSpectroClustersUidConfigRbacsGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates RBAC information for the specified cluster
 */
export type spectroClustersUidConfigRbacsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidConfigRbacsUpdateResponseComposite =
  spectroClustersUidConfigRbacsUpdateResponse204;

export type spectroClustersUidConfigRbacsUpdateResponse =
  spectroClustersUidConfigRbacsUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigRbacsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs`;
};

export const spectroClustersUidConfigRbacsUpdate = async (
  uid: string,
  clusterRbacResourcesUpdateEntity: ClusterRbacResourcesUpdateEntity,
  options?: RequestInit,
): Promise<spectroClustersUidConfigRbacsUpdateResponse> => {
  return customInstance<spectroClustersUidConfigRbacsUpdateResponse>(
    getSpectroClustersUidConfigRbacsUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterRbacResourcesUpdateEntity),
    },
  );
};

/**
 * @summary Retrieves the specified RBAC of the cluster
 */
export type spectroClustersUidConfigRbacsUidGetResponse200 = {
  data: ClusterRbac;
  status: 200;
};

export type spectroClustersUidConfigRbacsUidGetResponseComposite =
  spectroClustersUidConfigRbacsUidGetResponse200;

export type spectroClustersUidConfigRbacsUidGetResponse =
  spectroClustersUidConfigRbacsUidGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigRbacsUidGetUrl = (
  uid: string,
  rbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs/${rbacUid}`;
};

export const spectroClustersUidConfigRbacsUidGet = async (
  uid: string,
  rbacUid: string,
  options?: RequestInit,
): Promise<spectroClustersUidConfigRbacsUidGetResponse> => {
  return customInstance<spectroClustersUidConfigRbacsUidGetResponse>(
    getSpectroClustersUidConfigRbacsUidGetUrl(uid, rbacUid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified RBAC of the cluster
 */
export type spectroClustersUidConfigRbacsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidConfigRbacsUidUpdateResponseComposite =
  spectroClustersUidConfigRbacsUidUpdateResponse204;

export type spectroClustersUidConfigRbacsUidUpdateResponse =
  spectroClustersUidConfigRbacsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidConfigRbacsUidUpdateUrl = (
  uid: string,
  rbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs/${rbacUid}`;
};

export const spectroClustersUidConfigRbacsUidUpdate = async (
  uid: string,
  rbacUid: string,
  clusterRbacInputEntity: ClusterRbacInputEntity,
  options?: RequestInit,
): Promise<spectroClustersUidConfigRbacsUidUpdateResponse> => {
  return customInstance<spectroClustersUidConfigRbacsUidUpdateResponse>(
    getSpectroClustersUidConfigRbacsUidUpdateUrl(uid, rbacUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterRbacInputEntity),
    },
  );
};

/**
 * @summary Download the specified cluster
 */
export type spectroClustersUidDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersUidDownloadResponseComposite =
  spectroClustersUidDownloadResponse200;

export type spectroClustersUidDownloadResponse =
  spectroClustersUidDownloadResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/download`;
};

export const spectroClustersUidDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidDownloadResponse> => {
  return customInstance<spectroClustersUidDownloadResponse>(
    getSpectroClustersUidDownloadUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Retrieves a list of edge host of edge-native cluster
 */
export type edgeNativeClustersHostsListResponse200 = {
  data: EdgeHostDevices;
  status: 200;
};

export type edgeNativeClustersHostsListResponseComposite =
  edgeNativeClustersHostsListResponse200;

export type edgeNativeClustersHostsListResponse =
  edgeNativeClustersHostsListResponseComposite & {
    headers: Headers;
  };

export const getEdgeNativeClustersHostsListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/edge-native/edgeHosts`;
};

export const edgeNativeClustersHostsList = async (
  uid: string,
  options?: RequestInit,
): Promise<edgeNativeClustersHostsListResponse> => {
  return customInstance<edgeNativeClustersHostsListResponse>(
    getEdgeNativeClustersHostsListUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary reset the edge clusters by deleting machine pools and conditions
 */
export type v1SpectroClustersUidEdgeResetResponse204 = {
  data: void;
  status: 204;
};

export type v1SpectroClustersUidEdgeResetResponseComposite =
  v1SpectroClustersUidEdgeResetResponse204;

export type v1SpectroClustersUidEdgeResetResponse =
  v1SpectroClustersUidEdgeResetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidEdgeResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/edge/reset`;
};

export const v1SpectroClustersUidEdgeReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidEdgeResetResponse> => {
  return customInstance<v1SpectroClustersUidEdgeResetResponse>(
    getV1SpectroClustersUidEdgeResetUrl(uid),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Reset cluster backup schedule settings
 */
export type clusterFeatureBackupScheduleResetResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureBackupScheduleResetResponseComposite =
  clusterFeatureBackupScheduleResetResponse204;

export type clusterFeatureBackupScheduleResetResponse =
  clusterFeatureBackupScheduleResetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureBackupScheduleResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const clusterFeatureBackupScheduleReset = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterFeatureBackupScheduleResetResponse> => {
  return customInstance<clusterFeatureBackupScheduleResetResponse>(
    getClusterFeatureBackupScheduleResetUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the cluster backup result
 */
export type clusterFeatureBackupGetResponse200 = {
  data: ClusterBackup;
  status: 200;
};

export type clusterFeatureBackupGetResponseComposite =
  clusterFeatureBackupGetResponse200;

export type clusterFeatureBackupGetResponse =
  clusterFeatureBackupGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureBackupGetUrl = (
  uid: string,
  params?: ClusterFeatureBackupGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const clusterFeatureBackupGet = async (
  uid: string,
  params?: ClusterFeatureBackupGetParams,
  options?: RequestInit,
): Promise<clusterFeatureBackupGetResponse> => {
  return customInstance<clusterFeatureBackupGetResponse>(
    getClusterFeatureBackupGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Create cluster backup settings
 */
export type clusterFeatureBackupCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterFeatureBackupCreateResponseComposite =
  clusterFeatureBackupCreateResponse201;

export type clusterFeatureBackupCreateResponse =
  clusterFeatureBackupCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureBackupCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const clusterFeatureBackupCreate = async (
  uid: string,
  v1ClusterBackupConfigBody: V1ClusterBackupConfigBody,
  options?: RequestInit,
): Promise<clusterFeatureBackupCreateResponse> => {
  return customInstance<clusterFeatureBackupCreateResponse>(
    getClusterFeatureBackupCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterBackupConfigBody),
    },
  );
};

/**
 * @summary Update cluster backup settings
 */
export type clusterFeatureBackupUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureBackupUpdateResponseComposite =
  clusterFeatureBackupUpdateResponse204;

export type clusterFeatureBackupUpdateResponse =
  clusterFeatureBackupUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureBackupUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const clusterFeatureBackupUpdate = async (
  uid: string,
  v1ClusterBackupConfigBody: V1ClusterBackupConfigBody,
  options?: RequestInit,
): Promise<clusterFeatureBackupUpdateResponse> => {
  return customInstance<clusterFeatureBackupUpdateResponse>(
    getClusterFeatureBackupUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterBackupConfigBody),
    },
  );
};

/**
 * @summary Create on demand cluster backup
 */
export type clusterFeatureBackupOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterFeatureBackupOnDemandCreateResponseComposite =
  clusterFeatureBackupOnDemandCreateResponse201;

export type clusterFeatureBackupOnDemandCreateResponse =
  clusterFeatureBackupOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureBackupOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup/onDemand`;
};

export const clusterFeatureBackupOnDemandCreate = async (
  uid: string,
  v1ClusterBackupConfigBody: V1ClusterBackupConfigBody,
  options?: RequestInit,
): Promise<clusterFeatureBackupOnDemandCreateResponse> => {
  return customInstance<clusterFeatureBackupOnDemandCreateResponse>(
    getClusterFeatureBackupOnDemandCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterBackupConfigBody),
    },
  );
};

/**
 * @summary Delete cluster backup
 */
export type clusterFeatureBackupDeleteResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureBackupDeleteResponseComposite =
  clusterFeatureBackupDeleteResponse204;

export type clusterFeatureBackupDeleteResponse =
  clusterFeatureBackupDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureBackupDeleteUrl = (
  uid: string,
  backupName: string,
  requestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup/${backupName}/request/${requestUid}`;
};

export const clusterFeatureBackupDelete = async (
  uid: string,
  backupName: string,
  requestUid: string,
  options?: RequestInit,
): Promise<clusterFeatureBackupDeleteResponse> => {
  return customInstance<clusterFeatureBackupDeleteResponse>(
    getClusterFeatureBackupDeleteUrl(uid, backupName, requestUid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the compliance scan of cluster, if driverType is provided then specific status of driverType will be returned
 */
export type clusterFeatureComplianceScanGetResponse200 = {
  data: ClusterComplianceScan;
  status: 200;
};

export type clusterFeatureComplianceScanGetResponseComposite =
  clusterFeatureComplianceScanGetResponse200;

export type clusterFeatureComplianceScanGetResponse =
  clusterFeatureComplianceScanGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureComplianceScanGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const clusterFeatureComplianceScanGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterFeatureComplianceScanGetResponse> => {
  return customInstance<clusterFeatureComplianceScanGetResponse>(
    getClusterFeatureComplianceScanGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Create cluster compliance scan
 */
export type clusterFeatureComplianceScanCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterFeatureComplianceScanCreateResponseComposite =
  clusterFeatureComplianceScanCreateResponse201;

export type clusterFeatureComplianceScanCreateResponse =
  clusterFeatureComplianceScanCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureComplianceScanCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const clusterFeatureComplianceScanCreate = async (
  uid: string,
  v1ClusterComplianceScheduleConfigBody: V1ClusterComplianceScheduleConfigBody,
  options?: RequestInit,
): Promise<clusterFeatureComplianceScanCreateResponse> => {
  return customInstance<clusterFeatureComplianceScanCreateResponse>(
    getClusterFeatureComplianceScanCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterComplianceScheduleConfigBody),
    },
  );
};

/**
 * @summary Update cluster compliance scan settings
 */
export type clusterFeatureComplianceScanUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureComplianceScanUpdateResponseComposite =
  clusterFeatureComplianceScanUpdateResponse204;

export type clusterFeatureComplianceScanUpdateResponse =
  clusterFeatureComplianceScanUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureComplianceScanUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const clusterFeatureComplianceScanUpdate = async (
  uid: string,
  v1ClusterComplianceScheduleConfigBody: V1ClusterComplianceScheduleConfigBody,
  options?: RequestInit,
): Promise<clusterFeatureComplianceScanUpdateResponse> => {
  return customInstance<clusterFeatureComplianceScanUpdateResponse>(
    getClusterFeatureComplianceScanUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterComplianceScheduleConfigBody),
    },
  );
};

/**
 * @summary Returns the compliance scan log by cluster uid and driver type
 */
export type clusterFeatureComplianceScanLogsGetResponse200 = {
  data: ClusterComplianceScanLogs;
  status: 200;
};

export type clusterFeatureComplianceScanLogsGetResponseComposite =
  clusterFeatureComplianceScanLogsGetResponse200;

export type clusterFeatureComplianceScanLogsGetResponse =
  clusterFeatureComplianceScanLogsGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureComplianceScanLogsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers`;
};

export const clusterFeatureComplianceScanLogsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterFeatureComplianceScanLogsGetResponse> => {
  return customInstance<clusterFeatureComplianceScanLogsGetResponse>(
    getClusterFeatureComplianceScanLogsGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update the KubeBench compliance scan log by uid
 */
export type clusterFeatureScanKubeBenchLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureScanKubeBenchLogUpdateResponseComposite =
  clusterFeatureScanKubeBenchLogUpdateResponse204;

export type clusterFeatureScanKubeBenchLogUpdateResponse =
  clusterFeatureScanKubeBenchLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureScanKubeBenchLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/kubeBench`;
};

export const clusterFeatureScanKubeBenchLogUpdate = async (
  uid: string,
  kubeBenchEntity: KubeBenchEntity,
  options?: RequestInit,
): Promise<clusterFeatureScanKubeBenchLogUpdateResponse> => {
  return customInstance<clusterFeatureScanKubeBenchLogUpdateResponse>(
    getClusterFeatureScanKubeBenchLogUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(kubeBenchEntity),
    },
  );
};

/**
 * @summary Update the KubeHunter compliance scan log by uid
 */
export type clusterFeatureScanKubeHunterLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureScanKubeHunterLogUpdateResponseComposite =
  clusterFeatureScanKubeHunterLogUpdateResponse204;

export type clusterFeatureScanKubeHunterLogUpdateResponse =
  clusterFeatureScanKubeHunterLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureScanKubeHunterLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/kubeHunter`;
};

export const clusterFeatureScanKubeHunterLogUpdate = async (
  uid: string,
  kubeHunterEntity: KubeHunterEntity,
  options?: RequestInit,
): Promise<clusterFeatureScanKubeHunterLogUpdateResponse> => {
  return customInstance<clusterFeatureScanKubeHunterLogUpdateResponse>(
    getClusterFeatureScanKubeHunterLogUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(kubeHunterEntity),
    },
  );
};

/**
 * @summary Update the Sonobuoy compliance scan log by uid
 */
export type clusterFeatureScanSonobuoyLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureScanSonobuoyLogUpdateResponseComposite =
  clusterFeatureScanSonobuoyLogUpdateResponse204;

export type clusterFeatureScanSonobuoyLogUpdateResponse =
  clusterFeatureScanSonobuoyLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureScanSonobuoyLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/sonobuoy`;
};

export const clusterFeatureScanSonobuoyLogUpdate = async (
  uid: string,
  sonobuoyEntity: SonobuoyEntity,
  options?: RequestInit,
): Promise<clusterFeatureScanSonobuoyLogUpdateResponse> => {
  return customInstance<clusterFeatureScanSonobuoyLogUpdateResponse>(
    getClusterFeatureScanSonobuoyLogUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(sonobuoyEntity),
    },
  );
};

/**
 * @summary Update the Syft compliance scan log by uid
 */
export type clusterFeatureScanSyftLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureScanSyftLogUpdateResponseComposite =
  clusterFeatureScanSyftLogUpdateResponse204;

export type clusterFeatureScanSyftLogUpdateResponse =
  clusterFeatureScanSyftLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureScanSyftLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/syft`;
};

export const clusterFeatureScanSyftLogUpdate = async (
  uid: string,
  syftEntity: SyftEntity,
  options?: RequestInit,
): Promise<clusterFeatureScanSyftLogUpdateResponse> => {
  return customInstance<clusterFeatureScanSyftLogUpdateResponse>(
    getClusterFeatureScanSyftLogUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(syftEntity),
    },
  );
};

/**
 * @summary Delete the compliance scan log by uid
 */
export type clusterFeatureComplianceScanLogDeleteResponse204 = {
  data: void;
  status: 204;
};

export type clusterFeatureComplianceScanLogDeleteResponseComposite =
  clusterFeatureComplianceScanLogDeleteResponse204;

export type clusterFeatureComplianceScanLogDeleteResponse =
  clusterFeatureComplianceScanLogDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureComplianceScanLogDeleteUrl = (
  uid: string,
  logUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}`;
};

export const clusterFeatureComplianceScanLogDelete = async (
  uid: string,
  logUid: string,
  options?: RequestInit,
): Promise<clusterFeatureComplianceScanLogDeleteResponse> => {
  return customInstance<clusterFeatureComplianceScanLogDeleteResponse>(
    getClusterFeatureComplianceScanLogDeleteUrl(uid, logUid),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the KubeBench compliance scan log by uid
 */
export type clusterFeatureKubeBenchLogGetResponse200 = {
  data: ClusterScanLogKubeBench;
  status: 200;
};

export type clusterFeatureKubeBenchLogGetResponseComposite =
  clusterFeatureKubeBenchLogGetResponse200;

export type clusterFeatureKubeBenchLogGetResponse =
  clusterFeatureKubeBenchLogGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureKubeBenchLogGetUrl = (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeBenchLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeBench?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeBench`;
};

export const clusterFeatureKubeBenchLogGet = async (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeBenchLogGetParams,
  options?: RequestInit,
): Promise<clusterFeatureKubeBenchLogGetResponse> => {
  return customInstance<clusterFeatureKubeBenchLogGetResponse>(
    getClusterFeatureKubeBenchLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the KubeHunter compliance scan log by uid
 */
export type clusterFeatureKubeHunterLogGetResponse200 = {
  data: ClusterScanLogKubeHunter;
  status: 200;
};

export type clusterFeatureKubeHunterLogGetResponseComposite =
  clusterFeatureKubeHunterLogGetResponse200;

export type clusterFeatureKubeHunterLogGetResponse =
  clusterFeatureKubeHunterLogGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureKubeHunterLogGetUrl = (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeHunterLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeHunter?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeHunter`;
};

export const clusterFeatureKubeHunterLogGet = async (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeHunterLogGetParams,
  options?: RequestInit,
): Promise<clusterFeatureKubeHunterLogGetResponse> => {
  return customInstance<clusterFeatureKubeHunterLogGetResponse>(
    getClusterFeatureKubeHunterLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the Sonobuoy compliance scan log by uid
 */
export type clusterFeatureSonobuoyLogGetResponse200 = {
  data: ClusterScanLogSonobuoy;
  status: 200;
};

export type clusterFeatureSonobuoyLogGetResponseComposite =
  clusterFeatureSonobuoyLogGetResponse200;

export type clusterFeatureSonobuoyLogGetResponse =
  clusterFeatureSonobuoyLogGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureSonobuoyLogGetUrl = (
  uid: string,
  logUid: string,
  params?: ClusterFeatureSonobuoyLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/sonobuoy?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/sonobuoy`;
};

export const clusterFeatureSonobuoyLogGet = async (
  uid: string,
  logUid: string,
  params?: ClusterFeatureSonobuoyLogGetParams,
  options?: RequestInit,
): Promise<clusterFeatureSonobuoyLogGetResponse> => {
  return customInstance<clusterFeatureSonobuoyLogGetResponse>(
    getClusterFeatureSonobuoyLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the Syft compliance scan log by uid
 */
export type clusterFeatureSyftLogGetResponse200 = {
  data: ClusterScanLogSyft;
  status: 200;
};

export type clusterFeatureSyftLogGetResponseComposite =
  clusterFeatureSyftLogGetResponse200;

export type clusterFeatureSyftLogGetResponse =
  clusterFeatureSyftLogGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureSyftLogGetUrl = (uid: string, logUid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft`;
};

export const clusterFeatureSyftLogGet = async (
  uid: string,
  logUid: string,
  options?: RequestInit,
): Promise<clusterFeatureSyftLogGetResponse> => {
  return customInstance<clusterFeatureSyftLogGetResponse>(
    getClusterFeatureSyftLogGetUrl(uid, logUid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the image sbom of syft scan log of cluster
 */
export type syftScanLogImageSBOMGetResponse200 = {
  data: Blob;
  status: 200;
};

export type syftScanLogImageSBOMGetResponseComposite =
  syftScanLogImageSBOMGetResponse200;

export type syftScanLogImageSBOMGetResponse =
  syftScanLogImageSBOMGetResponseComposite & {
    headers: Headers;
  };

export const getSyftScanLogImageSBOMGetUrl = (
  uid: string,
  logUid: string,
  params: SyftScanLogImageSBOMGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft/sbom?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft/sbom`;
};

export const syftScanLogImageSBOMGet = async (
  uid: string,
  logUid: string,
  params: SyftScanLogImageSBOMGetParams,
  options?: RequestInit,
): Promise<syftScanLogImageSBOMGetResponse> => {
  return customInstance<syftScanLogImageSBOMGetResponse>(
    getSyftScanLogImageSBOMGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Downloads the driver cluster logs
 */
export type clusterFeatureDriverLogDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type clusterFeatureDriverLogDownloadResponseComposite =
  clusterFeatureDriverLogDownloadResponse200;

export type clusterFeatureDriverLogDownloadResponse =
  clusterFeatureDriverLogDownloadResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureDriverLogDownloadUrl = (
  uid: string,
  logUid: string,
  driver: "kubeBench" | "kubeHunter" | "sonobuoy" | "syft",
  params?: ClusterFeatureDriverLogDownloadParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/${driver}/download?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/${driver}/download`;
};

export const clusterFeatureDriverLogDownload = async (
  uid: string,
  logUid: string,
  driver: "kubeBench" | "kubeHunter" | "sonobuoy" | "syft",
  params?: ClusterFeatureDriverLogDownloadParams,
  options?: RequestInit,
): Promise<clusterFeatureDriverLogDownloadResponse> => {
  return customInstance<clusterFeatureDriverLogDownloadResponse>(
    getClusterFeatureDriverLogDownloadUrl(uid, logUid, driver, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Create on demand cluster compliance scan
 */
export type clusterFeatureComplianceScanOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterFeatureComplianceScanOnDemandCreateResponseComposite =
  clusterFeatureComplianceScanOnDemandCreateResponse201;

export type clusterFeatureComplianceScanOnDemandCreateResponse =
  clusterFeatureComplianceScanOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureComplianceScanOnDemandCreateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/onDemand`;
};

export const clusterFeatureComplianceScanOnDemandCreate = async (
  uid: string,
  clusterComplianceOnDemandConfig: ClusterComplianceOnDemandConfig,
  options?: RequestInit,
): Promise<clusterFeatureComplianceScanOnDemandCreateResponse> => {
  return customInstance<clusterFeatureComplianceScanOnDemandCreateResponse>(
    getClusterFeatureComplianceScanOnDemandCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterComplianceOnDemandConfig),
    },
  );
};

/**
 * @summary Get the installed helm charts of a specified cluster
 */
export type clusterFeatureHelmChartsGetResponse200 = {
  data: ClusterHelmCharts;
  status: 200;
};

export type clusterFeatureHelmChartsGetResponseComposite =
  clusterFeatureHelmChartsGetResponse200;

export type clusterFeatureHelmChartsGetResponse =
  clusterFeatureHelmChartsGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureHelmChartsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/helmCharts`;
};

export const clusterFeatureHelmChartsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterFeatureHelmChartsGetResponse> => {
  return customInstance<clusterFeatureHelmChartsGetResponse>(
    getClusterFeatureHelmChartsGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get the log fetcher for cluster
 */
export type clusterFeatureLogFetcherGetResponse200 = {
  data: ClusterLogFetcher;
  status: 200;
};

export type clusterFeatureLogFetcherGetResponseComposite =
  clusterFeatureLogFetcherGetResponse200;

export type clusterFeatureLogFetcherGetResponse =
  clusterFeatureLogFetcherGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureLogFetcherGetUrl = (
  uid: string,
  params?: ClusterFeatureLogFetcherGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher`;
};

export const clusterFeatureLogFetcherGet = async (
  uid: string,
  params?: ClusterFeatureLogFetcherGetParams,
  options?: RequestInit,
): Promise<clusterFeatureLogFetcherGetResponse> => {
  return customInstance<clusterFeatureLogFetcherGetResponse>(
    getClusterFeatureLogFetcherGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Create the log fetcher for cluster
 */
export type clusterFeatureLogFetcherCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterFeatureLogFetcherCreateResponseComposite =
  clusterFeatureLogFetcherCreateResponse201;

export type clusterFeatureLogFetcherCreateResponse =
  clusterFeatureLogFetcherCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureLogFetcherCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher`;
};

export const clusterFeatureLogFetcherCreate = async (
  uid: string,
  clusterLogFetcherRequest: ClusterLogFetcherRequest,
  options?: RequestInit,
): Promise<clusterFeatureLogFetcherCreateResponse> => {
  return customInstance<clusterFeatureLogFetcherCreateResponse>(
    getClusterFeatureLogFetcherCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterLogFetcherRequest),
    },
  );
};

/**
 * @summary Get the installed manifests of a specified cluster
 */
export type clusterFeatureManifestsGetResponse200 = {
  data: ClusterManifests;
  status: 200;
};

export type clusterFeatureManifestsGetResponseComposite =
  clusterFeatureManifestsGetResponse200;

export type clusterFeatureManifestsGetResponse =
  clusterFeatureManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureManifestsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/manifests`;
};

export const clusterFeatureManifestsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterFeatureManifestsGetResponse> => {
  return customInstance<clusterFeatureManifestsGetResponse>(
    getClusterFeatureManifestsGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the cluster restore of cluster
 */
export type clusterFeatureRestoreGetResponse200 = {
  data: ClusterRestore;
  status: 200;
};

export type clusterFeatureRestoreGetResponseComposite =
  clusterFeatureRestoreGetResponse200;

export type clusterFeatureRestoreGetResponse =
  clusterFeatureRestoreGetResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureRestoreGetUrl = (
  uid: string,
  params?: ClusterFeatureRestoreGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore`;
};

export const clusterFeatureRestoreGet = async (
  uid: string,
  params?: ClusterFeatureRestoreGetParams,
  options?: RequestInit,
): Promise<clusterFeatureRestoreGetResponse> => {
  return customInstance<clusterFeatureRestoreGetResponse>(
    getClusterFeatureRestoreGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Create on demand cluster restore
 */
export type clusterFeatureRestoreOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterFeatureRestoreOnDemandCreateResponseComposite =
  clusterFeatureRestoreOnDemandCreateResponse201;

export type clusterFeatureRestoreOnDemandCreateResponse =
  clusterFeatureRestoreOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterFeatureRestoreOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore/onDemand`;
};

export const clusterFeatureRestoreOnDemandCreate = async (
  uid: string,
  clusterRestoreConfig: ClusterRestoreConfig,
  options?: RequestInit,
): Promise<clusterFeatureRestoreOnDemandCreateResponse> => {
  return customInstance<clusterFeatureRestoreOnDemandCreateResponse>(
    getClusterFeatureRestoreOnDemandCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterRestoreConfig),
    },
  );
};

/**
 * @summary Update specific cluster heartbeat
 */
export type spectroClustersUidHeartbeatUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidHeartbeatUpdateResponseComposite =
  spectroClustersUidHeartbeatUpdateResponse204;

export type spectroClustersUidHeartbeatUpdateResponse =
  spectroClustersUidHeartbeatUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidHeartbeatUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/heartbeat`;
};

export const spectroClustersUidHeartbeatUpdate = async (
  uid: string,
  spectroClusterHeartbeat: SpectroClusterHeartbeat,
  options?: RequestInit,
): Promise<spectroClustersUidHeartbeatUpdateResponse> => {
  return customInstance<spectroClustersUidHeartbeatUpdateResponse>(
    getSpectroClustersUidHeartbeatUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterHeartbeat),
    },
  );
};

/**
 * @summary Returns the metadata of all hybrid pools associated with the specified cluster
 */
export type spectroClustersGetHybridPoolsMetadataResponse200 = {
  data: SpectroClusterHybridPoolsMetadata;
  status: 200;
};

export type spectroClustersGetHybridPoolsMetadataResponseComposite =
  spectroClustersGetHybridPoolsMetadataResponse200;

export type spectroClustersGetHybridPoolsMetadataResponse =
  spectroClustersGetHybridPoolsMetadataResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGetHybridPoolsMetadataUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/hybridPools/metadata`;
};

export const spectroClustersGetHybridPoolsMetadata = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersGetHybridPoolsMetadataResponse> => {
  return customInstance<spectroClustersGetHybridPoolsMetadataResponse>(
    getSpectroClustersGetHybridPoolsMetadataUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update specific cluster hybrid settings
 */
export type spectroClustersUidHybridSettingsResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidHybridSettingsResponseComposite =
  spectroClustersUidHybridSettingsResponse204;

export type spectroClustersUidHybridSettingsResponse =
  spectroClustersUidHybridSettingsResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidHybridSettingsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/hybridSettings`;
};

export const spectroClustersUidHybridSettings = async (
  uid: string,
  clusterHybridSettingsEntity: ClusterHybridSettingsEntity,
  options?: RequestInit,
): Promise<spectroClustersUidHybridSettingsResponse> => {
  return customInstance<spectroClustersUidHybridSettingsResponse>(
    getSpectroClustersUidHybridSettingsUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterHybridSettingsEntity),
    },
  );
};

/**
 * @summary Returns the specified cluster's import manifest file
 */
export type spectroClustersUidImportManifestResponse200 = {
  data: Blob;
  status: 200;
};

export type spectroClustersUidImportManifestResponseComposite =
  spectroClustersUidImportManifestResponse200;

export type spectroClustersUidImportManifestResponse =
  spectroClustersUidImportManifestResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidImportManifestUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/import/manifest`;
};

export const spectroClustersUidImportManifest = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidImportManifestResponse> => {
  return customInstance<spectroClustersUidImportManifestResponse>(
    getSpectroClustersUidImportManifestUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Upgrade the specified imported read only cluster with full permissions
 */
export type spectroClustersUidImportUpgradePatchResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidImportUpgradePatchResponseComposite =
  spectroClustersUidImportUpgradePatchResponse204;

export type spectroClustersUidImportUpgradePatchResponse =
  spectroClustersUidImportUpgradePatchResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidImportUpgradePatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/import/upgrade`;
};

export const spectroClustersUidImportUpgradePatch = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidImportUpgradePatchResponse> => {
  return customInstance<spectroClustersUidImportUpgradePatchResponse>(
    getSpectroClustersUidImportUpgradePatchUrl(uid),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * @summary Get K8Certificate for spectro cluster
 */
export type spectroClustersK8CertificateResponse200 = {
  data: MachineCertificates;
  status: 200;
};

export type spectroClustersK8CertificateResponseComposite =
  spectroClustersK8CertificateResponse200;

export type spectroClustersK8CertificateResponse =
  spectroClustersK8CertificateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersK8CertificateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates`;
};

export const spectroClustersK8Certificate = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersK8CertificateResponse> => {
  return customInstance<spectroClustersK8CertificateResponse>(
    getSpectroClustersK8CertificateUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update K8Certificate for spectro cluster
 */
export type spectroClustersK8CertificateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersK8CertificateUpdateResponseComposite =
  spectroClustersK8CertificateUpdateResponse204;

export type spectroClustersK8CertificateUpdateResponse =
  spectroClustersK8CertificateUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersK8CertificateUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates`;
};

export const spectroClustersK8CertificateUpdate = async (
  uid: string,
  spectroClusterK8sCertificate: SpectroClusterK8sCertificate,
  options?: RequestInit,
): Promise<spectroClustersK8CertificateUpdateResponse> => {
  return customInstance<spectroClustersK8CertificateUpdateResponse>(
    getSpectroClustersK8CertificateUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterK8sCertificate),
    },
  );
};

/**
 * @summary Sets the cluster control plane nodes Kubernetes certificates for renewal
 */
export type spectroClustersCertificatesRenewResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersCertificatesRenewResponseComposite =
  spectroClustersCertificatesRenewResponse204;

export type spectroClustersCertificatesRenewResponse =
  spectroClustersCertificatesRenewResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersCertificatesRenewUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates/renew`;
};

export const spectroClustersCertificatesRenew = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersCertificatesRenewResponse> => {
  return customInstance<spectroClustersCertificatesRenewResponse>(
    getSpectroClustersCertificatesRenewUrl(uid),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type v1SpectroClustersUidKubeCtlRedirectResponse200 = {
  data: SpectroClusterKubeCtlRedirect;
  status: 200;
};

export type v1SpectroClustersUidKubeCtlRedirectResponseComposite =
  v1SpectroClustersUidKubeCtlRedirectResponse200;

export type v1SpectroClustersUidKubeCtlRedirectResponse =
  v1SpectroClustersUidKubeCtlRedirectResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeCtlRedirectUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/kubectl/redirect`;
};

export const v1SpectroClustersUidKubeCtlRedirect = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidKubeCtlRedirectResponse> => {
  return customInstance<v1SpectroClustersUidKubeCtlRedirectResponse>(
    getV1SpectroClustersUidKubeCtlRedirectUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Associate the assets for the cluster
 */
export type spectroClustersUidLocationPutResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidLocationPutResponseComposite =
  spectroClustersUidLocationPutResponse204;

export type spectroClustersUidLocationPutResponse =
  spectroClustersUidLocationPutResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidLocationPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/location`;
};

export const spectroClustersUidLocationPut = async (
  uid: string,
  spectroClusterLocationInputEntity: SpectroClusterLocationInputEntity,
  options?: RequestInit,
): Promise<spectroClustersUidLocationPutResponse> => {
  return customInstance<spectroClustersUidLocationPutResponse>(
    getSpectroClustersUidLocationPutUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterLocationInputEntity),
    },
  );
};

/**
 * @summary Update the specified spectro cluster metadata
 */
export type spectroClustersUidMetadataUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidMetadataUpdateResponseComposite =
  spectroClustersUidMetadataUpdateResponse204;

export type spectroClustersUidMetadataUpdateResponse =
  spectroClustersUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/metadata`;
};

export const spectroClustersUidMetadataUpdate = async (
  uid: string,
  v1ObjectMetaInputEntitySchemaBody: V1ObjectMetaInputEntitySchemaBody,
  options?: RequestInit,
): Promise<spectroClustersUidMetadataUpdateResponse> => {
  return customInstance<spectroClustersUidMetadataUpdateResponse>(
    getSpectroClustersUidMetadataUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ObjectMetaInputEntitySchemaBody),
    },
  );
};

/**
 * @summary Returns available namespaces for the cluster
 */
export type clusterNamespacesGetResponse200 = {
  data: ClusterNamespaces;
  status: 200;
};

export type clusterNamespacesGetResponseComposite =
  clusterNamespacesGetResponse200;

export type clusterNamespacesGetResponse =
  clusterNamespacesGetResponseComposite & {
    headers: Headers;
  };

export const getClusterNamespacesGetUrl = (
  uid: string,
  params?: ClusterNamespacesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/namespaces?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/namespaces`;
};

export const clusterNamespacesGet = async (
  uid: string,
  params?: ClusterNamespacesGetParams,
  options?: RequestInit,
): Promise<clusterNamespacesGetResponse> => {
  return customInstance<clusterNamespacesGetResponse>(
    getClusterNamespacesGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns k8s spectrocluster oidc
 */
export type v1SpectroClustersUidOIDCResponse200 = {
  data: SpectroClusterOidcSpec;
  status: 200;
};

export type v1SpectroClustersUidOIDCResponseComposite =
  v1SpectroClustersUidOIDCResponse200;

export type v1SpectroClustersUidOIDCResponse =
  v1SpectroClustersUidOIDCResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOIDCUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/oidc`;
};

export const v1SpectroClustersUidOIDC = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidOIDCResponse> => {
  return customInstance<v1SpectroClustersUidOIDCResponse>(
    getV1SpectroClustersUidOIDCUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns k8s dashboard url
 */
export type v1SpectroClustersUidOIDCDashboardUrlResponse200 = {
  data: SectroClusterK8sDashboardUrl;
  status: 200;
};

export type v1SpectroClustersUidOIDCDashboardUrlResponseComposite =
  v1SpectroClustersUidOIDCDashboardUrlResponse200;

export type v1SpectroClustersUidOIDCDashboardUrlResponse =
  v1SpectroClustersUidOIDCDashboardUrlResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOIDCDashboardUrlUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/oidc/dashboard/url`;
};

export const v1SpectroClustersUidOIDCDashboardUrl = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidOIDCDashboardUrlResponse> => {
  return customInstance<v1SpectroClustersUidOIDCDashboardUrlResponse>(
    getV1SpectroClustersUidOIDCDashboardUrlUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the specified cluster's manifest
 */
export type spectroClustersUidPackManifestsUidGetResponse200 = {
  data: Manifest;
  status: 200;
};

export type spectroClustersUidPackManifestsUidGetResponseComposite =
  spectroClustersUidPackManifestsUidGetResponse200;

export type spectroClustersUidPackManifestsUidGetResponse =
  spectroClustersUidPackManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidPackManifestsUidGetUrl = (
  uid: string,
  manifestUid: string,
  params?: SpectroClustersUidPackManifestsUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/manifests/${manifestUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/manifests/${manifestUid}`;
};

export const spectroClustersUidPackManifestsUidGet = async (
  uid: string,
  manifestUid: string,
  params?: SpectroClustersUidPackManifestsUidGetParams,
  options?: RequestInit,
): Promise<spectroClustersUidPackManifestsUidGetResponse> => {
  return customInstance<spectroClustersUidPackManifestsUidGetResponse>(
    getSpectroClustersUidPackManifestsUidGetUrl(uid, manifestUid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get specified cluster pack properties
 */
export type spectroClustersUidPackPropertiesResponse200 = {
  data: SpectroClusterPackProperties;
  status: 200;
};

export type spectroClustersUidPackPropertiesResponseComposite =
  spectroClustersUidPackPropertiesResponse200;

export type spectroClustersUidPackPropertiesResponse =
  spectroClustersUidPackPropertiesResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidPackPropertiesUrl = (
  uid: string,
  params: SpectroClustersUidPackPropertiesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/properties?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/properties`;
};

export const spectroClustersUidPackProperties = async (
  uid: string,
  params: SpectroClustersUidPackPropertiesParams,
  options?: RequestInit,
): Promise<spectroClustersUidPackPropertiesResponse> => {
  return customInstance<spectroClustersUidPackPropertiesResponse>(
    getSpectroClustersUidPackPropertiesUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the cluster's pack references
 */
export type spectroClustersPacksRefUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersPacksRefUpdateResponseComposite =
  spectroClustersPacksRefUpdateResponse204;

export type spectroClustersPacksRefUpdateResponse =
  spectroClustersPacksRefUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersPacksRefUpdateUrl = (
  uid: string,
  params?: SpectroClustersPacksRefUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packRefs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packRefs`;
};

export const spectroClustersPacksRefUpdate = async (
  uid: string,
  clusterNotificationUpdateEntity: ClusterNotificationUpdateEntity,
  params?: SpectroClustersPacksRefUpdateParams,
  options?: RequestInit,
): Promise<spectroClustersPacksRefUpdateResponse> => {
  return customInstance<spectroClustersPacksRefUpdateResponse>(
    getSpectroClustersPacksRefUpdateUrl(uid, params),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterNotificationUpdateEntity),
    },
  );
};

/**
 * @summary Returns the specified cluster's packs resolved values
 */
export type spectroClustersUidPacksResolvedValuesGetResponse200 = {
  data: SpectroClusterProfilesResolvedValues;
  status: 200;
};

export type spectroClustersUidPacksResolvedValuesGetResponseComposite =
  spectroClustersUidPacksResolvedValuesGetResponse200;

export type spectroClustersUidPacksResolvedValuesGetResponse =
  spectroClustersUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidPacksResolvedValuesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packs/resolvedValues`;
};

export const spectroClustersUidPacksResolvedValuesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidPacksResolvedValuesGetResponse> => {
  return customInstance<spectroClustersUidPacksResolvedValuesGetResponse>(
    getSpectroClustersUidPacksResolvedValuesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Patch update specified cluster's packs status
 */
export type spectroClustersUidPacksStatusPatchResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidPacksStatusPatchResponseComposite =
  spectroClustersUidPacksStatusPatchResponse204;

export type spectroClustersUidPacksStatusPatchResponse =
  spectroClustersUidPacksStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidPacksStatusPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packs/status`;
};

export const spectroClustersUidPacksStatusPatch = async (
  uid: string,
  v1SpectroClusterPacksStatusEntityBody: V1SpectroClusterPacksStatusEntityBody,
  options?: RequestInit,
): Promise<spectroClustersUidPacksStatusPatchResponse> => {
  return customInstance<spectroClustersUidPacksStatusPatchResponse>(
    getSpectroClustersUidPacksStatusPatchUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterPacksStatusEntityBody),
    },
  );
};

/**
 * @summary Returns the profile updates of a specified cluster
 */
export type spectroClustersGetProfileUpdatesResponse200 = {
  data: SpectroClusterProfileUpdates;
  status: 200;
};

export type spectroClustersGetProfileUpdatesResponseComposite =
  spectroClustersGetProfileUpdatesResponse200;

export type spectroClustersGetProfileUpdatesResponse =
  spectroClustersGetProfileUpdatesResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGetProfileUpdatesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profileUpdates`;
};

export const spectroClustersGetProfileUpdates = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersGetProfileUpdatesResponse> => {
  return customInstance<spectroClustersGetProfileUpdatesResponse>(
    getSpectroClustersGetProfileUpdatesUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Remove cluster profiles from the specified cluster
 */
export type spectroClustersDeleteProfilesResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersDeleteProfilesResponseComposite =
  spectroClustersDeleteProfilesResponse204;

export type spectroClustersDeleteProfilesResponse =
  spectroClustersDeleteProfilesResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersDeleteProfilesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const spectroClustersDeleteProfiles = async (
  uid: string,
  spectroClusterProfilesDeleteEntity: SpectroClusterProfilesDeleteEntity,
  options?: RequestInit,
): Promise<spectroClustersDeleteProfilesResponse> => {
  return customInstance<spectroClustersDeleteProfilesResponse>(
    getSpectroClustersDeleteProfilesUrl(uid),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterProfilesDeleteEntity),
    },
  );
};

/**
 * @summary Returns the associated profiles of a specified cluster
 */
export type spectroClustersGetProfilesResponse200 = {
  data: SpectroClusterProfileList;
  status: 200;
};

export type spectroClustersGetProfilesResponseComposite =
  spectroClustersGetProfilesResponse200;

export type spectroClustersGetProfilesResponse =
  spectroClustersGetProfilesResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGetProfilesUrl = (
  uid: string,
  params?: SpectroClustersGetProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const spectroClustersGetProfiles = async (
  uid: string,
  params?: SpectroClustersGetProfilesParams,
  options?: RequestInit,
): Promise<spectroClustersGetProfilesResponse> => {
  return customInstance<spectroClustersGetProfilesResponse>(
    getSpectroClustersGetProfilesUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Patch cluster profiles to the specified cluster
 */
export type spectroClustersPatchProfilesResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersPatchProfilesResponseComposite =
  spectroClustersPatchProfilesResponse204;

export type spectroClustersPatchProfilesResponse =
  spectroClustersPatchProfilesResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersPatchProfilesUrl = (
  uid: string,
  params?: SpectroClustersPatchProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const spectroClustersPatchProfiles = async (
  uid: string,
  v1SpectroClusterProfilesBody: V1SpectroClusterProfilesBody,
  params?: SpectroClustersPatchProfilesParams,
  options?: RequestInit,
): Promise<spectroClustersPatchProfilesResponse> => {
  return customInstance<spectroClustersPatchProfilesResponse>(
    getSpectroClustersPatchProfilesUrl(uid, params),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterProfilesBody),
    },
  );
};

/**
 * @summary Associate cluster profiles to the specified cluster
 */
export type spectroClustersUpdateProfilesResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUpdateProfilesResponseComposite =
  spectroClustersUpdateProfilesResponse204;

export type spectroClustersUpdateProfilesResponse =
  spectroClustersUpdateProfilesResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpdateProfilesUrl = (
  uid: string,
  params?: SpectroClustersUpdateProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const spectroClustersUpdateProfiles = async (
  uid: string,
  v1SpectroClusterProfilesBody: V1SpectroClusterProfilesBody,
  params?: SpectroClustersUpdateProfilesParams,
  options?: RequestInit,
): Promise<spectroClustersUpdateProfilesResponse> => {
  return customInstance<spectroClustersUpdateProfilesResponse>(
    getSpectroClustersUpdateProfilesUrl(uid, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterProfilesBody),
    },
  );
};

/**
 * @summary Returns the associated profile's pack manifests of a specified cluster
 */
export type spectroClustersGetProfilesPacksManifestsResponse200 = {
  data: SpectroClusterProfilesPacksManifests;
  status: 200;
};

export type spectroClustersGetProfilesPacksManifestsResponseComposite =
  spectroClustersGetProfilesPacksManifestsResponse200;

export type spectroClustersGetProfilesPacksManifestsResponse =
  spectroClustersGetProfilesPacksManifestsResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersGetProfilesPacksManifestsUrl = (
  uid: string,
  params?: SpectroClustersGetProfilesPacksManifestsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/packs/manifests?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/packs/manifests`;
};

export const spectroClustersGetProfilesPacksManifests = async (
  uid: string,
  params?: SpectroClustersGetProfilesPacksManifestsParams,
  options?: RequestInit,
): Promise<spectroClustersGetProfilesPacksManifestsResponse> => {
  return customInstance<spectroClustersGetProfilesPacksManifestsResponse>(
    getSpectroClustersGetProfilesPacksManifestsUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the specified cluster's profile pack configuration
 */
export type spectroClustersUidProfilesUidPacksConfigGetResponse200 = {
  data: SpectroClusterPackConfigList;
  status: 200;
};

export type spectroClustersUidProfilesUidPacksConfigGetResponseComposite =
  spectroClustersUidProfilesUidPacksConfigGetResponse200;

export type spectroClustersUidProfilesUidPacksConfigGetResponse =
  spectroClustersUidProfilesUidPacksConfigGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidProfilesUidPacksConfigGetUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/config`;
};

export const spectroClustersUidProfilesUidPacksConfigGet = async (
  uid: string,
  profileUid: string,
  packName: string,
  options?: RequestInit,
): Promise<spectroClustersUidProfilesUidPacksConfigGetResponse> => {
  return customInstance<spectroClustersUidProfilesUidPacksConfigGetResponse>(
    getSpectroClustersUidProfilesUidPacksConfigGetUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the associated profiles pack manifests of the specified cluster
 */
export type spectroClustersProfilesUidPackManifestsGetResponse200 = {
  data: PackManifests;
  status: 200;
};

export type spectroClustersProfilesUidPackManifestsGetResponseComposite =
  spectroClustersProfilesUidPackManifestsGetResponse200;

export type spectroClustersProfilesUidPackManifestsGetResponse =
  spectroClustersProfilesUidPackManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersProfilesUidPackManifestsGetUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/manifests`;
};

export const spectroClustersProfilesUidPackManifestsGet = async (
  uid: string,
  profileUid: string,
  packName: string,
  options?: RequestInit,
): Promise<spectroClustersProfilesUidPackManifestsGetResponse> => {
  return customInstance<spectroClustersProfilesUidPackManifestsGetResponse>(
    getSpectroClustersProfilesUidPackManifestsGetUrl(uid, profileUid, packName),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates cluster profiles pack manifests to the specified cluster
 */
export type spectroClustersProfilesUidPackManifestsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersProfilesUidPackManifestsUpdateResponseComposite =
  spectroClustersProfilesUidPackManifestsUpdateResponse204;

export type spectroClustersProfilesUidPackManifestsUpdateResponse =
  spectroClustersProfilesUidPackManifestsUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersProfilesUidPackManifestsUpdateUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/manifests`;
};

export const spectroClustersProfilesUidPackManifestsUpdate = async (
  uid: string,
  profileUid: string,
  packName: string,
  manifestRefInputEntities: ManifestRefInputEntities,
  options?: RequestInit,
): Promise<spectroClustersProfilesUidPackManifestsUpdateResponse> => {
  return customInstance<spectroClustersProfilesUidPackManifestsUpdateResponse>(
    getSpectroClustersProfilesUidPackManifestsUpdateUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(manifestRefInputEntities),
    },
  );
};

/**
 * @summary Returns the estimated rate of the specified cluster
 */
export type spectroClustersUidRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type spectroClustersUidRateResponseComposite =
  spectroClustersUidRateResponse200;

export type spectroClustersUidRateResponse =
  spectroClustersUidRateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidRateUrl = (
  uid: string,
  params?: SpectroClustersUidRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/rate`;
};

export const spectroClustersUidRate = async (
  uid: string,
  params?: SpectroClustersUidRateParams,
  options?: RequestInit,
): Promise<spectroClustersUidRateResponse> => {
  return customInstance<spectroClustersUidRateResponse>(
    getSpectroClustersUidRateUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the spectrocluster repave approve update
 */
export type spectroClustersUidRepaveApproveUpdateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidRepaveApproveUpdateResponseComposite =
  spectroClustersUidRepaveApproveUpdateResponse204;

export type spectroClustersUidRepaveApproveUpdateResponse =
  spectroClustersUidRepaveApproveUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidRepaveApproveUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/repave/approve`;
};

export const spectroClustersUidRepaveApproveUpdate = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidRepaveApproveUpdateResponse> => {
  return customInstance<spectroClustersUidRepaveApproveUpdateResponse>(
    getSpectroClustersUidRepaveApproveUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * @summary Returns the spectrocluster repave
 */
export type spectroClustersUidRepaveGetResponse200 = {
  data: SpectroClusterRepave;
  status: 200;
};

export type spectroClustersUidRepaveGetResponseComposite =
  spectroClustersUidRepaveGetResponse200;

export type spectroClustersUidRepaveGetResponse =
  spectroClustersUidRepaveGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidRepaveGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/repave/status`;
};

export const spectroClustersUidRepaveGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidRepaveGetResponse> => {
  return customInstance<spectroClustersUidRepaveGetResponse>(
    getSpectroClustersUidRepaveGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary reset the cluster s by deleting machine pools and condtions
 */
export type v1SpectroClustersUidResetResponse204 = {
  data: void;
  status: 204;
};

export type v1SpectroClustersUidResetResponseComposite =
  v1SpectroClustersUidResetResponse204;

export type v1SpectroClustersUidResetResponse =
  v1SpectroClustersUidResetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/reset`;
};

export const v1SpectroClustersUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidResetResponse> => {
  return customInstance<v1SpectroClustersUidResetResponse>(
    getV1SpectroClustersUidResetUrl(uid),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Get the cluster's status
 */
export type spectroClustersUidStatusResponse200 = {
  data: SpectroClusterStatusEntity;
  status: 200;
};

export type spectroClustersUidStatusResponseComposite =
  spectroClustersUidStatusResponse200;

export type spectroClustersUidStatusResponse =
  spectroClustersUidStatusResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status`;
};

export const spectroClustersUidStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidStatusResponse> => {
  return customInstance<spectroClustersUidStatusResponse>(
    getSpectroClustersUidStatusUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified cluster status condition
 */
export type spectroClustersUpdateStatusConditionResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUpdateStatusConditionResponseComposite =
  spectroClustersUpdateStatusConditionResponse204;

export type spectroClustersUpdateStatusConditionResponse =
  spectroClustersUpdateStatusConditionResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpdateStatusConditionUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/condition`;
};

export const spectroClustersUpdateStatusCondition = async (
  uid: string,
  clusterCondition: ClusterCondition,
  options?: RequestInit,
): Promise<spectroClustersUpdateStatusConditionResponse> => {
  return customInstance<spectroClustersUpdateStatusConditionResponse>(
    getSpectroClustersUpdateStatusConditionUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterCondition),
    },
  );
};

/**
 * @summary Updates the specified cluster status conditions
 */
export type spectroClustersUpdateStatusConditionsResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUpdateStatusConditionsResponseComposite =
  spectroClustersUpdateStatusConditionsResponse204;

export type spectroClustersUpdateStatusConditionsResponse =
  spectroClustersUpdateStatusConditionsResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpdateStatusConditionsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/conditions`;
};

export const spectroClustersUpdateStatusConditions = async (
  uid: string,
  clusterCondition: ClusterCondition[],
  options?: RequestInit,
): Promise<spectroClustersUpdateStatusConditionsResponse> => {
  return customInstance<spectroClustersUpdateStatusConditionsResponse>(
    getSpectroClustersUpdateStatusConditionsUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterCondition),
    },
  );
};

/**
 * @summary Updates the specified cluster's service endpoints information
 */
export type spectroClustersUpdateStatusEndpointsResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUpdateStatusEndpointsResponseComposite =
  spectroClustersUpdateStatusEndpointsResponse204;

export type spectroClustersUpdateStatusEndpointsResponse =
  spectroClustersUpdateStatusEndpointsResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpdateStatusEndpointsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/endpoints`;
};

export const spectroClustersUpdateStatusEndpoints = async (
  uid: string,
  apiEndpoint: ApiEndpoint[],
  options?: RequestInit,
): Promise<spectroClustersUpdateStatusEndpointsResponse> => {
  return customInstance<spectroClustersUpdateStatusEndpointsResponse>(
    getSpectroClustersUpdateStatusEndpointsUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(apiEndpoint),
    },
  );
};

/**
 * @summary Updates the specified cluster status as imported
 */
export type spectroClustersUpdateStatusImportedResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUpdateStatusImportedResponseComposite =
  spectroClustersUpdateStatusImportedResponse204;

export type spectroClustersUpdateStatusImportedResponse =
  spectroClustersUpdateStatusImportedResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpdateStatusImportedUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/imported`;
};

export const spectroClustersUpdateStatusImported = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUpdateStatusImportedResponse> => {
  return customInstance<spectroClustersUpdateStatusImportedResponse>(
    getSpectroClustersUpdateStatusImportedUrl(uid),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * @summary Updates the specified cluster's services information
 */
export type spectroClustersUpdateStatusServicesResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUpdateStatusServicesResponseComposite =
  spectroClustersUpdateStatusServicesResponse204;

export type spectroClustersUpdateStatusServicesResponse =
  spectroClustersUpdateStatusServicesResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUpdateStatusServicesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/services`;
};

export const spectroClustersUpdateStatusServices = async (
  uid: string,
  loadBalancerService: LoadBalancerService[],
  options?: RequestInit,
): Promise<spectroClustersUpdateStatusServicesResponse> => {
  return customInstance<spectroClustersUpdateStatusServicesResponse>(
    getSpectroClustersUpdateStatusServicesUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(loadBalancerService),
    },
  );
};

/**
 * @summary Returns the SPC apply information for the agent
 */
export type spectroClustersUidStatusSpcApplyGetResponse200 = {
  data: SpcApply;
  status: 200;
};

export type spectroClustersUidStatusSpcApplyGetResponseComposite =
  spectroClustersUidStatusSpcApplyGetResponse200;

export type spectroClustersUidStatusSpcApplyGetResponse =
  spectroClustersUidStatusSpcApplyGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidStatusSpcApplyGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply`;
};

export const spectroClustersUidStatusSpcApplyGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidStatusSpcApplyGetResponse> => {
  return customInstance<spectroClustersUidStatusSpcApplyGetResponse>(
    getSpectroClustersUidStatusSpcApplyGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Set the CanBeApplied to true on the spcApply status. CanBeApplied indicates the agent to orchestrate the spc changes
 */
export type spectroClustersUidStatusSpcApplyResponse202 = {
  data: void;
  status: 202;
};

export type spectroClustersUidStatusSpcApplyResponseComposite =
  spectroClustersUidStatusSpcApplyResponse202;

export type spectroClustersUidStatusSpcApplyResponse =
  spectroClustersUidStatusSpcApplyResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidStatusSpcApplyUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply`;
};

export const spectroClustersUidStatusSpcApply = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidStatusSpcApplyResponse> => {
  return customInstance<spectroClustersUidStatusSpcApplyResponse>(
    getSpectroClustersUidStatusSpcApplyUrl(uid),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Updates the agent patch time for the SPC changes
 */
export type spectroClustersUidStatusSpcPatchTimeResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidStatusSpcPatchTimeResponseComposite =
  spectroClustersUidStatusSpcPatchTimeResponse204;

export type spectroClustersUidStatusSpcPatchTimeResponse =
  spectroClustersUidStatusSpcPatchTimeResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidStatusSpcPatchTimeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply/patchTime`;
};

export const spectroClustersUidStatusSpcPatchTime = async (
  uid: string,
  spcPatchTimeEntity: SpcPatchTimeEntity,
  options?: RequestInit,
): Promise<spectroClustersUidStatusSpcPatchTimeResponse> => {
  return customInstance<spectroClustersUidStatusSpcPatchTimeResponse>(
    getSpectroClustersUidStatusSpcPatchTimeUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spcPatchTimeEntity),
    },
  );
};

/**
 * @summary Updates the cluster's upgrade status
 */
export type spectroClustersUidUpgradesPutResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidUpgradesPutResponseComposite =
  spectroClustersUidUpgradesPutResponse204;

export type spectroClustersUidUpgradesPutResponse =
  spectroClustersUidUpgradesPutResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidUpgradesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/upgrades`;
};

export const spectroClustersUidUpgradesPut = async (
  uid: string,
  spectroClusterUidUpgrades: SpectroClusterUidUpgrades,
  options?: RequestInit,
): Promise<spectroClustersUidUpgradesPutResponse> => {
  return customInstance<spectroClustersUidUpgradesPutResponse>(
    getSpectroClustersUidUpgradesPutUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterUidUpgrades),
    },
  );
};

/**
 * @summary Update specific cluster upgrade settings
 */
export type spectroClustersUidUpgradeSettingsResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidUpgradeSettingsResponseComposite =
  spectroClustersUidUpgradeSettingsResponse204;

export type spectroClustersUidUpgradeSettingsResponse =
  spectroClustersUidUpgradeSettingsResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidUpgradeSettingsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/upgrade/settings`;
};

export const spectroClustersUidUpgradeSettings = async (
  uid: string,
  v1ClusterUpgradeSettingsEntityBody: V1ClusterUpgradeSettingsEntityBody,
  options?: RequestInit,
): Promise<spectroClustersUidUpgradeSettingsResponse> => {
  return customInstance<spectroClustersUidUpgradeSettingsResponse>(
    getSpectroClustersUidUpgradeSettingsUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterUpgradeSettingsEntityBody),
    },
  );
};

/**
 * @summary Validates cluster packs
 */
export type spectroClustersUidValidatePacksResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type spectroClustersUidValidatePacksResponseComposite =
  spectroClustersUidValidatePacksResponse200;

export type spectroClustersUidValidatePacksResponse =
  spectroClustersUidValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidValidatePacksUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/validate/packs`;
};

export const spectroClustersUidValidatePacks = async (
  uid: string,
  v1SpectroClusterPacksEntityBody: V1SpectroClusterPacksEntityBody,
  options?: RequestInit,
): Promise<spectroClustersUidValidatePacksResponse> => {
  return customInstance<spectroClustersUidValidatePacksResponse>(
    getSpectroClustersUidValidatePacksUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterPacksEntityBody),
    },
  );
};

/**
 * @summary Validates if cluster gets repaved for the specified packs
 */
export type spectroClustersUidValidateRepaveResponse200 = {
  data: SpectroClusterRepaveValidationResponse;
  status: 200;
};

export type spectroClustersUidValidateRepaveResponseComposite =
  spectroClustersUidValidateRepaveResponse200;

export type spectroClustersUidValidateRepaveResponse =
  spectroClustersUidValidateRepaveResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidValidateRepaveUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/validate/repave`;
};

export const spectroClustersUidValidateRepave = async (
  uid: string,
  v1SpectroClusterPacksEntityBody: V1SpectroClusterPacksEntityBody,
  options?: RequestInit,
): Promise<spectroClustersUidValidateRepaveResponse> => {
  return customInstance<spectroClustersUidValidateRepaveResponse>(
    getSpectroClustersUidValidateRepaveUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterPacksEntityBody),
    },
  );
};

/**
 * @summary Retrieve a list of variables associated with the cluster
 */
export type spectroClustersUidVariablesGetResponse200 = {
  data: SpectroClusterVariables[];
  status: 200;
};

export type spectroClustersUidVariablesGetResponseComposite =
  spectroClustersUidVariablesGetResponse200;

export type spectroClustersUidVariablesGetResponse =
  spectroClustersUidVariablesGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidVariablesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/variables`;
};

export const spectroClustersUidVariablesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidVariablesGetResponse> => {
  return customInstance<spectroClustersUidVariablesGetResponse>(
    getSpectroClustersUidVariablesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update cluster variable values for specified cluster
 */
export type spectroClustersUidVariablesPatchResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersUidVariablesPatchResponseComposite =
  spectroClustersUidVariablesPatchResponse204;

export type spectroClustersUidVariablesPatchResponse =
  spectroClustersUidVariablesPatchResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidVariablesPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/variables`;
};

export const spectroClustersUidVariablesPatch = async (
  uid: string,
  spectroClusterVariableUpdateEntity: SpectroClusterVariableUpdateEntity[],
  options?: RequestInit,
): Promise<spectroClustersUidVariablesPatchResponse> => {
  return customInstance<spectroClustersUidVariablesPatchResponse>(
    getSpectroClustersUidVariablesPatchUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterVariableUpdateEntity),
    },
  );
};

/**
 * @summary Returns the list of virtual machines
 */
export type spectroClustersVMListResponse200 = {
  data: ClusterVirtualMachineList;
  status: 200;
};

export type spectroClustersVMListResponseComposite =
  spectroClustersVMListResponse200;

export type spectroClustersVMListResponse =
  spectroClustersVMListResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMListUrl = (
  uid: string,
  params?: SpectroClustersVMListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms`;
};

export const spectroClustersVMList = async (
  uid: string,
  params?: SpectroClustersVMListParams,
  options?: RequestInit,
): Promise<spectroClustersVMListResponse> => {
  return customInstance<spectroClustersVMListResponse>(
    getSpectroClustersVMListUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Create virtual machine
 */
export type spectroClustersVMCreateResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type spectroClustersVMCreateResponseComposite =
  spectroClustersVMCreateResponse200;

export type spectroClustersVMCreateResponse =
  spectroClustersVMCreateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMCreateUrl = (
  uid: string,
  params: SpectroClustersVMCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms`;
};

export const spectroClustersVMCreate = async (
  uid: string,
  v1ClusterVirtualMachineBody: V1ClusterVirtualMachineBody,
  params: SpectroClustersVMCreateParams,
  options?: RequestInit,
): Promise<spectroClustersVMCreateResponse> => {
  return customInstance<spectroClustersVMCreateResponse>(
    getSpectroClustersVMCreateUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterVirtualMachineBody),
    },
  );
};

/**
 * @summary Returns the list of snapshots of given namespaces
 */
export type clusterVMSnapshotsListResponse200 = {
  data: VirtualMachineSnapshotList;
  status: 200;
};

export type clusterVMSnapshotsListResponseComposite =
  clusterVMSnapshotsListResponse200;

export type clusterVMSnapshotsListResponse =
  clusterVMSnapshotsListResponseComposite & {
    headers: Headers;
  };

export const getClusterVMSnapshotsListUrl = (
  uid: string,
  params?: ClusterVMSnapshotsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/snapshot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/snapshot`;
};

export const clusterVMSnapshotsList = async (
  uid: string,
  params?: ClusterVMSnapshotsListParams,
  options?: RequestInit,
): Promise<clusterVMSnapshotsListResponse> => {
  return customInstance<clusterVMSnapshotsListResponse>(
    getClusterVMSnapshotsListUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Deletes the virtual machine
 */
export type spectroClustersVMDeleteResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMDeleteResponseComposite =
  spectroClustersVMDeleteResponse204;

export type spectroClustersVMDeleteResponse =
  spectroClustersVMDeleteResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMDeleteUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const spectroClustersVMDelete = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMDeleteParams,
  options?: RequestInit,
): Promise<spectroClustersVMDeleteResponse> => {
  return customInstance<spectroClustersVMDeleteResponse>(
    getSpectroClustersVMDeleteUrl(uid, vmName, params),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Get virtual machine
 */
export type spectroClustersVMGetResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type spectroClustersVMGetResponseComposite =
  spectroClustersVMGetResponse200;

export type spectroClustersVMGetResponse =
  spectroClustersVMGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMGetUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const spectroClustersVMGet = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMGetParams,
  options?: RequestInit,
): Promise<spectroClustersVMGetResponse> => {
  return customInstance<spectroClustersVMGetResponse>(
    getSpectroClustersVMGetUrl(uid, vmName, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified virtual machine of the cluster
 */
export type spectroClustersVMUpdateResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type spectroClustersVMUpdateResponseComposite =
  spectroClustersVMUpdateResponse200;

export type spectroClustersVMUpdateResponse =
  spectroClustersVMUpdateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMUpdateUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const spectroClustersVMUpdate = async (
  uid: string,
  vmName: string,
  v1ClusterVirtualMachineBody: V1ClusterVirtualMachineBody,
  params: SpectroClustersVMUpdateParams,
  options?: RequestInit,
): Promise<spectroClustersVMUpdateResponse> => {
  return customInstance<spectroClustersVMUpdateResponse>(
    getSpectroClustersVMUpdateUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterVirtualMachineBody),
    },
  );
};

/**
 * @summary Add volume to the virtual machine instance
 */
export type spectroClustersVMAddVolumeResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMAddVolumeResponseComposite =
  spectroClustersVMAddVolumeResponse204;

export type spectroClustersVMAddVolumeResponse =
  spectroClustersVMAddVolumeResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMAddVolumeUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMAddVolumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/addVolume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/addVolume`;
};

export const spectroClustersVMAddVolume = async (
  uid: string,
  vmName: string,
  vMAddVolumeEntity: VMAddVolumeEntity,
  params: SpectroClustersVMAddVolumeParams,
  options?: RequestInit,
): Promise<spectroClustersVMAddVolumeResponse> => {
  return customInstance<spectroClustersVMAddVolumeResponse>(
    getSpectroClustersVMAddVolumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(vMAddVolumeEntity),
    },
  );
};

/**
 * @summary Clone virtual machine
 */
export type spectroClustersVMCloneResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type spectroClustersVMCloneResponseComposite =
  spectroClustersVMCloneResponse200;

export type spectroClustersVMCloneResponse =
  spectroClustersVMCloneResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMCloneUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMCloneParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/clone?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/clone`;
};

export const spectroClustersVMClone = async (
  uid: string,
  vmName: string,
  spectroClusterVMCloneEntity: SpectroClusterVMCloneEntity,
  params: SpectroClustersVMCloneParams,
  options?: RequestInit,
): Promise<spectroClustersVMCloneResponse> => {
  return customInstance<spectroClustersVMCloneResponse>(
    getSpectroClustersVMCloneUrl(uid, vmName, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(spectroClusterVMCloneEntity),
    },
  );
};

/**
 * @summary Migrate the virtual machine
 */
export type spectroClustersVMMigrateResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMMigrateResponseComposite =
  spectroClustersVMMigrateResponse204;

export type spectroClustersVMMigrateResponse =
  spectroClustersVMMigrateResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMMigrateUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMMigrateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/migrate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/migrate`;
};

export const spectroClustersVMMigrate = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMMigrateParams,
  options?: RequestInit,
): Promise<spectroClustersVMMigrateResponse> => {
  return customInstance<spectroClustersVMMigrateResponse>(
    getSpectroClustersVMMigrateUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Pause the virtual machine instance
 */
export type spectroClustersVMPauseResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMPauseResponseComposite =
  spectroClustersVMPauseResponse204;

export type spectroClustersVMPauseResponse =
  spectroClustersVMPauseResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMPauseUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMPauseParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/pause?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/pause`;
};

export const spectroClustersVMPause = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMPauseParams,
  options?: RequestInit,
): Promise<spectroClustersVMPauseResponse> => {
  return customInstance<spectroClustersVMPauseResponse>(
    getSpectroClustersVMPauseUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Remove volume from the virtual machine instance
 */
export type spectroClustersVMRemoveVolumeResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMRemoveVolumeResponseComposite =
  spectroClustersVMRemoveVolumeResponse204;

export type spectroClustersVMRemoveVolumeResponse =
  spectroClustersVMRemoveVolumeResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMRemoveVolumeUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMRemoveVolumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/removeVolume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/removeVolume`;
};

export const spectroClustersVMRemoveVolume = async (
  uid: string,
  vmName: string,
  vMRemoveVolumeEntity: VMRemoveVolumeEntity,
  params: SpectroClustersVMRemoveVolumeParams,
  options?: RequestInit,
): Promise<spectroClustersVMRemoveVolumeResponse> => {
  return customInstance<spectroClustersVMRemoveVolumeResponse>(
    getSpectroClustersVMRemoveVolumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(vMRemoveVolumeEntity),
    },
  );
};

/**
 * @summary Restart the virtual machine
 */
export type spectroClustersVMRestartResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMRestartResponseComposite =
  spectroClustersVMRestartResponse204;

export type spectroClustersVMRestartResponse =
  spectroClustersVMRestartResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMRestartUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMRestartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/restart?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/restart`;
};

export const spectroClustersVMRestart = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMRestartParams,
  options?: RequestInit,
): Promise<spectroClustersVMRestartResponse> => {
  return customInstance<spectroClustersVMRestartResponse>(
    getSpectroClustersVMRestartUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Resume the virtual machine instance
 */
export type spectroClustersVMResumeResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMResumeResponseComposite =
  spectroClustersVMResumeResponse204;

export type spectroClustersVMResumeResponse =
  spectroClustersVMResumeResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMResumeUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMResumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/resume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/resume`;
};

export const spectroClustersVMResume = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMResumeParams,
  options?: RequestInit,
): Promise<spectroClustersVMResumeResponse> => {
  return customInstance<spectroClustersVMResumeResponse>(
    getSpectroClustersVMResumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Create snapshot of virtual machine
 */
export type vMSnapshotCreateResponse200 = {
  data: VirtualMachineSnapshot;
  status: 200;
};

export type vMSnapshotCreateResponseComposite = vMSnapshotCreateResponse200;

export type vMSnapshotCreateResponse = vMSnapshotCreateResponseComposite & {
  headers: Headers;
};

export const getVMSnapshotCreateUrl = (
  uid: string,
  vmName: string,
  params: VMSnapshotCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot`;
};

export const vMSnapshotCreate = async (
  uid: string,
  vmName: string,
  v1VirtualMachineSnapshotBody: V1VirtualMachineSnapshotBody,
  params: VMSnapshotCreateParams,
  options?: RequestInit,
): Promise<vMSnapshotCreateResponse> => {
  return customInstance<vMSnapshotCreateResponse>(
    getVMSnapshotCreateUrl(uid, vmName, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachineSnapshotBody),
    },
  );
};

/**
 * @summary Delete the snapshot of virtual machine
 */
export type vMSnapshotDeleteResponse204 = {
  data: void;
  status: 204;
};

export type vMSnapshotDeleteResponseComposite = vMSnapshotDeleteResponse204;

export type vMSnapshotDeleteResponse = vMSnapshotDeleteResponseComposite & {
  headers: Headers;
};

export const getVMSnapshotDeleteUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const vMSnapshotDelete = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotDeleteParams,
  options?: RequestInit,
): Promise<vMSnapshotDeleteResponse> => {
  return customInstance<vMSnapshotDeleteResponse>(
    getVMSnapshotDeleteUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Get virtual machine snapshot
 */
export type vMSnapshotGetResponse200 = {
  data: VirtualMachineSnapshot;
  status: 200;
};

export type vMSnapshotGetResponseComposite = vMSnapshotGetResponse200;

export type vMSnapshotGetResponse = vMSnapshotGetResponseComposite & {
  headers: Headers;
};

export const getVMSnapshotGetUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const vMSnapshotGet = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotGetParams,
  options?: RequestInit,
): Promise<vMSnapshotGetResponse> => {
  return customInstance<vMSnapshotGetResponse>(
    getVMSnapshotGetUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified snapshot of a virtual machine
 */
export type vMSnapshotUpdateResponse200 = {
  data: VirtualMachineSnapshot;
  status: 200;
};

export type vMSnapshotUpdateResponseComposite = vMSnapshotUpdateResponse200;

export type vMSnapshotUpdateResponse = vMSnapshotUpdateResponseComposite & {
  headers: Headers;
};

export const getVMSnapshotUpdateUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const vMSnapshotUpdate = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  v1VirtualMachineSnapshotBody: V1VirtualMachineSnapshotBody,
  params: VMSnapshotUpdateParams,
  options?: RequestInit,
): Promise<vMSnapshotUpdateResponse> => {
  return customInstance<vMSnapshotUpdateResponse>(
    getVMSnapshotUpdateUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachineSnapshotBody),
    },
  );
};

/**
 * @summary Start the virtual machine
 */
export type spectroClustersVMStartResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMStartResponseComposite =
  spectroClustersVMStartResponse204;

export type spectroClustersVMStartResponse =
  spectroClustersVMStartResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMStartUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/start?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/start`;
};

export const spectroClustersVMStart = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStartParams,
  options?: RequestInit,
): Promise<spectroClustersVMStartResponse> => {
  return customInstance<spectroClustersVMStartResponse>(
    getSpectroClustersVMStartUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Stop the virtual machine
 */
export type spectroClustersVMStopResponse204 = {
  data: void;
  status: 204;
};

export type spectroClustersVMStopResponseComposite =
  spectroClustersVMStopResponse204;

export type spectroClustersVMStopResponse =
  spectroClustersVMStopResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersVMStopUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStopParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/stop?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/stop`;
};

export const spectroClustersVMStop = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStopParams,
  options?: RequestInit,
): Promise<spectroClustersVMStopResponse> => {
  return customInstance<spectroClustersVMStopResponse>(
    getSpectroClustersVMStopUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * Sync specified cluster workload
 * @summary Sync specified cluster workload
 */
export type spectroClustersUidWorkloadsSyncResponse202 = {
  data: void;
  status: 202;
};

export type spectroClustersUidWorkloadsSyncResponseComposite =
  spectroClustersUidWorkloadsSyncResponse202;

export type spectroClustersUidWorkloadsSyncResponse =
  spectroClustersUidWorkloadsSyncResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidWorkloadsSyncUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/workloads/sync`;
};

export const spectroClustersUidWorkloadsSync = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersUidWorkloadsSyncResponse> => {
  return customInstance<spectroClustersUidWorkloadsSyncResponse>(
    getSpectroClustersUidWorkloadsSyncUrl(uid),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Sync specified cluster workload
 */
export type spectroClustersUidWorkloadsKindSyncResponse202 = {
  data: void;
  status: 202;
};

export type spectroClustersUidWorkloadsKindSyncResponseComposite =
  spectroClustersUidWorkloadsKindSyncResponse202;

export type spectroClustersUidWorkloadsKindSyncResponse =
  spectroClustersUidWorkloadsKindSyncResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidWorkloadsKindSyncUrl = (
  uid: string,
  workloadKind:
    | "namespace"
    | "pod"
    | "deployment"
    | "statefulset"
    | "daemonset"
    | "job"
    | "cronjob"
    | "rolebinding"
    | "clusterrolebinding",
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/workloads/${workloadKind}/sync`;
};

export const spectroClustersUidWorkloadsKindSync = async (
  uid: string,
  workloadKind:
    | "namespace"
    | "pod"
    | "deployment"
    | "statefulset"
    | "daemonset"
    | "job"
    | "cronjob"
    | "rolebinding"
    | "clusterrolebinding",
  options?: RequestInit,
): Promise<spectroClustersUidWorkloadsKindSyncResponse> => {
  return customInstance<spectroClustersUidWorkloadsKindSyncResponse>(
    getSpectroClustersUidWorkloadsKindSyncUrl(uid, workloadKind),
    {
      ...options,
      method: "POST",
    },
  );
};
