/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ApiEndpoint,
  ClusterBackup,
  ClusterBackupConfigBody,
  ClusterBackupLocationType,
  ClusterComplianceOnDemandConfig,
  ClusterComplianceScan,
  ClusterComplianceScanLogs,
  ClusterComplianceScheduleConfigBody,
  ClusterCondition,
  ClusterDefinitionEntity,
  ClusterEdgeInstallerConfig,
  ClusterFeatureBackupGetParams,
  ClusterFeatureDriverLogDownloadParams,
  ClusterFeatureKubeBenchLogGetParams,
  ClusterFeatureKubeHunterLogGetParams,
  ClusterFeatureLogFetcherGetParams,
  ClusterFeatureLogFetcherLogDownloadParams,
  ClusterFeatureLogFetcherLogUpdateBody,
  ClusterFeatureLogFetcherLogUpdateParams,
  ClusterFeatureRestoreGetParams,
  ClusterFeatureSonobuoyLogGetParams,
  ClusterHelmCharts,
  ClusterHybridSettingsEntity,
  ClusterLogFetcher,
  ClusterLogFetcherRequest,
  ClusterManifests,
  ClusterMetaAttributeEntity,
  ClusterNamespaceResource,
  ClusterNamespaceResourceInputEntity,
  ClusterNamespaceResources,
  ClusterNamespaceResourcesUpdateEntity,
  ClusterNamespaces,
  ClusterNamespacesGetParams,
  ClusterNotificationUpdateEntity,
  ClusterRbac,
  ClusterRbacInputEntity,
  ClusterRbacResourcesUpdateEntity,
  ClusterRbacs,
  ClusterRefs,
  ClusterRestore,
  ClusterRestoreConfig,
  ClusterScanLogKubeBench,
  ClusterScanLogKubeHunter,
  ClusterScanLogSonobuoy,
  ClusterScanLogSyft,
  ClusterUpgradeSettingsEntity,
  ClusterUpgradeSettingsEntityBody,
  ClusterVMSnapshotsListParams,
  ClusterVirtualMachine,
  ClusterVirtualMachineBody,
  ClusterVirtualMachineList,
  ClusterVirtualPacksValues,
  ControlPlaneHealthCheckTimeoutEntity,
  EdgeHostDevices,
  HostClusterConfigEntity,
  KubeBenchEntity,
  KubeHunterEntity,
  LifecycleConfigEntity,
  LoadBalancerService,
  MachineCertificates,
  Manifest,
  ManifestRefInputEntities,
  ObjectMetaInputEntitySchemaBody,
  OsPatchEntity,
  PackManifests,
  SectroClusterK8sDashboardUrl,
  SonobuoyEntity,
  SpcApply,
  SpcPatchTimeEntity,
  SpectroAwsClusterEntityBody,
  SpectroAwsClusterImportEntity,
  SpectroAwsClusterRateEntity,
  SpectroAzureClusterEntityBody,
  SpectroAzureClusterImportEntity,
  SpectroAzureClusterRateEntityBody,
  SpectroCluster,
  SpectroClusterAssetEntity,
  SpectroClusterAssetFrpKubeConfig,
  SpectroClusterAssetKubeConfig,
  SpectroClusterAssetKubeConfigClient,
  SpectroClusterAssetManifest,
  SpectroClusterAssetTokenKubeConfig,
  SpectroClusterHeartbeat,
  SpectroClusterHybridPoolsMetadata,
  SpectroClusterK8sCertificate,
  SpectroClusterKubeCtlRedirect,
  SpectroClusterLocationInputEntity,
  SpectroClusterOidcSpec,
  SpectroClusterPackConfigList,
  SpectroClusterPackProperties,
  SpectroClusterPacksEntityBody,
  SpectroClusterPacksStatusEntityBody,
  SpectroClusterProfileList,
  SpectroClusterProfileUpdates,
  SpectroClusterProfilesBody,
  SpectroClusterProfilesDeleteEntity,
  SpectroClusterProfilesPacksManifests,
  SpectroClusterProfilesResolvedValues,
  SpectroClusterRate,
  SpectroClusterRepave,
  SpectroClusterRepaveValidationResponse,
  SpectroClusterStatusEntity,
  SpectroClusterTags,
  SpectroClusterUidUpgrades,
  SpectroClusterVMCloneEntity,
  SpectroClusterValidatorResponse,
  SpectroClusterVariableUpdateEntity,
  SpectroClusterVariables,
  SpectroClustersAksRateParams,
  SpectroClustersAwsRateParams,
  SpectroClustersAzureRateParams,
  SpectroClustersDeleteParams,
  SpectroClustersEdgeNativeRateParams,
  SpectroClustersEksRateParams,
  SpectroClustersGcpRateParams,
  SpectroClustersGenericRateParams,
  SpectroClustersGetParams,
  SpectroClustersGetProfilesPacksManifestsParams,
  SpectroClustersGetProfilesParams,
  SpectroClustersGkeRateParams,
  SpectroClustersMaasRateParams,
  SpectroClustersOpenStackRateParams,
  SpectroClustersPacksRefUpdateParams,
  SpectroClustersPatchProfilesParams,
  SpectroClustersUidKubeConfigParams,
  SpectroClustersUidPackManifestsUidGetParams,
  SpectroClustersUidPackPropertiesParams,
  SpectroClustersUidRateParams,
  SpectroClustersUpdateProfilesParams,
  SpectroClustersVMAddVolumeParams,
  SpectroClustersVMCloneParams,
  SpectroClustersVMCreateParams,
  SpectroClustersVMDeleteParams,
  SpectroClustersVMGetParams,
  SpectroClustersVMListParams,
  SpectroClustersVMMigrateParams,
  SpectroClustersVMPauseParams,
  SpectroClustersVMRemoveVolumeParams,
  SpectroClustersVMRestartParams,
  SpectroClustersVMResumeParams,
  SpectroClustersVMStartParams,
  SpectroClustersVMStopParams,
  SpectroClustersVMUpdateParams,
  SpectroClustersValidateNameParams,
  SpectroClustersVsphereRateParams,
  SpectroCustomClusterEntityBody,
  SpectroEdgeNativeClusterEntityBody,
  SpectroEdgeNativeClusterImportEntity,
  SpectroEdgeNativeClusterRateEntity,
  SpectroEksClusterEntityBody,
  SpectroEksClusterRateEntity,
  SpectroGcpClusterEntityBody,
  SpectroGcpClusterImportEntity,
  SpectroGcpClusterRateEntityBody,
  SpectroGenericClusterImportEntity,
  SpectroGenericClusterRateEntity,
  SpectroMaasClusterEntityBody,
  SpectroMaasClusterImportEntity,
  SpectroMaasClusterRateEntity,
  SpectroOpenStackClusterEntityBody,
  SpectroOpenStackClusterImportEntity,
  SpectroOpenStackClusterRateEntity,
  SpectroVirtualClusterEntityBody,
  SpectroVsphereClusterEntityBody,
  SpectroVsphereClusterImportEntity,
  SpectroVsphereClusterRateEntity,
  SyftEntity,
  SyftScanLogImageSBOMGetParams,
  Uid,
  VMAddVolumeEntity,
  VMRemoveVolumeEntity,
  VMSnapshotCreateParams,
  VMSnapshotDeleteParams,
  VMSnapshotGetParams,
  VMSnapshotUpdateParams,
  VirtualClustersPacksValuesParams,
  VirtualMachineSnapshot,
  VirtualMachineSnapshotBody,
  VirtualMachineSnapshotList,
} from ".././schemas";

/**
 * @summary Creates an AKS cluster
 */
export type SpectroClustersAksCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersAksCreateResponseComposite =
  SpectroClustersAksCreateResponse201;

export type SpectroClustersAksCreateResponse =
  SpectroClustersAksCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAksCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aks`;
};

export const SpectroClustersAksCreate = async (
  SpectroAzureClusterEntityBody: SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersAksCreateResponse> => {
  const res = await fetch(getV1SpectroClustersAksCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAzureClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAksCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAksCreateResponse;
};

/**
 * @summary Get AKS cluster estimated rate information
 */
export type SpectroClustersAksRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersAksRateResponseComposite =
  SpectroClustersAksRateResponse200;

export type SpectroClustersAksRateResponse =
  SpectroClustersAksRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAksRateUrl = (
  params?: SpectroClustersAksRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/aks/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/aks/rate`;
};

export const SpectroClustersAksRate = async (
  SpectroAzureClusterRateEntityBody: SpectroAzureClusterRateEntityBody,
  params?: SpectroClustersAksRateParams,
  options?: RequestInit,
): Promise<SpectroClustersAksRateResponse> => {
  const res = await fetch(getV1SpectroClustersAksRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAzureClusterRateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAksRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAksRateResponse;
};

/**
 * @summary Validates AKS cluster create operation
 */
export type SpectroClustersAksValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersAksValidateResponseComposite =
  SpectroClustersAksValidateResponse200;

export type SpectroClustersAksValidateResponse =
  SpectroClustersAksValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAksValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aks/validate`;
};

export const SpectroClustersAksValidate = async (
  SpectroAzureClusterEntityBody: SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersAksValidateResponse> => {
  const res = await fetch(getV1SpectroClustersAksValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAzureClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAksValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAksValidateResponse;
};

/**
 * @summary Creates an AWS cluster
 */
export type SpectroClustersAwsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersAwsCreateResponseComposite =
  SpectroClustersAwsCreateResponse201;

export type SpectroClustersAwsCreateResponse =
  SpectroClustersAwsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws`;
};

export const SpectroClustersAwsCreate = async (
  SpectroAwsClusterEntityBody: SpectroAwsClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersAwsCreateResponse> => {
  const res = await fetch(getV1SpectroClustersAwsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAwsClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAwsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAwsCreateResponse;
};

/**
 * @summary Imports an AWS cluster
 */
export type SpectroClustersAwsImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersAwsImportResponseComposite =
  SpectroClustersAwsImportResponse201;

export type SpectroClustersAwsImportResponse =
  SpectroClustersAwsImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws/import`;
};

export const SpectroClustersAwsImport = async (
  SpectroAwsClusterImportEntity: SpectroAwsClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersAwsImportResponse> => {
  const res = await fetch(getV1SpectroClustersAwsImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAwsClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAwsImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAwsImportResponse;
};

/**
 * @summary Get AWS cluster estimated rate information
 */
export type SpectroClustersAwsRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersAwsRateResponseComposite =
  SpectroClustersAwsRateResponse200;

export type SpectroClustersAwsRateResponse =
  SpectroClustersAwsRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsRateUrl = (
  params?: SpectroClustersAwsRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/aws/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/aws/rate`;
};

export const SpectroClustersAwsRate = async (
  SpectroAwsClusterRateEntity: SpectroAwsClusterRateEntity,
  params?: SpectroClustersAwsRateParams,
  options?: RequestInit,
): Promise<SpectroClustersAwsRateResponse> => {
  const res = await fetch(getV1SpectroClustersAwsRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAwsClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAwsRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAwsRateResponse;
};

/**
 * @summary Validates AWS cluster create operation
 */
export type SpectroClustersAwsValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersAwsValidateResponseComposite =
  SpectroClustersAwsValidateResponse200;

export type SpectroClustersAwsValidateResponse =
  SpectroClustersAwsValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws/validate`;
};

export const SpectroClustersAwsValidate = async (
  SpectroAwsClusterEntityBody: SpectroAwsClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersAwsValidateResponse> => {
  const res = await fetch(getV1SpectroClustersAwsValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAwsClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAwsValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAwsValidateResponse;
};

/**
 * @summary Creates an Azure cluster
 */
export type SpectroClustersAzureCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersAzureCreateResponseComposite =
  SpectroClustersAzureCreateResponse201;

export type SpectroClustersAzureCreateResponse =
  SpectroClustersAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure`;
};

export const SpectroClustersAzureCreate = async (
  SpectroAzureClusterEntityBody: SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersAzureCreateResponse> => {
  const res = await fetch(getV1SpectroClustersAzureCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAzureClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAzureCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAzureCreateResponse;
};

/**
 * @summary Imports an Azure cluster
 */
export type SpectroClustersAzureImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersAzureImportResponseComposite =
  SpectroClustersAzureImportResponse201;

export type SpectroClustersAzureImportResponse =
  SpectroClustersAzureImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure/import`;
};

export const SpectroClustersAzureImport = async (
  SpectroAzureClusterImportEntity: SpectroAzureClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersAzureImportResponse> => {
  const res = await fetch(getV1SpectroClustersAzureImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAzureClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAzureImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAzureImportResponse;
};

/**
 * @summary Get Azure cluster estimated rate information
 */
export type SpectroClustersAzureRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersAzureRateResponseComposite =
  SpectroClustersAzureRateResponse200;

export type SpectroClustersAzureRateResponse =
  SpectroClustersAzureRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureRateUrl = (
  params?: SpectroClustersAzureRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/azure/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/azure/rate`;
};

export const SpectroClustersAzureRate = async (
  SpectroAzureClusterRateEntityBody: SpectroAzureClusterRateEntityBody,
  params?: SpectroClustersAzureRateParams,
  options?: RequestInit,
): Promise<SpectroClustersAzureRateResponse> => {
  const res = await fetch(getV1SpectroClustersAzureRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAzureClusterRateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAzureRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAzureRateResponse;
};

/**
 * @summary Validates Azure cluster create operation
 */
export type SpectroClustersAzureValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersAzureValidateResponseComposite =
  SpectroClustersAzureValidateResponse200;

export type SpectroClustersAzureValidateResponse =
  SpectroClustersAzureValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure/validate`;
};

export const SpectroClustersAzureValidate = async (
  SpectroAzureClusterEntityBody: SpectroAzureClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersAzureValidateResponse> => {
  const res = await fetch(getV1SpectroClustersAzureValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroAzureClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersAzureValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersAzureValidateResponse;
};

/**
 * @summary Creates a Custom cluster
 */
export type SpectroClustersCustomCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersCustomCreateResponseComposite =
  SpectroClustersCustomCreateResponse201;

export type SpectroClustersCustomCreateResponse =
  SpectroClustersCustomCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersCustomCreateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/cloudTypes/${cloudType}`;
};

export const SpectroClustersCustomCreate = async (
  cloudType: string,
  SpectroCustomClusterEntityBody: SpectroCustomClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersCustomCreateResponse> => {
  const res = await fetch(getV1SpectroClustersCustomCreateUrl(cloudType), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroCustomClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersCustomCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersCustomCreateResponse;
};

/**
 * @summary Validates Custom cluster create operation
 */
export type SpectroClustersCustomValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersCustomValidateResponseComposite =
  SpectroClustersCustomValidateResponse200;

export type SpectroClustersCustomValidateResponse =
  SpectroClustersCustomValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersCustomValidateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/cloudTypes/${cloudType}/validate`;
};

export const SpectroClustersCustomValidate = async (
  cloudType: string,
  SpectroCustomClusterEntityBody: SpectroCustomClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersCustomValidateResponse> => {
  const res = await fetch(getV1SpectroClustersCustomValidateUrl(cloudType), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroCustomClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersCustomValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersCustomValidateResponse;
};

/**
 * @summary Cluster configuration for the edge installer
 */
export type SpectroClustersConfigEdgeInstallerResponse200 = {
  data: ClusterEdgeInstallerConfig;
  status: 200;
};

export type SpectroClustersConfigEdgeInstallerResponseComposite =
  SpectroClustersConfigEdgeInstallerResponse200;

export type SpectroClustersConfigEdgeInstallerResponse =
  SpectroClustersConfigEdgeInstallerResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersConfigEdgeInstallerUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/config/edgeInstaller`;
};

export const SpectroClustersConfigEdgeInstaller = async (
  options?: RequestInit,
): Promise<SpectroClustersConfigEdgeInstallerResponse> => {
  const res = await fetch(getV1SpectroClustersConfigEdgeInstallerUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersConfigEdgeInstallerResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersConfigEdgeInstallerResponse;
};

/**
 * @summary Creates an EdgeNative cluster
 */
export type SpectroClustersEdgeNativeCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersEdgeNativeCreateResponseComposite =
  SpectroClustersEdgeNativeCreateResponse201;

export type SpectroClustersEdgeNativeCreateResponse =
  SpectroClustersEdgeNativeCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native`;
};

export const SpectroClustersEdgeNativeCreate = async (
  SpectroEdgeNativeClusterEntityBody: SpectroEdgeNativeClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersEdgeNativeCreateResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroEdgeNativeClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersEdgeNativeCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersEdgeNativeCreateResponse;
};

/**
 * @summary Imports an EdgeNative cluster
 */
export type SpectroClustersEdgeNativeImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersEdgeNativeImportResponseComposite =
  SpectroClustersEdgeNativeImportResponse201;

export type SpectroClustersEdgeNativeImportResponse =
  SpectroClustersEdgeNativeImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native/import`;
};

export const SpectroClustersEdgeNativeImport = async (
  SpectroEdgeNativeClusterImportEntity: SpectroEdgeNativeClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersEdgeNativeImportResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroEdgeNativeClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersEdgeNativeImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersEdgeNativeImportResponse;
};

/**
 * @summary Get edge-native cluster estimated rate information
 */
export type SpectroClustersEdgeNativeRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersEdgeNativeRateResponseComposite =
  SpectroClustersEdgeNativeRateResponse200;

export type SpectroClustersEdgeNativeRateResponse =
  SpectroClustersEdgeNativeRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeRateUrl = (
  params?: SpectroClustersEdgeNativeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/edge-native/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/edge-native/rate`;
};

export const SpectroClustersEdgeNativeRate = async (
  SpectroEdgeNativeClusterRateEntity: SpectroEdgeNativeClusterRateEntity,
  params?: SpectroClustersEdgeNativeRateParams,
  options?: RequestInit,
): Promise<SpectroClustersEdgeNativeRateResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroEdgeNativeClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersEdgeNativeRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersEdgeNativeRateResponse;
};

/**
 * @summary Validates edge-native cluster create operation
 */
export type SpectroClustersEdgeNativeValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersEdgeNativeValidateResponseComposite =
  SpectroClustersEdgeNativeValidateResponse200;

export type SpectroClustersEdgeNativeValidateResponse =
  SpectroClustersEdgeNativeValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native/validate`;
};

export const SpectroClustersEdgeNativeValidate = async (
  SpectroEdgeNativeClusterEntityBody: SpectroEdgeNativeClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersEdgeNativeValidateResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroEdgeNativeClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersEdgeNativeValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersEdgeNativeValidateResponse;
};

/**
 * @summary Creates an EKS cluster
 */
export type SpectroClustersEksCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersEksCreateResponseComposite =
  SpectroClustersEksCreateResponse201;

export type SpectroClustersEksCreateResponse =
  SpectroClustersEksCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEksCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/eks`;
};

export const SpectroClustersEksCreate = async (
  SpectroEksClusterEntityBody: SpectroEksClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersEksCreateResponse> => {
  const res = await fetch(getV1SpectroClustersEksCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroEksClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersEksCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersEksCreateResponse;
};

/**
 * @summary Get EKS cluster estimated rate information
 */
export type SpectroClustersEksRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersEksRateResponseComposite =
  SpectroClustersEksRateResponse200;

export type SpectroClustersEksRateResponse =
  SpectroClustersEksRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEksRateUrl = (
  params?: SpectroClustersEksRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/eks/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/eks/rate`;
};

export const SpectroClustersEksRate = async (
  SpectroEksClusterRateEntity: SpectroEksClusterRateEntity,
  params?: SpectroClustersEksRateParams,
  options?: RequestInit,
): Promise<SpectroClustersEksRateResponse> => {
  const res = await fetch(getV1SpectroClustersEksRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroEksClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersEksRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersEksRateResponse;
};

/**
 * @summary Validates EKS cluster create operation
 */
export type SpectroClustersEksValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersEksValidateResponseComposite =
  SpectroClustersEksValidateResponse200;

export type SpectroClustersEksValidateResponse =
  SpectroClustersEksValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEksValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/eks/validate`;
};

export const SpectroClustersEksValidate = async (
  SpectroEksClusterEntityBody: SpectroEksClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersEksValidateResponse> => {
  const res = await fetch(getV1SpectroClustersEksValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroEksClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersEksValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersEksValidateResponse;
};

/**
 * @summary Returns the cluster object references based on locationUid
 */
export type ClusterFeatureBackupLocationUidGetResponse200 = {
  data: ClusterRefs;
  status: 200;
};

export type ClusterFeatureBackupLocationUidGetResponseComposite =
  ClusterFeatureBackupLocationUidGetResponse200;

export type ClusterFeatureBackupLocationUidGetResponse =
  ClusterFeatureBackupLocationUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupLocationUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/features/backup/locations/${uid}`;
};

export const ClusterFeatureBackupLocationUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterFeatureBackupLocationUidGetResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupLocationUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupLocationUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupLocationUidGetResponse;
};

/**
 * @summary Change cluster backup location
 */
export type ClusterFeatureBackupLocationUidChangeResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureBackupLocationUidChangeResponseComposite =
  ClusterFeatureBackupLocationUidChangeResponse204;

export type ClusterFeatureBackupLocationUidChangeResponse =
  ClusterFeatureBackupLocationUidChangeResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupLocationUidChangeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/features/backup/locations/${uid}`;
};

export const ClusterFeatureBackupLocationUidChange = async (
  uid: string,
  ClusterBackupLocationType: ClusterBackupLocationType,
  options?: RequestInit,
): Promise<ClusterFeatureBackupLocationUidChangeResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupLocationUidChangeUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterBackupLocationType),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupLocationUidChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupLocationUidChangeResponse;
};

/**
 * @summary Download log fetcher logs for cluster by log fetcher uid
 */
export type ClusterFeatureLogFetcherLogDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type ClusterFeatureLogFetcherLogDownloadResponseComposite =
  ClusterFeatureLogFetcherLogDownloadResponse200;

export type ClusterFeatureLogFetcherLogDownloadResponse =
  ClusterFeatureLogFetcherLogDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherLogDownloadUrl = (
  uid: string,
  params?: ClusterFeatureLogFetcherLogDownloadParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/download?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/download`;
};

export const ClusterFeatureLogFetcherLogDownload = async (
  uid: string,
  params?: ClusterFeatureLogFetcherLogDownloadParams,
  options?: RequestInit,
): Promise<ClusterFeatureLogFetcherLogDownloadResponse> => {
  const res = await fetch(
    getV1ClusterFeatureLogFetcherLogDownloadUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureLogFetcherLogDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureLogFetcherLogDownloadResponse;
};

/**
 * @summary Update log fetcher logs by log fetcher uid
 */
export type ClusterFeatureLogFetcherLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureLogFetcherLogUpdateResponseComposite =
  ClusterFeatureLogFetcherLogUpdateResponse204;

export type ClusterFeatureLogFetcherLogUpdateResponse =
  ClusterFeatureLogFetcherLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherLogUpdateUrl = (
  uid: string,
  params?: ClusterFeatureLogFetcherLogUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/log?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/log`;
};

export const ClusterFeatureLogFetcherLogUpdate = async (
  uid: string,
  ClusterFeatureLogFetcherLogUpdateBody: ClusterFeatureLogFetcherLogUpdateBody,
  params?: ClusterFeatureLogFetcherLogUpdateParams,
  options?: RequestInit,
): Promise<ClusterFeatureLogFetcherLogUpdateResponse> => {
  const formData = new FormData();
  if (ClusterFeatureLogFetcherLogUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, ClusterFeatureLogFetcherLogUpdateBody.fileName);
  }

  const res = await fetch(
    getV1ClusterFeatureLogFetcherLogUpdateUrl(uid, params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureLogFetcherLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureLogFetcherLogUpdateResponse;
};

/**
 * @summary Creates a GCP cluster
 */
export type SpectroClustersGcpCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersGcpCreateResponseComposite =
  SpectroClustersGcpCreateResponse201;

export type SpectroClustersGcpCreateResponse =
  SpectroClustersGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp`;
};

export const SpectroClustersGcpCreate = async (
  SpectroGcpClusterEntityBody: SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersGcpCreateResponse> => {
  const res = await fetch(getV1SpectroClustersGcpCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGcpClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGcpCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGcpCreateResponse;
};

/**
 * @summary Imports a GCP cluster
 */
export type SpectroClustersGcpImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersGcpImportResponseComposite =
  SpectroClustersGcpImportResponse201;

export type SpectroClustersGcpImportResponse =
  SpectroClustersGcpImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp/import`;
};

export const SpectroClustersGcpImport = async (
  SpectroGcpClusterImportEntity: SpectroGcpClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersGcpImportResponse> => {
  const res = await fetch(getV1SpectroClustersGcpImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGcpClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGcpImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGcpImportResponse;
};

/**
 * @summary Get GCP cluster estimated rate information
 */
export type SpectroClustersGcpRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersGcpRateResponseComposite =
  SpectroClustersGcpRateResponse200;

export type SpectroClustersGcpRateResponse =
  SpectroClustersGcpRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpRateUrl = (
  params?: SpectroClustersGcpRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/gcp/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/gcp/rate`;
};

export const SpectroClustersGcpRate = async (
  SpectroGcpClusterRateEntityBody: SpectroGcpClusterRateEntityBody,
  params?: SpectroClustersGcpRateParams,
  options?: RequestInit,
): Promise<SpectroClustersGcpRateResponse> => {
  const res = await fetch(getV1SpectroClustersGcpRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGcpClusterRateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGcpRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGcpRateResponse;
};

/**
 * @summary Validates GCP cluster create operation
 */
export type SpectroClustersGcpValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersGcpValidateResponseComposite =
  SpectroClustersGcpValidateResponse200;

export type SpectroClustersGcpValidateResponse =
  SpectroClustersGcpValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp/validate`;
};

export const SpectroClustersGcpValidate = async (
  SpectroGcpClusterEntityBody: SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersGcpValidateResponse> => {
  const res = await fetch(getV1SpectroClustersGcpValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGcpClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGcpValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGcpValidateResponse;
};

/**
 * The machines information will be captured, whereas the cloud specific configuration info will not be retrieved
 * @summary Imports a cluster of any cloud type in generic way
 */
export type SpectroClustersGenericImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersGenericImportResponseComposite =
  SpectroClustersGenericImportResponse201;

export type SpectroClustersGenericImportResponse =
  SpectroClustersGenericImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGenericImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/generic/import`;
};

export const SpectroClustersGenericImport = async (
  SpectroGenericClusterImportEntity: SpectroGenericClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersGenericImportResponse> => {
  const res = await fetch(getV1SpectroClustersGenericImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGenericClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGenericImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGenericImportResponse;
};

/**
 * @summary Get generic cluster estimated rate information
 */
export type SpectroClustersGenericRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersGenericRateResponseComposite =
  SpectroClustersGenericRateResponse200;

export type SpectroClustersGenericRateResponse =
  SpectroClustersGenericRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGenericRateUrl = (
  params?: SpectroClustersGenericRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/generic/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/generic/rate`;
};

export const SpectroClustersGenericRate = async (
  SpectroGenericClusterRateEntity: SpectroGenericClusterRateEntity,
  params?: SpectroClustersGenericRateParams,
  options?: RequestInit,
): Promise<SpectroClustersGenericRateResponse> => {
  const res = await fetch(getV1SpectroClustersGenericRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGenericClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGenericRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGenericRateResponse;
};

/**
 * @summary Creates an GKE cluster
 */
export type SpectroClustersGkeCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersGkeCreateResponseComposite =
  SpectroClustersGkeCreateResponse201;

export type SpectroClustersGkeCreateResponse =
  SpectroClustersGkeCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGkeCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gke`;
};

export const SpectroClustersGkeCreate = async (
  SpectroGcpClusterEntityBody: SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersGkeCreateResponse> => {
  const res = await fetch(getV1SpectroClustersGkeCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGcpClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGkeCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGkeCreateResponse;
};

/**
 * @summary Get GKE cluster estimated rate information
 */
export type SpectroClustersGkeRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersGkeRateResponseComposite =
  SpectroClustersGkeRateResponse200;

export type SpectroClustersGkeRateResponse =
  SpectroClustersGkeRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGkeRateUrl = (
  params?: SpectroClustersGkeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/gke/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/gke/rate`;
};

export const SpectroClustersGkeRate = async (
  SpectroGcpClusterRateEntityBody: SpectroGcpClusterRateEntityBody,
  params?: SpectroClustersGkeRateParams,
  options?: RequestInit,
): Promise<SpectroClustersGkeRateResponse> => {
  const res = await fetch(getV1SpectroClustersGkeRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGcpClusterRateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGkeRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGkeRateResponse;
};

/**
 * @summary Validates GKE cluster create operation
 */
export type SpectroClustersGkeValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersGkeValidateResponseComposite =
  SpectroClustersGkeValidateResponse200;

export type SpectroClustersGkeValidateResponse =
  SpectroClustersGkeValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGkeValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gke/validate`;
};

export const SpectroClustersGkeValidate = async (
  SpectroGcpClusterEntityBody: SpectroGcpClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersGkeValidateResponse> => {
  const res = await fetch(getV1SpectroClustersGkeValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroGcpClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGkeValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGkeValidateResponse;
};

/**
 * @summary Creates a MAAS cluster
 */
export type SpectroClustersMaasCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersMaasCreateResponseComposite =
  SpectroClustersMaasCreateResponse201;

export type SpectroClustersMaasCreateResponse =
  SpectroClustersMaasCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas`;
};

export const SpectroClustersMaasCreate = async (
  SpectroMaasClusterEntityBody: SpectroMaasClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersMaasCreateResponse> => {
  const res = await fetch(getV1SpectroClustersMaasCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroMaasClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMaasCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMaasCreateResponse;
};

/**
 * @summary Imports a Maas cluster
 */
export type SpectroClustersMaasImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersMaasImportResponseComposite =
  SpectroClustersMaasImportResponse201;

export type SpectroClustersMaasImportResponse =
  SpectroClustersMaasImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas/import`;
};

export const SpectroClustersMaasImport = async (
  SpectroMaasClusterImportEntity: SpectroMaasClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersMaasImportResponse> => {
  const res = await fetch(getV1SpectroClustersMaasImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroMaasClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMaasImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMaasImportResponse;
};

/**
 * @summary Get maas cluster estimated rate information
 */
export type SpectroClustersMaasRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersMaasRateResponseComposite =
  SpectroClustersMaasRateResponse200;

export type SpectroClustersMaasRateResponse =
  SpectroClustersMaasRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasRateUrl = (
  params?: SpectroClustersMaasRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/maas/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/maas/rate`;
};

export const SpectroClustersMaasRate = async (
  SpectroMaasClusterRateEntity: SpectroMaasClusterRateEntity,
  params?: SpectroClustersMaasRateParams,
  options?: RequestInit,
): Promise<SpectroClustersMaasRateResponse> => {
  const res = await fetch(getV1SpectroClustersMaasRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroMaasClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMaasRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMaasRateResponse;
};

/**
 * @summary Validates MAAS cluster create operation
 */
export type SpectroClustersMaasValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersMaasValidateResponseComposite =
  SpectroClustersMaasValidateResponse200;

export type SpectroClustersMaasValidateResponse =
  SpectroClustersMaasValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas/validate`;
};

export const SpectroClustersMaasValidate = async (
  SpectroMaasClusterEntityBody: SpectroMaasClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersMaasValidateResponse> => {
  const res = await fetch(getV1SpectroClustersMaasValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroMaasClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMaasValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMaasValidateResponse;
};

/**
 * @summary Creates a OpenStack cluster
 */
export type SpectroClustersOpenStackCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersOpenStackCreateResponseComposite =
  SpectroClustersOpenStackCreateResponse201;

export type SpectroClustersOpenStackCreateResponse =
  SpectroClustersOpenStackCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack`;
};

export const SpectroClustersOpenStackCreate = async (
  SpectroOpenStackClusterEntityBody: SpectroOpenStackClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersOpenStackCreateResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroOpenStackClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersOpenStackCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersOpenStackCreateResponse;
};

/**
 * @summary Imports an OpenStack cluster
 */
export type SpectroClustersOpenStackImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersOpenStackImportResponseComposite =
  SpectroClustersOpenStackImportResponse201;

export type SpectroClustersOpenStackImportResponse =
  SpectroClustersOpenStackImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack/import`;
};

export const SpectroClustersOpenStackImport = async (
  SpectroOpenStackClusterImportEntity: SpectroOpenStackClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersOpenStackImportResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroOpenStackClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersOpenStackImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersOpenStackImportResponse;
};

/**
 * @summary Get openstack cluster estimated rate information
 */
export type SpectroClustersOpenStackRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersOpenStackRateResponseComposite =
  SpectroClustersOpenStackRateResponse200;

export type SpectroClustersOpenStackRateResponse =
  SpectroClustersOpenStackRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackRateUrl = (
  params?: SpectroClustersOpenStackRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/openstack/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/openstack/rate`;
};

export const SpectroClustersOpenStackRate = async (
  SpectroOpenStackClusterRateEntity: SpectroOpenStackClusterRateEntity,
  params?: SpectroClustersOpenStackRateParams,
  options?: RequestInit,
): Promise<SpectroClustersOpenStackRateResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroOpenStackClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersOpenStackRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersOpenStackRateResponse;
};

/**
 * @summary Validates OpenStack cluster create operation
 */
export type SpectroClustersOpenStackValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersOpenStackValidateResponseComposite =
  SpectroClustersOpenStackValidateResponse200;

export type SpectroClustersOpenStackValidateResponse =
  SpectroClustersOpenStackValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack/validate`;
};

export const SpectroClustersOpenStackValidate = async (
  SpectroOpenStackClusterEntityBody: SpectroOpenStackClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersOpenStackValidateResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroOpenStackClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersOpenStackValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersOpenStackValidateResponse;
};

/**
 * @summary Downloads the cluster definition archive file
 */
export type SpectroClustersSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersSpcDownloadResponseComposite =
  SpectroClustersSpcDownloadResponse200;

export type SpectroClustersSpcDownloadResponse =
  SpectroClustersSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSpcDownloadUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/spc/download`;
};

export const SpectroClustersSpcDownload = async (
  ClusterDefinitionEntity: ClusterDefinitionEntity,
  options?: RequestInit,
): Promise<SpectroClustersSpcDownloadResponse> => {
  const res = await fetch(getV1SpectroClustersSpcDownloadUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterDefinitionEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersSpcDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersSpcDownloadResponse;
};

/**
 * @summary Retrieves a list of spectrocluster tags
 */
export type SpectroClustersTagsGetResponse200 = {
  data: SpectroClusterTags;
  status: 200;
};

export type SpectroClustersTagsGetResponseComposite =
  SpectroClustersTagsGetResponse200;

export type SpectroClustersTagsGetResponse =
  SpectroClustersTagsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersTagsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/tags`;
};

export const SpectroClustersTagsGet = async (
  options?: RequestInit,
): Promise<SpectroClustersTagsGetResponse> => {
  const res = await fetch(getV1SpectroClustersTagsGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersTagsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersTagsGetResponse;
};

/**
 * @summary Get cluster settings by context
 */
export type SpectroClustersUpgradeSettingsGetResponse200 = {
  data: ClusterUpgradeSettingsEntity;
  status: 200;
};

export type SpectroClustersUpgradeSettingsGetResponseComposite =
  SpectroClustersUpgradeSettingsGetResponse200;

export type SpectroClustersUpgradeSettingsGetResponse =
  SpectroClustersUpgradeSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpgradeSettingsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/upgrade/settings`;
};

export const SpectroClustersUpgradeSettingsGet = async (
  options?: RequestInit,
): Promise<SpectroClustersUpgradeSettingsGetResponse> => {
  const res = await fetch(getV1SpectroClustersUpgradeSettingsGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpgradeSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpgradeSettingsGetResponse;
};

/**
 * @summary Update all clusters upgrade settings
 */
export type SpectroClustersUpgradeSettingsResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUpgradeSettingsResponseComposite =
  SpectroClustersUpgradeSettingsResponse204;

export type SpectroClustersUpgradeSettingsResponse =
  SpectroClustersUpgradeSettingsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpgradeSettingsUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/upgrade/settings`;
};

export const SpectroClustersUpgradeSettings = async (
  ClusterUpgradeSettingsEntityBody: ClusterUpgradeSettingsEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersUpgradeSettingsResponse> => {
  const res = await fetch(getV1SpectroClustersUpgradeSettingsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterUpgradeSettingsEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpgradeSettingsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpgradeSettingsResponse;
};

/**
 * @summary Validates the cluster name
 */
export type SpectroClustersValidateNameResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersValidateNameResponseComposite =
  SpectroClustersValidateNameResponse204;

export type SpectroClustersValidateNameResponse =
  SpectroClustersValidateNameResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersValidateNameUrl = (
  params?: SpectroClustersValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/validate/name`;
};

export const SpectroClustersValidateName = async (
  params?: SpectroClustersValidateNameParams,
  options?: RequestInit,
): Promise<SpectroClustersValidateNameResponse> => {
  const res = await fetch(getV1SpectroClustersValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersValidateNameResponse;
};

/**
 * @summary Validates spectro cluster packs
 */
export type SpectroClustersValidatePacksResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersValidatePacksResponseComposite =
  SpectroClustersValidatePacksResponse200;

export type SpectroClustersValidatePacksResponse =
  SpectroClustersValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersValidatePacksUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/validate/packs`;
};

export const SpectroClustersValidatePacks = async (
  SpectroClusterPacksEntityBody: SpectroClusterPacksEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersValidatePacksResponse> => {
  const res = await fetch(getV1SpectroClustersValidatePacksUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterPacksEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersValidatePacksResponse;
};

/**
 * @summary Creates a virtual cluster
 */
export type SpectroClustersVirtualCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersVirtualCreateResponseComposite =
  SpectroClustersVirtualCreateResponse201;

export type SpectroClustersVirtualCreateResponse =
  SpectroClustersVirtualCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVirtualCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/virtual`;
};

export const SpectroClustersVirtualCreate = async (
  SpectroVirtualClusterEntityBody: SpectroVirtualClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersVirtualCreateResponse> => {
  const res = await fetch(getV1SpectroClustersVirtualCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroVirtualClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVirtualCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVirtualCreateResponse;
};

/**
 * @summary Get the cluster pack values yaml
 */
export type VirtualClustersPacksValuesResponse200 = {
  data: ClusterVirtualPacksValues;
  status: 200;
};

export type VirtualClustersPacksValuesResponseComposite =
  VirtualClustersPacksValuesResponse200;

export type VirtualClustersPacksValuesResponse =
  VirtualClustersPacksValuesResponseComposite & {
    headers: Headers;
  };

export const getV1VirtualClustersPacksValuesUrl = (
  params?: VirtualClustersPacksValuesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/virtual/packs/values?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/virtual/packs/values`;
};

export const VirtualClustersPacksValues = async (
  params?: VirtualClustersPacksValuesParams,
  options?: RequestInit,
): Promise<VirtualClustersPacksValuesResponse> => {
  const res = await fetch(getV1VirtualClustersPacksValuesUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VirtualClustersPacksValuesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VirtualClustersPacksValuesResponse;
};

/**
 * @summary Validates virtual cluster create operation
 */
export type SpectroClustersVirtualValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersVirtualValidateResponseComposite =
  SpectroClustersVirtualValidateResponse200;

export type SpectroClustersVirtualValidateResponse =
  SpectroClustersVirtualValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVirtualValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/virtual/validate`;
};

export const SpectroClustersVirtualValidate = async (
  SpectroVirtualClusterEntityBody: SpectroVirtualClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersVirtualValidateResponse> => {
  const res = await fetch(getV1SpectroClustersVirtualValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroVirtualClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVirtualValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVirtualValidateResponse;
};

/**
 * @summary Creates a vSphere cluster
 */
export type SpectroClustersVsphereCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersVsphereCreateResponseComposite =
  SpectroClustersVsphereCreateResponse201;

export type SpectroClustersVsphereCreateResponse =
  SpectroClustersVsphereCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere`;
};

export const SpectroClustersVsphereCreate = async (
  SpectroVsphereClusterEntityBody: SpectroVsphereClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersVsphereCreateResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroVsphereClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVsphereCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVsphereCreateResponse;
};

/**
 * @summary Imports a vSphere cluster
 */
export type SpectroClustersVsphereImportResponse201 = {
  data: Uid;
  status: 201;
};

export type SpectroClustersVsphereImportResponseComposite =
  SpectroClustersVsphereImportResponse201;

export type SpectroClustersVsphereImportResponse =
  SpectroClustersVsphereImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere/import`;
};

export const SpectroClustersVsphereImport = async (
  SpectroVsphereClusterImportEntity: SpectroVsphereClusterImportEntity,
  options?: RequestInit,
): Promise<SpectroClustersVsphereImportResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroVsphereClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVsphereImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVsphereImportResponse;
};

/**
 * @summary Get vSphere cluster estimated rate information
 */
export type SpectroClustersVsphereRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersVsphereRateResponseComposite =
  SpectroClustersVsphereRateResponse200;

export type SpectroClustersVsphereRateResponse =
  SpectroClustersVsphereRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereRateUrl = (
  params?: SpectroClustersVsphereRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/vsphere/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/vsphere/rate`;
};

export const SpectroClustersVsphereRate = async (
  SpectroVsphereClusterRateEntity: SpectroVsphereClusterRateEntity,
  params?: SpectroClustersVsphereRateParams,
  options?: RequestInit,
): Promise<SpectroClustersVsphereRateResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroVsphereClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVsphereRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVsphereRateResponse;
};

/**
 * @summary Validates vSphere cluster create operation
 */
export type SpectroClustersVsphereValidateResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersVsphereValidateResponseComposite =
  SpectroClustersVsphereValidateResponse200;

export type SpectroClustersVsphereValidateResponse =
  SpectroClustersVsphereValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere/validate`;
};

export const SpectroClustersVsphereValidate = async (
  SpectroVsphereClusterEntityBody: SpectroVsphereClusterEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersVsphereValidateResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroVsphereClusterEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVsphereValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVsphereValidateResponse;
};

/**
 * @summary Deletes the specified cluster
 */
export type SpectroClustersDeleteResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersDeleteResponseComposite =
  SpectroClustersDeleteResponse204;

export type SpectroClustersDeleteResponse =
  SpectroClustersDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersDeleteUrl = (
  uid: string,
  params?: SpectroClustersDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}`;
};

export const SpectroClustersDelete = async (
  uid: string,
  params?: SpectroClustersDeleteParams,
  options?: RequestInit,
): Promise<SpectroClustersDeleteResponse> => {
  const res = await fetch(getV1SpectroClustersDeleteUrl(uid, params), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersDeleteResponse;
};

/**
 * @summary Returns the specified cluster
 */
export type SpectroClustersGetResponse200 = {
  data: SpectroCluster;
  status: 200;
};

export type SpectroClustersGetResponseComposite = SpectroClustersGetResponse200;

export type SpectroClustersGetResponse = SpectroClustersGetResponseComposite & {
  headers: Headers;
};

export const getV1SpectroClustersGetUrl = (
  uid: string,
  params?: SpectroClustersGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}`;
};

export const SpectroClustersGet = async (
  uid: string,
  params?: SpectroClustersGetParams,
  options?: RequestInit,
): Promise<SpectroClustersGetResponse> => {
  const res = await fetch(getV1SpectroClustersGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGetResponse;
};

/**
 * @summary Get the cluster asset doc
 */
export type SpectroClustersUidAssetsGetResponse200 = {
  data: SpectroClusterAssetEntity;
  status: 200;
};

export type SpectroClustersUidAssetsGetResponseComposite =
  SpectroClustersUidAssetsGetResponse200;

export type SpectroClustersUidAssetsGetResponse =
  SpectroClustersUidAssetsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidAssetsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets`;
};

export const SpectroClustersUidAssetsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidAssetsGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidAssetsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidAssetsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidAssetsGetResponse;
};

/**
 * @summary Associate the assets for the cluster
 */
export type SpectroClustersUidAssetsResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidAssetsResponseComposite =
  SpectroClustersUidAssetsResponse204;

export type SpectroClustersUidAssetsResponse =
  SpectroClustersUidAssetsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidAssetsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets`;
};

export const SpectroClustersUidAssets = async (
  uid: string,
  SpectroClusterAssetEntity: SpectroClusterAssetEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidAssetsResponse> => {
  const res = await fetch(getV1SpectroClustersUidAssetsUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterAssetEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidAssetsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidAssetsResponse;
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type SpectroClustersUidAdminKubeConfigResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersUidAdminKubeConfigResponseComposite =
  SpectroClustersUidAdminKubeConfigResponse200;

export type SpectroClustersUidAdminKubeConfigResponse =
  SpectroClustersUidAdminKubeConfigResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidAdminKubeConfigUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminKubeconfig`;
};

export const SpectroClustersUidAdminKubeConfig = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidAdminKubeConfigResponse> => {
  const res = await fetch(getV1SpectroClustersUidAdminKubeConfigUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidAdminKubeConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidAdminKubeConfigResponse;
};

/**
 * @summary Deletes the cluster's token kube config data
 */
export type SpectroClustersUidTokenKubeConfigDeleteResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidTokenKubeConfigDeleteResponseComposite =
  SpectroClustersUidTokenKubeConfigDeleteResponse204;

export type SpectroClustersUidTokenKubeConfigDeleteResponse =
  SpectroClustersUidTokenKubeConfigDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidTokenKubeConfigDeleteUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const SpectroClustersUidTokenKubeConfigDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidTokenKubeConfigDeleteResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidTokenKubeConfigDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidTokenKubeConfigDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidTokenKubeConfigDeleteResponse;
};

/**
 * @summary Returns the specified cluster's token kube config file
 */
export type SpectroClustersUidTokenKubeConfigGetResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersUidTokenKubeConfigGetResponseComposite =
  SpectroClustersUidTokenKubeConfigGetResponse200;

export type SpectroClustersUidTokenKubeConfigGetResponse =
  SpectroClustersUidTokenKubeConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidTokenKubeConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const SpectroClustersUidTokenKubeConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidTokenKubeConfigGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidTokenKubeConfigGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidTokenKubeConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidTokenKubeConfigGetResponse;
};

/**
 * @summary Updates the cluster's token kube config data
 */
export type SpectroClustersUidTokenKubeConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidTokenKubeConfigUpdateResponseComposite =
  SpectroClustersUidTokenKubeConfigUpdateResponse204;

export type SpectroClustersUidTokenKubeConfigUpdateResponse =
  SpectroClustersUidTokenKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidTokenKubeConfigUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const SpectroClustersUidTokenKubeConfigUpdate = async (
  uid: string,
  SpectroClusterAssetTokenKubeConfig: SpectroClusterAssetTokenKubeConfig,
  options?: RequestInit,
): Promise<SpectroClustersUidTokenKubeConfigUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidTokenKubeConfigUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(SpectroClusterAssetTokenKubeConfig),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidTokenKubeConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidTokenKubeConfigUpdateResponse;
};

/**
 * @summary Deletes the cluster's frp kube config client data
 */
export type SpectroClustersUidFrpKubeConfigDeleteResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidFrpKubeConfigDeleteResponseComposite =
  SpectroClustersUidFrpKubeConfigDeleteResponse204;

export type SpectroClustersUidFrpKubeConfigDeleteResponse =
  SpectroClustersUidFrpKubeConfigDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidFrpKubeConfigDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const SpectroClustersUidFrpKubeConfigDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidFrpKubeConfigDeleteResponse> => {
  const res = await fetch(getV1SpectroClustersUidFrpKubeConfigDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidFrpKubeConfigDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidFrpKubeConfigDeleteResponse;
};

/**
 * @summary Returns the specified cluster's frp kube config file
 */
export type SpectroClustersUidFrpKubeConfigGetResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersUidFrpKubeConfigGetResponseComposite =
  SpectroClustersUidFrpKubeConfigGetResponse200;

export type SpectroClustersUidFrpKubeConfigGetResponse =
  SpectroClustersUidFrpKubeConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidFrpKubeConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const SpectroClustersUidFrpKubeConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidFrpKubeConfigGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidFrpKubeConfigGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidFrpKubeConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidFrpKubeConfigGetResponse;
};

/**
 * @summary Updates the cluster's frp kube config data
 */
export type SpectroClustersUidFrpKubeConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidFrpKubeConfigUpdateResponseComposite =
  SpectroClustersUidFrpKubeConfigUpdateResponse204;

export type SpectroClustersUidFrpKubeConfigUpdateResponse =
  SpectroClustersUidFrpKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidFrpKubeConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const SpectroClustersUidFrpKubeConfigUpdate = async (
  uid: string,
  SpectroClusterAssetFrpKubeConfig: SpectroClusterAssetFrpKubeConfig,
  options?: RequestInit,
): Promise<SpectroClustersUidFrpKubeConfigUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidFrpKubeConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterAssetFrpKubeConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidFrpKubeConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidFrpKubeConfigUpdateResponse;
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type SpectroClustersUidKubeConfigResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersUidKubeConfigResponseComposite =
  SpectroClustersUidKubeConfigResponse200;

export type SpectroClustersUidKubeConfigResponse =
  SpectroClustersUidKubeConfigResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigUrl = (
  uid: string,
  params?: SpectroClustersUidKubeConfigParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig`;
};

export const SpectroClustersUidKubeConfig = async (
  uid: string,
  params?: SpectroClustersUidKubeConfigParams,
  options?: RequestInit,
): Promise<SpectroClustersUidKubeConfigResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeConfigUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidKubeConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidKubeConfigResponse;
};

/**
 * @summary Updates the cluster's manifest data
 */
export type SpectroClustersUidKubeConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidKubeConfigUpdateResponseComposite =
  SpectroClustersUidKubeConfigUpdateResponse204;

export type SpectroClustersUidKubeConfigUpdateResponse =
  SpectroClustersUidKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig`;
};

export const SpectroClustersUidKubeConfigUpdate = async (
  uid: string,
  SpectroClusterAssetKubeConfig: SpectroClusterAssetKubeConfig,
  options?: RequestInit,
): Promise<SpectroClustersUidKubeConfigUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterAssetKubeConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidKubeConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidKubeConfigUpdateResponse;
};

/**
 * @summary Deletes the cluster's kube config client data
 */
export type SpectroClustersUidKubeConfigClientDeleteResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidKubeConfigClientDeleteResponseComposite =
  SpectroClustersUidKubeConfigClientDeleteResponse204;

export type SpectroClustersUidKubeConfigClientDeleteResponse =
  SpectroClustersUidKubeConfigClientDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigClientDeleteUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const SpectroClustersUidKubeConfigClientDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidKubeConfigClientDeleteResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidKubeConfigClientDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidKubeConfigClientDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidKubeConfigClientDeleteResponse;
};

/**
 * @summary Returns the specified cluster's kube config client file
 */
export type SpectroClustersUidKubeConfigClientGetResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersUidKubeConfigClientGetResponseComposite =
  SpectroClustersUidKubeConfigClientGetResponse200;

export type SpectroClustersUidKubeConfigClientGetResponse =
  SpectroClustersUidKubeConfigClientGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigClientGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const SpectroClustersUidKubeConfigClientGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidKubeConfigClientGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeConfigClientGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidKubeConfigClientGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidKubeConfigClientGetResponse;
};

/**
 * @summary Updates the cluster's kube config client data
 */
export type SpectroClustersUidKubeConfigClientUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidKubeConfigClientUpdateResponseComposite =
  SpectroClustersUidKubeConfigClientUpdateResponse204;

export type SpectroClustersUidKubeConfigClientUpdateResponse =
  SpectroClustersUidKubeConfigClientUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigClientUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const SpectroClustersUidKubeConfigClientUpdate = async (
  uid: string,
  SpectroClusterAssetKubeConfigClient: SpectroClusterAssetKubeConfigClient,
  options?: RequestInit,
): Promise<SpectroClustersUidKubeConfigClientUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidKubeConfigClientUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(SpectroClusterAssetKubeConfigClient),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidKubeConfigClientUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidKubeConfigClientUpdateResponse;
};

/**
 * @summary Returns the specified cluster's manifest data
 */
export type SpectroClustersUidManifestGetResponse200 = {
  data: string;
  status: 200;
};

export type SpectroClustersUidManifestGetResponseComposite =
  SpectroClustersUidManifestGetResponse200;

export type SpectroClustersUidManifestGetResponse =
  SpectroClustersUidManifestGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/manifest`;
};

export const SpectroClustersUidManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidManifestGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidManifestGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidManifestGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidManifestGetResponse;
};

/**
 * @summary Updates the specified cluster's manifest data
 */
export type SpectroClustersUidManifestUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidManifestUpdateResponseComposite =
  SpectroClustersUidManifestUpdateResponse204;

export type SpectroClustersUidManifestUpdateResponse =
  SpectroClustersUidManifestUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidManifestUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/manifest`;
};

export const SpectroClustersUidManifestUpdate = async (
  uid: string,
  SpectroClusterAssetManifest: SpectroClusterAssetManifest,
  options?: RequestInit,
): Promise<SpectroClustersUidManifestUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidManifestUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterAssetManifest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidManifestUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidManifestUpdateResponse;
};

/**
 * @summary Updates the specified cluster meta attribute
 */
export type SpectroClustersUidClusterMetaAttributeUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidClusterMetaAttributeUpdateResponseComposite =
  SpectroClustersUidClusterMetaAttributeUpdateResponse204;

export type SpectroClustersUidClusterMetaAttributeUpdateResponse =
  SpectroClustersUidClusterMetaAttributeUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidClusterMetaAttributeUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/clusterMetaAttribute`;
};

export const SpectroClustersUidClusterMetaAttributeUpdate = async (
  uid: string,
  ClusterMetaAttributeEntity: ClusterMetaAttributeEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidClusterMetaAttributeUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidClusterMetaAttributeUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterMetaAttributeEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidClusterMetaAttributeUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidClusterMetaAttributeUpdateResponse;
};

/**
 * @summary Updates the specified cluster controlPlane health check timeout
 */
export type ControlPlaneHealthCheckTimeoutUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ControlPlaneHealthCheckTimeoutUpdateResponseComposite =
  ControlPlaneHealthCheckTimeoutUpdateResponse204;

export type ControlPlaneHealthCheckTimeoutUpdateResponse =
  ControlPlaneHealthCheckTimeoutUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ControlPlaneHealthCheckTimeoutUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/controlPlaneHealthCheckTimeout`;
};

export const ControlPlaneHealthCheckTimeoutUpdate = async (
  uid: string,
  ControlPlaneHealthCheckTimeoutEntity: ControlPlaneHealthCheckTimeoutEntity,
  options?: RequestInit,
): Promise<ControlPlaneHealthCheckTimeoutUpdateResponse> => {
  const res = await fetch(getV1ControlPlaneHealthCheckTimeoutUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ControlPlaneHealthCheckTimeoutEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ControlPlaneHealthCheckTimeoutUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ControlPlaneHealthCheckTimeoutUpdateResponse;
};

/**
 * @summary Updates the specified cluster host config
 */
export type HostClusterConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type HostClusterConfigUpdateResponseComposite =
  HostClusterConfigUpdateResponse204;

export type HostClusterConfigUpdateResponse =
  HostClusterConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1HostClusterConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/hostCluster`;
};

export const HostClusterConfigUpdate = async (
  uid: string,
  HostClusterConfigEntity: HostClusterConfigEntity,
  options?: RequestInit,
): Promise<HostClusterConfigUpdateResponse> => {
  const res = await fetch(getV1HostClusterConfigUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(HostClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: HostClusterConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as HostClusterConfigUpdateResponse;
};

/**
 * @summary Updates the specified cluster Life cycle configuration
 */
export type SpectroClustersUidLifecycleConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidLifecycleConfigUpdateResponseComposite =
  SpectroClustersUidLifecycleConfigUpdateResponse204;

export type SpectroClustersUidLifecycleConfigUpdateResponse =
  SpectroClustersUidLifecycleConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidLifecycleConfigUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/lifecycleConfig`;
};

export const SpectroClustersUidLifecycleConfigUpdate = async (
  uid: string,
  LifecycleConfigEntity: LifecycleConfigEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidLifecycleConfigUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidLifecycleConfigUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(LifecycleConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidLifecycleConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidLifecycleConfigUpdateResponse;
};

/**
 * @summary Updates the specified cluster OS patch configuration
 */
export type SpectroClustersUidOsPatchUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidOsPatchUpdateResponseComposite =
  SpectroClustersUidOsPatchUpdateResponse204;

export type SpectroClustersUidOsPatchUpdateResponse =
  SpectroClustersUidOsPatchUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOsPatchUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/osPatch`;
};

export const SpectroClustersUidOsPatchUpdate = async (
  uid: string,
  OsPatchEntity: OsPatchEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidOsPatchUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidOsPatchUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OsPatchEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidOsPatchUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidOsPatchUpdateResponse;
};

/**
 * @summary Retrieves namespaces for the specified cluster
 */
export type SpectroClustersUidConfigNamespacesGetResponse200 = {
  data: ClusterNamespaceResources;
  status: 200;
};

export type SpectroClustersUidConfigNamespacesGetResponseComposite =
  SpectroClustersUidConfigNamespacesGetResponse200;

export type SpectroClustersUidConfigNamespacesGetResponse =
  SpectroClustersUidConfigNamespacesGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces`;
};

export const SpectroClustersUidConfigNamespacesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigNamespacesGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidConfigNamespacesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigNamespacesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigNamespacesGetResponse;
};

/**
 * @summary Updates namespaces for the specified cluster
 */
export type SpectroClustersUidConfigNamespacesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidConfigNamespacesUpdateResponseComposite =
  SpectroClustersUidConfigNamespacesUpdateResponse204;

export type SpectroClustersUidConfigNamespacesUpdateResponse =
  SpectroClustersUidConfigNamespacesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces`;
};

export const SpectroClustersUidConfigNamespacesUpdate = async (
  uid: string,
  ClusterNamespaceResourcesUpdateEntity: ClusterNamespaceResourcesUpdateEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigNamespacesUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigNamespacesUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterNamespaceResourcesUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigNamespacesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigNamespacesUpdateResponse;
};

/**
 * @summary Retrieves the specified namespace of the cluster
 */
export type SpectroClustersUidConfigNamespacesUidGetResponse200 = {
  data: ClusterNamespaceResource;
  status: 200;
};

export type SpectroClustersUidConfigNamespacesUidGetResponseComposite =
  SpectroClustersUidConfigNamespacesUidGetResponse200;

export type SpectroClustersUidConfigNamespacesUidGetResponse =
  SpectroClustersUidConfigNamespacesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesUidGetUrl = (
  uid: string,
  namespaceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces/${namespaceUid}`;
};

export const SpectroClustersUidConfigNamespacesUidGet = async (
  uid: string,
  namespaceUid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigNamespacesUidGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigNamespacesUidGetUrl(uid, namespaceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigNamespacesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigNamespacesUidGetResponse;
};

/**
 * @summary Updates the specified namespace of the cluster
 */
export type SpectroClustersUidConfigNamespacesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidConfigNamespacesUidUpdateResponseComposite =
  SpectroClustersUidConfigNamespacesUidUpdateResponse204;

export type SpectroClustersUidConfigNamespacesUidUpdateResponse =
  SpectroClustersUidConfigNamespacesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesUidUpdateUrl = (
  uid: string,
  namespaceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces/${namespaceUid}`;
};

export const SpectroClustersUidConfigNamespacesUidUpdate = async (
  uid: string,
  namespaceUid: string,
  ClusterNamespaceResourceInputEntity: ClusterNamespaceResourceInputEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigNamespacesUidUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigNamespacesUidUpdateUrl(uid, namespaceUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterNamespaceResourceInputEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigNamespacesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigNamespacesUidUpdateResponse;
};

/**
 * @summary Retrieves RBAC information for the specified cluster
 */
export type SpectroClustersUidConfigRbacsGetResponse200 = {
  data: ClusterRbacs;
  status: 200;
};

export type SpectroClustersUidConfigRbacsGetResponseComposite =
  SpectroClustersUidConfigRbacsGetResponse200;

export type SpectroClustersUidConfigRbacsGetResponse =
  SpectroClustersUidConfigRbacsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs`;
};

export const SpectroClustersUidConfigRbacsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigRbacsGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidConfigRbacsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigRbacsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigRbacsGetResponse;
};

/**
 * @summary Updates RBAC information for the specified cluster
 */
export type SpectroClustersUidConfigRbacsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidConfigRbacsUpdateResponseComposite =
  SpectroClustersUidConfigRbacsUpdateResponse204;

export type SpectroClustersUidConfigRbacsUpdateResponse =
  SpectroClustersUidConfigRbacsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs`;
};

export const SpectroClustersUidConfigRbacsUpdate = async (
  uid: string,
  ClusterRbacResourcesUpdateEntity: ClusterRbacResourcesUpdateEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigRbacsUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidConfigRbacsUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterRbacResourcesUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigRbacsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigRbacsUpdateResponse;
};

/**
 * @summary Retrieves the specified RBAC of the cluster
 */
export type SpectroClustersUidConfigRbacsUidGetResponse200 = {
  data: ClusterRbac;
  status: 200;
};

export type SpectroClustersUidConfigRbacsUidGetResponseComposite =
  SpectroClustersUidConfigRbacsUidGetResponse200;

export type SpectroClustersUidConfigRbacsUidGetResponse =
  SpectroClustersUidConfigRbacsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsUidGetUrl = (
  uid: string,
  rbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs/${rbacUid}`;
};

export const SpectroClustersUidConfigRbacsUidGet = async (
  uid: string,
  rbacUid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigRbacsUidGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigRbacsUidGetUrl(uid, rbacUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigRbacsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigRbacsUidGetResponse;
};

/**
 * @summary Updates the specified RBAC of the cluster
 */
export type SpectroClustersUidConfigRbacsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidConfigRbacsUidUpdateResponseComposite =
  SpectroClustersUidConfigRbacsUidUpdateResponse204;

export type SpectroClustersUidConfigRbacsUidUpdateResponse =
  SpectroClustersUidConfigRbacsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsUidUpdateUrl = (
  uid: string,
  rbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs/${rbacUid}`;
};

export const SpectroClustersUidConfigRbacsUidUpdate = async (
  uid: string,
  rbacUid: string,
  ClusterRbacInputEntity: ClusterRbacInputEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidConfigRbacsUidUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigRbacsUidUpdateUrl(uid, rbacUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterRbacInputEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidConfigRbacsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidConfigRbacsUidUpdateResponse;
};

/**
 * @summary Download the specified cluster
 */
export type SpectroClustersUidDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersUidDownloadResponseComposite =
  SpectroClustersUidDownloadResponse200;

export type SpectroClustersUidDownloadResponse =
  SpectroClustersUidDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/download`;
};

export const SpectroClustersUidDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidDownloadResponse> => {
  const res = await fetch(getV1SpectroClustersUidDownloadUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidDownloadResponse;
};

/**
 * @summary Retrieves a list of edge host of edge-native cluster
 */
export type EdgeNativeClustersHostsListResponse200 = {
  data: EdgeHostDevices;
  status: 200;
};

export type EdgeNativeClustersHostsListResponseComposite =
  EdgeNativeClustersHostsListResponse200;

export type EdgeNativeClustersHostsListResponse =
  EdgeNativeClustersHostsListResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeNativeClustersHostsListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/edge-native/edgeHosts`;
};

export const EdgeNativeClustersHostsList = async (
  uid: string,
  options?: RequestInit,
): Promise<EdgeNativeClustersHostsListResponse> => {
  const res = await fetch(getV1EdgeNativeClustersHostsListUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeNativeClustersHostsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeNativeClustersHostsListResponse;
};

/**
 * @summary reset the edge clusters by deleting machine pools and conditions
 */
export type SpectroClustersUidEdgeResetResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidEdgeResetResponseComposite =
  SpectroClustersUidEdgeResetResponse204;

export type SpectroClustersUidEdgeResetResponse =
  SpectroClustersUidEdgeResetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidEdgeResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/edge/reset`;
};

export const SpectroClustersUidEdgeReset = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidEdgeResetResponse> => {
  const res = await fetch(getV1SpectroClustersUidEdgeResetUrl(uid), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidEdgeResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidEdgeResetResponse;
};

/**
 * @summary Reset cluster backup schedule settings
 */
export type ClusterFeatureBackupScheduleResetResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureBackupScheduleResetResponseComposite =
  ClusterFeatureBackupScheduleResetResponse204;

export type ClusterFeatureBackupScheduleResetResponse =
  ClusterFeatureBackupScheduleResetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupScheduleResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const ClusterFeatureBackupScheduleReset = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterFeatureBackupScheduleResetResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupScheduleResetUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupScheduleResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupScheduleResetResponse;
};

/**
 * @summary Returns the cluster backup result
 */
export type ClusterFeatureBackupGetResponse200 = {
  data: ClusterBackup;
  status: 200;
};

export type ClusterFeatureBackupGetResponseComposite =
  ClusterFeatureBackupGetResponse200;

export type ClusterFeatureBackupGetResponse =
  ClusterFeatureBackupGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupGetUrl = (
  uid: string,
  params?: ClusterFeatureBackupGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const ClusterFeatureBackupGet = async (
  uid: string,
  params?: ClusterFeatureBackupGetParams,
  options?: RequestInit,
): Promise<ClusterFeatureBackupGetResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupGetResponse;
};

/**
 * @summary Create cluster backup settings
 */
export type ClusterFeatureBackupCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterFeatureBackupCreateResponseComposite =
  ClusterFeatureBackupCreateResponse201;

export type ClusterFeatureBackupCreateResponse =
  ClusterFeatureBackupCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const ClusterFeatureBackupCreate = async (
  uid: string,
  ClusterBackupConfigBody: ClusterBackupConfigBody,
  options?: RequestInit,
): Promise<ClusterFeatureBackupCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterBackupConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupCreateResponse;
};

/**
 * @summary Update cluster backup settings
 */
export type ClusterFeatureBackupUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureBackupUpdateResponseComposite =
  ClusterFeatureBackupUpdateResponse204;

export type ClusterFeatureBackupUpdateResponse =
  ClusterFeatureBackupUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const ClusterFeatureBackupUpdate = async (
  uid: string,
  ClusterBackupConfigBody: ClusterBackupConfigBody,
  options?: RequestInit,
): Promise<ClusterFeatureBackupUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterBackupConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupUpdateResponse;
};

/**
 * @summary Create on demand cluster backup
 */
export type ClusterFeatureBackupOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterFeatureBackupOnDemandCreateResponseComposite =
  ClusterFeatureBackupOnDemandCreateResponse201;

export type ClusterFeatureBackupOnDemandCreateResponse =
  ClusterFeatureBackupOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup/onDemand`;
};

export const ClusterFeatureBackupOnDemandCreate = async (
  uid: string,
  ClusterBackupConfigBody: ClusterBackupConfigBody,
  options?: RequestInit,
): Promise<ClusterFeatureBackupOnDemandCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterBackupConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupOnDemandCreateResponse;
};

/**
 * @summary Delete cluster backup
 */
export type ClusterFeatureBackupDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureBackupDeleteResponseComposite =
  ClusterFeatureBackupDeleteResponse204;

export type ClusterFeatureBackupDeleteResponse =
  ClusterFeatureBackupDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupDeleteUrl = (
  uid: string,
  backupName: string,
  requestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup/${backupName}/request/${requestUid}`;
};

export const ClusterFeatureBackupDelete = async (
  uid: string,
  backupName: string,
  requestUid: string,
  options?: RequestInit,
): Promise<ClusterFeatureBackupDeleteResponse> => {
  const res = await fetch(
    getV1ClusterFeatureBackupDeleteUrl(uid, backupName, requestUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureBackupDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureBackupDeleteResponse;
};

/**
 * @summary Returns the compliance scan of cluster, if driverType is provided then specific status of driverType will be returned
 */
export type ClusterFeatureComplianceScanGetResponse200 = {
  data: ClusterComplianceScan;
  status: 200;
};

export type ClusterFeatureComplianceScanGetResponseComposite =
  ClusterFeatureComplianceScanGetResponse200;

export type ClusterFeatureComplianceScanGetResponse =
  ClusterFeatureComplianceScanGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const ClusterFeatureComplianceScanGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterFeatureComplianceScanGetResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureComplianceScanGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureComplianceScanGetResponse;
};

/**
 * @summary Create cluster compliance scan
 */
export type ClusterFeatureComplianceScanCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterFeatureComplianceScanCreateResponseComposite =
  ClusterFeatureComplianceScanCreateResponse201;

export type ClusterFeatureComplianceScanCreateResponse =
  ClusterFeatureComplianceScanCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const ClusterFeatureComplianceScanCreate = async (
  uid: string,
  ClusterComplianceScheduleConfigBody: ClusterComplianceScheduleConfigBody,
  options?: RequestInit,
): Promise<ClusterFeatureComplianceScanCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterComplianceScheduleConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureComplianceScanCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureComplianceScanCreateResponse;
};

/**
 * @summary Update cluster compliance scan settings
 */
export type ClusterFeatureComplianceScanUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureComplianceScanUpdateResponseComposite =
  ClusterFeatureComplianceScanUpdateResponse204;

export type ClusterFeatureComplianceScanUpdateResponse =
  ClusterFeatureComplianceScanUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const ClusterFeatureComplianceScanUpdate = async (
  uid: string,
  ClusterComplianceScheduleConfigBody: ClusterComplianceScheduleConfigBody,
  options?: RequestInit,
): Promise<ClusterFeatureComplianceScanUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterComplianceScheduleConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureComplianceScanUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureComplianceScanUpdateResponse;
};

/**
 * @summary Returns the compliance scan log by cluster uid and driver type
 */
export type ClusterFeatureComplianceScanLogsGetResponse200 = {
  data: ClusterComplianceScanLogs;
  status: 200;
};

export type ClusterFeatureComplianceScanLogsGetResponseComposite =
  ClusterFeatureComplianceScanLogsGetResponse200;

export type ClusterFeatureComplianceScanLogsGetResponse =
  ClusterFeatureComplianceScanLogsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanLogsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers`;
};

export const ClusterFeatureComplianceScanLogsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterFeatureComplianceScanLogsGetResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanLogsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureComplianceScanLogsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureComplianceScanLogsGetResponse;
};

/**
 * @summary Update the KubeBench compliance scan log by uid
 */
export type ClusterFeatureScanKubeBenchLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureScanKubeBenchLogUpdateResponseComposite =
  ClusterFeatureScanKubeBenchLogUpdateResponse204;

export type ClusterFeatureScanKubeBenchLogUpdateResponse =
  ClusterFeatureScanKubeBenchLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanKubeBenchLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/kubeBench`;
};

export const ClusterFeatureScanKubeBenchLogUpdate = async (
  uid: string,
  KubeBenchEntity: KubeBenchEntity,
  options?: RequestInit,
): Promise<ClusterFeatureScanKubeBenchLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanKubeBenchLogUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(KubeBenchEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureScanKubeBenchLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureScanKubeBenchLogUpdateResponse;
};

/**
 * @summary Update the KubeHunter compliance scan log by uid
 */
export type ClusterFeatureScanKubeHunterLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureScanKubeHunterLogUpdateResponseComposite =
  ClusterFeatureScanKubeHunterLogUpdateResponse204;

export type ClusterFeatureScanKubeHunterLogUpdateResponse =
  ClusterFeatureScanKubeHunterLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanKubeHunterLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/kubeHunter`;
};

export const ClusterFeatureScanKubeHunterLogUpdate = async (
  uid: string,
  KubeHunterEntity: KubeHunterEntity,
  options?: RequestInit,
): Promise<ClusterFeatureScanKubeHunterLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanKubeHunterLogUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(KubeHunterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureScanKubeHunterLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureScanKubeHunterLogUpdateResponse;
};

/**
 * @summary Update the Sonobuoy compliance scan log by uid
 */
export type ClusterFeatureScanSonobuoyLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureScanSonobuoyLogUpdateResponseComposite =
  ClusterFeatureScanSonobuoyLogUpdateResponse204;

export type ClusterFeatureScanSonobuoyLogUpdateResponse =
  ClusterFeatureScanSonobuoyLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanSonobuoyLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/sonobuoy`;
};

export const ClusterFeatureScanSonobuoyLogUpdate = async (
  uid: string,
  SonobuoyEntity: SonobuoyEntity,
  options?: RequestInit,
): Promise<ClusterFeatureScanSonobuoyLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanSonobuoyLogUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SonobuoyEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureScanSonobuoyLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureScanSonobuoyLogUpdateResponse;
};

/**
 * @summary Update the Syft compliance scan log by uid
 */
export type ClusterFeatureScanSyftLogUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureScanSyftLogUpdateResponseComposite =
  ClusterFeatureScanSyftLogUpdateResponse204;

export type ClusterFeatureScanSyftLogUpdateResponse =
  ClusterFeatureScanSyftLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanSyftLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/syft`;
};

export const ClusterFeatureScanSyftLogUpdate = async (
  uid: string,
  SyftEntity: SyftEntity,
  options?: RequestInit,
): Promise<ClusterFeatureScanSyftLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanSyftLogUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SyftEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureScanSyftLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureScanSyftLogUpdateResponse;
};

/**
 * @summary Delete the compliance scan log by uid
 */
export type ClusterFeatureComplianceScanLogDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ClusterFeatureComplianceScanLogDeleteResponseComposite =
  ClusterFeatureComplianceScanLogDeleteResponse204;

export type ClusterFeatureComplianceScanLogDeleteResponse =
  ClusterFeatureComplianceScanLogDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanLogDeleteUrl = (
  uid: string,
  logUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}`;
};

export const ClusterFeatureComplianceScanLogDelete = async (
  uid: string,
  logUid: string,
  options?: RequestInit,
): Promise<ClusterFeatureComplianceScanLogDeleteResponse> => {
  const res = await fetch(
    getV1ClusterFeatureComplianceScanLogDeleteUrl(uid, logUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureComplianceScanLogDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureComplianceScanLogDeleteResponse;
};

/**
 * @summary Returns the KubeBench compliance scan log by uid
 */
export type ClusterFeatureKubeBenchLogGetResponse200 = {
  data: ClusterScanLogKubeBench;
  status: 200;
};

export type ClusterFeatureKubeBenchLogGetResponseComposite =
  ClusterFeatureKubeBenchLogGetResponse200;

export type ClusterFeatureKubeBenchLogGetResponse =
  ClusterFeatureKubeBenchLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureKubeBenchLogGetUrl = (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeBenchLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeBench?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeBench`;
};

export const ClusterFeatureKubeBenchLogGet = async (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeBenchLogGetParams,
  options?: RequestInit,
): Promise<ClusterFeatureKubeBenchLogGetResponse> => {
  const res = await fetch(
    getV1ClusterFeatureKubeBenchLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureKubeBenchLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureKubeBenchLogGetResponse;
};

/**
 * @summary Returns the KubeHunter compliance scan log by uid
 */
export type ClusterFeatureKubeHunterLogGetResponse200 = {
  data: ClusterScanLogKubeHunter;
  status: 200;
};

export type ClusterFeatureKubeHunterLogGetResponseComposite =
  ClusterFeatureKubeHunterLogGetResponse200;

export type ClusterFeatureKubeHunterLogGetResponse =
  ClusterFeatureKubeHunterLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureKubeHunterLogGetUrl = (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeHunterLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeHunter?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeHunter`;
};

export const ClusterFeatureKubeHunterLogGet = async (
  uid: string,
  logUid: string,
  params?: ClusterFeatureKubeHunterLogGetParams,
  options?: RequestInit,
): Promise<ClusterFeatureKubeHunterLogGetResponse> => {
  const res = await fetch(
    getV1ClusterFeatureKubeHunterLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureKubeHunterLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureKubeHunterLogGetResponse;
};

/**
 * @summary Returns the Sonobuoy compliance scan log by uid
 */
export type ClusterFeatureSonobuoyLogGetResponse200 = {
  data: ClusterScanLogSonobuoy;
  status: 200;
};

export type ClusterFeatureSonobuoyLogGetResponseComposite =
  ClusterFeatureSonobuoyLogGetResponse200;

export type ClusterFeatureSonobuoyLogGetResponse =
  ClusterFeatureSonobuoyLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureSonobuoyLogGetUrl = (
  uid: string,
  logUid: string,
  params?: ClusterFeatureSonobuoyLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/sonobuoy?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/sonobuoy`;
};

export const ClusterFeatureSonobuoyLogGet = async (
  uid: string,
  logUid: string,
  params?: ClusterFeatureSonobuoyLogGetParams,
  options?: RequestInit,
): Promise<ClusterFeatureSonobuoyLogGetResponse> => {
  const res = await fetch(
    getV1ClusterFeatureSonobuoyLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureSonobuoyLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureSonobuoyLogGetResponse;
};

/**
 * @summary Returns the Syft compliance scan log by uid
 */
export type ClusterFeatureSyftLogGetResponse200 = {
  data: ClusterScanLogSyft;
  status: 200;
};

export type ClusterFeatureSyftLogGetResponseComposite =
  ClusterFeatureSyftLogGetResponse200;

export type ClusterFeatureSyftLogGetResponse =
  ClusterFeatureSyftLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureSyftLogGetUrl = (
  uid: string,
  logUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft`;
};

export const ClusterFeatureSyftLogGet = async (
  uid: string,
  logUid: string,
  options?: RequestInit,
): Promise<ClusterFeatureSyftLogGetResponse> => {
  const res = await fetch(getV1ClusterFeatureSyftLogGetUrl(uid, logUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureSyftLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureSyftLogGetResponse;
};

/**
 * @summary Returns the image sbom of syft scan log of cluster
 */
export type SyftScanLogImageSBOMGetResponse200 = {
  data: Blob;
  status: 200;
};

export type SyftScanLogImageSBOMGetResponseComposite =
  SyftScanLogImageSBOMGetResponse200;

export type SyftScanLogImageSBOMGetResponse =
  SyftScanLogImageSBOMGetResponseComposite & {
    headers: Headers;
  };

export const getV1SyftScanLogImageSBOMGetUrl = (
  uid: string,
  logUid: string,
  params: SyftScanLogImageSBOMGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft/sbom?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft/sbom`;
};

export const SyftScanLogImageSBOMGet = async (
  uid: string,
  logUid: string,
  params: SyftScanLogImageSBOMGetParams,
  options?: RequestInit,
): Promise<SyftScanLogImageSBOMGetResponse> => {
  const res = await fetch(
    getV1SyftScanLogImageSBOMGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SyftScanLogImageSBOMGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SyftScanLogImageSBOMGetResponse;
};

/**
 * @summary Downloads the driver cluster logs
 */
export type ClusterFeatureDriverLogDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type ClusterFeatureDriverLogDownloadResponseComposite =
  ClusterFeatureDriverLogDownloadResponse200;

export type ClusterFeatureDriverLogDownloadResponse =
  ClusterFeatureDriverLogDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureDriverLogDownloadUrl = (
  uid: string,
  logUid: string,
  driver: "kubeBench" | "kubeHunter" | "sonobuoy" | "syft",
  params?: ClusterFeatureDriverLogDownloadParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/${driver}/download?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/${driver}/download`;
};

export const ClusterFeatureDriverLogDownload = async (
  uid: string,
  logUid: string,
  driver: "kubeBench" | "kubeHunter" | "sonobuoy" | "syft",
  params?: ClusterFeatureDriverLogDownloadParams,
  options?: RequestInit,
): Promise<ClusterFeatureDriverLogDownloadResponse> => {
  const res = await fetch(
    getV1ClusterFeatureDriverLogDownloadUrl(uid, logUid, driver, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureDriverLogDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureDriverLogDownloadResponse;
};

/**
 * @summary Create on demand cluster compliance scan
 */
export type ClusterFeatureComplianceScanOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterFeatureComplianceScanOnDemandCreateResponseComposite =
  ClusterFeatureComplianceScanOnDemandCreateResponse201;

export type ClusterFeatureComplianceScanOnDemandCreateResponse =
  ClusterFeatureComplianceScanOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanOnDemandCreateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/onDemand`;
};

export const ClusterFeatureComplianceScanOnDemandCreate = async (
  uid: string,
  ClusterComplianceOnDemandConfig: ClusterComplianceOnDemandConfig,
  options?: RequestInit,
): Promise<ClusterFeatureComplianceScanOnDemandCreateResponse> => {
  const res = await fetch(
    getV1ClusterFeatureComplianceScanOnDemandCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterComplianceOnDemandConfig),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureComplianceScanOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureComplianceScanOnDemandCreateResponse;
};

/**
 * @summary Get the installed helm charts of a specified cluster
 */
export type ClusterFeatureHelmChartsGetResponse200 = {
  data: ClusterHelmCharts;
  status: 200;
};

export type ClusterFeatureHelmChartsGetResponseComposite =
  ClusterFeatureHelmChartsGetResponse200;

export type ClusterFeatureHelmChartsGetResponse =
  ClusterFeatureHelmChartsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureHelmChartsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/helmCharts`;
};

export const ClusterFeatureHelmChartsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterFeatureHelmChartsGetResponse> => {
  const res = await fetch(getV1ClusterFeatureHelmChartsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureHelmChartsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureHelmChartsGetResponse;
};

/**
 * @summary Get the log fetcher for cluster
 */
export type ClusterFeatureLogFetcherGetResponse200 = {
  data: ClusterLogFetcher;
  status: 200;
};

export type ClusterFeatureLogFetcherGetResponseComposite =
  ClusterFeatureLogFetcherGetResponse200;

export type ClusterFeatureLogFetcherGetResponse =
  ClusterFeatureLogFetcherGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherGetUrl = (
  uid: string,
  params?: ClusterFeatureLogFetcherGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher`;
};

export const ClusterFeatureLogFetcherGet = async (
  uid: string,
  params?: ClusterFeatureLogFetcherGetParams,
  options?: RequestInit,
): Promise<ClusterFeatureLogFetcherGetResponse> => {
  const res = await fetch(getV1ClusterFeatureLogFetcherGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureLogFetcherGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureLogFetcherGetResponse;
};

/**
 * @summary Create the log fetcher for cluster
 */
export type ClusterFeatureLogFetcherCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterFeatureLogFetcherCreateResponseComposite =
  ClusterFeatureLogFetcherCreateResponse201;

export type ClusterFeatureLogFetcherCreateResponse =
  ClusterFeatureLogFetcherCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher`;
};

export const ClusterFeatureLogFetcherCreate = async (
  uid: string,
  ClusterLogFetcherRequest: ClusterLogFetcherRequest,
  options?: RequestInit,
): Promise<ClusterFeatureLogFetcherCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureLogFetcherCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterLogFetcherRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureLogFetcherCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureLogFetcherCreateResponse;
};

/**
 * @summary Get the installed manifests of a specified cluster
 */
export type ClusterFeatureManifestsGetResponse200 = {
  data: ClusterManifests;
  status: 200;
};

export type ClusterFeatureManifestsGetResponseComposite =
  ClusterFeatureManifestsGetResponse200;

export type ClusterFeatureManifestsGetResponse =
  ClusterFeatureManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureManifestsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/manifests`;
};

export const ClusterFeatureManifestsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterFeatureManifestsGetResponse> => {
  const res = await fetch(getV1ClusterFeatureManifestsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureManifestsGetResponse;
};

/**
 * @summary Returns the cluster restore of cluster
 */
export type ClusterFeatureRestoreGetResponse200 = {
  data: ClusterRestore;
  status: 200;
};

export type ClusterFeatureRestoreGetResponseComposite =
  ClusterFeatureRestoreGetResponse200;

export type ClusterFeatureRestoreGetResponse =
  ClusterFeatureRestoreGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureRestoreGetUrl = (
  uid: string,
  params?: ClusterFeatureRestoreGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore`;
};

export const ClusterFeatureRestoreGet = async (
  uid: string,
  params?: ClusterFeatureRestoreGetParams,
  options?: RequestInit,
): Promise<ClusterFeatureRestoreGetResponse> => {
  const res = await fetch(getV1ClusterFeatureRestoreGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureRestoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureRestoreGetResponse;
};

/**
 * @summary Create on demand cluster restore
 */
export type ClusterFeatureRestoreOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterFeatureRestoreOnDemandCreateResponseComposite =
  ClusterFeatureRestoreOnDemandCreateResponse201;

export type ClusterFeatureRestoreOnDemandCreateResponse =
  ClusterFeatureRestoreOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureRestoreOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore/onDemand`;
};

export const ClusterFeatureRestoreOnDemandCreate = async (
  uid: string,
  ClusterRestoreConfig: ClusterRestoreConfig,
  options?: RequestInit,
): Promise<ClusterFeatureRestoreOnDemandCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureRestoreOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterRestoreConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterFeatureRestoreOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterFeatureRestoreOnDemandCreateResponse;
};

/**
 * @summary Update specific cluster heartbeat
 */
export type SpectroClustersUidHeartbeatUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidHeartbeatUpdateResponseComposite =
  SpectroClustersUidHeartbeatUpdateResponse204;

export type SpectroClustersUidHeartbeatUpdateResponse =
  SpectroClustersUidHeartbeatUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidHeartbeatUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/heartbeat`;
};

export const SpectroClustersUidHeartbeatUpdate = async (
  uid: string,
  SpectroClusterHeartbeat: SpectroClusterHeartbeat,
  options?: RequestInit,
): Promise<SpectroClustersUidHeartbeatUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidHeartbeatUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterHeartbeat),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidHeartbeatUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidHeartbeatUpdateResponse;
};

/**
 * @summary Returns the metadata of all hybrid pools associated with the specified cluster
 */
export type SpectroClustersGetHybridPoolsMetadataResponse200 = {
  data: SpectroClusterHybridPoolsMetadata;
  status: 200;
};

export type SpectroClustersGetHybridPoolsMetadataResponseComposite =
  SpectroClustersGetHybridPoolsMetadataResponse200;

export type SpectroClustersGetHybridPoolsMetadataResponse =
  SpectroClustersGetHybridPoolsMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetHybridPoolsMetadataUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/hybridPools/metadata`;
};

export const SpectroClustersGetHybridPoolsMetadata = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersGetHybridPoolsMetadataResponse> => {
  const res = await fetch(getV1SpectroClustersGetHybridPoolsMetadataUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGetHybridPoolsMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGetHybridPoolsMetadataResponse;
};

/**
 * @summary Update specific cluster hybrid settings
 */
export type SpectroClustersUidHybridSettingsResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidHybridSettingsResponseComposite =
  SpectroClustersUidHybridSettingsResponse204;

export type SpectroClustersUidHybridSettingsResponse =
  SpectroClustersUidHybridSettingsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidHybridSettingsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/hybridSettings`;
};

export const SpectroClustersUidHybridSettings = async (
  uid: string,
  ClusterHybridSettingsEntity: ClusterHybridSettingsEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidHybridSettingsResponse> => {
  const res = await fetch(getV1SpectroClustersUidHybridSettingsUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterHybridSettingsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidHybridSettingsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidHybridSettingsResponse;
};

/**
 * @summary Returns the specified cluster's import manifest file
 */
export type SpectroClustersUidImportManifestResponse200 = {
  data: Blob;
  status: 200;
};

export type SpectroClustersUidImportManifestResponseComposite =
  SpectroClustersUidImportManifestResponse200;

export type SpectroClustersUidImportManifestResponse =
  SpectroClustersUidImportManifestResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidImportManifestUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/import/manifest`;
};

export const SpectroClustersUidImportManifest = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidImportManifestResponse> => {
  const res = await fetch(getV1SpectroClustersUidImportManifestUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidImportManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidImportManifestResponse;
};

/**
 * @summary Upgrade the specified imported read only cluster with full permissions
 */
export type SpectroClustersUidImportUpgradePatchResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidImportUpgradePatchResponseComposite =
  SpectroClustersUidImportUpgradePatchResponse204;

export type SpectroClustersUidImportUpgradePatchResponse =
  SpectroClustersUidImportUpgradePatchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidImportUpgradePatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/import/upgrade`;
};

export const SpectroClustersUidImportUpgradePatch = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidImportUpgradePatchResponse> => {
  const res = await fetch(getV1SpectroClustersUidImportUpgradePatchUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidImportUpgradePatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidImportUpgradePatchResponse;
};

/**
 * @summary Get K8Certificate for spectro cluster
 */
export type SpectroClustersK8CertificateResponse200 = {
  data: MachineCertificates;
  status: 200;
};

export type SpectroClustersK8CertificateResponseComposite =
  SpectroClustersK8CertificateResponse200;

export type SpectroClustersK8CertificateResponse =
  SpectroClustersK8CertificateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersK8CertificateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates`;
};

export const SpectroClustersK8Certificate = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersK8CertificateResponse> => {
  const res = await fetch(getV1SpectroClustersK8CertificateUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersK8CertificateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersK8CertificateResponse;
};

/**
 * @summary Update K8Certificate for spectro cluster
 */
export type SpectroClustersK8CertificateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersK8CertificateUpdateResponseComposite =
  SpectroClustersK8CertificateUpdateResponse204;

export type SpectroClustersK8CertificateUpdateResponse =
  SpectroClustersK8CertificateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersK8CertificateUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates`;
};

export const SpectroClustersK8CertificateUpdate = async (
  uid: string,
  SpectroClusterK8sCertificate: SpectroClusterK8sCertificate,
  options?: RequestInit,
): Promise<SpectroClustersK8CertificateUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersK8CertificateUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterK8sCertificate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersK8CertificateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersK8CertificateUpdateResponse;
};

/**
 * @summary Sets the cluster control plane nodes Kubernetes certificates for renewal
 */
export type SpectroClustersCertificatesRenewResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersCertificatesRenewResponseComposite =
  SpectroClustersCertificatesRenewResponse204;

export type SpectroClustersCertificatesRenewResponse =
  SpectroClustersCertificatesRenewResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersCertificatesRenewUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates/renew`;
};

export const SpectroClustersCertificatesRenew = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersCertificatesRenewResponse> => {
  const res = await fetch(getV1SpectroClustersCertificatesRenewUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersCertificatesRenewResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersCertificatesRenewResponse;
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type SpectroClustersUidKubeCtlRedirectResponse200 = {
  data: SpectroClusterKubeCtlRedirect;
  status: 200;
};

export type SpectroClustersUidKubeCtlRedirectResponseComposite =
  SpectroClustersUidKubeCtlRedirectResponse200;

export type SpectroClustersUidKubeCtlRedirectResponse =
  SpectroClustersUidKubeCtlRedirectResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeCtlRedirectUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/kubectl/redirect`;
};

export const SpectroClustersUidKubeCtlRedirect = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidKubeCtlRedirectResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeCtlRedirectUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidKubeCtlRedirectResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidKubeCtlRedirectResponse;
};

/**
 * @summary Associate the assets for the cluster
 */
export type SpectroClustersUidLocationPutResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidLocationPutResponseComposite =
  SpectroClustersUidLocationPutResponse204;

export type SpectroClustersUidLocationPutResponse =
  SpectroClustersUidLocationPutResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidLocationPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/location`;
};

export const SpectroClustersUidLocationPut = async (
  uid: string,
  SpectroClusterLocationInputEntity: SpectroClusterLocationInputEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidLocationPutResponse> => {
  const res = await fetch(getV1SpectroClustersUidLocationPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterLocationInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidLocationPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidLocationPutResponse;
};

/**
 * @summary Update the specified spectro cluster metadata
 */
export type SpectroClustersUidMetadataUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidMetadataUpdateResponseComposite =
  SpectroClustersUidMetadataUpdateResponse204;

export type SpectroClustersUidMetadataUpdateResponse =
  SpectroClustersUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/metadata`;
};

export const SpectroClustersUidMetadataUpdate = async (
  uid: string,
  ObjectMetaInputEntitySchemaBody: ObjectMetaInputEntitySchemaBody,
  options?: RequestInit,
): Promise<SpectroClustersUidMetadataUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ObjectMetaInputEntitySchemaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidMetadataUpdateResponse;
};

/**
 * @summary Returns available namespaces for the cluster
 */
export type ClusterNamespacesGetResponse200 = {
  data: ClusterNamespaces;
  status: 200;
};

export type ClusterNamespacesGetResponseComposite =
  ClusterNamespacesGetResponse200;

export type ClusterNamespacesGetResponse =
  ClusterNamespacesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterNamespacesGetUrl = (
  uid: string,
  params?: ClusterNamespacesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/namespaces?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/namespaces`;
};

export const ClusterNamespacesGet = async (
  uid: string,
  params?: ClusterNamespacesGetParams,
  options?: RequestInit,
): Promise<ClusterNamespacesGetResponse> => {
  const res = await fetch(getV1ClusterNamespacesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterNamespacesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterNamespacesGetResponse;
};

/**
 * @summary Returns k8s spectrocluster oidc
 */
export type SpectroClustersUidOIDCResponse200 = {
  data: SpectroClusterOidcSpec;
  status: 200;
};

export type SpectroClustersUidOIDCResponseComposite =
  SpectroClustersUidOIDCResponse200;

export type SpectroClustersUidOIDCResponse =
  SpectroClustersUidOIDCResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOIDCUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/oidc`;
};

export const SpectroClustersUidOIDC = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidOIDCResponse> => {
  const res = await fetch(getV1SpectroClustersUidOIDCUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidOIDCResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidOIDCResponse;
};

/**
 * @summary Returns k8s dashboard url
 */
export type SpectroClustersUidOIDCDashboardUrlResponse200 = {
  data: SectroClusterK8sDashboardUrl;
  status: 200;
};

export type SpectroClustersUidOIDCDashboardUrlResponseComposite =
  SpectroClustersUidOIDCDashboardUrlResponse200;

export type SpectroClustersUidOIDCDashboardUrlResponse =
  SpectroClustersUidOIDCDashboardUrlResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOIDCDashboardUrlUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/oidc/dashboard/url`;
};

export const SpectroClustersUidOIDCDashboardUrl = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidOIDCDashboardUrlResponse> => {
  const res = await fetch(getV1SpectroClustersUidOIDCDashboardUrlUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidOIDCDashboardUrlResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidOIDCDashboardUrlResponse;
};

/**
 * @summary Returns the specified cluster's manifest
 */
export type SpectroClustersUidPackManifestsUidGetResponse200 = {
  data: Manifest;
  status: 200;
};

export type SpectroClustersUidPackManifestsUidGetResponseComposite =
  SpectroClustersUidPackManifestsUidGetResponse200;

export type SpectroClustersUidPackManifestsUidGetResponse =
  SpectroClustersUidPackManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPackManifestsUidGetUrl = (
  uid: string,
  manifestUid: string,
  params?: SpectroClustersUidPackManifestsUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/manifests/${manifestUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/manifests/${manifestUid}`;
};

export const SpectroClustersUidPackManifestsUidGet = async (
  uid: string,
  manifestUid: string,
  params?: SpectroClustersUidPackManifestsUidGetParams,
  options?: RequestInit,
): Promise<SpectroClustersUidPackManifestsUidGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidPackManifestsUidGetUrl(uid, manifestUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidPackManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidPackManifestsUidGetResponse;
};

/**
 * @summary Get specified cluster pack properties
 */
export type SpectroClustersUidPackPropertiesResponse200 = {
  data: SpectroClusterPackProperties;
  status: 200;
};

export type SpectroClustersUidPackPropertiesResponseComposite =
  SpectroClustersUidPackPropertiesResponse200;

export type SpectroClustersUidPackPropertiesResponse =
  SpectroClustersUidPackPropertiesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPackPropertiesUrl = (
  uid: string,
  params: SpectroClustersUidPackPropertiesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/properties?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/properties`;
};

export const SpectroClustersUidPackProperties = async (
  uid: string,
  params: SpectroClustersUidPackPropertiesParams,
  options?: RequestInit,
): Promise<SpectroClustersUidPackPropertiesResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidPackPropertiesUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidPackPropertiesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidPackPropertiesResponse;
};

/**
 * @summary Updates the cluster's pack references
 */
export type SpectroClustersPacksRefUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersPacksRefUpdateResponseComposite =
  SpectroClustersPacksRefUpdateResponse204;

export type SpectroClustersPacksRefUpdateResponse =
  SpectroClustersPacksRefUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersPacksRefUpdateUrl = (
  uid: string,
  params?: SpectroClustersPacksRefUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packRefs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packRefs`;
};

export const SpectroClustersPacksRefUpdate = async (
  uid: string,
  ClusterNotificationUpdateEntity: ClusterNotificationUpdateEntity,
  params?: SpectroClustersPacksRefUpdateParams,
  options?: RequestInit,
): Promise<SpectroClustersPacksRefUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersPacksRefUpdateUrl(uid, params), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterNotificationUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersPacksRefUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersPacksRefUpdateResponse;
};

/**
 * @summary Returns the specified cluster's packs resolved values
 */
export type SpectroClustersUidPacksResolvedValuesGetResponse200 = {
  data: SpectroClusterProfilesResolvedValues;
  status: 200;
};

export type SpectroClustersUidPacksResolvedValuesGetResponseComposite =
  SpectroClustersUidPacksResolvedValuesGetResponse200;

export type SpectroClustersUidPacksResolvedValuesGetResponse =
  SpectroClustersUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPacksResolvedValuesGetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packs/resolvedValues`;
};

export const SpectroClustersUidPacksResolvedValuesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidPacksResolvedValuesGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidPacksResolvedValuesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidPacksResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidPacksResolvedValuesGetResponse;
};

/**
 * @summary Patch update specified cluster's packs status
 */
export type SpectroClustersUidPacksStatusPatchResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidPacksStatusPatchResponseComposite =
  SpectroClustersUidPacksStatusPatchResponse204;

export type SpectroClustersUidPacksStatusPatchResponse =
  SpectroClustersUidPacksStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPacksStatusPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packs/status`;
};

export const SpectroClustersUidPacksStatusPatch = async (
  uid: string,
  SpectroClusterPacksStatusEntityBody: SpectroClusterPacksStatusEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersUidPacksStatusPatchResponse> => {
  const res = await fetch(getV1SpectroClustersUidPacksStatusPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterPacksStatusEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidPacksStatusPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidPacksStatusPatchResponse;
};

/**
 * @summary Returns the profile updates of a specified cluster
 */
export type SpectroClustersGetProfileUpdatesResponse200 = {
  data: SpectroClusterProfileUpdates;
  status: 200;
};

export type SpectroClustersGetProfileUpdatesResponseComposite =
  SpectroClustersGetProfileUpdatesResponse200;

export type SpectroClustersGetProfileUpdatesResponse =
  SpectroClustersGetProfileUpdatesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetProfileUpdatesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profileUpdates`;
};

export const SpectroClustersGetProfileUpdates = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersGetProfileUpdatesResponse> => {
  const res = await fetch(getV1SpectroClustersGetProfileUpdatesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGetProfileUpdatesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGetProfileUpdatesResponse;
};

/**
 * @summary Remove cluster profiles from the specified cluster
 */
export type SpectroClustersDeleteProfilesResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersDeleteProfilesResponseComposite =
  SpectroClustersDeleteProfilesResponse204;

export type SpectroClustersDeleteProfilesResponse =
  SpectroClustersDeleteProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersDeleteProfilesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const SpectroClustersDeleteProfiles = async (
  uid: string,
  SpectroClusterProfilesDeleteEntity: SpectroClusterProfilesDeleteEntity,
  options?: RequestInit,
): Promise<SpectroClustersDeleteProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersDeleteProfilesUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterProfilesDeleteEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersDeleteProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersDeleteProfilesResponse;
};

/**
 * @summary Returns the associated profiles of a specified cluster
 */
export type SpectroClustersGetProfilesResponse200 = {
  data: SpectroClusterProfileList;
  status: 200;
};

export type SpectroClustersGetProfilesResponseComposite =
  SpectroClustersGetProfilesResponse200;

export type SpectroClustersGetProfilesResponse =
  SpectroClustersGetProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetProfilesUrl = (
  uid: string,
  params?: SpectroClustersGetProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const SpectroClustersGetProfiles = async (
  uid: string,
  params?: SpectroClustersGetProfilesParams,
  options?: RequestInit,
): Promise<SpectroClustersGetProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersGetProfilesUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGetProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGetProfilesResponse;
};

/**
 * @summary Patch cluster profiles to the specified cluster
 */
export type SpectroClustersPatchProfilesResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersPatchProfilesResponseComposite =
  SpectroClustersPatchProfilesResponse204;

export type SpectroClustersPatchProfilesResponse =
  SpectroClustersPatchProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersPatchProfilesUrl = (
  uid: string,
  params?: SpectroClustersPatchProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const SpectroClustersPatchProfiles = async (
  uid: string,
  SpectroClusterProfilesBody: SpectroClusterProfilesBody,
  params?: SpectroClustersPatchProfilesParams,
  options?: RequestInit,
): Promise<SpectroClustersPatchProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersPatchProfilesUrl(uid, params), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterProfilesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersPatchProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersPatchProfilesResponse;
};

/**
 * @summary Associate cluster profiles to the specified cluster
 */
export type SpectroClustersUpdateProfilesResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUpdateProfilesResponseComposite =
  SpectroClustersUpdateProfilesResponse204;

export type SpectroClustersUpdateProfilesResponse =
  SpectroClustersUpdateProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateProfilesUrl = (
  uid: string,
  params?: SpectroClustersUpdateProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const SpectroClustersUpdateProfiles = async (
  uid: string,
  SpectroClusterProfilesBody: SpectroClusterProfilesBody,
  params?: SpectroClustersUpdateProfilesParams,
  options?: RequestInit,
): Promise<SpectroClustersUpdateProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateProfilesUrl(uid, params), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterProfilesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpdateProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpdateProfilesResponse;
};

/**
 * @summary Returns the associated profile's pack manifests of a specified cluster
 */
export type SpectroClustersGetProfilesPacksManifestsResponse200 = {
  data: SpectroClusterProfilesPacksManifests;
  status: 200;
};

export type SpectroClustersGetProfilesPacksManifestsResponseComposite =
  SpectroClustersGetProfilesPacksManifestsResponse200;

export type SpectroClustersGetProfilesPacksManifestsResponse =
  SpectroClustersGetProfilesPacksManifestsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetProfilesPacksManifestsUrl = (
  uid: string,
  params?: SpectroClustersGetProfilesPacksManifestsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/packs/manifests?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/packs/manifests`;
};

export const SpectroClustersGetProfilesPacksManifests = async (
  uid: string,
  params?: SpectroClustersGetProfilesPacksManifestsParams,
  options?: RequestInit,
): Promise<SpectroClustersGetProfilesPacksManifestsResponse> => {
  const res = await fetch(
    getV1SpectroClustersGetProfilesPacksManifestsUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersGetProfilesPacksManifestsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersGetProfilesPacksManifestsResponse;
};

/**
 * @summary Returns the specified cluster's profile pack configuration
 */
export type SpectroClustersUidProfilesUidPacksConfigGetResponse200 = {
  data: SpectroClusterPackConfigList;
  status: 200;
};

export type SpectroClustersUidProfilesUidPacksConfigGetResponseComposite =
  SpectroClustersUidProfilesUidPacksConfigGetResponse200;

export type SpectroClustersUidProfilesUidPacksConfigGetResponse =
  SpectroClustersUidProfilesUidPacksConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidProfilesUidPacksConfigGetUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/config`;
};

export const SpectroClustersUidProfilesUidPacksConfigGet = async (
  uid: string,
  profileUid: string,
  packName: string,
  options?: RequestInit,
): Promise<SpectroClustersUidProfilesUidPacksConfigGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidProfilesUidPacksConfigGetUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidProfilesUidPacksConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidProfilesUidPacksConfigGetResponse;
};

/**
 * @summary Returns the associated profiles pack manifests of the specified cluster
 */
export type SpectroClustersProfilesUidPackManifestsGetResponse200 = {
  data: PackManifests;
  status: 200;
};

export type SpectroClustersProfilesUidPackManifestsGetResponseComposite =
  SpectroClustersProfilesUidPackManifestsGetResponse200;

export type SpectroClustersProfilesUidPackManifestsGetResponse =
  SpectroClustersProfilesUidPackManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersProfilesUidPackManifestsGetUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/manifests`;
};

export const SpectroClustersProfilesUidPackManifestsGet = async (
  uid: string,
  profileUid: string,
  packName: string,
  options?: RequestInit,
): Promise<SpectroClustersProfilesUidPackManifestsGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersProfilesUidPackManifestsGetUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersProfilesUidPackManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersProfilesUidPackManifestsGetResponse;
};

/**
 * @summary Updates cluster profiles pack manifests to the specified cluster
 */
export type SpectroClustersProfilesUidPackManifestsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersProfilesUidPackManifestsUpdateResponseComposite =
  SpectroClustersProfilesUidPackManifestsUpdateResponse204;

export type SpectroClustersProfilesUidPackManifestsUpdateResponse =
  SpectroClustersProfilesUidPackManifestsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersProfilesUidPackManifestsUpdateUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/manifests`;
};

export const SpectroClustersProfilesUidPackManifestsUpdate = async (
  uid: string,
  profileUid: string,
  packName: string,
  ManifestRefInputEntities: ManifestRefInputEntities,
  options?: RequestInit,
): Promise<SpectroClustersProfilesUidPackManifestsUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersProfilesUidPackManifestsUpdateUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ManifestRefInputEntities),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersProfilesUidPackManifestsUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersProfilesUidPackManifestsUpdateResponse;
};

/**
 * @summary Returns the estimated rate of the specified cluster
 */
export type SpectroClustersUidRateResponse200 = {
  data: SpectroClusterRate;
  status: 200;
};

export type SpectroClustersUidRateResponseComposite =
  SpectroClustersUidRateResponse200;

export type SpectroClustersUidRateResponse =
  SpectroClustersUidRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidRateUrl = (
  uid: string,
  params?: SpectroClustersUidRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/rate`;
};

export const SpectroClustersUidRate = async (
  uid: string,
  params?: SpectroClustersUidRateParams,
  options?: RequestInit,
): Promise<SpectroClustersUidRateResponse> => {
  const res = await fetch(getV1SpectroClustersUidRateUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidRateResponse;
};

/**
 * @summary Returns the spectrocluster repave approve update
 */
export type SpectroClustersUidRepaveApproveUpdateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidRepaveApproveUpdateResponseComposite =
  SpectroClustersUidRepaveApproveUpdateResponse204;

export type SpectroClustersUidRepaveApproveUpdateResponse =
  SpectroClustersUidRepaveApproveUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidRepaveApproveUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/repave/approve`;
};

export const SpectroClustersUidRepaveApproveUpdate = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidRepaveApproveUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidRepaveApproveUpdateUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidRepaveApproveUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidRepaveApproveUpdateResponse;
};

/**
 * @summary Returns the spectrocluster repave
 */
export type SpectroClustersUidRepaveGetResponse200 = {
  data: SpectroClusterRepave;
  status: 200;
};

export type SpectroClustersUidRepaveGetResponseComposite =
  SpectroClustersUidRepaveGetResponse200;

export type SpectroClustersUidRepaveGetResponse =
  SpectroClustersUidRepaveGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidRepaveGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/repave/status`;
};

export const SpectroClustersUidRepaveGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidRepaveGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidRepaveGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidRepaveGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidRepaveGetResponse;
};

/**
 * @summary reset the cluster s by deleting machine pools and condtions
 */
export type SpectroClustersUidResetResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidResetResponseComposite =
  SpectroClustersUidResetResponse204;

export type SpectroClustersUidResetResponse =
  SpectroClustersUidResetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/reset`;
};

export const SpectroClustersUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidResetResponse> => {
  const res = await fetch(getV1SpectroClustersUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidResetResponse;
};

/**
 * @summary Get the cluster's status
 */
export type SpectroClustersUidStatusResponse200 = {
  data: SpectroClusterStatusEntity;
  status: 200;
};

export type SpectroClustersUidStatusResponseComposite =
  SpectroClustersUidStatusResponse200;

export type SpectroClustersUidStatusResponse =
  SpectroClustersUidStatusResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status`;
};

export const SpectroClustersUidStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidStatusResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidStatusResponse;
};

/**
 * @summary Updates the specified cluster status condition
 */
export type SpectroClustersUpdateStatusConditionResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUpdateStatusConditionResponseComposite =
  SpectroClustersUpdateStatusConditionResponse204;

export type SpectroClustersUpdateStatusConditionResponse =
  SpectroClustersUpdateStatusConditionResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusConditionUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/condition`;
};

export const SpectroClustersUpdateStatusCondition = async (
  uid: string,
  ClusterCondition: ClusterCondition,
  options?: RequestInit,
): Promise<SpectroClustersUpdateStatusConditionResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusConditionUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterCondition),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpdateStatusConditionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpdateStatusConditionResponse;
};

/**
 * @summary Updates the specified cluster status conditions
 */
export type SpectroClustersUpdateStatusConditionsResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUpdateStatusConditionsResponseComposite =
  SpectroClustersUpdateStatusConditionsResponse204;

export type SpectroClustersUpdateStatusConditionsResponse =
  SpectroClustersUpdateStatusConditionsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusConditionsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/conditions`;
};

export const SpectroClustersUpdateStatusConditions = async (
  uid: string,
  ClusterCondition: ClusterCondition[],
  options?: RequestInit,
): Promise<SpectroClustersUpdateStatusConditionsResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusConditionsUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterCondition),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpdateStatusConditionsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpdateStatusConditionsResponse;
};

/**
 * @summary Updates the specified cluster's service endpoints information
 */
export type SpectroClustersUpdateStatusEndpointsResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUpdateStatusEndpointsResponseComposite =
  SpectroClustersUpdateStatusEndpointsResponse204;

export type SpectroClustersUpdateStatusEndpointsResponse =
  SpectroClustersUpdateStatusEndpointsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusEndpointsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/endpoints`;
};

export const SpectroClustersUpdateStatusEndpoints = async (
  uid: string,
  ApiEndpoint: ApiEndpoint[],
  options?: RequestInit,
): Promise<SpectroClustersUpdateStatusEndpointsResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusEndpointsUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ApiEndpoint),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpdateStatusEndpointsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpdateStatusEndpointsResponse;
};

/**
 * @summary Updates the specified cluster status as imported
 */
export type SpectroClustersUpdateStatusImportedResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUpdateStatusImportedResponseComposite =
  SpectroClustersUpdateStatusImportedResponse204;

export type SpectroClustersUpdateStatusImportedResponse =
  SpectroClustersUpdateStatusImportedResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusImportedUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/imported`;
};

export const SpectroClustersUpdateStatusImported = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUpdateStatusImportedResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusImportedUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpdateStatusImportedResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpdateStatusImportedResponse;
};

/**
 * @summary Updates the specified cluster's services information
 */
export type SpectroClustersUpdateStatusServicesResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUpdateStatusServicesResponseComposite =
  SpectroClustersUpdateStatusServicesResponse204;

export type SpectroClustersUpdateStatusServicesResponse =
  SpectroClustersUpdateStatusServicesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusServicesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/services`;
};

export const SpectroClustersUpdateStatusServices = async (
  uid: string,
  LoadBalancerService: LoadBalancerService[],
  options?: RequestInit,
): Promise<SpectroClustersUpdateStatusServicesResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusServicesUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(LoadBalancerService),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUpdateStatusServicesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUpdateStatusServicesResponse;
};

/**
 * @summary Returns the SPC apply information for the agent
 */
export type SpectroClustersUidStatusSpcApplyGetResponse200 = {
  data: SpcApply;
  status: 200;
};

export type SpectroClustersUidStatusSpcApplyGetResponseComposite =
  SpectroClustersUidStatusSpcApplyGetResponse200;

export type SpectroClustersUidStatusSpcApplyGetResponse =
  SpectroClustersUidStatusSpcApplyGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusSpcApplyGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply`;
};

export const SpectroClustersUidStatusSpcApplyGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidStatusSpcApplyGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusSpcApplyGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidStatusSpcApplyGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidStatusSpcApplyGetResponse;
};

/**
 * @summary Set the CanBeApplied to true on the spcApply status. CanBeApplied indicates the agent to orchestrate the spc changes
 */
export type SpectroClustersUidStatusSpcApplyResponse202 = {
  data: void;
  status: 202;
};

export type SpectroClustersUidStatusSpcApplyResponseComposite =
  SpectroClustersUidStatusSpcApplyResponse202;

export type SpectroClustersUidStatusSpcApplyResponse =
  SpectroClustersUidStatusSpcApplyResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusSpcApplyUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply`;
};

export const SpectroClustersUidStatusSpcApply = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidStatusSpcApplyResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusSpcApplyUrl(uid), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidStatusSpcApplyResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidStatusSpcApplyResponse;
};

/**
 * @summary Updates the agent patch time for the SPC changes
 */
export type SpectroClustersUidStatusSpcPatchTimeResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidStatusSpcPatchTimeResponseComposite =
  SpectroClustersUidStatusSpcPatchTimeResponse204;

export type SpectroClustersUidStatusSpcPatchTimeResponse =
  SpectroClustersUidStatusSpcPatchTimeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusSpcPatchTimeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply/patchTime`;
};

export const SpectroClustersUidStatusSpcPatchTime = async (
  uid: string,
  SpcPatchTimeEntity: SpcPatchTimeEntity,
  options?: RequestInit,
): Promise<SpectroClustersUidStatusSpcPatchTimeResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusSpcPatchTimeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpcPatchTimeEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidStatusSpcPatchTimeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidStatusSpcPatchTimeResponse;
};

/**
 * @summary Updates the cluster's upgrade status
 */
export type SpectroClustersUidUpgradesPutResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidUpgradesPutResponseComposite =
  SpectroClustersUidUpgradesPutResponse204;

export type SpectroClustersUidUpgradesPutResponse =
  SpectroClustersUidUpgradesPutResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidUpgradesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/upgrades`;
};

export const SpectroClustersUidUpgradesPut = async (
  uid: string,
  SpectroClusterUidUpgrades: SpectroClusterUidUpgrades,
  options?: RequestInit,
): Promise<SpectroClustersUidUpgradesPutResponse> => {
  const res = await fetch(getV1SpectroClustersUidUpgradesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterUidUpgrades),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidUpgradesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidUpgradesPutResponse;
};

/**
 * @summary Update specific cluster upgrade settings
 */
export type SpectroClustersUidUpgradeSettingsResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidUpgradeSettingsResponseComposite =
  SpectroClustersUidUpgradeSettingsResponse204;

export type SpectroClustersUidUpgradeSettingsResponse =
  SpectroClustersUidUpgradeSettingsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidUpgradeSettingsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/upgrade/settings`;
};

export const SpectroClustersUidUpgradeSettings = async (
  uid: string,
  ClusterUpgradeSettingsEntityBody: ClusterUpgradeSettingsEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersUidUpgradeSettingsResponse> => {
  const res = await fetch(getV1SpectroClustersUidUpgradeSettingsUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterUpgradeSettingsEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidUpgradeSettingsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidUpgradeSettingsResponse;
};

/**
 * @summary Validates cluster packs
 */
export type SpectroClustersUidValidatePacksResponse200 = {
  data: SpectroClusterValidatorResponse;
  status: 200;
};

export type SpectroClustersUidValidatePacksResponseComposite =
  SpectroClustersUidValidatePacksResponse200;

export type SpectroClustersUidValidatePacksResponse =
  SpectroClustersUidValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidValidatePacksUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/validate/packs`;
};

export const SpectroClustersUidValidatePacks = async (
  uid: string,
  SpectroClusterPacksEntityBody: SpectroClusterPacksEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersUidValidatePacksResponse> => {
  const res = await fetch(getV1SpectroClustersUidValidatePacksUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterPacksEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidValidatePacksResponse;
};

/**
 * @summary Validates if cluster gets repaved for the specified packs
 */
export type SpectroClustersUidValidateRepaveResponse200 = {
  data: SpectroClusterRepaveValidationResponse;
  status: 200;
};

export type SpectroClustersUidValidateRepaveResponseComposite =
  SpectroClustersUidValidateRepaveResponse200;

export type SpectroClustersUidValidateRepaveResponse =
  SpectroClustersUidValidateRepaveResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidValidateRepaveUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/validate/repave`;
};

export const SpectroClustersUidValidateRepave = async (
  uid: string,
  SpectroClusterPacksEntityBody: SpectroClusterPacksEntityBody,
  options?: RequestInit,
): Promise<SpectroClustersUidValidateRepaveResponse> => {
  const res = await fetch(getV1SpectroClustersUidValidateRepaveUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterPacksEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidValidateRepaveResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidValidateRepaveResponse;
};

/**
 * @summary Retrieve a list of variables associated with the cluster
 */
export type SpectroClustersUidVariablesGetResponse200 = {
  data: SpectroClusterVariables[];
  status: 200;
};

export type SpectroClustersUidVariablesGetResponseComposite =
  SpectroClustersUidVariablesGetResponse200;

export type SpectroClustersUidVariablesGetResponse =
  SpectroClustersUidVariablesGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidVariablesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/variables`;
};

export const SpectroClustersUidVariablesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidVariablesGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidVariablesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidVariablesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidVariablesGetResponse;
};

/**
 * @summary Update cluster variable values for specified cluster
 */
export type SpectroClustersUidVariablesPatchResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersUidVariablesPatchResponseComposite =
  SpectroClustersUidVariablesPatchResponse204;

export type SpectroClustersUidVariablesPatchResponse =
  SpectroClustersUidVariablesPatchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidVariablesPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/variables`;
};

export const SpectroClustersUidVariablesPatch = async (
  uid: string,
  SpectroClusterVariableUpdateEntity: SpectroClusterVariableUpdateEntity[],
  options?: RequestInit,
): Promise<SpectroClustersUidVariablesPatchResponse> => {
  const res = await fetch(getV1SpectroClustersUidVariablesPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterVariableUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidVariablesPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidVariablesPatchResponse;
};

/**
 * @summary Returns the list of virtual machines
 */
export type SpectroClustersVMListResponse200 = {
  data: ClusterVirtualMachineList;
  status: 200;
};

export type SpectroClustersVMListResponseComposite =
  SpectroClustersVMListResponse200;

export type SpectroClustersVMListResponse =
  SpectroClustersVMListResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMListUrl = (
  uid: string,
  params?: SpectroClustersVMListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms`;
};

export const SpectroClustersVMList = async (
  uid: string,
  params?: SpectroClustersVMListParams,
  options?: RequestInit,
): Promise<SpectroClustersVMListResponse> => {
  const res = await fetch(getV1SpectroClustersVMListUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMListResponse;
};

/**
 * @summary Create virtual machine
 */
export type SpectroClustersVMCreateResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type SpectroClustersVMCreateResponseComposite =
  SpectroClustersVMCreateResponse200;

export type SpectroClustersVMCreateResponse =
  SpectroClustersVMCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMCreateUrl = (
  uid: string,
  params: SpectroClustersVMCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms`;
};

export const SpectroClustersVMCreate = async (
  uid: string,
  ClusterVirtualMachineBody: ClusterVirtualMachineBody,
  params: SpectroClustersVMCreateParams,
  options?: RequestInit,
): Promise<SpectroClustersVMCreateResponse> => {
  const res = await fetch(getV1SpectroClustersVMCreateUrl(uid, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterVirtualMachineBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMCreateResponse;
};

/**
 * @summary Returns the list of snapshots of given namespaces
 */
export type ClusterVMSnapshotsListResponse200 = {
  data: VirtualMachineSnapshotList;
  status: 200;
};

export type ClusterVMSnapshotsListResponseComposite =
  ClusterVMSnapshotsListResponse200;

export type ClusterVMSnapshotsListResponse =
  ClusterVMSnapshotsListResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterVMSnapshotsListUrl = (
  uid: string,
  params?: ClusterVMSnapshotsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/snapshot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/snapshot`;
};

export const ClusterVMSnapshotsList = async (
  uid: string,
  params?: ClusterVMSnapshotsListParams,
  options?: RequestInit,
): Promise<ClusterVMSnapshotsListResponse> => {
  const res = await fetch(getV1ClusterVMSnapshotsListUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterVMSnapshotsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterVMSnapshotsListResponse;
};

/**
 * @summary Deletes the virtual machine
 */
export type SpectroClustersVMDeleteResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMDeleteResponseComposite =
  SpectroClustersVMDeleteResponse204;

export type SpectroClustersVMDeleteResponse =
  SpectroClustersVMDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMDeleteUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const SpectroClustersVMDelete = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMDeleteParams,
  options?: RequestInit,
): Promise<SpectroClustersVMDeleteResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMDeleteUrl(uid, vmName, params),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMDeleteResponse;
};

/**
 * @summary Get virtual machine
 */
export type SpectroClustersVMGetResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type SpectroClustersVMGetResponseComposite =
  SpectroClustersVMGetResponse200;

export type SpectroClustersVMGetResponse =
  SpectroClustersVMGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMGetUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const SpectroClustersVMGet = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMGetParams,
  options?: RequestInit,
): Promise<SpectroClustersVMGetResponse> => {
  const res = await fetch(getV1SpectroClustersVMGetUrl(uid, vmName, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMGetResponse;
};

/**
 * @summary Updates the specified virtual machine of the cluster
 */
export type SpectroClustersVMUpdateResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type SpectroClustersVMUpdateResponseComposite =
  SpectroClustersVMUpdateResponse200;

export type SpectroClustersVMUpdateResponse =
  SpectroClustersVMUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMUpdateUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const SpectroClustersVMUpdate = async (
  uid: string,
  vmName: string,
  ClusterVirtualMachineBody: ClusterVirtualMachineBody,
  params: SpectroClustersVMUpdateParams,
  options?: RequestInit,
): Promise<SpectroClustersVMUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMUpdateUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterVirtualMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMUpdateResponse;
};

/**
 * @summary Add volume to the virtual machine instance
 */
export type SpectroClustersVMAddVolumeResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMAddVolumeResponseComposite =
  SpectroClustersVMAddVolumeResponse204;

export type SpectroClustersVMAddVolumeResponse =
  SpectroClustersVMAddVolumeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMAddVolumeUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMAddVolumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/addVolume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/addVolume`;
};

export const SpectroClustersVMAddVolume = async (
  uid: string,
  vmName: string,
  VMAddVolumeEntity: VMAddVolumeEntity,
  params: SpectroClustersVMAddVolumeParams,
  options?: RequestInit,
): Promise<SpectroClustersVMAddVolumeResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMAddVolumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VMAddVolumeEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMAddVolumeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMAddVolumeResponse;
};

/**
 * @summary Clone virtual machine
 */
export type SpectroClustersVMCloneResponse200 = {
  data: ClusterVirtualMachine;
  status: 200;
};

export type SpectroClustersVMCloneResponseComposite =
  SpectroClustersVMCloneResponse200;

export type SpectroClustersVMCloneResponse =
  SpectroClustersVMCloneResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMCloneUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMCloneParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/clone?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/clone`;
};

export const SpectroClustersVMClone = async (
  uid: string,
  vmName: string,
  SpectroClusterVMCloneEntity: SpectroClusterVMCloneEntity,
  params: SpectroClustersVMCloneParams,
  options?: RequestInit,
): Promise<SpectroClustersVMCloneResponse> => {
  const res = await fetch(getV1SpectroClustersVMCloneUrl(uid, vmName, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterVMCloneEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMCloneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMCloneResponse;
};

/**
 * @summary Migrate the virtual machine
 */
export type SpectroClustersVMMigrateResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMMigrateResponseComposite =
  SpectroClustersVMMigrateResponse204;

export type SpectroClustersVMMigrateResponse =
  SpectroClustersVMMigrateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMMigrateUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMMigrateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/migrate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/migrate`;
};

export const SpectroClustersVMMigrate = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMMigrateParams,
  options?: RequestInit,
): Promise<SpectroClustersVMMigrateResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMMigrateUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMMigrateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMMigrateResponse;
};

/**
 * @summary Pause the virtual machine instance
 */
export type SpectroClustersVMPauseResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMPauseResponseComposite =
  SpectroClustersVMPauseResponse204;

export type SpectroClustersVMPauseResponse =
  SpectroClustersVMPauseResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMPauseUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMPauseParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/pause?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/pause`;
};

export const SpectroClustersVMPause = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMPauseParams,
  options?: RequestInit,
): Promise<SpectroClustersVMPauseResponse> => {
  const res = await fetch(getV1SpectroClustersVMPauseUrl(uid, vmName, params), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMPauseResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMPauseResponse;
};

/**
 * @summary Remove volume from the virtual machine instance
 */
export type SpectroClustersVMRemoveVolumeResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMRemoveVolumeResponseComposite =
  SpectroClustersVMRemoveVolumeResponse204;

export type SpectroClustersVMRemoveVolumeResponse =
  SpectroClustersVMRemoveVolumeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMRemoveVolumeUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMRemoveVolumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/removeVolume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/removeVolume`;
};

export const SpectroClustersVMRemoveVolume = async (
  uid: string,
  vmName: string,
  VMRemoveVolumeEntity: VMRemoveVolumeEntity,
  params: SpectroClustersVMRemoveVolumeParams,
  options?: RequestInit,
): Promise<SpectroClustersVMRemoveVolumeResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMRemoveVolumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VMRemoveVolumeEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMRemoveVolumeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMRemoveVolumeResponse;
};

/**
 * @summary Restart the virtual machine
 */
export type SpectroClustersVMRestartResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMRestartResponseComposite =
  SpectroClustersVMRestartResponse204;

export type SpectroClustersVMRestartResponse =
  SpectroClustersVMRestartResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMRestartUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMRestartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/restart?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/restart`;
};

export const SpectroClustersVMRestart = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMRestartParams,
  options?: RequestInit,
): Promise<SpectroClustersVMRestartResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMRestartUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMRestartResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMRestartResponse;
};

/**
 * @summary Resume the virtual machine instance
 */
export type SpectroClustersVMResumeResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMResumeResponseComposite =
  SpectroClustersVMResumeResponse204;

export type SpectroClustersVMResumeResponse =
  SpectroClustersVMResumeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMResumeUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMResumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/resume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/resume`;
};

export const SpectroClustersVMResume = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMResumeParams,
  options?: RequestInit,
): Promise<SpectroClustersVMResumeResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMResumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMResumeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMResumeResponse;
};

/**
 * @summary Create snapshot of virtual machine
 */
export type VMSnapshotCreateResponse200 = {
  data: VirtualMachineSnapshot;
  status: 200;
};

export type VMSnapshotCreateResponseComposite = VMSnapshotCreateResponse200;

export type VMSnapshotCreateResponse = VMSnapshotCreateResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotCreateUrl = (
  uid: string,
  vmName: string,
  params: VMSnapshotCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot`;
};

export const VMSnapshotCreate = async (
  uid: string,
  vmName: string,
  VirtualMachineSnapshotBody: VirtualMachineSnapshotBody,
  params: VMSnapshotCreateParams,
  options?: RequestInit,
): Promise<VMSnapshotCreateResponse> => {
  const res = await fetch(getV1VMSnapshotCreateUrl(uid, vmName, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VirtualMachineSnapshotBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VMSnapshotCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VMSnapshotCreateResponse;
};

/**
 * @summary Delete the snapshot of virtual machine
 */
export type VMSnapshotDeleteResponse204 = {
  data: void;
  status: 204;
};

export type VMSnapshotDeleteResponseComposite = VMSnapshotDeleteResponse204;

export type VMSnapshotDeleteResponse = VMSnapshotDeleteResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotDeleteUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const VMSnapshotDelete = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotDeleteParams,
  options?: RequestInit,
): Promise<VMSnapshotDeleteResponse> => {
  const res = await fetch(
    getV1VMSnapshotDeleteUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VMSnapshotDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VMSnapshotDeleteResponse;
};

/**
 * @summary Get virtual machine snapshot
 */
export type VMSnapshotGetResponse200 = {
  data: VirtualMachineSnapshot;
  status: 200;
};

export type VMSnapshotGetResponseComposite = VMSnapshotGetResponse200;

export type VMSnapshotGetResponse = VMSnapshotGetResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotGetUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const VMSnapshotGet = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotGetParams,
  options?: RequestInit,
): Promise<VMSnapshotGetResponse> => {
  const res = await fetch(
    getV1VMSnapshotGetUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VMSnapshotGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VMSnapshotGetResponse;
};

/**
 * @summary Updates the specified snapshot of a virtual machine
 */
export type VMSnapshotUpdateResponse200 = {
  data: VirtualMachineSnapshot;
  status: 200;
};

export type VMSnapshotUpdateResponseComposite = VMSnapshotUpdateResponse200;

export type VMSnapshotUpdateResponse = VMSnapshotUpdateResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotUpdateUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: VMSnapshotUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const VMSnapshotUpdate = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  VirtualMachineSnapshotBody: VirtualMachineSnapshotBody,
  params: VMSnapshotUpdateParams,
  options?: RequestInit,
): Promise<VMSnapshotUpdateResponse> => {
  const res = await fetch(
    getV1VMSnapshotUpdateUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VirtualMachineSnapshotBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VMSnapshotUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VMSnapshotUpdateResponse;
};

/**
 * @summary Start the virtual machine
 */
export type SpectroClustersVMStartResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMStartResponseComposite =
  SpectroClustersVMStartResponse204;

export type SpectroClustersVMStartResponse =
  SpectroClustersVMStartResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMStartUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/start?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/start`;
};

export const SpectroClustersVMStart = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStartParams,
  options?: RequestInit,
): Promise<SpectroClustersVMStartResponse> => {
  const res = await fetch(getV1SpectroClustersVMStartUrl(uid, vmName, params), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMStartResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMStartResponse;
};

/**
 * @summary Stop the virtual machine
 */
export type SpectroClustersVMStopResponse204 = {
  data: void;
  status: 204;
};

export type SpectroClustersVMStopResponseComposite =
  SpectroClustersVMStopResponse204;

export type SpectroClustersVMStopResponse =
  SpectroClustersVMStopResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMStopUrl = (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStopParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/stop?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/stop`;
};

export const SpectroClustersVMStop = async (
  uid: string,
  vmName: string,
  params: SpectroClustersVMStopParams,
  options?: RequestInit,
): Promise<SpectroClustersVMStopResponse> => {
  const res = await fetch(getV1SpectroClustersVMStopUrl(uid, vmName, params), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersVMStopResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersVMStopResponse;
};

/**
 * Sync specified cluster workload
 * @summary Sync specified cluster workload
 */
export type SpectroClustersUidWorkloadsSyncResponse202 = {
  data: void;
  status: 202;
};

export type SpectroClustersUidWorkloadsSyncResponseComposite =
  SpectroClustersUidWorkloadsSyncResponse202;

export type SpectroClustersUidWorkloadsSyncResponse =
  SpectroClustersUidWorkloadsSyncResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidWorkloadsSyncUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/workloads/sync`;
};

export const SpectroClustersUidWorkloadsSync = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersUidWorkloadsSyncResponse> => {
  const res = await fetch(getV1SpectroClustersUidWorkloadsSyncUrl(uid), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidWorkloadsSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidWorkloadsSyncResponse;
};

/**
 * @summary Sync specified cluster workload
 */
export type SpectroClustersUidWorkloadsKindSyncResponse202 = {
  data: void;
  status: 202;
};

export type SpectroClustersUidWorkloadsKindSyncResponseComposite =
  SpectroClustersUidWorkloadsKindSyncResponse202;

export type SpectroClustersUidWorkloadsKindSyncResponse =
  SpectroClustersUidWorkloadsKindSyncResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidWorkloadsKindSyncUrl = (
  uid: string,
  workloadKind:
    | "namespace"
    | "pod"
    | "deployment"
    | "statefulset"
    | "daemonset"
    | "job"
    | "cronjob"
    | "rolebinding"
    | "clusterrolebinding",
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/workloads/${workloadKind}/sync`;
};

export const SpectroClustersUidWorkloadsKindSync = async (
  uid: string,
  workloadKind:
    | "namespace"
    | "pod"
    | "deployment"
    | "statefulset"
    | "daemonset"
    | "job"
    | "cronjob"
    | "rolebinding"
    | "clusterrolebinding",
  options?: RequestInit,
): Promise<SpectroClustersUidWorkloadsKindSyncResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidWorkloadsKindSyncUrl(uid, workloadKind),
    {
      ...options,
      method: "POST",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidWorkloadsKindSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidWorkloadsKindSyncResponse;
};
