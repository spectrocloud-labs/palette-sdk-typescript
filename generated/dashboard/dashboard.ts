/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AppDeploymentsFilterSpec,
  AppDeploymentsSummary,
  AppProfilesFilterSpec,
  AppProfilesMetadata,
  AppProfilesSummary,
  CloudAccountsMetadata,
  ClusterGroupUidHostClustersSummaryParams,
  ClusterGroupUidVirtualClustersSummaryParams,
  ClusterProfileSummary,
  ClusterProfilesFilterSpec,
  ClusterProfilesFilterSummaryParams,
  ClusterProfilesMetadata,
  ClusterProfilesSummary,
  ClusterSearchInputSpec,
  ClusterWorkload,
  ClusterWorkloadCronJobs,
  ClusterWorkloadDaemonSets,
  ClusterWorkloadDeployments,
  ClusterWorkloadJobs,
  ClusterWorkloadNamespaces,
  ClusterWorkloadPods,
  ClusterWorkloadRoleBindings,
  ClusterWorkloadStatefulSets,
  DashboardAppDeploymentsParams,
  DashboardAppProfilesParams,
  DashboardCloudAccountsMetadataParams,
  DashboardClustersSearchSummaryExportGetParams,
  DashboardClustersSearchSummaryExportParams,
  DashboardEdgehostsSearchParams,
  DashboardPcgsSearchSummaryParams,
  DashboardSpectroClustersRepaveListParams,
  DashboardWorkspaces,
  EdgeHostsMetadataFilter,
  EdgeHostsMetadataSummary,
  EdgeHostsSearchSummary,
  PcgsSummary,
  ProjectsFilterSpec,
  ProjectsFilterSummaryParams,
  ProjectsMetadata,
  ProjectsMetadataParams,
  ProjectsSummary,
  ResourceCostSummarySpec,
  ResourceUsageSummarySpec,
  ResourcesCloudCostSummary,
  ResourcesConsumption,
  ResourcesCostSummary,
  ResourcesUsageSummary,
  SearchFilterSchemaSpec,
  SpectroClusterCloudCostSummarySpec,
  SpectroClusterCostSummary,
  SpectroClusterMetadataSpec,
  SpectroClusterUidSummary,
  SpectroClustersFiltersWorkspaceParams,
  SpectroClustersMeta,
  SpectroClustersMetadata,
  SpectroClustersMetadataGetParams,
  SpectroClustersMetadataSearch,
  SpectroClustersSearchFilterSummaryParams,
  SpectroClustersSummary,
  SpectroClustersUidCostSummaryParams,
  V1ClusterWorkloadsSpecBody,
  V1ResourceConsumptionSpecBody,
  V1SearchFilterSummarySpecBody,
  V1WorkspaceWorkloadsSpecBody,
  VMClusters,
  WorkspaceClustersWorkloadCronJobs,
  WorkspaceClustersWorkloadDaemonSets,
  WorkspaceClustersWorkloadDeployments,
  WorkspaceClustersWorkloadJobs,
  WorkspaceClustersWorkloadNamespaces,
  WorkspaceClustersWorkloadPods,
  WorkspaceClustersWorkloadRoleBindings,
  WorkspaceClustersWorkloadStatefulSets,
} from ".././schemas";

/**
 * @summary Retrieves a list of application deployments filter summary Supported filter fields - ["appDeploymentName", "clusterUid", "tags"] Supported sort fields - ["appDeploymentName", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type dashboardAppDeploymentsResponse200 = {
  data: AppDeploymentsSummary;
  status: 200;
};

export type dashboardAppDeploymentsResponseComposite =
  dashboardAppDeploymentsResponse200;

export type dashboardAppDeploymentsResponse =
  dashboardAppDeploymentsResponseComposite & {
    headers: Headers;
  };

export const getDashboardAppDeploymentsUrl = (
  params?: DashboardAppDeploymentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/appDeployments?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/appDeployments`;
};

export const dashboardAppDeployments = async (
  appDeploymentsFilterSpec: AppDeploymentsFilterSpec,
  params?: DashboardAppDeploymentsParams,
  options?: RequestInit,
): Promise<dashboardAppDeploymentsResponse> => {
  const res = await fetch(getDashboardAppDeploymentsUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appDeploymentsFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardAppDeploymentsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardAppDeploymentsResponse;
};

/**
 * @summary Retrieves a list of application profiles filter summary Supported filter fields - ["profileName", "tags"] Supported sort fields - ["profileName", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type dashboardAppProfilesResponse200 = {
  data: AppProfilesSummary;
  status: 200;
};

export type dashboardAppProfilesResponseComposite =
  dashboardAppProfilesResponse200;

export type dashboardAppProfilesResponse =
  dashboardAppProfilesResponseComposite & {
    headers: Headers;
  };

export const getDashboardAppProfilesUrl = (
  params?: DashboardAppProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/appProfiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/appProfiles`;
};

export const dashboardAppProfiles = async (
  appProfilesFilterSpec: AppProfilesFilterSpec,
  params?: DashboardAppProfilesParams,
  options?: RequestInit,
): Promise<dashboardAppProfilesResponse> => {
  const res = await fetch(getDashboardAppProfilesUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appProfilesFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardAppProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardAppProfilesResponse;
};

/**
 * @summary Retrieves a list of application profile metadata
 */
export type dashboardAppProfilesMetadataResponse200 = {
  data: AppProfilesMetadata;
  status: 200;
};

export type dashboardAppProfilesMetadataResponseComposite =
  dashboardAppProfilesMetadataResponse200;

export type dashboardAppProfilesMetadataResponse =
  dashboardAppProfilesMetadataResponseComposite & {
    headers: Headers;
  };

export const getDashboardAppProfilesMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/appProfiles/metadata`;
};

export const dashboardAppProfilesMetadata = async (
  options?: RequestInit,
): Promise<dashboardAppProfilesMetadataResponse> => {
  const res = await fetch(getDashboardAppProfilesMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardAppProfilesMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardAppProfilesMetadataResponse;
};

/**
 * @summary Retrieves a list of edgehosts summary
 */
export type edgeHostsMetadataResponse200 = {
  data: EdgeHostsMetadataSummary;
  status: 200;
};

export type edgeHostsMetadataResponseComposite = edgeHostsMetadataResponse200;

export type edgeHostsMetadataResponse = edgeHostsMetadataResponseComposite & {
  headers: Headers;
};

export const getEdgeHostsMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/appliances/metadata`;
};

export const edgeHostsMetadata = async (
  edgeHostsMetadataFilter: EdgeHostsMetadataFilter,
  options?: RequestInit,
): Promise<edgeHostsMetadataResponse> => {
  const res = await fetch(getEdgeHostsMetadataUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(edgeHostsMetadataFilter),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: edgeHostsMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as edgeHostsMetadataResponse;
};

/**
 * @summary Retrieves a list of cloud accounts metadata
 */
export type dashboardCloudAccountsMetadataResponse200 = {
  data: CloudAccountsMetadata;
  status: 200;
};

export type dashboardCloudAccountsMetadataResponseComposite =
  dashboardCloudAccountsMetadataResponse200;

export type dashboardCloudAccountsMetadataResponse =
  dashboardCloudAccountsMetadataResponseComposite & {
    headers: Headers;
  };

export const getDashboardCloudAccountsMetadataUrl = (
  params?: DashboardCloudAccountsMetadataParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/cloudaccounts/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/cloudaccounts/metadata`;
};

export const dashboardCloudAccountsMetadata = async (
  params?: DashboardCloudAccountsMetadataParams,
  options?: RequestInit,
): Promise<dashboardCloudAccountsMetadataResponse> => {
  const res = await fetch(getDashboardCloudAccountsMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardCloudAccountsMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardCloudAccountsMetadataResponse;
};

/**
 * @summary Retrieves a list of cluster summary for a given cluster group
 */
export type clusterGroupUidHostClustersSummaryResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type clusterGroupUidHostClustersSummaryResponseComposite =
  clusterGroupUidHostClustersSummaryResponse200;

export type clusterGroupUidHostClustersSummaryResponse =
  clusterGroupUidHostClustersSummaryResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupUidHostClustersSummaryUrl = (
  uid: string,
  params?: ClusterGroupUidHostClustersSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/hostClusters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/hostClusters`;
};

export const clusterGroupUidHostClustersSummary = async (
  uid: string,
  v1SearchFilterSummarySpecBody: V1SearchFilterSummarySpecBody,
  params?: ClusterGroupUidHostClustersSummaryParams,
  options?: RequestInit,
): Promise<clusterGroupUidHostClustersSummaryResponse> => {
  const res = await fetch(
    getClusterGroupUidHostClustersSummaryUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SearchFilterSummarySpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupUidHostClustersSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupUidHostClustersSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster summary for a given cluster group
 */
export type clusterGroupUidVirtualClustersSummaryResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type clusterGroupUidVirtualClustersSummaryResponseComposite =
  clusterGroupUidVirtualClustersSummaryResponse200;

export type clusterGroupUidVirtualClustersSummaryResponse =
  clusterGroupUidVirtualClustersSummaryResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupUidVirtualClustersSummaryUrl = (
  uid: string,
  params?: ClusterGroupUidVirtualClustersSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/virtualClusters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/virtualClusters`;
};

export const clusterGroupUidVirtualClustersSummary = async (
  uid: string,
  v1SearchFilterSummarySpecBody: V1SearchFilterSummarySpecBody,
  params?: ClusterGroupUidVirtualClustersSummaryParams,
  options?: RequestInit,
): Promise<clusterGroupUidVirtualClustersSummaryResponse> => {
  const res = await fetch(
    getClusterGroupUidVirtualClustersSummaryUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SearchFilterSummarySpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupUidVirtualClustersSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupUidVirtualClustersSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster profiles filter summary Supported filter fields - ["profileName", "tags", "profileType", "environment"] Supported sort fields - ["profileName", "environment", "profileType", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type clusterProfilesFilterSummaryResponse200 = {
  data: ClusterProfilesSummary;
  status: 200;
};

export type clusterProfilesFilterSummaryResponseComposite =
  clusterProfilesFilterSummaryResponse200;

export type clusterProfilesFilterSummaryResponse =
  clusterProfilesFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesFilterSummaryUrl = (
  params?: ClusterProfilesFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clusterprofiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clusterprofiles`;
};

export const clusterProfilesFilterSummary = async (
  clusterProfilesFilterSpec: ClusterProfilesFilterSpec,
  params?: ClusterProfilesFilterSummaryParams,
  options?: RequestInit,
): Promise<clusterProfilesFilterSummaryResponse> => {
  const res = await fetch(getClusterProfilesFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(clusterProfilesFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterProfilesFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterProfilesFilterSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster profiles metadata
 */
export type clusterProfilesMetadataResponse200 = {
  data: ClusterProfilesMetadata;
  status: 200;
};

export type clusterProfilesMetadataResponseComposite =
  clusterProfilesMetadataResponse200;

export type clusterProfilesMetadataResponse =
  clusterProfilesMetadataResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/clusterprofiles/metadata`;
};

export const clusterProfilesMetadata = async (
  options?: RequestInit,
): Promise<clusterProfilesMetadataResponse> => {
  const res = await fetch(getClusterProfilesMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterProfilesMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterProfilesMetadataResponse;
};

/**
 * @summary Retrieves a specified cluster profile summary
 */
export type clusterProfilesUidSummaryResponse200 = {
  data: ClusterProfileSummary;
  status: 200;
};

export type clusterProfilesUidSummaryResponseComposite =
  clusterProfilesUidSummaryResponse200;

export type clusterProfilesUidSummaryResponse =
  clusterProfilesUidSummaryResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidSummaryUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/clusterprofiles/${uid}`;
};

export const clusterProfilesUidSummary = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterProfilesUidSummaryResponse> => {
  const res = await fetch(getClusterProfilesUidSummaryUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterProfilesUidSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterProfilesUidSummaryResponse;
};

/**
 * @summary Retrieves a list of Edgehosts summary with provided search filter. Supported fields as per schema /v1/dashboard/edgehosts/search/schema
 */
export type dashboardEdgehostsSearchResponse200 = {
  data: EdgeHostsSearchSummary;
  status: 200;
};

export type dashboardEdgehostsSearchResponseComposite =
  dashboardEdgehostsSearchResponse200;

export type dashboardEdgehostsSearchResponse =
  dashboardEdgehostsSearchResponseComposite & {
    headers: Headers;
  };

export const getDashboardEdgehostsSearchUrl = (
  params?: DashboardEdgehostsSearchParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/edgehosts/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/edgehosts/search`;
};

export const dashboardEdgehostsSearch = async (
  v1SearchFilterSummarySpecBody: V1SearchFilterSummarySpecBody,
  params?: DashboardEdgehostsSearchParams,
  options?: RequestInit,
): Promise<dashboardEdgehostsSearchResponse> => {
  const res = await fetch(getDashboardEdgehostsSearchUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardEdgehostsSearchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardEdgehostsSearchResponse;
};

/**
 * @summary Retrieves a schema for the Edgehost search filter
 */
export type dashboardEdgehostsSearchSchemaGetResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type dashboardEdgehostsSearchSchemaGetResponseComposite =
  dashboardEdgehostsSearchSchemaGetResponse200;

export type dashboardEdgehostsSearchSchemaGetResponse =
  dashboardEdgehostsSearchSchemaGetResponseComposite & {
    headers: Headers;
  };

export const getDashboardEdgehostsSearchSchemaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/edgehosts/search/schema`;
};

export const dashboardEdgehostsSearchSchemaGet = async (
  options?: RequestInit,
): Promise<dashboardEdgehostsSearchSchemaGetResponse> => {
  const res = await fetch(getDashboardEdgehostsSearchSchemaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardEdgehostsSearchSchemaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardEdgehostsSearchSchemaGetResponse;
};

/**
 * @summary Retrieves a list of PCG summary with provided search filter. Supported fields as per schema /v1/dashboard/pcgs/search/schema
 */
export type dashboardPcgsSearchSummaryResponse200 = {
  data: PcgsSummary;
  status: 200;
};

export type dashboardPcgsSearchSummaryResponseComposite =
  dashboardPcgsSearchSummaryResponse200;

export type dashboardPcgsSearchSummaryResponse =
  dashboardPcgsSearchSummaryResponseComposite & {
    headers: Headers;
  };

export const getDashboardPcgsSearchSummaryUrl = (
  params?: DashboardPcgsSearchSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/pcgs/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/pcgs/search`;
};

export const dashboardPcgsSearchSummary = async (
  v1SearchFilterSummarySpecBody: V1SearchFilterSummarySpecBody,
  params?: DashboardPcgsSearchSummaryParams,
  options?: RequestInit,
): Promise<dashboardPcgsSearchSummaryResponse> => {
  const res = await fetch(getDashboardPcgsSearchSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardPcgsSearchSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardPcgsSearchSummaryResponse;
};

/**
 * @summary Retrieves a schema for the PCG search filter
 */
export type dashboardPcgSearchSchemaGetResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type dashboardPcgSearchSchemaGetResponseComposite =
  dashboardPcgSearchSchemaGetResponse200;

export type dashboardPcgSearchSchemaGetResponse =
  dashboardPcgSearchSchemaGetResponseComposite & {
    headers: Headers;
  };

export const getDashboardPcgSearchSchemaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/pcgs/search/schema`;
};

export const dashboardPcgSearchSchemaGet = async (
  options?: RequestInit,
): Promise<dashboardPcgSearchSchemaGetResponse> => {
  const res = await fetch(getDashboardPcgSearchSchemaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardPcgSearchSchemaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardPcgSearchSchemaGetResponse;
};

export type projectsFilterSummaryResponse200 = {
  data: ProjectsSummary;
  status: 200;
};

export type projectsFilterSummaryResponseComposite =
  projectsFilterSummaryResponse200;

export type projectsFilterSummaryResponse =
  projectsFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getProjectsFilterSummaryUrl = (
  params?: ProjectsFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/projects`;
};

export const projectsFilterSummary = async (
  projectsFilterSpec: ProjectsFilterSpec,
  params?: ProjectsFilterSummaryParams,
  options?: RequestInit,
): Promise<projectsFilterSummaryResponse> => {
  const res = await fetch(getProjectsFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(projectsFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: projectsFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as projectsFilterSummaryResponse;
};

/**
 * @summary Retrieves a list of projects metadata
 */
export type projectsMetadataResponse200 = {
  data: ProjectsMetadata;
  status: 200;
};

export type projectsMetadataResponseComposite = projectsMetadataResponse200;

export type projectsMetadataResponse = projectsMetadataResponseComposite & {
  headers: Headers;
};

export const getProjectsMetadataUrl = (params?: ProjectsMetadataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/projects/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/projects/metadata`;
};

export const projectsMetadata = async (
  params?: ProjectsMetadataParams,
  options?: RequestInit,
): Promise<projectsMetadataResponse> => {
  const res = await fetch(getProjectsMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: projectsMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as projectsMetadataResponse;
};

/**
 * @summary Retrieves spectro clusters cloud cost summary information
 */
export type dashboardSpectroClustersCostSummaryResponse200 = {
  data: ResourcesCloudCostSummary;
  status: 200;
};

export type dashboardSpectroClustersCostSummaryResponseComposite =
  dashboardSpectroClustersCostSummaryResponse200;

export type dashboardSpectroClustersCostSummaryResponse =
  dashboardSpectroClustersCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersCostSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/cost`;
};

export const dashboardSpectroClustersCostSummary = async (
  spectroClusterCloudCostSummarySpec: SpectroClusterCloudCostSummarySpec,
  options?: RequestInit,
): Promise<dashboardSpectroClustersCostSummaryResponse> => {
  const res = await fetch(getDashboardSpectroClustersCostSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(spectroClusterCloudCostSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersCostSummaryResponse;
};

/**
 * @summary Retrieves a list of running, non rbac configured clusters in a workspace
 */
export type spectroClustersFiltersWorkspaceResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type spectroClustersFiltersWorkspaceResponseComposite =
  spectroClustersFiltersWorkspaceResponse200;

export type spectroClustersFiltersWorkspaceResponse =
  spectroClustersFiltersWorkspaceResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersFiltersWorkspaceUrl = (
  params?: SpectroClustersFiltersWorkspaceParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/filters/workspace?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/filters/workspace`;
};

export const spectroClustersFiltersWorkspace = async (
  params?: SpectroClustersFiltersWorkspaceParams,
  options?: RequestInit,
): Promise<spectroClustersFiltersWorkspaceResponse> => {
  const res = await fetch(getSpectroClustersFiltersWorkspaceUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersFiltersWorkspaceResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersFiltersWorkspaceResponse;
};

/**
 * Returns metadata information for all clusters
 * @summary Get all clusters metadata
 */
export type spectroClustersMetaGetResponse200 = {
  data: SpectroClustersMeta;
  status: 200;
};

export type spectroClustersMetaGetResponseComposite =
  spectroClustersMetaGetResponse200;

export type spectroClustersMetaGetResponse =
  spectroClustersMetaGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMetaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/meta`;
};

export const spectroClustersMetaGet = async (
  options?: RequestInit,
): Promise<spectroClustersMetaGetResponse> => {
  const res = await fetch(getSpectroClustersMetaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersMetaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersMetaGetResponse;
};

/**
 * @summary Retrieves a list of cluster summary metadata
 */
export type spectroClustersMetadataGetResponse200 = {
  data: SpectroClustersMetadata;
  status: 200;
};

export type spectroClustersMetadataGetResponseComposite =
  spectroClustersMetadataGetResponse200;

export type spectroClustersMetadataGetResponse =
  spectroClustersMetadataGetResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMetadataGetUrl = (
  params?: SpectroClustersMetadataGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata`;
};

export const spectroClustersMetadataGet = async (
  params?: SpectroClustersMetadataGetParams,
  options?: RequestInit,
): Promise<spectroClustersMetadataGetResponse> => {
  const res = await fetch(getSpectroClustersMetadataGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersMetadataGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersMetadataGetResponse;
};

/**
 * @summary Retrieves a list of cluster summary
 */
export type spectroClustersMetadataResponse200 = {
  data: SpectroClustersMetadata;
  status: 200;
};

export type spectroClustersMetadataResponseComposite =
  spectroClustersMetadataResponse200;

export type spectroClustersMetadataResponse =
  spectroClustersMetadataResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata`;
};

export const spectroClustersMetadata = async (
  spectroClusterMetadataSpec: SpectroClusterMetadataSpec,
  options?: RequestInit,
): Promise<spectroClustersMetadataResponse> => {
  const res = await fetch(getSpectroClustersMetadataUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(spectroClusterMetadataSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersMetadataResponse;
};

/**
 * @summary Retrieves a list of cluster metadata with provided search filter spec Supported sort fields - ["environment", "clusterName", "clusterState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type spectroClustersMetadataSearchResponse200 = {
  data: SpectroClustersMetadataSearch;
  status: 200;
};

export type spectroClustersMetadataSearchResponseComposite =
  spectroClustersMetadataSearchResponse200;

export type spectroClustersMetadataSearchResponse =
  spectroClustersMetadataSearchResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMetadataSearchUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata/search`;
};

export const spectroClustersMetadataSearch = async (
  v1SearchFilterSummarySpecBody: V1SearchFilterSummarySpecBody,
  options?: RequestInit,
): Promise<spectroClustersMetadataSearchResponse> => {
  const res = await fetch(getSpectroClustersMetadataSearchUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersMetadataSearchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersMetadataSearchResponse;
};

/**
 * @summary Retrieves a schema for the cluster metadata search filter
 */
export type spectroClustersMetadataSearchSchemaResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type spectroClustersMetadataSearchSchemaResponseComposite =
  spectroClustersMetadataSearchSchemaResponse200;

export type spectroClustersMetadataSearchSchemaResponse =
  spectroClustersMetadataSearchSchemaResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersMetadataSearchSchemaUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata/search/schema`;
};

export const spectroClustersMetadataSearchSchema = async (
  options?: RequestInit,
): Promise<spectroClustersMetadataSearchSchemaResponse> => {
  const res = await fetch(getSpectroClustersMetadataSearchSchemaUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersMetadataSearchSchemaResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersMetadataSearchSchemaResponse;
};

/**
 * @summary Retrieves a list of clusters with the desired repave state
 */
export type dashboardSpectroClustersRepaveListResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type dashboardSpectroClustersRepaveListResponseComposite =
  dashboardSpectroClustersRepaveListResponse200;

export type dashboardSpectroClustersRepaveListResponse =
  dashboardSpectroClustersRepaveListResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersRepaveListUrl = (
  params?: DashboardSpectroClustersRepaveListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/repaveStatus?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/repaveStatus`;
};

export const dashboardSpectroClustersRepaveList = async (
  params?: DashboardSpectroClustersRepaveListParams,
  options?: RequestInit,
): Promise<dashboardSpectroClustersRepaveListResponse> => {
  const res = await fetch(getDashboardSpectroClustersRepaveListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersRepaveListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersRepaveListResponse;
};

/**
 * @summary Retrieves spectro clusters resource consumption
 */
export type spectroClustersResourcesConsumptionResponse200 = {
  data: ResourcesConsumption;
  status: 200;
};

export type spectroClustersResourcesConsumptionResponseComposite =
  spectroClustersResourcesConsumptionResponse200;

export type spectroClustersResourcesConsumptionResponse =
  spectroClustersResourcesConsumptionResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersResourcesConsumptionUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/consumption`;
};

export const spectroClustersResourcesConsumption = async (
  v1ResourceConsumptionSpecBody: V1ResourceConsumptionSpecBody,
  options?: RequestInit,
): Promise<spectroClustersResourcesConsumptionResponse> => {
  const res = await fetch(getSpectroClustersResourcesConsumptionUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceConsumptionSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersResourcesConsumptionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersResourcesConsumptionResponse;
};

/**
 * @summary Retrieves spectro clusters resources cost summary information
 */
export type spectroClustersResourcesCostSummaryResponse200 = {
  data: ResourcesCostSummary;
  status: 200;
};

export type spectroClustersResourcesCostSummaryResponseComposite =
  spectroClustersResourcesCostSummaryResponse200;

export type spectroClustersResourcesCostSummaryResponse =
  spectroClustersResourcesCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersResourcesCostSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/cost`;
};

export const spectroClustersResourcesCostSummary = async (
  resourceCostSummarySpec: ResourceCostSummarySpec,
  options?: RequestInit,
): Promise<spectroClustersResourcesCostSummaryResponse> => {
  const res = await fetch(getSpectroClustersResourcesCostSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(resourceCostSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersResourcesCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersResourcesCostSummaryResponse;
};

/**
 * @summary Retrieves spectro clusters resources usage summary information
 */
export type spectroClustersResourcesUsageSummaryResponse200 = {
  data: ResourcesUsageSummary;
  status: 200;
};

export type spectroClustersResourcesUsageSummaryResponseComposite =
  spectroClustersResourcesUsageSummaryResponse200;

export type spectroClustersResourcesUsageSummaryResponse =
  spectroClustersResourcesUsageSummaryResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersResourcesUsageSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/usage`;
};

export const spectroClustersResourcesUsageSummary = async (
  resourceUsageSummarySpec: ResourceUsageSummarySpec,
  options?: RequestInit,
): Promise<spectroClustersResourcesUsageSummaryResponse> => {
  const res = await fetch(getSpectroClustersResourcesUsageSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(resourceUsageSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersResourcesUsageSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersResourcesUsageSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster summary with provided search filter spec Supported sort fields - ["environment", "clusterName", "memoryUsage", "healthState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type spectroClustersSearchFilterSummaryResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type spectroClustersSearchFilterSummaryResponseComposite =
  spectroClustersSearchFilterSummaryResponse200;

export type spectroClustersSearchFilterSummaryResponse =
  spectroClustersSearchFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersSearchFilterSummaryUrl = (
  params?: SpectroClustersSearchFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search`;
};

export const spectroClustersSearchFilterSummary = async (
  v1SearchFilterSummarySpecBody: V1SearchFilterSummarySpecBody,
  params?: SpectroClustersSearchFilterSummaryParams,
  options?: RequestInit,
): Promise<spectroClustersSearchFilterSummaryResponse> => {
  const res = await fetch(getSpectroClustersSearchFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersSearchFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersSearchFilterSummaryResponse;
};

/**
 * @summary Export and download the list of cluster summary with matching search filter and download as a file(csv)
 */
export type dashboardClustersSearchSummaryExportGetResponse200 = {
  data: Blob;
  status: 200;
};

export type dashboardClustersSearchSummaryExportGetResponseComposite =
  dashboardClustersSearchSummaryExportGetResponse200;

export type dashboardClustersSearchSummaryExportGetResponse =
  dashboardClustersSearchSummaryExportGetResponseComposite & {
    headers: Headers;
  };

export const getDashboardClustersSearchSummaryExportGetUrl = (
  params?: DashboardClustersSearchSummaryExportGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export`;
};

export const dashboardClustersSearchSummaryExportGet = async (
  params?: DashboardClustersSearchSummaryExportGetParams,
  options?: RequestInit,
): Promise<dashboardClustersSearchSummaryExportGetResponse> => {
  const res = await fetch(
    getDashboardClustersSearchSummaryExportGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardClustersSearchSummaryExportGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardClustersSearchSummaryExportGetResponse;
};

/**
 * @summary Export the list of cluster summary with matching search filter and download as a file(csv) Supported sort fields - ["environment", "clusterName", "healthState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type dashboardClustersSearchSummaryExportResponse200 = {
  data: Blob;
  status: 200;
};

export type dashboardClustersSearchSummaryExportResponseComposite =
  dashboardClustersSearchSummaryExportResponse200;

export type dashboardClustersSearchSummaryExportResponse =
  dashboardClustersSearchSummaryExportResponseComposite & {
    headers: Headers;
  };

export const getDashboardClustersSearchSummaryExportUrl = (
  params?: DashboardClustersSearchSummaryExportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export`;
};

export const dashboardClustersSearchSummaryExport = async (
  v1SearchFilterSummarySpecBody: V1SearchFilterSummarySpecBody,
  params?: DashboardClustersSearchSummaryExportParams,
  options?: RequestInit,
): Promise<dashboardClustersSearchSummaryExportResponse> => {
  const res = await fetch(getDashboardClustersSearchSummaryExportUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardClustersSearchSummaryExportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardClustersSearchSummaryExportResponse;
};

/**
 * @summary Retrieves a supported input values for the cluster search filter
 */
export type dashboardSpectroClustersSearchInputResponse200 = {
  data: ClusterSearchInputSpec;
  status: 200;
};

export type dashboardSpectroClustersSearchInputResponseComposite =
  dashboardSpectroClustersSearchInputResponse200;

export type dashboardSpectroClustersSearchInputResponse =
  dashboardSpectroClustersSearchInputResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersSearchInputUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/input`;
};

export const dashboardSpectroClustersSearchInput = async (
  options?: RequestInit,
): Promise<dashboardSpectroClustersSearchInputResponse> => {
  const res = await fetch(getDashboardSpectroClustersSearchInputUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersSearchInputResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersSearchInputResponse;
};

/**
 * @summary Retrieves a schema for the cluster search filter
 */
export type spectroClustersSearchSchemaResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type spectroClustersSearchSchemaResponseComposite =
  spectroClustersSearchSchemaResponse200;

export type spectroClustersSearchSchemaResponse =
  spectroClustersSearchSchemaResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersSearchSchemaUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/schema`;
};

export const spectroClustersSearchSchema = async (
  options?: RequestInit,
): Promise<spectroClustersSearchSchemaResponse> => {
  const res = await fetch(getSpectroClustersSearchSchemaUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersSearchSchemaResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersSearchSchemaResponse;
};

/**
 * @summary Retrieves a list of Virtual machine enabled clusters
 */
export type v1DashboardVMEnabledClustersListResponse200 = {
  data: VMClusters;
  status: 200;
};

export type v1DashboardVMEnabledClustersListResponseComposite =
  v1DashboardVMEnabledClustersListResponse200;

export type v1DashboardVMEnabledClustersListResponse =
  v1DashboardVMEnabledClustersListResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardVMEnabledClustersListUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/vms`;
};

export const v1DashboardVMEnabledClustersList = async (
  options?: RequestInit,
): Promise<v1DashboardVMEnabledClustersListResponse> => {
  const res = await fetch(getV1DashboardVMEnabledClustersListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardVMEnabledClustersListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardVMEnabledClustersListResponse;
};

/**
 * @summary Returns the specified cluster summary
 */
export type spectroClustersSummaryUidResponse200 = {
  data: SpectroClusterUidSummary;
  status: 200;
};

export type spectroClustersSummaryUidResponseComposite =
  spectroClustersSummaryUidResponse200;

export type spectroClustersSummaryUidResponse =
  spectroClustersSummaryUidResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersSummaryUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}`;
};

export const spectroClustersSummaryUid = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersSummaryUidResponse> => {
  const res = await fetch(getSpectroClustersSummaryUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersSummaryUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersSummaryUidResponse;
};

/**
 * @summary Retrieves the specified cluster cost summary
 */
export type spectroClustersUidCostSummaryResponse200 = {
  data: SpectroClusterCostSummary;
  status: 200;
};

export type spectroClustersUidCostSummaryResponseComposite =
  spectroClustersUidCostSummaryResponse200;

export type spectroClustersUidCostSummaryResponse =
  spectroClustersUidCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidCostSummaryUrl = (
  uid: string,
  params?: SpectroClustersUidCostSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/cost?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/cost`;
};

export const spectroClustersUidCostSummary = async (
  uid: string,
  params?: SpectroClustersUidCostSummaryParams,
  options?: RequestInit,
): Promise<spectroClustersUidCostSummaryResponse> => {
  const res = await fetch(getSpectroClustersUidCostSummaryUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersUidCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersUidCostSummaryResponse;
};

/**
 * @summary Returns the specified cluster summary overview
 */
export type spectroClustersSummaryUidOverviewResponse200 = {
  data: SpectroClusterUidSummary;
  status: 200;
};

export type spectroClustersSummaryUidOverviewResponseComposite =
  spectroClustersSummaryUidOverviewResponse200;

export type spectroClustersSummaryUidOverviewResponse =
  spectroClustersSummaryUidOverviewResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersSummaryUidOverviewUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/overview`;
};

export const spectroClustersSummaryUidOverview = async (
  uid: string,
  options?: RequestInit,
): Promise<spectroClustersSummaryUidOverviewResponse> => {
  const res = await fetch(getSpectroClustersSummaryUidOverviewUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersSummaryUidOverviewResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersSummaryUidOverviewResponse;
};

/**
 * @summary Retrieves specified spectro cluster resource consumption
 */
export type spectroClustersUidResourcesConsumptionResponse200 = {
  data: ResourcesConsumption;
  status: 200;
};

export type spectroClustersUidResourcesConsumptionResponseComposite =
  spectroClustersUidResourcesConsumptionResponse200;

export type spectroClustersUidResourcesConsumptionResponse =
  spectroClustersUidResourcesConsumptionResponseComposite & {
    headers: Headers;
  };

export const getSpectroClustersUidResourcesConsumptionUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/resources/consumption`;
};

export const spectroClustersUidResourcesConsumption = async (
  uid: string,
  v1ResourceConsumptionSpecBody: V1ResourceConsumptionSpecBody,
  options?: RequestInit,
): Promise<spectroClustersUidResourcesConsumptionResponse> => {
  const res = await fetch(getSpectroClustersUidResourcesConsumptionUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceConsumptionSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: spectroClustersUidResourcesConsumptionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as spectroClustersUidResourcesConsumptionResponse;
};

/**
 * @summary Retrieves specified cluster workloads
 */
export type dashboardSpectroClustersUidWorkloadsResponse200 = {
  data: ClusterWorkload;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsResponseComposite =
  dashboardSpectroClustersUidWorkloadsResponse200;

export type dashboardSpectroClustersUidWorkloadsResponse =
  dashboardSpectroClustersUidWorkloadsResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads`;
};

export const dashboardSpectroClustersUidWorkloads = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsResponse> => {
  const res = await fetch(getDashboardSpectroClustersUidWorkloadsUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterWorkloadsSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsResponse;
};

/**
 * @summary Retrieves specified cluster workload clusterrolebindings
 */
export type dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse200 =
  {
    data: ClusterWorkloadRoleBindings;
    status: 200;
  };

export type dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponseComposite =
  dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse200;

export type dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse =
  dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsClusterRoleBindingUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/clusterrolebinding`;
};

export const dashboardSpectroClustersUidWorkloadsClusterRoleBinding = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse> => {
  const res = await fetch(
    getDashboardSpectroClustersUidWorkloadsClusterRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse;
};

/**
 * @summary Retrieves specified cluster workload cronjobs
 */
export type dashboardSpectroClustersUidWorkloadsCronJobResponse200 = {
  data: ClusterWorkloadCronJobs;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsCronJobResponseComposite =
  dashboardSpectroClustersUidWorkloadsCronJobResponse200;

export type dashboardSpectroClustersUidWorkloadsCronJobResponse =
  dashboardSpectroClustersUidWorkloadsCronJobResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsCronJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/cronjob`;
};

export const dashboardSpectroClustersUidWorkloadsCronJob = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsCronJobResponse> => {
  const res = await fetch(
    getDashboardSpectroClustersUidWorkloadsCronJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsCronJobResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsCronJobResponse;
};

/**
 * @summary Retrieves specified cluster workload daemonsets
 */
export type dashboardSpectroClustersUidWorkloadsDaemonSetResponse200 = {
  data: ClusterWorkloadDaemonSets;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsDaemonSetResponseComposite =
  dashboardSpectroClustersUidWorkloadsDaemonSetResponse200;

export type dashboardSpectroClustersUidWorkloadsDaemonSetResponse =
  dashboardSpectroClustersUidWorkloadsDaemonSetResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsDaemonSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/daemonset`;
};

export const dashboardSpectroClustersUidWorkloadsDaemonSet = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsDaemonSetResponse> => {
  const res = await fetch(
    getDashboardSpectroClustersUidWorkloadsDaemonSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsDaemonSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsDaemonSetResponse;
};

/**
 * @summary Retrieves specified cluster workload deployments
 */
export type dashboardSpectroClustersUidWorkloadsDeploymentResponse200 = {
  data: ClusterWorkloadDeployments;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsDeploymentResponseComposite =
  dashboardSpectroClustersUidWorkloadsDeploymentResponse200;

export type dashboardSpectroClustersUidWorkloadsDeploymentResponse =
  dashboardSpectroClustersUidWorkloadsDeploymentResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsDeploymentUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/deployment`;
};

export const dashboardSpectroClustersUidWorkloadsDeployment = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsDeploymentResponse> => {
  const res = await fetch(
    getDashboardSpectroClustersUidWorkloadsDeploymentUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsDeploymentResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsDeploymentResponse;
};

/**
 * @summary Retrieves specified cluster workload jobs
 */
export type dashboardSpectroClustersUidWorkloadsJobResponse200 = {
  data: ClusterWorkloadJobs;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsJobResponseComposite =
  dashboardSpectroClustersUidWorkloadsJobResponse200;

export type dashboardSpectroClustersUidWorkloadsJobResponse =
  dashboardSpectroClustersUidWorkloadsJobResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsJobUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/job`;
};

export const dashboardSpectroClustersUidWorkloadsJob = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsJobResponse> => {
  const res = await fetch(getDashboardSpectroClustersUidWorkloadsJobUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterWorkloadsSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsJobResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsJobResponse;
};

/**
 * @summary Retrieves specified cluster workload namespaces
 */
export type dashboardSpectroClustersUidWorkloadsNamespaceResponse200 = {
  data: ClusterWorkloadNamespaces;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsNamespaceResponseComposite =
  dashboardSpectroClustersUidWorkloadsNamespaceResponse200;

export type dashboardSpectroClustersUidWorkloadsNamespaceResponse =
  dashboardSpectroClustersUidWorkloadsNamespaceResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsNamespaceUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/namespace`;
};

export const dashboardSpectroClustersUidWorkloadsNamespace = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsNamespaceResponse> => {
  const res = await fetch(
    getDashboardSpectroClustersUidWorkloadsNamespaceUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsNamespaceResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsNamespaceResponse;
};

/**
 * @summary Retrieves specified cluster workload pods
 */
export type dashboardSpectroClustersUidWorkloadsPodResponse200 = {
  data: ClusterWorkloadPods;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsPodResponseComposite =
  dashboardSpectroClustersUidWorkloadsPodResponse200;

export type dashboardSpectroClustersUidWorkloadsPodResponse =
  dashboardSpectroClustersUidWorkloadsPodResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsPodUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/pod`;
};

export const dashboardSpectroClustersUidWorkloadsPod = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsPodResponse> => {
  const res = await fetch(getDashboardSpectroClustersUidWorkloadsPodUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterWorkloadsSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsPodResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsPodResponse;
};

/**
 * @summary Retrieves specified cluster workload rolebindings
 */
export type dashboardSpectroClustersUidWorkloadsRoleBindingResponse200 = {
  data: ClusterWorkloadRoleBindings;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsRoleBindingResponseComposite =
  dashboardSpectroClustersUidWorkloadsRoleBindingResponse200;

export type dashboardSpectroClustersUidWorkloadsRoleBindingResponse =
  dashboardSpectroClustersUidWorkloadsRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsRoleBindingUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/rolebinding`;
};

export const dashboardSpectroClustersUidWorkloadsRoleBinding = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsRoleBindingResponse> => {
  const res = await fetch(
    getDashboardSpectroClustersUidWorkloadsRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsRoleBindingResponse;
};

/**
 * @summary Retrieves specified cluster workload statefulsets
 */
export type dashboardSpectroClustersUidWorkloadsStatefulSetResponse200 = {
  data: ClusterWorkloadStatefulSets;
  status: 200;
};

export type dashboardSpectroClustersUidWorkloadsStatefulSetResponseComposite =
  dashboardSpectroClustersUidWorkloadsStatefulSetResponse200;

export type dashboardSpectroClustersUidWorkloadsStatefulSetResponse =
  dashboardSpectroClustersUidWorkloadsStatefulSetResponseComposite & {
    headers: Headers;
  };

export const getDashboardSpectroClustersUidWorkloadsStatefulSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/statefulset`;
};

export const dashboardSpectroClustersUidWorkloadsStatefulSet = async (
  uid: string,
  v1ClusterWorkloadsSpecBody: V1ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardSpectroClustersUidWorkloadsStatefulSetResponse> => {
  const res = await fetch(
    getDashboardSpectroClustersUidWorkloadsStatefulSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardSpectroClustersUidWorkloadsStatefulSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardSpectroClustersUidWorkloadsStatefulSetResponse;
};

/**
 * @summary Retrieves a list of workspace
 */
export type dashboardWorkspacesListResponse200 = {
  data: DashboardWorkspaces;
  status: 200;
};

export type dashboardWorkspacesListResponseComposite =
  dashboardWorkspacesListResponse200;

export type dashboardWorkspacesListResponse =
  dashboardWorkspacesListResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesListUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces`;
};

export const dashboardWorkspacesList = async (
  options?: RequestInit,
): Promise<dashboardWorkspacesListResponse> => {
  const res = await fetch(getDashboardWorkspacesListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesListResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload clusterrolebindings
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse200 =
  {
    data: WorkspaceClustersWorkloadRoleBindings;
    status: 200;
  };

export type dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/clusterrolebinding`;
  };

export const dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding =
  async (
    uid: string,
    v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
    options?: RequestInit,
  ): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse> => {
    const res = await fetch(
      getDashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingUrl(
        uid,
      ),
      {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
      },
    );

    const body = [204, 205, 304].includes(res.status) ? null : await res.text();
    const data: dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse["data"] =
      body ? JSON.parse(body) : {};

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as dashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse;
  };

/**
 * @summary Retrieves specified workspace clusters workload cronjobs
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse200 = {
  data: WorkspaceClustersWorkloadCronJobs;
  status: 200;
};

export type dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsCronJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/cronjob`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsCronJob = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsCronJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload daemonsets
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse200 =
  {
    data: WorkspaceClustersWorkloadDaemonSets;
    status: 200;
  };

export type dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/daemonset`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload deployments
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse200 =
  {
    data: WorkspaceClustersWorkloadDeployments;
    status: 200;
  };

export type dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsDeploymentUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/deployment`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsDeployment = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsDeploymentUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload jobs
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsJobResponse200 = {
  data: WorkspaceClustersWorkloadJobs;
  status: 200;
};

export type dashboardWorkspacesUidSpectroClustersWorkloadsJobResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsJobResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsJobResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsJobResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/job`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsJob = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsJobResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsJobResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsJobResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload namespaces
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse200 =
  {
    data: WorkspaceClustersWorkloadNamespaces;
    status: 200;
  };

export type dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsNamespaceUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/namespace`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsNamespace = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsNamespaceUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload pods
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsPodResponse200 = {
  data: WorkspaceClustersWorkloadPods;
  status: 200;
};

export type dashboardWorkspacesUidSpectroClustersWorkloadsPodResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsPodResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsPodResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsPodResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsPodUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/pod`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsPod = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsPodResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsPodUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsPodResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsPodResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload rolebindings
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse200 =
  {
    data: WorkspaceClustersWorkloadRoleBindings;
    status: 200;
  };

export type dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/rolebinding`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload statefulsets
 */
export type dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse200 =
  {
    data: WorkspaceClustersWorkloadStatefulSets;
    status: 200;
  };

export type dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponseComposite =
  dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse200;

export type dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse =
  dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponseComposite & {
    headers: Headers;
  };

export const getDashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/statefulset`;
};

export const dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet = async (
  uid: string,
  v1WorkspaceWorkloadsSpecBody: V1WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse> => {
  const res = await fetch(
    getDashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as dashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse;
};
