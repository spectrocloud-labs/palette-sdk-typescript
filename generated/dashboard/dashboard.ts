/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AppDeploymentsFilterSpec,
  AppDeploymentsSummary,
  AppProfilesFilterSpec,
  AppProfilesMetadata,
  AppProfilesSummary,
  CloudAccountsMetadata,
  ClusterGroupUidHostClustersSummaryParams,
  ClusterGroupUidVirtualClustersSummaryParams,
  ClusterProfileSummary,
  ClusterProfilesFilterSpec,
  ClusterProfilesFilterSummaryParams,
  ClusterProfilesMetadata,
  ClusterProfilesSummary,
  ClusterSearchInputSpec,
  ClusterWorkload,
  ClusterWorkloadCronJobs,
  ClusterWorkloadDaemonSets,
  ClusterWorkloadDeployments,
  ClusterWorkloadJobs,
  ClusterWorkloadNamespaces,
  ClusterWorkloadPods,
  ClusterWorkloadRoleBindings,
  ClusterWorkloadStatefulSets,
  ClusterWorkloadsSpecBody,
  DashboardAppDeploymentsParams,
  DashboardAppProfilesParams,
  DashboardCloudAccountsMetadataParams,
  DashboardClustersSearchSummaryExportGetParams,
  DashboardClustersSearchSummaryExportParams,
  DashboardEdgehostsSearchParams,
  DashboardPcgsSearchSummaryParams,
  DashboardSpectroClustersRepaveListParams,
  DashboardWorkspaces,
  EdgeHostsMetadataFilter,
  EdgeHostsMetadataSummary,
  EdgeHostsSearchSummary,
  PcgsSummary,
  ProjectsFilterSpec,
  ProjectsFilterSummaryParams,
  ProjectsMetadata,
  ProjectsMetadataParams,
  ProjectsSummary,
  ResourceConsumptionSpecBody,
  ResourceCostSummarySpec,
  ResourceUsageSummarySpec,
  ResourcesCloudCostSummary,
  ResourcesConsumption,
  ResourcesCostSummary,
  ResourcesUsageSummary,
  SearchFilterSchemaSpec,
  SearchFilterSummarySpecBody,
  SpectroClusterCloudCostSummarySpec,
  SpectroClusterCostSummary,
  SpectroClusterMetadataSpec,
  SpectroClusterUidSummary,
  SpectroClustersFiltersWorkspaceParams,
  SpectroClustersMeta,
  SpectroClustersMetadata,
  SpectroClustersMetadataGetParams,
  SpectroClustersMetadataSearch,
  SpectroClustersSearchFilterSummaryParams,
  SpectroClustersSummary,
  SpectroClustersUidCostSummaryParams,
  VMClusters,
  WorkspaceClustersWorkloadCronJobs,
  WorkspaceClustersWorkloadDaemonSets,
  WorkspaceClustersWorkloadDeployments,
  WorkspaceClustersWorkloadJobs,
  WorkspaceClustersWorkloadNamespaces,
  WorkspaceClustersWorkloadPods,
  WorkspaceClustersWorkloadRoleBindings,
  WorkspaceClustersWorkloadStatefulSets,
  WorkspaceWorkloadsSpecBody,
} from ".././schemas";

/**
 * @summary Retrieves a list of application deployments filter summary Supported filter fields - ["appDeploymentName", "clusterUid", "tags"] Supported sort fields - ["appDeploymentName", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type DashboardAppDeploymentsResponse200 = {
  data: AppDeploymentsSummary;
  status: 200;
};

export type DashboardAppDeploymentsResponseComposite =
  DashboardAppDeploymentsResponse200;

export type DashboardAppDeploymentsResponse =
  DashboardAppDeploymentsResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardAppDeploymentsUrl = (
  params?: DashboardAppDeploymentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/appDeployments?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/appDeployments`;
};

export const DashboardAppDeployments = async (
  AppDeploymentsFilterSpec: AppDeploymentsFilterSpec,
  params?: DashboardAppDeploymentsParams,
  options?: RequestInit,
): Promise<DashboardAppDeploymentsResponse> => {
  const res = await fetch(getV1DashboardAppDeploymentsUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AppDeploymentsFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardAppDeploymentsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardAppDeploymentsResponse;
};

/**
 * @summary Retrieves a list of application profiles filter summary Supported filter fields - ["profileName", "tags"] Supported sort fields - ["profileName", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type DashboardAppProfilesResponse200 = {
  data: AppProfilesSummary;
  status: 200;
};

export type DashboardAppProfilesResponseComposite =
  DashboardAppProfilesResponse200;

export type DashboardAppProfilesResponse =
  DashboardAppProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardAppProfilesUrl = (
  params?: DashboardAppProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/appProfiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/appProfiles`;
};

export const DashboardAppProfiles = async (
  AppProfilesFilterSpec: AppProfilesFilterSpec,
  params?: DashboardAppProfilesParams,
  options?: RequestInit,
): Promise<DashboardAppProfilesResponse> => {
  const res = await fetch(getV1DashboardAppProfilesUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AppProfilesFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardAppProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardAppProfilesResponse;
};

/**
 * @summary Retrieves a list of application profile metadata
 */
export type DashboardAppProfilesMetadataResponse200 = {
  data: AppProfilesMetadata;
  status: 200;
};

export type DashboardAppProfilesMetadataResponseComposite =
  DashboardAppProfilesMetadataResponse200;

export type DashboardAppProfilesMetadataResponse =
  DashboardAppProfilesMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardAppProfilesMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/appProfiles/metadata`;
};

export const DashboardAppProfilesMetadata = async (
  options?: RequestInit,
): Promise<DashboardAppProfilesMetadataResponse> => {
  const res = await fetch(getV1DashboardAppProfilesMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardAppProfilesMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardAppProfilesMetadataResponse;
};

/**
 * @summary Retrieves a list of edgehosts summary
 */
export type EdgeHostsMetadataResponse200 = {
  data: EdgeHostsMetadataSummary;
  status: 200;
};

export type EdgeHostsMetadataResponseComposite = EdgeHostsMetadataResponse200;

export type EdgeHostsMetadataResponse = EdgeHostsMetadataResponseComposite & {
  headers: Headers;
};

export const getV1EdgeHostsMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/appliances/metadata`;
};

export const EdgeHostsMetadata = async (
  EdgeHostsMetadataFilter: EdgeHostsMetadataFilter,
  options?: RequestInit,
): Promise<EdgeHostsMetadataResponse> => {
  const res = await fetch(getV1EdgeHostsMetadataUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EdgeHostsMetadataFilter),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EdgeHostsMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EdgeHostsMetadataResponse;
};

/**
 * @summary Retrieves a list of cloud accounts metadata
 */
export type DashboardCloudAccountsMetadataResponse200 = {
  data: CloudAccountsMetadata;
  status: 200;
};

export type DashboardCloudAccountsMetadataResponseComposite =
  DashboardCloudAccountsMetadataResponse200;

export type DashboardCloudAccountsMetadataResponse =
  DashboardCloudAccountsMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardCloudAccountsMetadataUrl = (
  params?: DashboardCloudAccountsMetadataParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/cloudaccounts/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/cloudaccounts/metadata`;
};

export const DashboardCloudAccountsMetadata = async (
  params?: DashboardCloudAccountsMetadataParams,
  options?: RequestInit,
): Promise<DashboardCloudAccountsMetadataResponse> => {
  const res = await fetch(getV1DashboardCloudAccountsMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardCloudAccountsMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardCloudAccountsMetadataResponse;
};

/**
 * @summary Retrieves a list of cluster summary for a given cluster group
 */
export type ClusterGroupUidHostClustersSummaryResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type ClusterGroupUidHostClustersSummaryResponseComposite =
  ClusterGroupUidHostClustersSummaryResponse200;

export type ClusterGroupUidHostClustersSummaryResponse =
  ClusterGroupUidHostClustersSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupUidHostClustersSummaryUrl = (
  uid: string,
  params?: ClusterGroupUidHostClustersSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/hostClusters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/hostClusters`;
};

export const ClusterGroupUidHostClustersSummary = async (
  uid: string,
  SearchFilterSummarySpecBody: SearchFilterSummarySpecBody,
  params?: ClusterGroupUidHostClustersSummaryParams,
  options?: RequestInit,
): Promise<ClusterGroupUidHostClustersSummaryResponse> => {
  const res = await fetch(
    getV1ClusterGroupUidHostClustersSummaryUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(SearchFilterSummarySpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupUidHostClustersSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupUidHostClustersSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster summary for a given cluster group
 */
export type ClusterGroupUidVirtualClustersSummaryResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type ClusterGroupUidVirtualClustersSummaryResponseComposite =
  ClusterGroupUidVirtualClustersSummaryResponse200;

export type ClusterGroupUidVirtualClustersSummaryResponse =
  ClusterGroupUidVirtualClustersSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupUidVirtualClustersSummaryUrl = (
  uid: string,
  params?: ClusterGroupUidVirtualClustersSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/virtualClusters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/virtualClusters`;
};

export const ClusterGroupUidVirtualClustersSummary = async (
  uid: string,
  SearchFilterSummarySpecBody: SearchFilterSummarySpecBody,
  params?: ClusterGroupUidVirtualClustersSummaryParams,
  options?: RequestInit,
): Promise<ClusterGroupUidVirtualClustersSummaryResponse> => {
  const res = await fetch(
    getV1ClusterGroupUidVirtualClustersSummaryUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(SearchFilterSummarySpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupUidVirtualClustersSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupUidVirtualClustersSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster profiles filter summary Supported filter fields - ["profileName", "tags", "profileType", "environment"] Supported sort fields - ["profileName", "environment", "profileType", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type ClusterProfilesFilterSummaryResponse200 = {
  data: ClusterProfilesSummary;
  status: 200;
};

export type ClusterProfilesFilterSummaryResponseComposite =
  ClusterProfilesFilterSummaryResponse200;

export type ClusterProfilesFilterSummaryResponse =
  ClusterProfilesFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesFilterSummaryUrl = (
  params?: ClusterProfilesFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clusterprofiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clusterprofiles`;
};

export const ClusterProfilesFilterSummary = async (
  ClusterProfilesFilterSpec: ClusterProfilesFilterSpec,
  params?: ClusterProfilesFilterSummaryParams,
  options?: RequestInit,
): Promise<ClusterProfilesFilterSummaryResponse> => {
  const res = await fetch(getV1ClusterProfilesFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfilesFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesFilterSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster profiles metadata
 */
export type ClusterProfilesMetadataResponse200 = {
  data: ClusterProfilesMetadata;
  status: 200;
};

export type ClusterProfilesMetadataResponseComposite =
  ClusterProfilesMetadataResponse200;

export type ClusterProfilesMetadataResponse =
  ClusterProfilesMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/clusterprofiles/metadata`;
};

export const ClusterProfilesMetadata = async (
  options?: RequestInit,
): Promise<ClusterProfilesMetadataResponse> => {
  const res = await fetch(getV1ClusterProfilesMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesMetadataResponse;
};

/**
 * @summary Retrieves a specified cluster profile summary
 */
export type ClusterProfilesUidSummaryResponse200 = {
  data: ClusterProfileSummary;
  status: 200;
};

export type ClusterProfilesUidSummaryResponseComposite =
  ClusterProfilesUidSummaryResponse200;

export type ClusterProfilesUidSummaryResponse =
  ClusterProfilesUidSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidSummaryUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/clusterprofiles/${uid}`;
};

export const ClusterProfilesUidSummary = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidSummaryResponse> => {
  const res = await fetch(getV1ClusterProfilesUidSummaryUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidSummaryResponse;
};

/**
 * @summary Retrieves a list of Edgehosts summary with provided search filter. Supported fields as per schema /v1/dashboard/edgehosts/search/schema
 */
export type DashboardEdgehostsSearchResponse200 = {
  data: EdgeHostsSearchSummary;
  status: 200;
};

export type DashboardEdgehostsSearchResponseComposite =
  DashboardEdgehostsSearchResponse200;

export type DashboardEdgehostsSearchResponse =
  DashboardEdgehostsSearchResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardEdgehostsSearchUrl = (
  params?: DashboardEdgehostsSearchParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/edgehosts/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/edgehosts/search`;
};

export const DashboardEdgehostsSearch = async (
  SearchFilterSummarySpecBody: SearchFilterSummarySpecBody,
  params?: DashboardEdgehostsSearchParams,
  options?: RequestInit,
): Promise<DashboardEdgehostsSearchResponse> => {
  const res = await fetch(getV1DashboardEdgehostsSearchUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardEdgehostsSearchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardEdgehostsSearchResponse;
};

/**
 * @summary Retrieves a schema for the Edgehost search filter
 */
export type DashboardEdgehostsSearchSchemaGetResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type DashboardEdgehostsSearchSchemaGetResponseComposite =
  DashboardEdgehostsSearchSchemaGetResponse200;

export type DashboardEdgehostsSearchSchemaGetResponse =
  DashboardEdgehostsSearchSchemaGetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardEdgehostsSearchSchemaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/edgehosts/search/schema`;
};

export const DashboardEdgehostsSearchSchemaGet = async (
  options?: RequestInit,
): Promise<DashboardEdgehostsSearchSchemaGetResponse> => {
  const res = await fetch(getV1DashboardEdgehostsSearchSchemaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardEdgehostsSearchSchemaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardEdgehostsSearchSchemaGetResponse;
};

/**
 * @summary Retrieves a list of PCG summary with provided search filter. Supported fields as per schema /v1/dashboard/pcgs/search/schema
 */
export type DashboardPcgsSearchSummaryResponse200 = {
  data: PcgsSummary;
  status: 200;
};

export type DashboardPcgsSearchSummaryResponseComposite =
  DashboardPcgsSearchSummaryResponse200;

export type DashboardPcgsSearchSummaryResponse =
  DashboardPcgsSearchSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardPcgsSearchSummaryUrl = (
  params?: DashboardPcgsSearchSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/pcgs/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/pcgs/search`;
};

export const DashboardPcgsSearchSummary = async (
  SearchFilterSummarySpecBody: SearchFilterSummarySpecBody,
  params?: DashboardPcgsSearchSummaryParams,
  options?: RequestInit,
): Promise<DashboardPcgsSearchSummaryResponse> => {
  const res = await fetch(getV1DashboardPcgsSearchSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardPcgsSearchSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardPcgsSearchSummaryResponse;
};

/**
 * @summary Retrieves a schema for the PCG search filter
 */
export type DashboardPcgSearchSchemaGetResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type DashboardPcgSearchSchemaGetResponseComposite =
  DashboardPcgSearchSchemaGetResponse200;

export type DashboardPcgSearchSchemaGetResponse =
  DashboardPcgSearchSchemaGetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardPcgSearchSchemaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/pcgs/search/schema`;
};

export const DashboardPcgSearchSchemaGet = async (
  options?: RequestInit,
): Promise<DashboardPcgSearchSchemaGetResponse> => {
  const res = await fetch(getV1DashboardPcgSearchSchemaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardPcgSearchSchemaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardPcgSearchSchemaGetResponse;
};

export type ProjectsFilterSummaryResponse200 = {
  data: ProjectsSummary;
  status: 200;
};

export type ProjectsFilterSummaryResponseComposite =
  ProjectsFilterSummaryResponse200;

export type ProjectsFilterSummaryResponse =
  ProjectsFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsFilterSummaryUrl = (
  params?: ProjectsFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/projects`;
};

export const ProjectsFilterSummary = async (
  ProjectsFilterSpec: ProjectsFilterSpec,
  params?: ProjectsFilterSummaryParams,
  options?: RequestInit,
): Promise<ProjectsFilterSummaryResponse> => {
  const res = await fetch(getV1ProjectsFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectsFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsFilterSummaryResponse;
};

/**
 * @summary Retrieves a list of projects metadata
 */
export type ProjectsMetadataResponse200 = {
  data: ProjectsMetadata;
  status: 200;
};

export type ProjectsMetadataResponseComposite = ProjectsMetadataResponse200;

export type ProjectsMetadataResponse = ProjectsMetadataResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsMetadataUrl = (params?: ProjectsMetadataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/projects/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/projects/metadata`;
};

export const ProjectsMetadata = async (
  params?: ProjectsMetadataParams,
  options?: RequestInit,
): Promise<ProjectsMetadataResponse> => {
  const res = await fetch(getV1ProjectsMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsMetadataResponse;
};

/**
 * @summary Retrieves spectro clusters cloud cost summary information
 */
export type DashboardSpectroClustersCostSummaryResponse200 = {
  data: ResourcesCloudCostSummary;
  status: 200;
};

export type DashboardSpectroClustersCostSummaryResponseComposite =
  DashboardSpectroClustersCostSummaryResponse200;

export type DashboardSpectroClustersCostSummaryResponse =
  DashboardSpectroClustersCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersCostSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/cost`;
};

export const DashboardSpectroClustersCostSummary = async (
  SpectroClusterCloudCostSummarySpec: SpectroClusterCloudCostSummarySpec,
  options?: RequestInit,
): Promise<DashboardSpectroClustersCostSummaryResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersCostSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterCloudCostSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersCostSummaryResponse;
};

/**
 * @summary Retrieves a list of running, non rbac configured clusters in a workspace
 */
export type SpectroClustersFiltersWorkspaceResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type SpectroClustersFiltersWorkspaceResponseComposite =
  SpectroClustersFiltersWorkspaceResponse200;

export type SpectroClustersFiltersWorkspaceResponse =
  SpectroClustersFiltersWorkspaceResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersFiltersWorkspaceUrl = (
  params?: SpectroClustersFiltersWorkspaceParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/filters/workspace?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/filters/workspace`;
};

export const SpectroClustersFiltersWorkspace = async (
  params?: SpectroClustersFiltersWorkspaceParams,
  options?: RequestInit,
): Promise<SpectroClustersFiltersWorkspaceResponse> => {
  const res = await fetch(getV1SpectroClustersFiltersWorkspaceUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersFiltersWorkspaceResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersFiltersWorkspaceResponse;
};

/**
 * Returns metadata information for all clusters
 * @summary Get all clusters metadata
 */
export type SpectroClustersMetaGetResponse200 = {
  data: SpectroClustersMeta;
  status: 200;
};

export type SpectroClustersMetaGetResponseComposite =
  SpectroClustersMetaGetResponse200;

export type SpectroClustersMetaGetResponse =
  SpectroClustersMetaGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/meta`;
};

export const SpectroClustersMetaGet = async (
  options?: RequestInit,
): Promise<SpectroClustersMetaGetResponse> => {
  const res = await fetch(getV1SpectroClustersMetaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMetaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMetaGetResponse;
};

/**
 * @summary Retrieves a list of cluster summary metadata
 */
export type SpectroClustersMetadataGetResponse200 = {
  data: SpectroClustersMetadata;
  status: 200;
};

export type SpectroClustersMetadataGetResponseComposite =
  SpectroClustersMetadataGetResponse200;

export type SpectroClustersMetadataGetResponse =
  SpectroClustersMetadataGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataGetUrl = (
  params?: SpectroClustersMetadataGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata`;
};

export const SpectroClustersMetadataGet = async (
  params?: SpectroClustersMetadataGetParams,
  options?: RequestInit,
): Promise<SpectroClustersMetadataGetResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMetadataGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMetadataGetResponse;
};

/**
 * @summary Retrieves a list of cluster summary
 */
export type SpectroClustersMetadataResponse200 = {
  data: SpectroClustersMetadata;
  status: 200;
};

export type SpectroClustersMetadataResponseComposite =
  SpectroClustersMetadataResponse200;

export type SpectroClustersMetadataResponse =
  SpectroClustersMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata`;
};

export const SpectroClustersMetadata = async (
  SpectroClusterMetadataSpec: SpectroClusterMetadataSpec,
  options?: RequestInit,
): Promise<SpectroClustersMetadataResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterMetadataSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMetadataResponse;
};

/**
 * @summary Retrieves a list of cluster metadata with provided search filter spec Supported sort fields - ["environment", "clusterName", "clusterState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type SpectroClustersMetadataSearchResponse200 = {
  data: SpectroClustersMetadataSearch;
  status: 200;
};

export type SpectroClustersMetadataSearchResponseComposite =
  SpectroClustersMetadataSearchResponse200;

export type SpectroClustersMetadataSearchResponse =
  SpectroClustersMetadataSearchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataSearchUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata/search`;
};

export const SpectroClustersMetadataSearch = async (
  SearchFilterSummarySpecBody: SearchFilterSummarySpecBody,
  options?: RequestInit,
): Promise<SpectroClustersMetadataSearchResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataSearchUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMetadataSearchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMetadataSearchResponse;
};

/**
 * @summary Retrieves a schema for the cluster metadata search filter
 */
export type SpectroClustersMetadataSearchSchemaResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type SpectroClustersMetadataSearchSchemaResponseComposite =
  SpectroClustersMetadataSearchSchemaResponse200;

export type SpectroClustersMetadataSearchSchemaResponse =
  SpectroClustersMetadataSearchSchemaResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataSearchSchemaUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata/search/schema`;
};

export const SpectroClustersMetadataSearchSchema = async (
  options?: RequestInit,
): Promise<SpectroClustersMetadataSearchSchemaResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataSearchSchemaUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersMetadataSearchSchemaResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersMetadataSearchSchemaResponse;
};

/**
 * @summary Retrieves a list of clusters with the desired repave state
 */
export type DashboardSpectroClustersRepaveListResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type DashboardSpectroClustersRepaveListResponseComposite =
  DashboardSpectroClustersRepaveListResponse200;

export type DashboardSpectroClustersRepaveListResponse =
  DashboardSpectroClustersRepaveListResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersRepaveListUrl = (
  params?: DashboardSpectroClustersRepaveListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/repaveStatus?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/repaveStatus`;
};

export const DashboardSpectroClustersRepaveList = async (
  params?: DashboardSpectroClustersRepaveListParams,
  options?: RequestInit,
): Promise<DashboardSpectroClustersRepaveListResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersRepaveListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersRepaveListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersRepaveListResponse;
};

/**
 * @summary Retrieves spectro clusters resource consumption
 */
export type SpectroClustersResourcesConsumptionResponse200 = {
  data: ResourcesConsumption;
  status: 200;
};

export type SpectroClustersResourcesConsumptionResponseComposite =
  SpectroClustersResourcesConsumptionResponse200;

export type SpectroClustersResourcesConsumptionResponse =
  SpectroClustersResourcesConsumptionResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersResourcesConsumptionUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/consumption`;
};

export const SpectroClustersResourcesConsumption = async (
  ResourceConsumptionSpecBody: ResourceConsumptionSpecBody,
  options?: RequestInit,
): Promise<SpectroClustersResourcesConsumptionResponse> => {
  const res = await fetch(getV1SpectroClustersResourcesConsumptionUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ResourceConsumptionSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersResourcesConsumptionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersResourcesConsumptionResponse;
};

/**
 * @summary Retrieves spectro clusters resources cost summary information
 */
export type SpectroClustersResourcesCostSummaryResponse200 = {
  data: ResourcesCostSummary;
  status: 200;
};

export type SpectroClustersResourcesCostSummaryResponseComposite =
  SpectroClustersResourcesCostSummaryResponse200;

export type SpectroClustersResourcesCostSummaryResponse =
  SpectroClustersResourcesCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersResourcesCostSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/cost`;
};

export const SpectroClustersResourcesCostSummary = async (
  ResourceCostSummarySpec: ResourceCostSummarySpec,
  options?: RequestInit,
): Promise<SpectroClustersResourcesCostSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersResourcesCostSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ResourceCostSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersResourcesCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersResourcesCostSummaryResponse;
};

/**
 * @summary Retrieves spectro clusters resources usage summary information
 */
export type SpectroClustersResourcesUsageSummaryResponse200 = {
  data: ResourcesUsageSummary;
  status: 200;
};

export type SpectroClustersResourcesUsageSummaryResponseComposite =
  SpectroClustersResourcesUsageSummaryResponse200;

export type SpectroClustersResourcesUsageSummaryResponse =
  SpectroClustersResourcesUsageSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersResourcesUsageSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/usage`;
};

export const SpectroClustersResourcesUsageSummary = async (
  ResourceUsageSummarySpec: ResourceUsageSummarySpec,
  options?: RequestInit,
): Promise<SpectroClustersResourcesUsageSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersResourcesUsageSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ResourceUsageSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersResourcesUsageSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersResourcesUsageSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster summary with provided search filter spec Supported sort fields - ["environment", "clusterName", "memoryUsage", "healthState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type SpectroClustersSearchFilterSummaryResponse200 = {
  data: SpectroClustersSummary;
  status: 200;
};

export type SpectroClustersSearchFilterSummaryResponseComposite =
  SpectroClustersSearchFilterSummaryResponse200;

export type SpectroClustersSearchFilterSummaryResponse =
  SpectroClustersSearchFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSearchFilterSummaryUrl = (
  params?: SpectroClustersSearchFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search`;
};

export const SpectroClustersSearchFilterSummary = async (
  SearchFilterSummarySpecBody: SearchFilterSummarySpecBody,
  params?: SpectroClustersSearchFilterSummaryParams,
  options?: RequestInit,
): Promise<SpectroClustersSearchFilterSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersSearchFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SearchFilterSummarySpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersSearchFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersSearchFilterSummaryResponse;
};

/**
 * @summary Export and download the list of cluster summary with matching search filter and download as a file(csv)
 */
export type DashboardClustersSearchSummaryExportGetResponse200 = {
  data: Blob;
  status: 200;
};

export type DashboardClustersSearchSummaryExportGetResponseComposite =
  DashboardClustersSearchSummaryExportGetResponse200;

export type DashboardClustersSearchSummaryExportGetResponse =
  DashboardClustersSearchSummaryExportGetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardClustersSearchSummaryExportGetUrl = (
  params?: DashboardClustersSearchSummaryExportGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export`;
};

export const DashboardClustersSearchSummaryExportGet = async (
  params?: DashboardClustersSearchSummaryExportGetParams,
  options?: RequestInit,
): Promise<DashboardClustersSearchSummaryExportGetResponse> => {
  const res = await fetch(
    getV1DashboardClustersSearchSummaryExportGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardClustersSearchSummaryExportGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardClustersSearchSummaryExportGetResponse;
};

/**
 * @summary Export the list of cluster summary with matching search filter and download as a file(csv) Supported sort fields - ["environment", "clusterName", "healthState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type DashboardClustersSearchSummaryExportResponse200 = {
  data: Blob;
  status: 200;
};

export type DashboardClustersSearchSummaryExportResponseComposite =
  DashboardClustersSearchSummaryExportResponse200;

export type DashboardClustersSearchSummaryExportResponse =
  DashboardClustersSearchSummaryExportResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardClustersSearchSummaryExportUrl = (
  params?: DashboardClustersSearchSummaryExportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export`;
};

export const DashboardClustersSearchSummaryExport = async (
  SearchFilterSummarySpecBody: SearchFilterSummarySpecBody,
  params?: DashboardClustersSearchSummaryExportParams,
  options?: RequestInit,
): Promise<DashboardClustersSearchSummaryExportResponse> => {
  const res = await fetch(
    getV1DashboardClustersSearchSummaryExportUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(SearchFilterSummarySpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardClustersSearchSummaryExportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardClustersSearchSummaryExportResponse;
};

/**
 * @summary Retrieves a supported input values for the cluster search filter
 */
export type DashboardSpectroClustersSearchInputResponse200 = {
  data: ClusterSearchInputSpec;
  status: 200;
};

export type DashboardSpectroClustersSearchInputResponseComposite =
  DashboardSpectroClustersSearchInputResponse200;

export type DashboardSpectroClustersSearchInputResponse =
  DashboardSpectroClustersSearchInputResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersSearchInputUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/input`;
};

export const DashboardSpectroClustersSearchInput = async (
  options?: RequestInit,
): Promise<DashboardSpectroClustersSearchInputResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersSearchInputUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersSearchInputResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersSearchInputResponse;
};

/**
 * @summary Retrieves a schema for the cluster search filter
 */
export type SpectroClustersSearchSchemaResponse200 = {
  data: SearchFilterSchemaSpec;
  status: 200;
};

export type SpectroClustersSearchSchemaResponseComposite =
  SpectroClustersSearchSchemaResponse200;

export type SpectroClustersSearchSchemaResponse =
  SpectroClustersSearchSchemaResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSearchSchemaUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/schema`;
};

export const SpectroClustersSearchSchema = async (
  options?: RequestInit,
): Promise<SpectroClustersSearchSchemaResponse> => {
  const res = await fetch(getV1SpectroClustersSearchSchemaUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersSearchSchemaResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersSearchSchemaResponse;
};

/**
 * @summary Retrieves a list of Virtual machine enabled clusters
 */
export type DashboardVMEnabledClustersListResponse200 = {
  data: VMClusters;
  status: 200;
};

export type DashboardVMEnabledClustersListResponseComposite =
  DashboardVMEnabledClustersListResponse200;

export type DashboardVMEnabledClustersListResponse =
  DashboardVMEnabledClustersListResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardVMEnabledClustersListUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/vms`;
};

export const DashboardVMEnabledClustersList = async (
  options?: RequestInit,
): Promise<DashboardVMEnabledClustersListResponse> => {
  const res = await fetch(getV1DashboardVMEnabledClustersListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardVMEnabledClustersListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardVMEnabledClustersListResponse;
};

/**
 * @summary Returns the specified cluster summary
 */
export type SpectroClustersSummaryUidResponse200 = {
  data: SpectroClusterUidSummary;
  status: 200;
};

export type SpectroClustersSummaryUidResponseComposite =
  SpectroClustersSummaryUidResponse200;

export type SpectroClustersSummaryUidResponse =
  SpectroClustersSummaryUidResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSummaryUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}`;
};

export const SpectroClustersSummaryUid = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersSummaryUidResponse> => {
  const res = await fetch(getV1SpectroClustersSummaryUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersSummaryUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersSummaryUidResponse;
};

/**
 * @summary Retrieves the specified cluster cost summary
 */
export type SpectroClustersUidCostSummaryResponse200 = {
  data: SpectroClusterCostSummary;
  status: 200;
};

export type SpectroClustersUidCostSummaryResponseComposite =
  SpectroClustersUidCostSummaryResponse200;

export type SpectroClustersUidCostSummaryResponse =
  SpectroClustersUidCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidCostSummaryUrl = (
  uid: string,
  params?: SpectroClustersUidCostSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/cost?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/cost`;
};

export const SpectroClustersUidCostSummary = async (
  uid: string,
  params?: SpectroClustersUidCostSummaryParams,
  options?: RequestInit,
): Promise<SpectroClustersUidCostSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersUidCostSummaryUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidCostSummaryResponse;
};

/**
 * @summary Returns the specified cluster summary overview
 */
export type SpectroClustersSummaryUidOverviewResponse200 = {
  data: SpectroClusterUidSummary;
  status: 200;
};

export type SpectroClustersSummaryUidOverviewResponseComposite =
  SpectroClustersSummaryUidOverviewResponse200;

export type SpectroClustersSummaryUidOverviewResponse =
  SpectroClustersSummaryUidOverviewResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSummaryUidOverviewUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/overview`;
};

export const SpectroClustersSummaryUidOverview = async (
  uid: string,
  options?: RequestInit,
): Promise<SpectroClustersSummaryUidOverviewResponse> => {
  const res = await fetch(getV1SpectroClustersSummaryUidOverviewUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersSummaryUidOverviewResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersSummaryUidOverviewResponse;
};

/**
 * @summary Retrieves specified spectro cluster resource consumption
 */
export type SpectroClustersUidResourcesConsumptionResponse200 = {
  data: ResourcesConsumption;
  status: 200;
};

export type SpectroClustersUidResourcesConsumptionResponseComposite =
  SpectroClustersUidResourcesConsumptionResponse200;

export type SpectroClustersUidResourcesConsumptionResponse =
  SpectroClustersUidResourcesConsumptionResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidResourcesConsumptionUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/resources/consumption`;
};

export const SpectroClustersUidResourcesConsumption = async (
  uid: string,
  ResourceConsumptionSpecBody: ResourceConsumptionSpecBody,
  options?: RequestInit,
): Promise<SpectroClustersUidResourcesConsumptionResponse> => {
  const res = await fetch(getV1SpectroClustersUidResourcesConsumptionUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ResourceConsumptionSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SpectroClustersUidResourcesConsumptionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SpectroClustersUidResourcesConsumptionResponse;
};

/**
 * @summary Retrieves specified cluster workloads
 */
export type DashboardSpectroClustersUidWorkloadsResponse200 = {
  data: ClusterWorkload;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsResponseComposite =
  DashboardSpectroClustersUidWorkloadsResponse200;

export type DashboardSpectroClustersUidWorkloadsResponse =
  DashboardSpectroClustersUidWorkloadsResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads`;
};

export const DashboardSpectroClustersUidWorkloads = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersUidWorkloadsUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterWorkloadsSpecBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsResponse;
};

/**
 * @summary Retrieves specified cluster workload clusterrolebindings
 */
export type DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse200 =
  {
    data: ClusterWorkloadRoleBindings;
    status: 200;
  };

export type DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponseComposite =
  DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse200;

export type DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse =
  DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsClusterRoleBindingUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/clusterrolebinding`;
};

export const DashboardSpectroClustersUidWorkloadsClusterRoleBinding = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsClusterRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse;
};

/**
 * @summary Retrieves specified cluster workload cronjobs
 */
export type DashboardSpectroClustersUidWorkloadsCronJobResponse200 = {
  data: ClusterWorkloadCronJobs;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsCronJobResponseComposite =
  DashboardSpectroClustersUidWorkloadsCronJobResponse200;

export type DashboardSpectroClustersUidWorkloadsCronJobResponse =
  DashboardSpectroClustersUidWorkloadsCronJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsCronJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/cronjob`;
};

export const DashboardSpectroClustersUidWorkloadsCronJob = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsCronJobResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsCronJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsCronJobResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsCronJobResponse;
};

/**
 * @summary Retrieves specified cluster workload daemonsets
 */
export type DashboardSpectroClustersUidWorkloadsDaemonSetResponse200 = {
  data: ClusterWorkloadDaemonSets;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsDaemonSetResponseComposite =
  DashboardSpectroClustersUidWorkloadsDaemonSetResponse200;

export type DashboardSpectroClustersUidWorkloadsDaemonSetResponse =
  DashboardSpectroClustersUidWorkloadsDaemonSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsDaemonSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/daemonset`;
};

export const DashboardSpectroClustersUidWorkloadsDaemonSet = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsDaemonSetResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsDaemonSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsDaemonSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsDaemonSetResponse;
};

/**
 * @summary Retrieves specified cluster workload deployments
 */
export type DashboardSpectroClustersUidWorkloadsDeploymentResponse200 = {
  data: ClusterWorkloadDeployments;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsDeploymentResponseComposite =
  DashboardSpectroClustersUidWorkloadsDeploymentResponse200;

export type DashboardSpectroClustersUidWorkloadsDeploymentResponse =
  DashboardSpectroClustersUidWorkloadsDeploymentResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsDeploymentUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/deployment`;
};

export const DashboardSpectroClustersUidWorkloadsDeployment = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsDeploymentResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsDeploymentUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsDeploymentResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsDeploymentResponse;
};

/**
 * @summary Retrieves specified cluster workload jobs
 */
export type DashboardSpectroClustersUidWorkloadsJobResponse200 = {
  data: ClusterWorkloadJobs;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsJobResponseComposite =
  DashboardSpectroClustersUidWorkloadsJobResponse200;

export type DashboardSpectroClustersUidWorkloadsJobResponse =
  DashboardSpectroClustersUidWorkloadsJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/job`;
};

export const DashboardSpectroClustersUidWorkloadsJob = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsJobResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsJobResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsJobResponse;
};

/**
 * @summary Retrieves specified cluster workload namespaces
 */
export type DashboardSpectroClustersUidWorkloadsNamespaceResponse200 = {
  data: ClusterWorkloadNamespaces;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsNamespaceResponseComposite =
  DashboardSpectroClustersUidWorkloadsNamespaceResponse200;

export type DashboardSpectroClustersUidWorkloadsNamespaceResponse =
  DashboardSpectroClustersUidWorkloadsNamespaceResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsNamespaceUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/namespace`;
};

export const DashboardSpectroClustersUidWorkloadsNamespace = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsNamespaceResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsNamespaceUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsNamespaceResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsNamespaceResponse;
};

/**
 * @summary Retrieves specified cluster workload pods
 */
export type DashboardSpectroClustersUidWorkloadsPodResponse200 = {
  data: ClusterWorkloadPods;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsPodResponseComposite =
  DashboardSpectroClustersUidWorkloadsPodResponse200;

export type DashboardSpectroClustersUidWorkloadsPodResponse =
  DashboardSpectroClustersUidWorkloadsPodResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsPodUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/pod`;
};

export const DashboardSpectroClustersUidWorkloadsPod = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsPodResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsPodUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsPodResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsPodResponse;
};

/**
 * @summary Retrieves specified cluster workload rolebindings
 */
export type DashboardSpectroClustersUidWorkloadsRoleBindingResponse200 = {
  data: ClusterWorkloadRoleBindings;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsRoleBindingResponseComposite =
  DashboardSpectroClustersUidWorkloadsRoleBindingResponse200;

export type DashboardSpectroClustersUidWorkloadsRoleBindingResponse =
  DashboardSpectroClustersUidWorkloadsRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsRoleBindingUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/rolebinding`;
};

export const DashboardSpectroClustersUidWorkloadsRoleBinding = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsRoleBindingResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsRoleBindingResponse;
};

/**
 * @summary Retrieves specified cluster workload statefulsets
 */
export type DashboardSpectroClustersUidWorkloadsStatefulSetResponse200 = {
  data: ClusterWorkloadStatefulSets;
  status: 200;
};

export type DashboardSpectroClustersUidWorkloadsStatefulSetResponseComposite =
  DashboardSpectroClustersUidWorkloadsStatefulSetResponse200;

export type DashboardSpectroClustersUidWorkloadsStatefulSetResponse =
  DashboardSpectroClustersUidWorkloadsStatefulSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsStatefulSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/statefulset`;
};

export const DashboardSpectroClustersUidWorkloadsStatefulSet = async (
  uid: string,
  ClusterWorkloadsSpecBody: ClusterWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardSpectroClustersUidWorkloadsStatefulSetResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsStatefulSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardSpectroClustersUidWorkloadsStatefulSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardSpectroClustersUidWorkloadsStatefulSetResponse;
};

/**
 * @summary Retrieves a list of workspace
 */
export type DashboardWorkspacesListResponse200 = {
  data: DashboardWorkspaces;
  status: 200;
};

export type DashboardWorkspacesListResponseComposite =
  DashboardWorkspacesListResponse200;

export type DashboardWorkspacesListResponse =
  DashboardWorkspacesListResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesListUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces`;
};

export const DashboardWorkspacesList = async (
  options?: RequestInit,
): Promise<DashboardWorkspacesListResponse> => {
  const res = await fetch(getV1DashboardWorkspacesListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesListResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload clusterrolebindings
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse200 =
  {
    data: WorkspaceClustersWorkloadRoleBindings;
    status: 200;
  };

export type DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/clusterrolebinding`;
  };

export const DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding =
  async (
    uid: string,
    WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
    options?: RequestInit,
  ): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse> => {
    const res = await fetch(
      getV1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingUrl(
        uid,
      ),
      {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(WorkspaceWorkloadsSpecBody),
      },
    );

    const body = [204, 205, 304].includes(res.status) ? null : await res.text();
    const data: DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse["data"] =
      body ? JSON.parse(body) : {};

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse;
  };

/**
 * @summary Retrieves specified workspace clusters workload cronjobs
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse200 = {
  data: WorkspaceClustersWorkloadCronJobs;
  status: 200;
};

export type DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/cronjob`;
};

export const DashboardWorkspacesUidSpectroClustersWorkloadsCronJob = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload daemonsets
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse200 =
  {
    data: WorkspaceClustersWorkloadDaemonSets;
    status: 200;
  };

export type DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/daemonset`;
};

export const DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload deployments
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse200 =
  {
    data: WorkspaceClustersWorkloadDeployments;
    status: 200;
  };

export type DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/deployment`;
  };

export const DashboardWorkspacesUidSpectroClustersWorkloadsDeployment = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload jobs
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse200 = {
  data: WorkspaceClustersWorkloadJobs;
  status: 200;
};

export type DashboardWorkspacesUidSpectroClustersWorkloadsJobResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/job`;
};

export const DashboardWorkspacesUidSpectroClustersWorkloadsJob = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload namespaces
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse200 =
  {
    data: WorkspaceClustersWorkloadNamespaces;
    status: 200;
  };

export type DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/namespace`;
};

export const DashboardWorkspacesUidSpectroClustersWorkloadsNamespace = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload pods
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse200 = {
  data: WorkspaceClustersWorkloadPods;
  status: 200;
};

export type DashboardWorkspacesUidSpectroClustersWorkloadsPodResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsPodResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsPodUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/pod`;
};

export const DashboardWorkspacesUidSpectroClustersWorkloadsPod = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsPodUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload rolebindings
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse200 =
  {
    data: WorkspaceClustersWorkloadRoleBindings;
    status: 200;
  };

export type DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/rolebinding`;
  };

export const DashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload statefulsets
 */
export type DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse200 =
  {
    data: WorkspaceClustersWorkloadStatefulSets;
    status: 200;
  };

export type DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponseComposite =
  DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse200;

export type DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse =
  DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/statefulset`;
  };

export const DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet = async (
  uid: string,
  WorkspaceWorkloadsSpecBody: WorkspaceWorkloadsSpecBody,
  options?: RequestInit,
): Promise<DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(WorkspaceWorkloadsSpecBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse;
};
