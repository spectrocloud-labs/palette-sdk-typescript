/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ClusterProfile,
  DeletedMsg,
  IpPools,
  OverloadVsphereOva,
  Overlord,
  OverlordMaasAccountCreate,
  OverlordMaasAccountEntity,
  OverlordManifest,
  OverlordMigrateEntity,
  OverlordOpenStackAccountCreate,
  OverlordOpenStackAccountEntity,
  OverlordVsphereAccountCreate,
  OverlordVsphereAccountEntity,
  Overlords,
  OverlordsListParams,
  OverlordsOpenStackManifestParams,
  OverlordsPairingCodeParams,
  OverlordsUidMaasAccountValidateBody,
  OverlordsUidOpenStackAccountValidateBody,
  OverlordsUidVsphereAccountValidateBody,
  OverlordsUidVsphereComputeclusterResParams,
  OverlordsVsphereManifestParams,
  PairingCode,
  Uid,
  UpdatedMsg,
  V1IpPoolInputEntityBody,
  V1ObjectMetaInputEntitySchemaBody,
  V1OverlordMaasCloudConfigBody,
  V1OverlordOpenStackCloudConfigBody,
  V1OverlordVsphereCloudConfigBody,
  V1OverlordsMaasManifestParams,
  VsphereComputeClusterResources,
  VsphereDatacenters,
} from ".././schemas";

/**
 * @summary Retrieves a list of overlords owned by the tenant
 */
export type overlordsListResponse200 = {
  data: Overlords;
  status: 200;
};

export type overlordsListResponseComposite = overlordsListResponse200;

export type overlordsListResponse = overlordsListResponseComposite & {
  headers: Headers;
};

export const getOverlordsListUrl = (params?: OverlordsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords`;
};

export const overlordsList = async (
  params?: OverlordsListParams,
  options?: RequestInit,
): Promise<overlordsListResponse> => {
  const res = await fetch(getOverlordsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsListResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type v1OverlordsMaasManifestResponse200 = {
  data: OverlordManifest;
  status: 200;
};

export type v1OverlordsMaasManifestResponseComposite =
  v1OverlordsMaasManifestResponse200;

export type v1OverlordsMaasManifestResponse =
  v1OverlordsMaasManifestResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsMaasManifestUrl = (
  params: V1OverlordsMaasManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/maas/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/maas/manifest`;
};

export const v1OverlordsMaasManifest = async (
  params: V1OverlordsMaasManifestParams,
  options?: RequestInit,
): Promise<v1OverlordsMaasManifestResponse> => {
  const res = await fetch(getV1OverlordsMaasManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsMaasManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsMaasManifestResponse;
};

/**
 * @summary create the maas cloudaccount for the private gateway
 */
export type overlordsUidMaasAccountCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type overlordsUidMaasAccountCreateResponseComposite =
  overlordsUidMaasAccountCreateResponse201;

export type overlordsUidMaasAccountCreateResponse =
  overlordsUidMaasAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidMaasAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account`;
};

export const overlordsUidMaasAccountCreate = async (
  uid: string,
  overlordMaasAccountCreate: OverlordMaasAccountCreate,
  options?: RequestInit,
): Promise<overlordsUidMaasAccountCreateResponse> => {
  const res = await fetch(getOverlordsUidMaasAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordMaasAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidMaasAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidMaasAccountCreateResponse;
};

/**
 * @summary update the maas cloudaccount for the private gateway
 */
export type overlordsUidMaasAccountUpdateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidMaasAccountUpdateResponseComposite =
  overlordsUidMaasAccountUpdateResponse204;

export type overlordsUidMaasAccountUpdateResponse =
  overlordsUidMaasAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidMaasAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account`;
};

export const overlordsUidMaasAccountUpdate = async (
  uid: string,
  overlordMaasAccountEntity: OverlordMaasAccountEntity,
  options?: RequestInit,
): Promise<overlordsUidMaasAccountUpdateResponse> => {
  const res = await fetch(getOverlordsUidMaasAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordMaasAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidMaasAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidMaasAccountUpdateResponse;
};

/**
 * @summary validate the maas cloudaccount for the private gateway
 */
export type overlordsUidMaasAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidMaasAccountValidateResponseComposite =
  overlordsUidMaasAccountValidateResponse204;

export type overlordsUidMaasAccountValidateResponse =
  overlordsUidMaasAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidMaasAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account/validate`;
};

export const overlordsUidMaasAccountValidate = async (
  uid: string,
  overlordsUidMaasAccountValidateBody: OverlordsUidMaasAccountValidateBody,
  options?: RequestInit,
): Promise<overlordsUidMaasAccountValidateResponse> => {
  const res = await fetch(getOverlordsUidMaasAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordsUidMaasAccountValidateBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidMaasAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidMaasAccountValidateResponse;
};

/**
 * @summary create the maas cloud config for the private gateway
 */
export type v1OverlordsUidMaasCloudConfigCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type v1OverlordsUidMaasCloudConfigCreateResponseComposite =
  v1OverlordsUidMaasCloudConfigCreateResponse201;

export type v1OverlordsUidMaasCloudConfigCreateResponse =
  v1OverlordsUidMaasCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/cloudconfig`;
};

export const v1OverlordsUidMaasCloudConfigCreate = async (
  uid: string,
  v1OverlordMaasCloudConfigBody: V1OverlordMaasCloudConfigBody,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasCloudConfigCreateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordMaasCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasCloudConfigCreateResponse;
};

/**
 * @summary update the maas cloud config for the private gateway
 */
export type v1OverlordsUidMaasCloudConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1OverlordsUidMaasCloudConfigUpdateResponseComposite =
  v1OverlordsUidMaasCloudConfigUpdateResponse204;

export type v1OverlordsUidMaasCloudConfigUpdateResponse =
  v1OverlordsUidMaasCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/cloudconfig`;
};

export const v1OverlordsUidMaasCloudConfigUpdate = async (
  uid: string,
  v1OverlordMaasCloudConfigBody: V1OverlordMaasCloudConfigBody,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasCloudConfigUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordMaasCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified maas private gateway cluster profile
 */
export type overlordsUidMaasClusterProfileResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type overlordsUidMaasClusterProfileResponseComposite =
  overlordsUidMaasClusterProfileResponse200;

export type overlordsUidMaasClusterProfileResponse =
  overlordsUidMaasClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidMaasClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/clusterprofile`;
};

export const overlordsUidMaasClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidMaasClusterProfileResponse> => {
  const res = await fetch(getOverlordsUidMaasClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidMaasClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidMaasClusterProfileResponse;
};

/**
 * @summary migrate all the clusters from source overlord to target overlord
 */
export type v1OverlordsMigrateResponse204 = {
  data: void;
  status: 204;
};

export type v1OverlordsMigrateResponseComposite = v1OverlordsMigrateResponse204;

export type v1OverlordsMigrateResponse = v1OverlordsMigrateResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsMigrateUrl = () => {
  return `https://api.spectrocloud.com/v1/overlords/migrate`;
};

export const v1OverlordsMigrate = async (
  overlordMigrateEntity: OverlordMigrateEntity,
  options?: RequestInit,
): Promise<v1OverlordsMigrateResponse> => {
  const res = await fetch(getV1OverlordsMigrateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordMigrateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsMigrateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsMigrateResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type overlordsOpenStackManifestResponse200 = {
  data: OverlordManifest;
  status: 200;
};

export type overlordsOpenStackManifestResponseComposite =
  overlordsOpenStackManifestResponse200;

export type overlordsOpenStackManifestResponse =
  overlordsOpenStackManifestResponseComposite & {
    headers: Headers;
  };

export const getOverlordsOpenStackManifestUrl = (
  params: OverlordsOpenStackManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/openstack/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/openstack/manifest`;
};

export const overlordsOpenStackManifest = async (
  params: OverlordsOpenStackManifestParams,
  options?: RequestInit,
): Promise<overlordsOpenStackManifestResponse> => {
  const res = await fetch(getOverlordsOpenStackManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsOpenStackManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsOpenStackManifestResponse;
};

/**
 * @summary create the OpenStack cloudaccount for the private gateway
 */
export type overlordsUidOpenStackAccountCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type overlordsUidOpenStackAccountCreateResponseComposite =
  overlordsUidOpenStackAccountCreateResponse201;

export type overlordsUidOpenStackAccountCreateResponse =
  overlordsUidOpenStackAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidOpenStackAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account`;
};

export const overlordsUidOpenStackAccountCreate = async (
  uid: string,
  overlordOpenStackAccountCreate: OverlordOpenStackAccountCreate,
  options?: RequestInit,
): Promise<overlordsUidOpenStackAccountCreateResponse> => {
  const res = await fetch(getOverlordsUidOpenStackAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordOpenStackAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidOpenStackAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidOpenStackAccountCreateResponse;
};

/**
 * @summary update the OpenStack cloudaccount for the private gateway
 */
export type overlordsUidOpenStackAccountUpdateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidOpenStackAccountUpdateResponseComposite =
  overlordsUidOpenStackAccountUpdateResponse204;

export type overlordsUidOpenStackAccountUpdateResponse =
  overlordsUidOpenStackAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidOpenStackAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account`;
};

export const overlordsUidOpenStackAccountUpdate = async (
  uid: string,
  overlordOpenStackAccountEntity: OverlordOpenStackAccountEntity,
  options?: RequestInit,
): Promise<overlordsUidOpenStackAccountUpdateResponse> => {
  const res = await fetch(getOverlordsUidOpenStackAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordOpenStackAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidOpenStackAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidOpenStackAccountUpdateResponse;
};

/**
 * @summary validate the OpenStack cloudaccount for the private gateway
 */
export type overlordsUidOpenStackAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidOpenStackAccountValidateResponseComposite =
  overlordsUidOpenStackAccountValidateResponse204;

export type overlordsUidOpenStackAccountValidateResponse =
  overlordsUidOpenStackAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidOpenStackAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account/validate`;
};

export const overlordsUidOpenStackAccountValidate = async (
  uid: string,
  overlordsUidOpenStackAccountValidateBody: OverlordsUidOpenStackAccountValidateBody,
  options?: RequestInit,
): Promise<overlordsUidOpenStackAccountValidateResponse> => {
  const res = await fetch(getOverlordsUidOpenStackAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordsUidOpenStackAccountValidateBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidOpenStackAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidOpenStackAccountValidateResponse;
};

/**
 * @summary create the OpenStack cloud config for the private gateway
 */
export type overlordsUidOpenStackCloudConfigCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type overlordsUidOpenStackCloudConfigCreateResponseComposite =
  overlordsUidOpenStackCloudConfigCreateResponse201;

export type overlordsUidOpenStackCloudConfigCreateResponse =
  overlordsUidOpenStackCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidOpenStackCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/cloudconfig`;
};

export const overlordsUidOpenStackCloudConfigCreate = async (
  uid: string,
  v1OverlordOpenStackCloudConfigBody: V1OverlordOpenStackCloudConfigBody,
  options?: RequestInit,
): Promise<overlordsUidOpenStackCloudConfigCreateResponse> => {
  const res = await fetch(getOverlordsUidOpenStackCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordOpenStackCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidOpenStackCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidOpenStackCloudConfigCreateResponse;
};

/**
 * @summary update the OpenStack cloud config for the private gateway
 */
export type overlordsUidOpenStackCloudConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidOpenStackCloudConfigUpdateResponseComposite =
  overlordsUidOpenStackCloudConfigUpdateResponse204;

export type overlordsUidOpenStackCloudConfigUpdateResponse =
  overlordsUidOpenStackCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidOpenStackCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/cloudconfig`;
};

export const overlordsUidOpenStackCloudConfigUpdate = async (
  uid: string,
  v1OverlordOpenStackCloudConfigBody: V1OverlordOpenStackCloudConfigBody,
  options?: RequestInit,
): Promise<overlordsUidOpenStackCloudConfigUpdateResponse> => {
  const res = await fetch(getOverlordsUidOpenStackCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordOpenStackCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidOpenStackCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidOpenStackCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified OpenStack private gateway cluster profile
 */
export type overlordsUidOpenStackClusterProfileResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type overlordsUidOpenStackClusterProfileResponseComposite =
  overlordsUidOpenStackClusterProfileResponse200;

export type overlordsUidOpenStackClusterProfileResponse =
  overlordsUidOpenStackClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidOpenStackClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/clusterprofile`;
};

export const overlordsUidOpenStackClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidOpenStackClusterProfileResponse> => {
  const res = await fetch(getOverlordsUidOpenStackClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidOpenStackClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidOpenStackClusterProfileResponse;
};

/**
 * @summary Returns the pairing code for the private gateway
 */
export type overlordsPairingCodeResponse200 = {
  data: PairingCode;
  status: 200;
};

export type overlordsPairingCodeResponseComposite =
  overlordsPairingCodeResponse200;

export type overlordsPairingCodeResponse =
  overlordsPairingCodeResponseComposite & {
    headers: Headers;
  };

export const getOverlordsPairingCodeUrl = (
  params?: OverlordsPairingCodeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/pairing/code?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/pairing/code`;
};

export const overlordsPairingCode = async (
  params?: OverlordsPairingCodeParams,
  options?: RequestInit,
): Promise<overlordsPairingCodeResponse> => {
  const res = await fetch(getOverlordsPairingCodeUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsPairingCodeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsPairingCodeResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type overlordsVsphereManifestResponse200 = {
  data: OverlordManifest;
  status: 200;
};

export type overlordsVsphereManifestResponseComposite =
  overlordsVsphereManifestResponse200;

export type overlordsVsphereManifestResponse =
  overlordsVsphereManifestResponseComposite & {
    headers: Headers;
  };

export const getOverlordsVsphereManifestUrl = (
  params: OverlordsVsphereManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/vsphere/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/vsphere/manifest`;
};

export const overlordsVsphereManifest = async (
  params: OverlordsVsphereManifestParams,
  options?: RequestInit,
): Promise<overlordsVsphereManifestResponse> => {
  const res = await fetch(getOverlordsVsphereManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsVsphereManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsVsphereManifestResponse;
};

/**
 * @summary Returns overlord's ova information
 */
export type overlordsVsphereOvaGetResponse200 = {
  data: OverloadVsphereOva;
  status: 200;
};

export type overlordsVsphereOvaGetResponseComposite =
  overlordsVsphereOvaGetResponse200;

export type overlordsVsphereOvaGetResponse =
  overlordsVsphereOvaGetResponseComposite & {
    headers: Headers;
  };

export const getOverlordsVsphereOvaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/ova`;
};

export const overlordsVsphereOvaGet = async (
  options?: RequestInit,
): Promise<overlordsVsphereOvaGetResponse> => {
  const res = await fetch(getOverlordsVsphereOvaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsVsphereOvaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsVsphereOvaGetResponse;
};

/**
 * @summary create the vSphere cloudaccount for the private gateway
 */
export type overlordsUidVsphereAccountCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type overlordsUidVsphereAccountCreateResponseComposite =
  overlordsUidVsphereAccountCreateResponse201;

export type overlordsUidVsphereAccountCreateResponse =
  overlordsUidVsphereAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account`;
};

export const overlordsUidVsphereAccountCreate = async (
  uid: string,
  overlordVsphereAccountCreate: OverlordVsphereAccountCreate,
  options?: RequestInit,
): Promise<overlordsUidVsphereAccountCreateResponse> => {
  const res = await fetch(getOverlordsUidVsphereAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordVsphereAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereAccountCreateResponse;
};

/**
 * @summary update the vSphere cloudaccount for the private gateway
 */
export type overlordsUidVsphereAccountUpdateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidVsphereAccountUpdateResponseComposite =
  overlordsUidVsphereAccountUpdateResponse204;

export type overlordsUidVsphereAccountUpdateResponse =
  overlordsUidVsphereAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account`;
};

export const overlordsUidVsphereAccountUpdate = async (
  uid: string,
  overlordVsphereAccountEntity: OverlordVsphereAccountEntity,
  options?: RequestInit,
): Promise<overlordsUidVsphereAccountUpdateResponse> => {
  const res = await fetch(getOverlordsUidVsphereAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordVsphereAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereAccountUpdateResponse;
};

/**
 * @summary validate the vSphere cloudaccount for the private gateway
 */
export type overlordsUidVsphereAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidVsphereAccountValidateResponseComposite =
  overlordsUidVsphereAccountValidateResponse204;

export type overlordsUidVsphereAccountValidateResponse =
  overlordsUidVsphereAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account/validate`;
};

export const overlordsUidVsphereAccountValidate = async (
  uid: string,
  overlordsUidVsphereAccountValidateBody: OverlordsUidVsphereAccountValidateBody,
  options?: RequestInit,
): Promise<overlordsUidVsphereAccountValidateResponse> => {
  const res = await fetch(getOverlordsUidVsphereAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(overlordsUidVsphereAccountValidateBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereAccountValidateResponse;
};

/**
 * @summary create the vSphere cloud config for the private gateway
 */
export type overlordsUidVsphereCloudConfigCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type overlordsUidVsphereCloudConfigCreateResponseComposite =
  overlordsUidVsphereCloudConfigCreateResponse201;

export type overlordsUidVsphereCloudConfigCreateResponse =
  overlordsUidVsphereCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/cloudconfig`;
};

export const overlordsUidVsphereCloudConfigCreate = async (
  uid: string,
  v1OverlordVsphereCloudConfigBody: V1OverlordVsphereCloudConfigBody,
  options?: RequestInit,
): Promise<overlordsUidVsphereCloudConfigCreateResponse> => {
  const res = await fetch(getOverlordsUidVsphereCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordVsphereCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereCloudConfigCreateResponse;
};

/**
 * @summary update the vSphere cloud config for the private gateway
 */
export type overlordsUidVsphereCloudConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidVsphereCloudConfigUpdateResponseComposite =
  overlordsUidVsphereCloudConfigUpdateResponse204;

export type overlordsUidVsphereCloudConfigUpdateResponse =
  overlordsUidVsphereCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/cloudconfig`;
};

export const overlordsUidVsphereCloudConfigUpdate = async (
  uid: string,
  v1OverlordVsphereCloudConfigBody: V1OverlordVsphereCloudConfigBody,
  options?: RequestInit,
): Promise<overlordsUidVsphereCloudConfigUpdateResponse> => {
  const res = await fetch(getOverlordsUidVsphereCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordVsphereCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified vsphere private gateway cluster profile
 */
export type overlordsUidVsphereClusterProfileResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type overlordsUidVsphereClusterProfileResponseComposite =
  overlordsUidVsphereClusterProfileResponse200;

export type overlordsUidVsphereClusterProfileResponse =
  overlordsUidVsphereClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/clusterprofile`;
};

export const overlordsUidVsphereClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidVsphereClusterProfileResponse> => {
  const res = await fetch(getOverlordsUidVsphereClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereClusterProfileResponse;
};

/**
 * @summary Retrieves a list of IP Pools for the specified private gateway
 */
export type overlordsUidPoolsListResponse200 = {
  data: IpPools;
  status: 200;
};

export type overlordsUidPoolsListResponseComposite =
  overlordsUidPoolsListResponse200;

export type overlordsUidPoolsListResponse =
  overlordsUidPoolsListResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidPoolsListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools`;
};

export const overlordsUidPoolsList = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidPoolsListResponse> => {
  const res = await fetch(getOverlordsUidPoolsListUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidPoolsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidPoolsListResponse;
};

/**
 * @summary Creates an IP pool defintion for the sepcified private gateway
 */
export type overlordsUidPoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type overlordsUidPoolCreateResponseComposite =
  overlordsUidPoolCreateResponse201;

export type overlordsUidPoolCreateResponse =
  overlordsUidPoolCreateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidPoolCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools`;
};

export const overlordsUidPoolCreate = async (
  uid: string,
  v1IpPoolInputEntityBody: V1IpPoolInputEntityBody,
  options?: RequestInit,
): Promise<overlordsUidPoolCreateResponse> => {
  const res = await fetch(getOverlordsUidPoolCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1IpPoolInputEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidPoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidPoolCreateResponse;
};

/**
 * @summary Deletes the private gateways's specified IP Pool data
 */
export type overlordsUidPoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidPoolDeleteResponseComposite =
  overlordsUidPoolDeleteResponse204;

export type overlordsUidPoolDeleteResponse =
  overlordsUidPoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidPoolDeleteUrl = (uid: string, poolUid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools/${poolUid}`;
};

export const overlordsUidPoolDelete = async (
  uid: string,
  poolUid: string,
  options?: RequestInit,
): Promise<overlordsUidPoolDeleteResponse> => {
  const res = await fetch(getOverlordsUidPoolDeleteUrl(uid, poolUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidPoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidPoolDeleteResponse;
};

/**
 * @summary Updates the private gateways's specified IP Pool data
 */
export type overlordsUidPoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidPoolUpdateResponseComposite =
  overlordsUidPoolUpdateResponse204;

export type overlordsUidPoolUpdateResponse =
  overlordsUidPoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidPoolUpdateUrl = (uid: string, poolUid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools/${poolUid}`;
};

export const overlordsUidPoolUpdate = async (
  uid: string,
  poolUid: string,
  v1IpPoolInputEntityBody: V1IpPoolInputEntityBody,
  options?: RequestInit,
): Promise<overlordsUidPoolUpdateResponse> => {
  const res = await fetch(getOverlordsUidPoolUpdateUrl(uid, poolUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1IpPoolInputEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidPoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidPoolUpdateResponse;
};

/**
 * @summary Retrieves the vSphere computecluster resources for the specified private gateway's account
 */
export type overlordsUidVsphereComputeclusterResResponse200 = {
  data: VsphereComputeClusterResources;
  status: 200;
};

export type overlordsUidVsphereComputeclusterResResponseComposite =
  overlordsUidVsphereComputeclusterResResponse200;

export type overlordsUidVsphereComputeclusterResResponse =
  overlordsUidVsphereComputeclusterResResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereComputeclusterResUrl = (
  uid: string,
  params: OverlordsUidVsphereComputeclusterResParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/computecluster/resources?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/computecluster/resources`;
};

export const overlordsUidVsphereComputeclusterRes = async (
  uid: string,
  params: OverlordsUidVsphereComputeclusterResParams,
  options?: RequestInit,
): Promise<overlordsUidVsphereComputeclusterResResponse> => {
  const res = await fetch(
    getOverlordsUidVsphereComputeclusterResUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereComputeclusterResResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereComputeclusterResResponse;
};

/**
 * @summary Retrieves the vSphere datacenters & datacluster for the specified private gateway's account
 */
export type overlordsUidVsphereDatacentersResponse200 = {
  data: VsphereDatacenters;
  status: 200;
};

export type overlordsUidVsphereDatacentersResponseComposite =
  overlordsUidVsphereDatacentersResponse200;

export type overlordsUidVsphereDatacentersResponse =
  overlordsUidVsphereDatacentersResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidVsphereDatacentersUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/datacenters`;
};

export const overlordsUidVsphereDatacenters = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidVsphereDatacentersResponse> => {
  const res = await fetch(getOverlordsUidVsphereDatacentersUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidVsphereDatacentersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidVsphereDatacentersResponse;
};

/**
 * @summary delete the private gateway
 */
export type overlordsUidDeleteResponse200 = {
  data: DeletedMsg;
  status: 200;
};

export type overlordsUidDeleteResponseComposite = overlordsUidDeleteResponse200;

export type overlordsUidDeleteResponse = overlordsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getOverlordsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}`;
};

export const overlordsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidDeleteResponse> => {
  const res = await fetch(getOverlordsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidDeleteResponse;
};

/**
 * @summary Returns the specified private gateway's for the given uid
 */
export type overlordsUidGetResponse200 = {
  data: Overlord;
  status: 200;
};

export type overlordsUidGetResponseComposite = overlordsUidGetResponse200;

export type overlordsUidGetResponse = overlordsUidGetResponseComposite & {
  headers: Headers;
};

export const getOverlordsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}`;
};

export const overlordsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidGetResponse> => {
  const res = await fetch(getOverlordsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidGetResponse;
};

/**
 * @summary update the private gateway's metadata
 */
export type overlordsUidMetadataUpdateResponse204 = {
  data: void;
  status: 204;
};

export type overlordsUidMetadataUpdateResponseComposite =
  overlordsUidMetadataUpdateResponse204;

export type overlordsUidMetadataUpdateResponse =
  overlordsUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getOverlordsUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}/metadata`;
};

export const overlordsUidMetadataUpdate = async (
  uid: string,
  v1ObjectMetaInputEntitySchemaBody: V1ObjectMetaInputEntitySchemaBody,
  options?: RequestInit,
): Promise<overlordsUidMetadataUpdateResponse> => {
  const res = await fetch(getOverlordsUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMetaInputEntitySchemaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidMetadataUpdateResponse;
};

/**
 * @summary reset the private gateway by disaaociating the private gateway's resources
 */
export type overlordsUidResetResponse200 = {
  data: UpdatedMsg;
  status: 200;
};

export type overlordsUidResetResponseComposite = overlordsUidResetResponse200;

export type overlordsUidResetResponse = overlordsUidResetResponseComposite & {
  headers: Headers;
};

export const getOverlordsUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}/reset`;
};

export const overlordsUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<overlordsUidResetResponse> => {
  const res = await fetch(getOverlordsUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: overlordsUidResetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as overlordsUidResetResponse;
};
