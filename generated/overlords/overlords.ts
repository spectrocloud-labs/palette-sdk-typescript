/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ClusterProfile,
  DeletedMsg,
  IpPoolInputEntityBody,
  IpPools,
  ObjectMetaInputEntitySchemaBody,
  OverloadVsphereOva,
  Overlord,
  OverlordMaasAccountCreate,
  OverlordMaasAccountEntity,
  OverlordMaasCloudConfigBody,
  OverlordManifest,
  OverlordMigrateEntity,
  OverlordOpenStackAccountCreate,
  OverlordOpenStackAccountEntity,
  OverlordOpenStackCloudConfigBody,
  OverlordVsphereAccountCreate,
  OverlordVsphereAccountEntity,
  OverlordVsphereCloudConfigBody,
  Overlords,
  OverlordsListParams,
  OverlordsMaasManifestParams,
  OverlordsOpenStackManifestParams,
  OverlordsPairingCodeParams,
  OverlordsUidMaasAccountValidateBody,
  OverlordsUidOpenStackAccountValidateBody,
  OverlordsUidVsphereAccountValidateBody,
  OverlordsUidVsphereComputeclusterResParams,
  OverlordsVsphereManifestParams,
  PairingCode,
  Uid,
  UpdatedMsg,
  VsphereComputeClusterResources,
  VsphereDatacenters,
} from ".././schemas";

/**
 * @summary Retrieves a list of overlords owned by the tenant
 */
export type OverlordsListResponse200 = {
  data: Overlords;
  status: 200;
};

export type OverlordsListResponseComposite = OverlordsListResponse200;

export type OverlordsListResponse = OverlordsListResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsListUrl = (params?: OverlordsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords`;
};

export const OverlordsList = async (
  params?: OverlordsListParams,
  options?: RequestInit,
): Promise<OverlordsListResponse> => {
  const res = await fetch(getV1OverlordsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsListResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type OverlordsMaasManifestResponse200 = {
  data: OverlordManifest;
  status: 200;
};

export type OverlordsMaasManifestResponseComposite =
  OverlordsMaasManifestResponse200;

export type OverlordsMaasManifestResponse =
  OverlordsMaasManifestResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsMaasManifestUrl = (
  params: OverlordsMaasManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/maas/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/maas/manifest`;
};

export const OverlordsMaasManifest = async (
  params: OverlordsMaasManifestParams,
  options?: RequestInit,
): Promise<OverlordsMaasManifestResponse> => {
  const res = await fetch(getV1OverlordsMaasManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsMaasManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsMaasManifestResponse;
};

/**
 * @summary create the maas cloudaccount for the private gateway
 */
export type OverlordsUidMaasAccountCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type OverlordsUidMaasAccountCreateResponseComposite =
  OverlordsUidMaasAccountCreateResponse201;

export type OverlordsUidMaasAccountCreateResponse =
  OverlordsUidMaasAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account`;
};

export const OverlordsUidMaasAccountCreate = async (
  uid: string,
  OverlordMaasAccountCreate: OverlordMaasAccountCreate,
  options?: RequestInit,
): Promise<OverlordsUidMaasAccountCreateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordMaasAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidMaasAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidMaasAccountCreateResponse;
};

/**
 * @summary update the maas cloudaccount for the private gateway
 */
export type OverlordsUidMaasAccountUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidMaasAccountUpdateResponseComposite =
  OverlordsUidMaasAccountUpdateResponse204;

export type OverlordsUidMaasAccountUpdateResponse =
  OverlordsUidMaasAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account`;
};

export const OverlordsUidMaasAccountUpdate = async (
  uid: string,
  OverlordMaasAccountEntity: OverlordMaasAccountEntity,
  options?: RequestInit,
): Promise<OverlordsUidMaasAccountUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordMaasAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidMaasAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidMaasAccountUpdateResponse;
};

/**
 * @summary validate the maas cloudaccount for the private gateway
 */
export type OverlordsUidMaasAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidMaasAccountValidateResponseComposite =
  OverlordsUidMaasAccountValidateResponse204;

export type OverlordsUidMaasAccountValidateResponse =
  OverlordsUidMaasAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account/validate`;
};

export const OverlordsUidMaasAccountValidate = async (
  uid: string,
  OverlordsUidMaasAccountValidateBody: OverlordsUidMaasAccountValidateBody,
  options?: RequestInit,
): Promise<OverlordsUidMaasAccountValidateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordsUidMaasAccountValidateBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidMaasAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidMaasAccountValidateResponse;
};

/**
 * @summary create the maas cloud config for the private gateway
 */
export type OverlordsUidMaasCloudConfigCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type OverlordsUidMaasCloudConfigCreateResponseComposite =
  OverlordsUidMaasCloudConfigCreateResponse201;

export type OverlordsUidMaasCloudConfigCreateResponse =
  OverlordsUidMaasCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/cloudconfig`;
};

export const OverlordsUidMaasCloudConfigCreate = async (
  uid: string,
  OverlordMaasCloudConfigBody: OverlordMaasCloudConfigBody,
  options?: RequestInit,
): Promise<OverlordsUidMaasCloudConfigCreateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordMaasCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidMaasCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidMaasCloudConfigCreateResponse;
};

/**
 * @summary update the maas cloud config for the private gateway
 */
export type OverlordsUidMaasCloudConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidMaasCloudConfigUpdateResponseComposite =
  OverlordsUidMaasCloudConfigUpdateResponse204;

export type OverlordsUidMaasCloudConfigUpdateResponse =
  OverlordsUidMaasCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/cloudconfig`;
};

export const OverlordsUidMaasCloudConfigUpdate = async (
  uid: string,
  OverlordMaasCloudConfigBody: OverlordMaasCloudConfigBody,
  options?: RequestInit,
): Promise<OverlordsUidMaasCloudConfigUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordMaasCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidMaasCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidMaasCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified maas private gateway cluster profile
 */
export type OverlordsUidMaasClusterProfileResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type OverlordsUidMaasClusterProfileResponseComposite =
  OverlordsUidMaasClusterProfileResponse200;

export type OverlordsUidMaasClusterProfileResponse =
  OverlordsUidMaasClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/clusterprofile`;
};

export const OverlordsUidMaasClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidMaasClusterProfileResponse> => {
  const res = await fetch(getV1OverlordsUidMaasClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidMaasClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidMaasClusterProfileResponse;
};

/**
 * @summary migrate all the clusters from source overlord to target overlord
 */
export type OverlordsMigrateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsMigrateResponseComposite = OverlordsMigrateResponse204;

export type OverlordsMigrateResponse = OverlordsMigrateResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsMigrateUrl = () => {
  return `https://api.spectrocloud.com/v1/overlords/migrate`;
};

export const OverlordsMigrate = async (
  OverlordMigrateEntity: OverlordMigrateEntity,
  options?: RequestInit,
): Promise<OverlordsMigrateResponse> => {
  const res = await fetch(getV1OverlordsMigrateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordMigrateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsMigrateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsMigrateResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type OverlordsOpenStackManifestResponse200 = {
  data: OverlordManifest;
  status: 200;
};

export type OverlordsOpenStackManifestResponseComposite =
  OverlordsOpenStackManifestResponse200;

export type OverlordsOpenStackManifestResponse =
  OverlordsOpenStackManifestResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsOpenStackManifestUrl = (
  params: OverlordsOpenStackManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/openstack/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/openstack/manifest`;
};

export const OverlordsOpenStackManifest = async (
  params: OverlordsOpenStackManifestParams,
  options?: RequestInit,
): Promise<OverlordsOpenStackManifestResponse> => {
  const res = await fetch(getV1OverlordsOpenStackManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsOpenStackManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsOpenStackManifestResponse;
};

/**
 * @summary create the OpenStack cloudaccount for the private gateway
 */
export type OverlordsUidOpenStackAccountCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type OverlordsUidOpenStackAccountCreateResponseComposite =
  OverlordsUidOpenStackAccountCreateResponse201;

export type OverlordsUidOpenStackAccountCreateResponse =
  OverlordsUidOpenStackAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account`;
};

export const OverlordsUidOpenStackAccountCreate = async (
  uid: string,
  OverlordOpenStackAccountCreate: OverlordOpenStackAccountCreate,
  options?: RequestInit,
): Promise<OverlordsUidOpenStackAccountCreateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordOpenStackAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidOpenStackAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidOpenStackAccountCreateResponse;
};

/**
 * @summary update the OpenStack cloudaccount for the private gateway
 */
export type OverlordsUidOpenStackAccountUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidOpenStackAccountUpdateResponseComposite =
  OverlordsUidOpenStackAccountUpdateResponse204;

export type OverlordsUidOpenStackAccountUpdateResponse =
  OverlordsUidOpenStackAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account`;
};

export const OverlordsUidOpenStackAccountUpdate = async (
  uid: string,
  OverlordOpenStackAccountEntity: OverlordOpenStackAccountEntity,
  options?: RequestInit,
): Promise<OverlordsUidOpenStackAccountUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordOpenStackAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidOpenStackAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidOpenStackAccountUpdateResponse;
};

/**
 * @summary validate the OpenStack cloudaccount for the private gateway
 */
export type OverlordsUidOpenStackAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidOpenStackAccountValidateResponseComposite =
  OverlordsUidOpenStackAccountValidateResponse204;

export type OverlordsUidOpenStackAccountValidateResponse =
  OverlordsUidOpenStackAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account/validate`;
};

export const OverlordsUidOpenStackAccountValidate = async (
  uid: string,
  OverlordsUidOpenStackAccountValidateBody: OverlordsUidOpenStackAccountValidateBody,
  options?: RequestInit,
): Promise<OverlordsUidOpenStackAccountValidateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordsUidOpenStackAccountValidateBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidOpenStackAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidOpenStackAccountValidateResponse;
};

/**
 * @summary create the OpenStack cloud config for the private gateway
 */
export type OverlordsUidOpenStackCloudConfigCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type OverlordsUidOpenStackCloudConfigCreateResponseComposite =
  OverlordsUidOpenStackCloudConfigCreateResponse201;

export type OverlordsUidOpenStackCloudConfigCreateResponse =
  OverlordsUidOpenStackCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/cloudconfig`;
};

export const OverlordsUidOpenStackCloudConfigCreate = async (
  uid: string,
  OverlordOpenStackCloudConfigBody: OverlordOpenStackCloudConfigBody,
  options?: RequestInit,
): Promise<OverlordsUidOpenStackCloudConfigCreateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordOpenStackCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidOpenStackCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidOpenStackCloudConfigCreateResponse;
};

/**
 * @summary update the OpenStack cloud config for the private gateway
 */
export type OverlordsUidOpenStackCloudConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidOpenStackCloudConfigUpdateResponseComposite =
  OverlordsUidOpenStackCloudConfigUpdateResponse204;

export type OverlordsUidOpenStackCloudConfigUpdateResponse =
  OverlordsUidOpenStackCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/cloudconfig`;
};

export const OverlordsUidOpenStackCloudConfigUpdate = async (
  uid: string,
  OverlordOpenStackCloudConfigBody: OverlordOpenStackCloudConfigBody,
  options?: RequestInit,
): Promise<OverlordsUidOpenStackCloudConfigUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordOpenStackCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidOpenStackCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidOpenStackCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified OpenStack private gateway cluster profile
 */
export type OverlordsUidOpenStackClusterProfileResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type OverlordsUidOpenStackClusterProfileResponseComposite =
  OverlordsUidOpenStackClusterProfileResponse200;

export type OverlordsUidOpenStackClusterProfileResponse =
  OverlordsUidOpenStackClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/clusterprofile`;
};

export const OverlordsUidOpenStackClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidOpenStackClusterProfileResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidOpenStackClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidOpenStackClusterProfileResponse;
};

/**
 * @summary Returns the pairing code for the private gateway
 */
export type OverlordsPairingCodeResponse200 = {
  data: PairingCode;
  status: 200;
};

export type OverlordsPairingCodeResponseComposite =
  OverlordsPairingCodeResponse200;

export type OverlordsPairingCodeResponse =
  OverlordsPairingCodeResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsPairingCodeUrl = (
  params?: OverlordsPairingCodeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/pairing/code?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/pairing/code`;
};

export const OverlordsPairingCode = async (
  params?: OverlordsPairingCodeParams,
  options?: RequestInit,
): Promise<OverlordsPairingCodeResponse> => {
  const res = await fetch(getV1OverlordsPairingCodeUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsPairingCodeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsPairingCodeResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type OverlordsVsphereManifestResponse200 = {
  data: OverlordManifest;
  status: 200;
};

export type OverlordsVsphereManifestResponseComposite =
  OverlordsVsphereManifestResponse200;

export type OverlordsVsphereManifestResponse =
  OverlordsVsphereManifestResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsVsphereManifestUrl = (
  params: OverlordsVsphereManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/vsphere/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/vsphere/manifest`;
};

export const OverlordsVsphereManifest = async (
  params: OverlordsVsphereManifestParams,
  options?: RequestInit,
): Promise<OverlordsVsphereManifestResponse> => {
  const res = await fetch(getV1OverlordsVsphereManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsVsphereManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsVsphereManifestResponse;
};

/**
 * @summary Returns overlord's ova information
 */
export type OverlordsVsphereOvaGetResponse200 = {
  data: OverloadVsphereOva;
  status: 200;
};

export type OverlordsVsphereOvaGetResponseComposite =
  OverlordsVsphereOvaGetResponse200;

export type OverlordsVsphereOvaGetResponse =
  OverlordsVsphereOvaGetResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsVsphereOvaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/ova`;
};

export const OverlordsVsphereOvaGet = async (
  options?: RequestInit,
): Promise<OverlordsVsphereOvaGetResponse> => {
  const res = await fetch(getV1OverlordsVsphereOvaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsVsphereOvaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsVsphereOvaGetResponse;
};

/**
 * @summary create the vSphere cloudaccount for the private gateway
 */
export type OverlordsUidVsphereAccountCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type OverlordsUidVsphereAccountCreateResponseComposite =
  OverlordsUidVsphereAccountCreateResponse201;

export type OverlordsUidVsphereAccountCreateResponse =
  OverlordsUidVsphereAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account`;
};

export const OverlordsUidVsphereAccountCreate = async (
  uid: string,
  OverlordVsphereAccountCreate: OverlordVsphereAccountCreate,
  options?: RequestInit,
): Promise<OverlordsUidVsphereAccountCreateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordVsphereAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereAccountCreateResponse;
};

/**
 * @summary update the vSphere cloudaccount for the private gateway
 */
export type OverlordsUidVsphereAccountUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidVsphereAccountUpdateResponseComposite =
  OverlordsUidVsphereAccountUpdateResponse204;

export type OverlordsUidVsphereAccountUpdateResponse =
  OverlordsUidVsphereAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account`;
};

export const OverlordsUidVsphereAccountUpdate = async (
  uid: string,
  OverlordVsphereAccountEntity: OverlordVsphereAccountEntity,
  options?: RequestInit,
): Promise<OverlordsUidVsphereAccountUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordVsphereAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereAccountUpdateResponse;
};

/**
 * @summary validate the vSphere cloudaccount for the private gateway
 */
export type OverlordsUidVsphereAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidVsphereAccountValidateResponseComposite =
  OverlordsUidVsphereAccountValidateResponse204;

export type OverlordsUidVsphereAccountValidateResponse =
  OverlordsUidVsphereAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account/validate`;
};

export const OverlordsUidVsphereAccountValidate = async (
  uid: string,
  OverlordsUidVsphereAccountValidateBody: OverlordsUidVsphereAccountValidateBody,
  options?: RequestInit,
): Promise<OverlordsUidVsphereAccountValidateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordsUidVsphereAccountValidateBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereAccountValidateResponse;
};

/**
 * @summary create the vSphere cloud config for the private gateway
 */
export type OverlordsUidVsphereCloudConfigCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type OverlordsUidVsphereCloudConfigCreateResponseComposite =
  OverlordsUidVsphereCloudConfigCreateResponse201;

export type OverlordsUidVsphereCloudConfigCreateResponse =
  OverlordsUidVsphereCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/cloudconfig`;
};

export const OverlordsUidVsphereCloudConfigCreate = async (
  uid: string,
  OverlordVsphereCloudConfigBody: OverlordVsphereCloudConfigBody,
  options?: RequestInit,
): Promise<OverlordsUidVsphereCloudConfigCreateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordVsphereCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereCloudConfigCreateResponse;
};

/**
 * @summary update the vSphere cloud config for the private gateway
 */
export type OverlordsUidVsphereCloudConfigUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidVsphereCloudConfigUpdateResponseComposite =
  OverlordsUidVsphereCloudConfigUpdateResponse204;

export type OverlordsUidVsphereCloudConfigUpdateResponse =
  OverlordsUidVsphereCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/cloudconfig`;
};

export const OverlordsUidVsphereCloudConfigUpdate = async (
  uid: string,
  OverlordVsphereCloudConfigBody: OverlordVsphereCloudConfigBody,
  options?: RequestInit,
): Promise<OverlordsUidVsphereCloudConfigUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OverlordVsphereCloudConfigBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified vsphere private gateway cluster profile
 */
export type OverlordsUidVsphereClusterProfileResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type OverlordsUidVsphereClusterProfileResponseComposite =
  OverlordsUidVsphereClusterProfileResponse200;

export type OverlordsUidVsphereClusterProfileResponse =
  OverlordsUidVsphereClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/clusterprofile`;
};

export const OverlordsUidVsphereClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidVsphereClusterProfileResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereClusterProfileResponse;
};

/**
 * @summary Retrieves a list of IP Pools for the specified private gateway
 */
export type OverlordsUidPoolsListResponse200 = {
  data: IpPools;
  status: 200;
};

export type OverlordsUidPoolsListResponseComposite =
  OverlordsUidPoolsListResponse200;

export type OverlordsUidPoolsListResponse =
  OverlordsUidPoolsListResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolsListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools`;
};

export const OverlordsUidPoolsList = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidPoolsListResponse> => {
  const res = await fetch(getV1OverlordsUidPoolsListUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidPoolsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidPoolsListResponse;
};

/**
 * @summary Creates an IP pool defintion for the sepcified private gateway
 */
export type OverlordsUidPoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type OverlordsUidPoolCreateResponseComposite =
  OverlordsUidPoolCreateResponse201;

export type OverlordsUidPoolCreateResponse =
  OverlordsUidPoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools`;
};

export const OverlordsUidPoolCreate = async (
  uid: string,
  IpPoolInputEntityBody: IpPoolInputEntityBody,
  options?: RequestInit,
): Promise<OverlordsUidPoolCreateResponse> => {
  const res = await fetch(getV1OverlordsUidPoolCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(IpPoolInputEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidPoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidPoolCreateResponse;
};

/**
 * @summary Deletes the private gateways's specified IP Pool data
 */
export type OverlordsUidPoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidPoolDeleteResponseComposite =
  OverlordsUidPoolDeleteResponse204;

export type OverlordsUidPoolDeleteResponse =
  OverlordsUidPoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolDeleteUrl = (
  uid: string,
  poolUid: string,
) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools/${poolUid}`;
};

export const OverlordsUidPoolDelete = async (
  uid: string,
  poolUid: string,
  options?: RequestInit,
): Promise<OverlordsUidPoolDeleteResponse> => {
  const res = await fetch(getV1OverlordsUidPoolDeleteUrl(uid, poolUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidPoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidPoolDeleteResponse;
};

/**
 * @summary Updates the private gateways's specified IP Pool data
 */
export type OverlordsUidPoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidPoolUpdateResponseComposite =
  OverlordsUidPoolUpdateResponse204;

export type OverlordsUidPoolUpdateResponse =
  OverlordsUidPoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolUpdateUrl = (
  uid: string,
  poolUid: string,
) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools/${poolUid}`;
};

export const OverlordsUidPoolUpdate = async (
  uid: string,
  poolUid: string,
  IpPoolInputEntityBody: IpPoolInputEntityBody,
  options?: RequestInit,
): Promise<OverlordsUidPoolUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidPoolUpdateUrl(uid, poolUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(IpPoolInputEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidPoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidPoolUpdateResponse;
};

/**
 * @summary Retrieves the vSphere computecluster resources for the specified private gateway's account
 */
export type OverlordsUidVsphereComputeclusterResResponse200 = {
  data: VsphereComputeClusterResources;
  status: 200;
};

export type OverlordsUidVsphereComputeclusterResResponseComposite =
  OverlordsUidVsphereComputeclusterResResponse200;

export type OverlordsUidVsphereComputeclusterResResponse =
  OverlordsUidVsphereComputeclusterResResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereComputeclusterResUrl = (
  uid: string,
  params: OverlordsUidVsphereComputeclusterResParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/computecluster/resources?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/computecluster/resources`;
};

export const OverlordsUidVsphereComputeclusterRes = async (
  uid: string,
  params: OverlordsUidVsphereComputeclusterResParams,
  options?: RequestInit,
): Promise<OverlordsUidVsphereComputeclusterResResponse> => {
  const res = await fetch(
    getV1OverlordsUidVsphereComputeclusterResUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereComputeclusterResResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereComputeclusterResResponse;
};

/**
 * @summary Retrieves the vSphere datacenters & datacluster for the specified private gateway's account
 */
export type OverlordsUidVsphereDatacentersResponse200 = {
  data: VsphereDatacenters;
  status: 200;
};

export type OverlordsUidVsphereDatacentersResponseComposite =
  OverlordsUidVsphereDatacentersResponse200;

export type OverlordsUidVsphereDatacentersResponse =
  OverlordsUidVsphereDatacentersResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereDatacentersUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/datacenters`;
};

export const OverlordsUidVsphereDatacenters = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidVsphereDatacentersResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereDatacentersUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidVsphereDatacentersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidVsphereDatacentersResponse;
};

/**
 * @summary delete the private gateway
 */
export type OverlordsUidDeleteResponse200 = {
  data: DeletedMsg;
  status: 200;
};

export type OverlordsUidDeleteResponseComposite = OverlordsUidDeleteResponse200;

export type OverlordsUidDeleteResponse = OverlordsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}`;
};

export const OverlordsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidDeleteResponse> => {
  const res = await fetch(getV1OverlordsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidDeleteResponse;
};

/**
 * @summary Returns the specified private gateway's for the given uid
 */
export type OverlordsUidGetResponse200 = {
  data: Overlord;
  status: 200;
};

export type OverlordsUidGetResponseComposite = OverlordsUidGetResponse200;

export type OverlordsUidGetResponse = OverlordsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}`;
};

export const OverlordsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidGetResponse> => {
  const res = await fetch(getV1OverlordsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidGetResponse;
};

/**
 * @summary update the private gateway's metadata
 */
export type OverlordsUidMetadataUpdateResponse204 = {
  data: void;
  status: 204;
};

export type OverlordsUidMetadataUpdateResponseComposite =
  OverlordsUidMetadataUpdateResponse204;

export type OverlordsUidMetadataUpdateResponse =
  OverlordsUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}/metadata`;
};

export const OverlordsUidMetadataUpdate = async (
  uid: string,
  ObjectMetaInputEntitySchemaBody: ObjectMetaInputEntitySchemaBody,
  options?: RequestInit,
): Promise<OverlordsUidMetadataUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ObjectMetaInputEntitySchemaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidMetadataUpdateResponse;
};

/**
 * @summary reset the private gateway by disaaociating the private gateway's resources
 */
export type OverlordsUidResetResponse200 = {
  data: UpdatedMsg;
  status: 200;
};

export type OverlordsUidResetResponseComposite = OverlordsUidResetResponse200;

export type OverlordsUidResetResponse = OverlordsUidResetResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}/reset`;
};

export const OverlordsUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<OverlordsUidResetResponse> => {
  const res = await fetch(getV1OverlordsUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OverlordsUidResetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OverlordsUidResetResponse;
};
