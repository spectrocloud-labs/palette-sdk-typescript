/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AwsCloudClusterConfigEntity,
  AwsCloudConfig,
  AwsCloudHybridConfigEntity,
  AwsMachine,
  AwsMachineBody,
  AwsMachinePoolConfigEntityBody,
  AwsMachines,
  AzureCloudClusterConfigEntityBody,
  AzureCloudConfig,
  AzureMachine,
  AzureMachineBody,
  AzureMachinePoolConfigEntityBody,
  AzureMachines,
  CloudConfigsAksPoolMachinesListParams,
  CloudConfigsAwsPoolMachinesListParams,
  CloudConfigsAzurePoolMachinesListParams,
  CloudConfigsCustomPoolMachinesListParams,
  CloudConfigsEksPoolMachinesListParams,
  CloudConfigsGcpPoolMachinesListParams,
  CloudConfigsGenericPoolMachinesListParams,
  CloudConfigsGkePoolMachinesListParams,
  CloudConfigsMaasPoolMachinesListParams,
  CloudConfigsVirtualPoolMachinesListParams,
  CloudConfigsVspherePoolMachinesListParams,
  CustomCloudClusterConfigEntity,
  CustomCloudConfig,
  CustomMachine,
  CustomMachineBody,
  CustomMachinePoolConfigEntityBody,
  CustomMachines,
  EdgeNativeCloudClusterConfigEntity,
  EdgeNativeCloudConfig,
  EdgeNativeMachine,
  EdgeNativeMachineBody,
  EdgeNativeMachinePoolConfigEntityBody,
  EdgeNativeMachines,
  EksCloudClusterConfigEntity,
  EksCloudConfig,
  EksFargateProfiles,
  EksMachinePoolConfigEntityBody,
  GcpCloudClusterConfigEntityBody,
  GcpCloudConfig,
  GcpMachine,
  GcpMachineBody,
  GcpMachinePoolConfigEntityBody,
  GcpMachines,
  GenericCloudClusterConfigEntity,
  GenericCloudConfig,
  GenericMachine,
  GenericMachineBody,
  GenericMachinePoolConfigEntityBody,
  GenericMachines,
  HybridEdgeNativeMachinePoolConfig,
  HybridEdgeNativeMachinePoolConfigEntity,
  HybridEdgeNativeMachinePoolConfigUpdateEntity,
  MaasCloudClusterConfigEntity,
  MaasCloudConfig,
  MaasMachine,
  MaasMachineBody,
  MaasMachinePoolConfigEntityBody,
  MaasMachines,
  MachineMaintenance,
  MachineMaintenanceStatus,
  MachinePoolsMachineUids,
  OpenStackCloudClusterConfigEntity,
  OpenStackCloudConfig,
  OpenStackMachine,
  OpenStackMachineBody,
  OpenStackMachinePoolConfigEntityBody,
  OpenStackMachines,
  Uid,
  VirtualCloudClusterConfigEntity,
  VirtualCloudConfig,
  VirtualClusterResize,
  VirtualMachine,
  VirtualMachineBody,
  VirtualMachinePoolConfigEntityBody,
  VirtualMachines,
  VsphereCloudClusterConfigEntity,
  VsphereCloudConfig,
  VsphereMachine,
  VsphereMachineBody,
  VsphereMachinePoolConfigEntityBody,
  VsphereMachines,
} from ".././schemas";

/**
 * @summary Returns the specified AKS cloud config
 */
export type CloudConfigsAksGetResponse200 = {
  data: AzureCloudConfig;
  status: 200;
};

export type CloudConfigsAksGetResponseComposite = CloudConfigsAksGetResponse200;

export type CloudConfigsAksGetResponse = CloudConfigsAksGetResponseComposite & {
  headers: Headers;
};

export const getV1CloudConfigsAksGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}`;
};

export const CloudConfigsAksGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAksGetResponse> => {
  const res = await fetch(getV1CloudConfigsAksGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsAksUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAksUidClusterConfigResponseComposite =
  CloudConfigsAksUidClusterConfigResponse204;

export type CloudConfigsAksUidClusterConfigResponse =
  CloudConfigsAksUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/clusterConfig`;
};

export const CloudConfigsAksUidClusterConfig = async (
  configUid: string,
  AzureCloudClusterConfigEntityBody: AzureCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAksUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsAksUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AzureCloudClusterConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksUidClusterConfigResponse;
};

/**
 * @summary Creates an AKS cloud config's machine pool
 */
export type CloudConfigsAksMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsAksMachinePoolCreateResponseComposite =
  CloudConfigsAksMachinePoolCreateResponse201;

export type CloudConfigsAksMachinePoolCreateResponse =
  CloudConfigsAksMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools`;
};

export const CloudConfigsAksMachinePoolCreate = async (
  configUid: string,
  AzureMachinePoolConfigEntityBody: AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAksMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsAksMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AzureMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsAksMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAksMachinePoolDeleteResponseComposite =
  CloudConfigsAksMachinePoolDeleteResponse204;

export type CloudConfigsAksMachinePoolDeleteResponse =
  CloudConfigsAksMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsAksMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsAksMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified AKS cloud config's machine pool
 */
export type CloudConfigsAksMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAksMachinePoolUpdateResponseComposite =
  CloudConfigsAksMachinePoolUpdateResponse204;

export type CloudConfigsAksMachinePoolUpdateResponse =
  CloudConfigsAksMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsAksMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  AzureMachinePoolConfigEntityBody: AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAksMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of AKS machines
 */
export type CloudConfigsAksPoolMachinesListResponse200 = {
  data: AzureMachines;
  status: 200;
};

export type CloudConfigsAksPoolMachinesListResponseComposite =
  CloudConfigsAksPoolMachinesListResponse200;

export type CloudConfigsAksPoolMachinesListResponse =
  CloudConfigsAksPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAksPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsAksPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAksPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsAksPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsAksPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsAksPoolMachinesAddResponseComposite =
  CloudConfigsAksPoolMachinesAddResponse201;

export type CloudConfigsAksPoolMachinesAddResponse =
  CloudConfigsAksPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsAksPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  AzureMachineBody: AzureMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsAksPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Azure machine
 */
export type CloudConfigsAksPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAksPoolMachinesUidDeleteResponseComposite =
  CloudConfigsAksPoolMachinesUidDeleteResponse204;

export type CloudConfigsAksPoolMachinesUidDeleteResponse =
  CloudConfigsAksPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAksPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAksPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified AKS machine
 */
export type CloudConfigsAksPoolMachinesUidGetResponse200 = {
  data: AzureMachine;
  status: 200;
};

export type CloudConfigsAksPoolMachinesUidGetResponseComposite =
  CloudConfigsAksPoolMachinesUidGetResponse200;

export type CloudConfigsAksPoolMachinesUidGetResponse =
  CloudConfigsAksPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAksPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAksPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsAksPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAksPoolMachinesUidUpdateResponseComposite =
  CloudConfigsAksPoolMachinesUidUpdateResponse204;

export type CloudConfigsAksPoolMachinesUidUpdateResponse =
  CloudConfigsAksPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAksPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  AzureMachineBody: AzureMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsAksPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAksPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAksPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified AWS cloud config
 */
export type CloudConfigsAwsGetResponse200 = {
  data: AwsCloudConfig;
  status: 200;
};

export type CloudConfigsAwsGetResponseComposite = CloudConfigsAwsGetResponse200;

export type CloudConfigsAwsGetResponse = CloudConfigsAwsGetResponseComposite & {
  headers: Headers;
};

export const getV1CloudConfigsAwsGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}`;
};

export const CloudConfigsAwsGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAwsGetResponse> => {
  const res = await fetch(getV1CloudConfigsAwsGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsAwsUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAwsUidClusterConfigResponseComposite =
  CloudConfigsAwsUidClusterConfigResponse204;

export type CloudConfigsAwsUidClusterConfigResponse =
  CloudConfigsAwsUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/clusterConfig`;
};

export const CloudConfigsAwsUidClusterConfig = async (
  configUid: string,
  AwsCloudClusterConfigEntity: AwsCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsAwsUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsAwsUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsUidClusterConfigResponse;
};

/**
 * @summary Updates the hybrid configuration information of AWS cluster
 */
export type AwsCloudConfigsUidHybridConfigResponse204 = {
  data: void;
  status: 204;
};

export type AwsCloudConfigsUidHybridConfigResponseComposite =
  AwsCloudConfigsUidHybridConfigResponse204;

export type AwsCloudConfigsUidHybridConfigResponse =
  AwsCloudConfigsUidHybridConfigResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsUidHybridConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/clusterConfig/hybridConfig`;
};

export const AwsCloudConfigsUidHybridConfig = async (
  configUid: string,
  AwsCloudHybridConfigEntity: AwsCloudHybridConfigEntity,
  options?: RequestInit,
): Promise<AwsCloudConfigsUidHybridConfigResponse> => {
  const res = await fetch(getV1AwsCloudConfigsUidHybridConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsCloudHybridConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsCloudConfigsUidHybridConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsCloudConfigsUidHybridConfigResponse;
};

/**
 * @summary Creates an Hybrid AWS cloud config's Edge-Native machine pool
 */
export type AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponseComposite =
  AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse201;

export type AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse =
  AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeUidMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools`;
};

export const AwsCloudConfigsEdgeNativeUidMachinePoolCreate = async (
  configUid: string,
  HybridEdgeNativeMachinePoolConfigEntity: HybridEdgeNativeMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeUidMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(HybridEdgeNativeMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified Edge-Native machine pool of hybrid AWS cluster
 */
export type AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type AwsCloudConfigsEdgeNativeMachinePoolDeleteResponseComposite =
  AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse204;

export type AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse =
  AwsCloudConfigsEdgeNativeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const AwsCloudConfigsEdgeNativeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeMachinePoolDeleteUrl(
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse;
};

/**
 * @summary Returns the specified AWS Cluster's Edge-Native machine pool configuration
 */
export type AwsCloudConfigsEdgeNativeMachinePoolGetResponse200 = {
  data: HybridEdgeNativeMachinePoolConfig;
  status: 200;
};

export type AwsCloudConfigsEdgeNativeMachinePoolGetResponseComposite =
  AwsCloudConfigsEdgeNativeMachinePoolGetResponse200;

export type AwsCloudConfigsEdgeNativeMachinePoolGetResponse =
  AwsCloudConfigsEdgeNativeMachinePoolGetResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeMachinePoolGetUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const AwsCloudConfigsEdgeNativeMachinePoolGet = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<AwsCloudConfigsEdgeNativeMachinePoolGetResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeMachinePoolGetUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsCloudConfigsEdgeNativeMachinePoolGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsCloudConfigsEdgeNativeMachinePoolGetResponse;
};

/**
 * @summary Updates the specified Hybrid AWS cluster cloud config's Edge-Native machine pool
 */
export type AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type AwsCloudConfigsEdgeNativeMachinePoolUpdateResponseComposite =
  AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse204;

export type AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse =
  AwsCloudConfigsEdgeNativeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const AwsCloudConfigsEdgeNativeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  HybridEdgeNativeMachinePoolConfigUpdateEntity: HybridEdgeNativeMachinePoolConfigUpdateEntity,
  options?: RequestInit,
): Promise<AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeMachinePoolUpdateUrl(
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(HybridEdgeNativeMachinePoolConfigUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse;
};

/**
 * @summary Creates an AWS cloud config's machine pool
 */
export type CloudConfigsAwsMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsAwsMachinePoolCreateResponseComposite =
  CloudConfigsAwsMachinePoolCreateResponse201;

export type CloudConfigsAwsMachinePoolCreateResponse =
  CloudConfigsAwsMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools`;
};

export const CloudConfigsAwsMachinePoolCreate = async (
  configUid: string,
  AwsMachinePoolConfigEntityBody: AwsMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAwsMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsAwsMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsAwsMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAwsMachinePoolDeleteResponseComposite =
  CloudConfigsAwsMachinePoolDeleteResponse204;

export type CloudConfigsAwsMachinePoolDeleteResponse =
  CloudConfigsAwsMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsAwsMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsAwsMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified AWS cloud config's machine pool
 */
export type CloudConfigsAwsMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAwsMachinePoolUpdateResponseComposite =
  CloudConfigsAwsMachinePoolUpdateResponse204;

export type CloudConfigsAwsMachinePoolUpdateResponse =
  CloudConfigsAwsMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsAwsMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  AwsMachinePoolConfigEntityBody: AwsMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAwsMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AwsMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of AWS machines
 */
export type CloudConfigsAwsPoolMachinesListResponse200 = {
  data: AwsMachines;
  status: 200;
};

export type CloudConfigsAwsPoolMachinesListResponseComposite =
  CloudConfigsAwsPoolMachinesListResponse200;

export type CloudConfigsAwsPoolMachinesListResponse =
  CloudConfigsAwsPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAwsPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsAwsPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAwsPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsAwsPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsAwsPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsAwsPoolMachinesAddResponseComposite =
  CloudConfigsAwsPoolMachinesAddResponse201;

export type CloudConfigsAwsPoolMachinesAddResponse =
  CloudConfigsAwsPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsAwsPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  AwsMachineBody: AwsMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsAwsPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified AWS machine
 */
export type CloudConfigsAwsPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAwsPoolMachinesUidDeleteResponseComposite =
  CloudConfigsAwsPoolMachinesUidDeleteResponse204;

export type CloudConfigsAwsPoolMachinesUidDeleteResponse =
  CloudConfigsAwsPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAwsPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAwsPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified AWS machine
 */
export type CloudConfigsAwsPoolMachinesUidGetResponse200 = {
  data: AwsMachine;
  status: 200;
};

export type CloudConfigsAwsPoolMachinesUidGetResponseComposite =
  CloudConfigsAwsPoolMachinesUidGetResponse200;

export type CloudConfigsAwsPoolMachinesUidGetResponse =
  CloudConfigsAwsPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAwsPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAwsPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsAwsPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAwsPoolMachinesUidUpdateResponseComposite =
  CloudConfigsAwsPoolMachinesUidUpdateResponse204;

export type CloudConfigsAwsPoolMachinesUidUpdateResponse =
  CloudConfigsAwsPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAwsPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  AwsMachineBody: AwsMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsAwsPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAwsPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAwsPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Azure cloud config
 */
export type CloudConfigsAzureGetResponse200 = {
  data: AzureCloudConfig;
  status: 200;
};

export type CloudConfigsAzureGetResponseComposite =
  CloudConfigsAzureGetResponse200;

export type CloudConfigsAzureGetResponse =
  CloudConfigsAzureGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}`;
};

export const CloudConfigsAzureGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAzureGetResponse> => {
  const res = await fetch(getV1CloudConfigsAzureGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzureGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsAzureUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAzureUidClusterConfigResponseComposite =
  CloudConfigsAzureUidClusterConfigResponse204;

export type CloudConfigsAzureUidClusterConfigResponse =
  CloudConfigsAzureUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/clusterConfig`;
};

export const CloudConfigsAzureUidClusterConfig = async (
  configUid: string,
  AzureCloudClusterConfigEntityBody: AzureCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAzureUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureCloudClusterConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzureUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzureUidClusterConfigResponse;
};

/**
 * @summary Creates an Azure cloud config's machine pool
 */
export type CloudConfigsAzureMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsAzureMachinePoolCreateResponseComposite =
  CloudConfigsAzureMachinePoolCreateResponse201;

export type CloudConfigsAzureMachinePoolCreateResponse =
  CloudConfigsAzureMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools`;
};

export const CloudConfigsAzureMachinePoolCreate = async (
  configUid: string,
  AzureMachinePoolConfigEntityBody: AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAzureMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzureMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzureMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsAzureMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAzureMachinePoolDeleteResponseComposite =
  CloudConfigsAzureMachinePoolDeleteResponse204;

export type CloudConfigsAzureMachinePoolDeleteResponse =
  CloudConfigsAzureMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsAzureMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsAzureMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzureMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzureMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Azure cloud config's machine pool
 */
export type CloudConfigsAzureMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAzureMachinePoolUpdateResponseComposite =
  CloudConfigsAzureMachinePoolUpdateResponse204;

export type CloudConfigsAzureMachinePoolUpdateResponse =
  CloudConfigsAzureMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsAzureMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  AzureMachinePoolConfigEntityBody: AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsAzureMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzureMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzureMachinePoolUpdateResponse;
};

/**
 * Returns all the Azure machines restricted to the user role and filters.
 * @summary Retrieves a list of Azure machines
 */
export type CloudConfigsAzurePoolMachinesListResponse200 = {
  data: AzureMachines;
  status: 200;
};

export type CloudConfigsAzurePoolMachinesListResponseComposite =
  CloudConfigsAzurePoolMachinesListResponse200;

export type CloudConfigsAzurePoolMachinesListResponse =
  CloudConfigsAzurePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAzurePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsAzurePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAzurePoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsAzurePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzurePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzurePoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsAzurePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsAzurePoolMachinesAddResponseComposite =
  CloudConfigsAzurePoolMachinesAddResponse201;

export type CloudConfigsAzurePoolMachinesAddResponse =
  CloudConfigsAzurePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsAzurePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  AzureMachineBody: AzureMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsAzurePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzurePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzurePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Azure machine
 */
export type CloudConfigsAzurePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAzurePoolMachinesUidDeleteResponseComposite =
  CloudConfigsAzurePoolMachinesUidDeleteResponse204;

export type CloudConfigsAzurePoolMachinesUidDeleteResponse =
  CloudConfigsAzurePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAzurePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAzurePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzurePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzurePoolMachinesUidDeleteResponse;
};

/**
 * Returns a Azure machine for the specified uid.
 * @summary Returns the specified Azure machine
 */
export type CloudConfigsAzurePoolMachinesUidGetResponse200 = {
  data: AzureMachine;
  status: 200;
};

export type CloudConfigsAzurePoolMachinesUidGetResponseComposite =
  CloudConfigsAzurePoolMachinesUidGetResponse200;

export type CloudConfigsAzurePoolMachinesUidGetResponse =
  CloudConfigsAzurePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAzurePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsAzurePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzurePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzurePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type CloudConfigsAzurePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsAzurePoolMachinesUidUpdateResponseComposite =
  CloudConfigsAzurePoolMachinesUidUpdateResponse204;

export type CloudConfigsAzurePoolMachinesUidUpdateResponse =
  CloudConfigsAzurePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsAzurePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  AzureMachineBody: AzureMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsAzurePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsAzurePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsAzurePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Custom cloud config
 */
export type CloudConfigsCustomGetResponse200 = {
  data: CustomCloudConfig;
  status: 200;
};

export type CloudConfigsCustomGetResponseComposite =
  CloudConfigsCustomGetResponse200;

export type CloudConfigsCustomGetResponse =
  CloudConfigsCustomGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomGetUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}`;
};

export const CloudConfigsCustomGet = async (
  cloudType: string,
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsCustomGetResponse> => {
  const res = await fetch(getV1CloudConfigsCustomGetUrl(cloudType, configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsCustomUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsCustomUidClusterConfigResponseComposite =
  CloudConfigsCustomUidClusterConfigResponse204;

export type CloudConfigsCustomUidClusterConfigResponse =
  CloudConfigsCustomUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomUidClusterConfigUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/clusterConfig`;
};

export const CloudConfigsCustomUidClusterConfig = async (
  cloudType: string,
  configUid: string,
  CustomCloudClusterConfigEntity: CustomCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsCustomUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomUidClusterConfigUrl(cloudType, configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(CustomCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomUidClusterConfigResponse;
};

/**
 * @summary Creates an Custom cloud config's machine pool
 */
export type CloudConfigsCustomMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsCustomMachinePoolCreateResponseComposite =
  CloudConfigsCustomMachinePoolCreateResponse201;

export type CloudConfigsCustomMachinePoolCreateResponse =
  CloudConfigsCustomMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomMachinePoolCreateUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools`;
};

export const CloudConfigsCustomMachinePoolCreate = async (
  cloudType: string,
  configUid: string,
  CustomMachinePoolConfigEntityBody: CustomMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsCustomMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomMachinePoolCreateUrl(cloudType, configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(CustomMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsCustomMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsCustomMachinePoolDeleteResponseComposite =
  CloudConfigsCustomMachinePoolDeleteResponse204;

export type CloudConfigsCustomMachinePoolDeleteResponse =
  CloudConfigsCustomMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomMachinePoolDeleteUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsCustomMachinePoolDelete = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsCustomMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomMachinePoolDeleteUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Custom cloud config's machine pool
 */
export type CloudConfigsCustomMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsCustomMachinePoolUpdateResponseComposite =
  CloudConfigsCustomMachinePoolUpdateResponse204;

export type CloudConfigsCustomMachinePoolUpdateResponse =
  CloudConfigsCustomMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomMachinePoolUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsCustomMachinePoolUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  CustomMachinePoolConfigEntityBody: CustomMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsCustomMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomMachinePoolUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(CustomMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Custom machines
 */
export type CloudConfigsCustomPoolMachinesListResponse200 = {
  data: CustomMachines;
  status: 200;
};

export type CloudConfigsCustomPoolMachinesListResponseComposite =
  CloudConfigsCustomPoolMachinesListResponse200;

export type CloudConfigsCustomPoolMachinesListResponse =
  CloudConfigsCustomPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesListUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsCustomPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsCustomPoolMachinesList = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsCustomPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsCustomPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesListUrl(
      cloudType,
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsCustomPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsCustomPoolMachinesAddResponseComposite =
  CloudConfigsCustomPoolMachinesAddResponse201;

export type CloudConfigsCustomPoolMachinesAddResponse =
  CloudConfigsCustomPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesAddUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsCustomPoolMachinesAdd = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  CustomMachineBody: CustomMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsCustomPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesAddUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(CustomMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Custom machine
 */
export type CloudConfigsCustomPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsCustomPoolMachinesUidDeleteResponseComposite =
  CloudConfigsCustomPoolMachinesUidDeleteResponse204;

export type CloudConfigsCustomPoolMachinesUidDeleteResponse =
  CloudConfigsCustomPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesUidDeleteUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsCustomPoolMachinesUidDelete = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsCustomPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesUidDeleteUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified Custom machine
 */
export type CloudConfigsCustomPoolMachinesUidGetResponse200 = {
  data: CustomMachine;
  status: 200;
};

export type CloudConfigsCustomPoolMachinesUidGetResponseComposite =
  CloudConfigsCustomPoolMachinesUidGetResponse200;

export type CloudConfigsCustomPoolMachinesUidGetResponse =
  CloudConfigsCustomPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesUidGetUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsCustomPoolMachinesUidGet = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsCustomPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesUidGetUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsCustomPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsCustomPoolMachinesUidUpdateResponseComposite =
  CloudConfigsCustomPoolMachinesUidUpdateResponse204;

export type CloudConfigsCustomPoolMachinesUidUpdateResponse =
  CloudConfigsCustomPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesUidUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsCustomPoolMachinesUidUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  CustomMachineBody: CustomMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsCustomPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesUidUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(CustomMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsCustomPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsCustomPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified edge-native cloud config
 */
export type CloudConfigsEdgeNativeGetResponse200 = {
  data: EdgeNativeCloudConfig;
  status: 200;
};

export type CloudConfigsEdgeNativeGetResponseComposite =
  CloudConfigsEdgeNativeGetResponse200;

export type CloudConfigsEdgeNativeGetResponse =
  CloudConfigsEdgeNativeGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}`;
};

export const CloudConfigsEdgeNativeGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativeGetResponse> => {
  const res = await fetch(getV1CloudConfigsEdgeNativeGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativeGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsEdgeNativeUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEdgeNativeUidClusterConfigResponseComposite =
  CloudConfigsEdgeNativeUidClusterConfigResponse204;

export type CloudConfigsEdgeNativeUidClusterConfigResponse =
  CloudConfigsEdgeNativeUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/clusterConfig`;
};

export const CloudConfigsEdgeNativeUidClusterConfig = async (
  configUid: string,
  EdgeNativeCloudClusterConfigEntity: EdgeNativeCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativeUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EdgeNativeCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativeUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativeUidClusterConfigResponse;
};

/**
 * @summary Creates a edge-native cloud config's machine pool
 */
export type CloudConfigsEdgeNativeMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsEdgeNativeMachinePoolCreateResponseComposite =
  CloudConfigsEdgeNativeMachinePoolCreateResponse201;

export type CloudConfigsEdgeNativeMachinePoolCreateResponse =
  CloudConfigsEdgeNativeMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools`;
};

export const CloudConfigsEdgeNativeMachinePoolCreate = async (
  configUid: string,
  EdgeNativeMachinePoolConfigEntityBody: EdgeNativeMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativeMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EdgeNativeMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativeMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativeMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsEdgeNativeMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEdgeNativeMachinePoolDeleteResponseComposite =
  CloudConfigsEdgeNativeMachinePoolDeleteResponse204;

export type CloudConfigsEdgeNativeMachinePoolDeleteResponse =
  CloudConfigsEdgeNativeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsEdgeNativeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativeMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified edge-native cloud config's machine pool
 */
export type CloudConfigsEdgeNativeMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEdgeNativeMachinePoolUpdateResponseComposite =
  CloudConfigsEdgeNativeMachinePoolUpdateResponse204;

export type CloudConfigsEdgeNativeMachinePoolUpdateResponse =
  CloudConfigsEdgeNativeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsEdgeNativeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  EdgeNativeMachinePoolConfigEntityBody: EdgeNativeMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EdgeNativeMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativeMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of edge-native machines
 */
export type CloudConfigsEdgeNativePoolMachinesListResponse200 = {
  data: EdgeNativeMachines;
  status: 200;
};

export type CloudConfigsEdgeNativePoolMachinesListResponseComposite =
  CloudConfigsEdgeNativePoolMachinesListResponse200;

export type CloudConfigsEdgeNativePoolMachinesListResponse =
  CloudConfigsEdgeNativePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsEdgeNativePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesListUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativePoolMachinesListResponse;
};

/**
 * @summary Adds the edge-native machine to cloud config's machine pool
 */
export type CloudConfigsEdgeNativePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsEdgeNativePoolMachinesAddResponseComposite =
  CloudConfigsEdgeNativePoolMachinesAddResponse201;

export type CloudConfigsEdgeNativePoolMachinesAddResponse =
  CloudConfigsEdgeNativePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsEdgeNativePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  EdgeNativeMachineBody: EdgeNativeMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EdgeNativeMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified edge-native machine
 */
export type CloudConfigsEdgeNativePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEdgeNativePoolMachinesUidDeleteResponseComposite =
  CloudConfigsEdgeNativePoolMachinesUidDeleteResponse204;

export type CloudConfigsEdgeNativePoolMachinesUidDeleteResponse =
  CloudConfigsEdgeNativePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsEdgeNativePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified edge-native machine
 */
export type CloudConfigsEdgeNativePoolMachinesUidGetResponse200 = {
  data: EdgeNativeMachine;
  status: 200;
};

export type CloudConfigsEdgeNativePoolMachinesUidGetResponseComposite =
  CloudConfigsEdgeNativePoolMachinesUidGetResponse200;

export type CloudConfigsEdgeNativePoolMachinesUidGetResponse =
  CloudConfigsEdgeNativePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsEdgeNativePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type CloudConfigsEdgeNativePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEdgeNativePoolMachinesUidUpdateResponseComposite =
  CloudConfigsEdgeNativePoolMachinesUidUpdateResponse204;

export type CloudConfigsEdgeNativePoolMachinesUidUpdateResponse =
  CloudConfigsEdgeNativePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsEdgeNativePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  EdgeNativeMachineBody: EdgeNativeMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsEdgeNativePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EdgeNativeMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEdgeNativePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEdgeNativePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified EKS cloud config
 */
export type CloudConfigsEksGetResponse200 = {
  data: EksCloudConfig;
  status: 200;
};

export type CloudConfigsEksGetResponseComposite = CloudConfigsEksGetResponse200;

export type CloudConfigsEksGetResponse = CloudConfigsEksGetResponseComposite & {
  headers: Headers;
};

export const getV1CloudConfigsEksGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}`;
};

export const CloudConfigsEksGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsEksGetResponse> => {
  const res = await fetch(getV1CloudConfigsEksGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsEksUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEksUidClusterConfigResponseComposite =
  CloudConfigsEksUidClusterConfigResponse204;

export type CloudConfigsEksUidClusterConfigResponse =
  CloudConfigsEksUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/clusterConfig`;
};

export const CloudConfigsEksUidClusterConfig = async (
  configUid: string,
  EksCloudClusterConfigEntity: EksCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsEksUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsEksUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EksCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksUidClusterConfigResponse;
};

/**
 * @summary Updates EKS cloud config's fargate profiles
 */
export type CloudConfigsEksUidFargateProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEksUidFargateProfilesUpdateResponseComposite =
  CloudConfigsEksUidFargateProfilesUpdateResponse204;

export type CloudConfigsEksUidFargateProfilesUpdateResponse =
  CloudConfigsEksUidFargateProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksUidFargateProfilesUpdateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/fargateProfiles`;
};

export const CloudConfigsEksUidFargateProfilesUpdate = async (
  configUid: string,
  EksFargateProfiles: EksFargateProfiles,
  options?: RequestInit,
): Promise<CloudConfigsEksUidFargateProfilesUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksUidFargateProfilesUpdateUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EksFargateProfiles),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksUidFargateProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksUidFargateProfilesUpdateResponse;
};

/**
 * @summary Creates an EKS cloud config's machine pool
 */
export type CloudConfigsEksMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsEksMachinePoolCreateResponseComposite =
  CloudConfigsEksMachinePoolCreateResponse201;

export type CloudConfigsEksMachinePoolCreateResponse =
  CloudConfigsEksMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools`;
};

export const CloudConfigsEksMachinePoolCreate = async (
  configUid: string,
  EksMachinePoolConfigEntityBody: EksMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsEksMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsEksMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EksMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsEksMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEksMachinePoolDeleteResponseComposite =
  CloudConfigsEksMachinePoolDeleteResponse204;

export type CloudConfigsEksMachinePoolDeleteResponse =
  CloudConfigsEksMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsEksMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsEksMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified EKS cloud config's machine pool
 */
export type CloudConfigsEksMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEksMachinePoolUpdateResponseComposite =
  CloudConfigsEksMachinePoolUpdateResponse204;

export type CloudConfigsEksMachinePoolUpdateResponse =
  CloudConfigsEksMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsEksMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  EksMachinePoolConfigEntityBody: EksMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsEksMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(EksMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of EKS machines
 */
export type CloudConfigsEksPoolMachinesListResponse200 = {
  data: AwsMachines;
  status: 200;
};

export type CloudConfigsEksPoolMachinesListResponseComposite =
  CloudConfigsEksPoolMachinesListResponse200;

export type CloudConfigsEksPoolMachinesListResponse =
  CloudConfigsEksPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsEksPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsEksPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsEksPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsEksPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsEksPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsEksPoolMachinesAddResponseComposite =
  CloudConfigsEksPoolMachinesAddResponse201;

export type CloudConfigsEksPoolMachinesAddResponse =
  CloudConfigsEksPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsEksPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  AwsMachineBody: AwsMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsEksPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified EKS machine
 */
export type CloudConfigsEksPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEksPoolMachinesUidDeleteResponseComposite =
  CloudConfigsEksPoolMachinesUidDeleteResponse204;

export type CloudConfigsEksPoolMachinesUidDeleteResponse =
  CloudConfigsEksPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsEksPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsEksPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified EKS machine
 */
export type CloudConfigsEksPoolMachinesUidGetResponse200 = {
  data: AwsMachine;
  status: 200;
};

export type CloudConfigsEksPoolMachinesUidGetResponseComposite =
  CloudConfigsEksPoolMachinesUidGetResponse200;

export type CloudConfigsEksPoolMachinesUidGetResponse =
  CloudConfigsEksPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsEksPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsEksPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsEksPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsEksPoolMachinesUidUpdateResponseComposite =
  CloudConfigsEksPoolMachinesUidUpdateResponse204;

export type CloudConfigsEksPoolMachinesUidUpdateResponse =
  CloudConfigsEksPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsEksPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  AwsMachineBody: AwsMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsEksPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsEksPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsEksPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified GCP cloud config
 */
export type CloudConfigsGcpGetResponse200 = {
  data: GcpCloudConfig;
  status: 200;
};

export type CloudConfigsGcpGetResponseComposite = CloudConfigsGcpGetResponse200;

export type CloudConfigsGcpGetResponse = CloudConfigsGcpGetResponseComposite & {
  headers: Headers;
};

export const getV1CloudConfigsGcpGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}`;
};

export const CloudConfigsGcpGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGcpGetResponse> => {
  const res = await fetch(getV1CloudConfigsGcpGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsGcpUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGcpUidClusterConfigResponseComposite =
  CloudConfigsGcpUidClusterConfigResponse204;

export type CloudConfigsGcpUidClusterConfigResponse =
  CloudConfigsGcpUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/clusterConfig`;
};

export const CloudConfigsGcpUidClusterConfig = async (
  configUid: string,
  GcpCloudClusterConfigEntityBody: GcpCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGcpUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsGcpUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpCloudClusterConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpUidClusterConfigResponse;
};

/**
 * @summary Creates a Gcp cloud config's machine pool
 */
export type CloudConfigsGcpMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsGcpMachinePoolCreateResponseComposite =
  CloudConfigsGcpMachinePoolCreateResponse201;

export type CloudConfigsGcpMachinePoolCreateResponse =
  CloudConfigsGcpMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools`;
};

export const CloudConfigsGcpMachinePoolCreate = async (
  configUid: string,
  GcpMachinePoolConfigEntityBody: GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGcpMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsGcpMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsGcpMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGcpMachinePoolDeleteResponseComposite =
  CloudConfigsGcpMachinePoolDeleteResponse204;

export type CloudConfigsGcpMachinePoolDeleteResponse =
  CloudConfigsGcpMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsGcpMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsGcpMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified GCP cloud config's machine pool
 */
export type CloudConfigsGcpMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGcpMachinePoolUpdateResponseComposite =
  CloudConfigsGcpMachinePoolUpdateResponse204;

export type CloudConfigsGcpMachinePoolUpdateResponse =
  CloudConfigsGcpMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsGcpMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  GcpMachinePoolConfigEntityBody: GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGcpMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GcpMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of GCP machines
 */
export type CloudConfigsGcpPoolMachinesListResponse200 = {
  data: GcpMachines;
  status: 200;
};

export type CloudConfigsGcpPoolMachinesListResponseComposite =
  CloudConfigsGcpPoolMachinesListResponse200;

export type CloudConfigsGcpPoolMachinesListResponse =
  CloudConfigsGcpPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGcpPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsGcpPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGcpPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsGcpPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsGcpPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsGcpPoolMachinesAddResponseComposite =
  CloudConfigsGcpPoolMachinesAddResponse201;

export type CloudConfigsGcpPoolMachinesAddResponse =
  CloudConfigsGcpPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsGcpPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  GcpMachineBody: GcpMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsGcpPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified GCP machine
 */
export type CloudConfigsGcpPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGcpPoolMachinesUidDeleteResponseComposite =
  CloudConfigsGcpPoolMachinesUidDeleteResponse204;

export type CloudConfigsGcpPoolMachinesUidDeleteResponse =
  CloudConfigsGcpPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGcpPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGcpPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified GCP machine
 */
export type CloudConfigsGcpPoolMachinesUidGetResponse200 = {
  data: GcpMachine;
  status: 200;
};

export type CloudConfigsGcpPoolMachinesUidGetResponseComposite =
  CloudConfigsGcpPoolMachinesUidGetResponse200;

export type CloudConfigsGcpPoolMachinesUidGetResponse =
  CloudConfigsGcpPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGcpPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGcpPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsGcpPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGcpPoolMachinesUidUpdateResponseComposite =
  CloudConfigsGcpPoolMachinesUidUpdateResponse204;

export type CloudConfigsGcpPoolMachinesUidUpdateResponse =
  CloudConfigsGcpPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGcpPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  GcpMachineBody: GcpMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsGcpPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGcpPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGcpPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Generic cloud config
 */
export type CloudConfigsGenericGetResponse200 = {
  data: GenericCloudConfig;
  status: 200;
};

export type CloudConfigsGenericGetResponseComposite =
  CloudConfigsGenericGetResponse200;

export type CloudConfigsGenericGetResponse =
  CloudConfigsGenericGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}`;
};

export const CloudConfigsGenericGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGenericGetResponse> => {
  const res = await fetch(getV1CloudConfigsGenericGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsGenericUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGenericUidClusterConfigResponseComposite =
  CloudConfigsGenericUidClusterConfigResponse204;

export type CloudConfigsGenericUidClusterConfigResponse =
  CloudConfigsGenericUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/clusterConfig`;
};

export const CloudConfigsGenericUidClusterConfig = async (
  configUid: string,
  GenericCloudClusterConfigEntity: GenericCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsGenericUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GenericCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericUidClusterConfigResponse;
};

/**
 * @summary Creates a generic cloud config's machine pool
 */
export type CloudConfigsGenericMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsGenericMachinePoolCreateResponseComposite =
  CloudConfigsGenericMachinePoolCreateResponse201;

export type CloudConfigsGenericMachinePoolCreateResponse =
  CloudConfigsGenericMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools`;
};

export const CloudConfigsGenericMachinePoolCreate = async (
  configUid: string,
  GenericMachinePoolConfigEntityBody: GenericMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGenericMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GenericMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsGenericMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGenericMachinePoolDeleteResponseComposite =
  CloudConfigsGenericMachinePoolDeleteResponse204;

export type CloudConfigsGenericMachinePoolDeleteResponse =
  CloudConfigsGenericMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsGenericMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsGenericMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified generic cloud config's machine pool
 */
export type CloudConfigsGenericMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGenericMachinePoolUpdateResponseComposite =
  CloudConfigsGenericMachinePoolUpdateResponse204;

export type CloudConfigsGenericMachinePoolUpdateResponse =
  CloudConfigsGenericMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsGenericMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  GenericMachinePoolConfigEntityBody: GenericMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGenericMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GenericMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Generic machines
 */
export type CloudConfigsGenericPoolMachinesListResponse200 = {
  data: GenericMachines;
  status: 200;
};

export type CloudConfigsGenericPoolMachinesListResponseComposite =
  CloudConfigsGenericPoolMachinesListResponse200;

export type CloudConfigsGenericPoolMachinesListResponse =
  CloudConfigsGenericPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGenericPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsGenericPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGenericPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsGenericPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsGenericPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsGenericPoolMachinesAddResponseComposite =
  CloudConfigsGenericPoolMachinesAddResponse201;

export type CloudConfigsGenericPoolMachinesAddResponse =
  CloudConfigsGenericPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsGenericPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  GenericMachineBody: GenericMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsGenericPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GenericMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified machine
 */
export type CloudConfigsGenericPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGenericPoolMachinesUidDeleteResponseComposite =
  CloudConfigsGenericPoolMachinesUidDeleteResponse204;

export type CloudConfigsGenericPoolMachinesUidDeleteResponse =
  CloudConfigsGenericPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGenericPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGenericPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified generic machine
 */
export type CloudConfigsGenericPoolMachinesUidGetResponse200 = {
  data: GenericMachine;
  status: 200;
};

export type CloudConfigsGenericPoolMachinesUidGetResponseComposite =
  CloudConfigsGenericPoolMachinesUidGetResponse200;

export type CloudConfigsGenericPoolMachinesUidGetResponse =
  CloudConfigsGenericPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGenericPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGenericPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsGenericPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGenericPoolMachinesUidUpdateResponseComposite =
  CloudConfigsGenericPoolMachinesUidUpdateResponse204;

export type CloudConfigsGenericPoolMachinesUidUpdateResponse =
  CloudConfigsGenericPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGenericPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  GenericMachineBody: GenericMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsGenericPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GenericMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGenericPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGenericPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified GKE cloud config
 */
export type CloudConfigsGkeGetResponse200 = {
  data: GcpCloudConfig;
  status: 200;
};

export type CloudConfigsGkeGetResponseComposite = CloudConfigsGkeGetResponse200;

export type CloudConfigsGkeGetResponse = CloudConfigsGkeGetResponseComposite & {
  headers: Headers;
};

export const getV1CloudConfigsGkeGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}`;
};

export const CloudConfigsGkeGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGkeGetResponse> => {
  const res = await fetch(getV1CloudConfigsGkeGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkeGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkeGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsGkeUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGkeUidClusterConfigResponseComposite =
  CloudConfigsGkeUidClusterConfigResponse204;

export type CloudConfigsGkeUidClusterConfigResponse =
  CloudConfigsGkeUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/clusterConfig`;
};

export const CloudConfigsGkeUidClusterConfig = async (
  configUid: string,
  GcpCloudClusterConfigEntityBody: GcpCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGkeUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsGkeUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpCloudClusterConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkeUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkeUidClusterConfigResponse;
};

/**
 * @summary Creates an GKE cloud config's machine pool
 */
export type CloudConfigsGkeMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsGkeMachinePoolCreateResponseComposite =
  CloudConfigsGkeMachinePoolCreateResponse201;

export type CloudConfigsGkeMachinePoolCreateResponse =
  CloudConfigsGkeMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools`;
};

export const CloudConfigsGkeMachinePoolCreate = async (
  configUid: string,
  GcpMachinePoolConfigEntityBody: GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGkeMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsGkeMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkeMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkeMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsGkeMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGkeMachinePoolDeleteResponseComposite =
  CloudConfigsGkeMachinePoolDeleteResponse204;

export type CloudConfigsGkeMachinePoolDeleteResponse =
  CloudConfigsGkeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsGkeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsGkeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkeMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkeMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified GKE cloud config's machine pool
 */
export type CloudConfigsGkeMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGkeMachinePoolUpdateResponseComposite =
  CloudConfigsGkeMachinePoolUpdateResponse204;

export type CloudConfigsGkeMachinePoolUpdateResponse =
  CloudConfigsGkeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsGkeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  GcpMachinePoolConfigEntityBody: GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsGkeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkeMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GcpMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkeMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of GKE machines
 */
export type CloudConfigsGkePoolMachinesListResponse200 = {
  data: GcpMachines;
  status: 200;
};

export type CloudConfigsGkePoolMachinesListResponseComposite =
  CloudConfigsGkePoolMachinesListResponse200;

export type CloudConfigsGkePoolMachinesListResponse =
  CloudConfigsGkePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGkePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsGkePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGkePoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsGkePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkePoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsGkePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsGkePoolMachinesAddResponseComposite =
  CloudConfigsGkePoolMachinesAddResponse201;

export type CloudConfigsGkePoolMachinesAddResponse =
  CloudConfigsGkePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsGkePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  GcpMachineBody: GcpMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsGkePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Gcp machine
 */
export type CloudConfigsGkePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGkePoolMachinesUidDeleteResponseComposite =
  CloudConfigsGkePoolMachinesUidDeleteResponse204;

export type CloudConfigsGkePoolMachinesUidDeleteResponse =
  CloudConfigsGkePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGkePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGkePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified GKE machine
 */
export type CloudConfigsGkePoolMachinesUidGetResponse200 = {
  data: GcpMachine;
  status: 200;
};

export type CloudConfigsGkePoolMachinesUidGetResponseComposite =
  CloudConfigsGkePoolMachinesUidGetResponse200;

export type CloudConfigsGkePoolMachinesUidGetResponse =
  CloudConfigsGkePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGkePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsGkePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsGkePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsGkePoolMachinesUidUpdateResponseComposite =
  CloudConfigsGkePoolMachinesUidUpdateResponse204;

export type CloudConfigsGkePoolMachinesUidUpdateResponse =
  CloudConfigsGkePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsGkePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  GcpMachineBody: GcpMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsGkePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsGkePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsGkePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Maas cloud config
 */
export type CloudConfigsMaasGetResponse200 = {
  data: MaasCloudConfig;
  status: 200;
};

export type CloudConfigsMaasGetResponseComposite =
  CloudConfigsMaasGetResponse200;

export type CloudConfigsMaasGetResponse =
  CloudConfigsMaasGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}`;
};

export const CloudConfigsMaasGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsMaasGetResponse> => {
  const res = await fetch(getV1CloudConfigsMaasGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsMaasUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsMaasUidClusterConfigResponseComposite =
  CloudConfigsMaasUidClusterConfigResponse204;

export type CloudConfigsMaasUidClusterConfigResponse =
  CloudConfigsMaasUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/clusterConfig`;
};

export const CloudConfigsMaasUidClusterConfig = async (
  configUid: string,
  MaasCloudClusterConfigEntity: MaasCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsMaasUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsMaasUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MaasCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasUidClusterConfigResponse;
};

/**
 * @summary Creates an Maas cloud config's machine pool
 */
export type CloudConfigsMaasMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsMaasMachinePoolCreateResponseComposite =
  CloudConfigsMaasMachinePoolCreateResponse201;

export type CloudConfigsMaasMachinePoolCreateResponse =
  CloudConfigsMaasMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools`;
};

export const CloudConfigsMaasMachinePoolCreate = async (
  configUid: string,
  MaasMachinePoolConfigEntityBody: MaasMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsMaasMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MaasMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsMaasMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsMaasMachinePoolDeleteResponseComposite =
  CloudConfigsMaasMachinePoolDeleteResponse204;

export type CloudConfigsMaasMachinePoolDeleteResponse =
  CloudConfigsMaasMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsMaasMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsMaasMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Maas cloud config's machine pool
 */
export type CloudConfigsMaasMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsMaasMachinePoolUpdateResponseComposite =
  CloudConfigsMaasMachinePoolUpdateResponse204;

export type CloudConfigsMaasMachinePoolUpdateResponse =
  CloudConfigsMaasMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsMaasMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  MaasMachinePoolConfigEntityBody: MaasMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsMaasMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MaasMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Maas machines
 */
export type CloudConfigsMaasPoolMachinesListResponse200 = {
  data: MaasMachines;
  status: 200;
};

export type CloudConfigsMaasPoolMachinesListResponseComposite =
  CloudConfigsMaasPoolMachinesListResponse200;

export type CloudConfigsMaasPoolMachinesListResponse =
  CloudConfigsMaasPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsMaasPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsMaasPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsMaasPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsMaasPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsMaasPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsMaasPoolMachinesAddResponseComposite =
  CloudConfigsMaasPoolMachinesAddResponse201;

export type CloudConfigsMaasPoolMachinesAddResponse =
  CloudConfigsMaasPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsMaasPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  MaasMachineBody: MaasMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsMaasPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MaasMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Maas machine
 */
export type CloudConfigsMaasPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsMaasPoolMachinesUidDeleteResponseComposite =
  CloudConfigsMaasPoolMachinesUidDeleteResponse204;

export type CloudConfigsMaasPoolMachinesUidDeleteResponse =
  CloudConfigsMaasPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsMaasPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsMaasPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified Maas machine
 */
export type CloudConfigsMaasPoolMachinesUidGetResponse200 = {
  data: MaasMachine;
  status: 200;
};

export type CloudConfigsMaasPoolMachinesUidGetResponseComposite =
  CloudConfigsMaasPoolMachinesUidGetResponse200;

export type CloudConfigsMaasPoolMachinesUidGetResponse =
  CloudConfigsMaasPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsMaasPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsMaasPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsMaasPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsMaasPoolMachinesUidUpdateResponseComposite =
  CloudConfigsMaasPoolMachinesUidUpdateResponse204;

export type CloudConfigsMaasPoolMachinesUidUpdateResponse =
  CloudConfigsMaasPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsMaasPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  MaasMachineBody: MaasMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsMaasPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MaasMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMaasPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMaasPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified OpenStack cloud config
 */
export type CloudConfigsOpenStackGetResponse200 = {
  data: OpenStackCloudConfig;
  status: 200;
};

export type CloudConfigsOpenStackGetResponseComposite =
  CloudConfigsOpenStackGetResponse200;

export type CloudConfigsOpenStackGetResponse =
  CloudConfigsOpenStackGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}`;
};

export const CloudConfigsOpenStackGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackGetResponse> => {
  const res = await fetch(getV1CloudConfigsOpenStackGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsOpenStackUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsOpenStackUidClusterConfigResponseComposite =
  CloudConfigsOpenStackUidClusterConfigResponse204;

export type CloudConfigsOpenStackUidClusterConfigResponse =
  CloudConfigsOpenStackUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/clusterConfig`;
};

export const CloudConfigsOpenStackUidClusterConfig = async (
  configUid: string,
  OpenStackCloudClusterConfigEntity: OpenStackCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(OpenStackCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackUidClusterConfigResponse;
};

/**
 * @summary Creates a OpenStack cloud config's machine pool
 */
export type CloudConfigsOpenStackMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsOpenStackMachinePoolCreateResponseComposite =
  CloudConfigsOpenStackMachinePoolCreateResponse201;

export type CloudConfigsOpenStackMachinePoolCreateResponse =
  CloudConfigsOpenStackMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools`;
};

export const CloudConfigsOpenStackMachinePoolCreate = async (
  configUid: string,
  OpenStackMachinePoolConfigEntityBody: OpenStackMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(OpenStackMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsOpenStackMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsOpenStackMachinePoolDeleteResponseComposite =
  CloudConfigsOpenStackMachinePoolDeleteResponse204;

export type CloudConfigsOpenStackMachinePoolDeleteResponse =
  CloudConfigsOpenStackMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsOpenStackMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified OpenStack cloud config's machine pool
 */
export type CloudConfigsOpenStackMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsOpenStackMachinePoolUpdateResponseComposite =
  CloudConfigsOpenStackMachinePoolUpdateResponse204;

export type CloudConfigsOpenStackMachinePoolUpdateResponse =
  CloudConfigsOpenStackMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsOpenStackMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  OpenStackMachinePoolConfigEntityBody: OpenStackMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(OpenStackMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of OpenStack machines
 */
export type CloudConfigsOpenStackPoolMachinesListResponse200 = {
  data: OpenStackMachines;
  status: 200;
};

export type CloudConfigsOpenStackPoolMachinesListResponseComposite =
  CloudConfigsOpenStackPoolMachinesListResponse200;

export type CloudConfigsOpenStackPoolMachinesListResponse =
  CloudConfigsOpenStackPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsOpenStackPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesListUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackPoolMachinesListResponse;
};

/**
 * @summary Adds the OpenStack machine to cloud config's machine pool
 */
export type CloudConfigsOpenStackPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsOpenStackPoolMachinesAddResponseComposite =
  CloudConfigsOpenStackPoolMachinesAddResponse201;

export type CloudConfigsOpenStackPoolMachinesAddResponse =
  CloudConfigsOpenStackPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsOpenStackPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  OpenStackMachineBody: OpenStackMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(OpenStackMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified OpenStack machine
 */
export type CloudConfigsOpenStackPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsOpenStackPoolMachinesUidDeleteResponseComposite =
  CloudConfigsOpenStackPoolMachinesUidDeleteResponse204;

export type CloudConfigsOpenStackPoolMachinesUidDeleteResponse =
  CloudConfigsOpenStackPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsOpenStackPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified OpenStack machine
 */
export type CloudConfigsOpenStackPoolMachinesUidGetResponse200 = {
  data: OpenStackMachine;
  status: 200;
};

export type CloudConfigsOpenStackPoolMachinesUidGetResponseComposite =
  CloudConfigsOpenStackPoolMachinesUidGetResponse200;

export type CloudConfigsOpenStackPoolMachinesUidGetResponse =
  CloudConfigsOpenStackPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsOpenStackPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type CloudConfigsOpenStackPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsOpenStackPoolMachinesUidUpdateResponseComposite =
  CloudConfigsOpenStackPoolMachinesUidUpdateResponse204;

export type CloudConfigsOpenStackPoolMachinesUidUpdateResponse =
  CloudConfigsOpenStackPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsOpenStackPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  OpenStackMachineBody: OpenStackMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsOpenStackPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(OpenStackMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsOpenStackPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsOpenStackPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Virtual cloud config
 */
export type CloudConfigsVirtualGetResponse200 = {
  data: VirtualCloudConfig;
  status: 200;
};

export type CloudConfigsVirtualGetResponseComposite =
  CloudConfigsVirtualGetResponse200;

export type CloudConfigsVirtualGetResponse =
  CloudConfigsVirtualGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}`;
};

export const CloudConfigsVirtualGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsVirtualGetResponse> => {
  const res = await fetch(getV1CloudConfigsVirtualGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsVirtualUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVirtualUidClusterConfigResponseComposite =
  CloudConfigsVirtualUidClusterConfigResponse204;

export type CloudConfigsVirtualUidClusterConfigResponse =
  CloudConfigsVirtualUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/clusterConfig`;
};

export const CloudConfigsVirtualUidClusterConfig = async (
  configUid: string,
  VirtualCloudClusterConfigEntity: VirtualCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsVirtualUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VirtualCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualUidClusterConfigResponse;
};

/**
 * @summary Creates a virtual cloud config's machine pool
 */
export type CloudConfigsVirtualMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsVirtualMachinePoolCreateResponseComposite =
  CloudConfigsVirtualMachinePoolCreateResponse201;

export type CloudConfigsVirtualMachinePoolCreateResponse =
  CloudConfigsVirtualMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools`;
};

export const CloudConfigsVirtualMachinePoolCreate = async (
  configUid: string,
  VirtualMachinePoolConfigEntityBody: VirtualMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsVirtualMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VirtualMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsVirtualMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVirtualMachinePoolDeleteResponseComposite =
  CloudConfigsVirtualMachinePoolDeleteResponse204;

export type CloudConfigsVirtualMachinePoolDeleteResponse =
  CloudConfigsVirtualMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsVirtualMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsVirtualMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified virtual cloud config's machine pool
 */
export type CloudConfigsVirtualMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVirtualMachinePoolUpdateResponseComposite =
  CloudConfigsVirtualMachinePoolUpdateResponse204;

export type CloudConfigsVirtualMachinePoolUpdateResponse =
  CloudConfigsVirtualMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsVirtualMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  VirtualMachinePoolConfigEntityBody: VirtualMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsVirtualMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VirtualMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of virtual machines
 */
export type CloudConfigsVirtualPoolMachinesListResponse200 = {
  data: VirtualMachines;
  status: 200;
};

export type CloudConfigsVirtualPoolMachinesListResponseComposite =
  CloudConfigsVirtualPoolMachinesListResponse200;

export type CloudConfigsVirtualPoolMachinesListResponse =
  CloudConfigsVirtualPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVirtualPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsVirtualPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVirtualPoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsVirtualPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type CloudConfigsVirtualPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsVirtualPoolMachinesAddResponseComposite =
  CloudConfigsVirtualPoolMachinesAddResponse201;

export type CloudConfigsVirtualPoolMachinesAddResponse =
  CloudConfigsVirtualPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsVirtualPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  VirtualMachineBody: VirtualMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsVirtualPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VirtualMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified virtual machine
 */
export type CloudConfigsVirtualPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVirtualPoolMachinesUidDeleteResponseComposite =
  CloudConfigsVirtualPoolMachinesUidDeleteResponse204;

export type CloudConfigsVirtualPoolMachinesUidDeleteResponse =
  CloudConfigsVirtualPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsVirtualPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsVirtualPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified virtual machine
 */
export type CloudConfigsVirtualPoolMachinesUidGetResponse200 = {
  data: VirtualMachine;
  status: 200;
};

export type CloudConfigsVirtualPoolMachinesUidGetResponseComposite =
  CloudConfigsVirtualPoolMachinesUidGetResponse200;

export type CloudConfigsVirtualPoolMachinesUidGetResponse =
  CloudConfigsVirtualPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsVirtualPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsVirtualPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type CloudConfigsVirtualPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVirtualPoolMachinesUidUpdateResponseComposite =
  CloudConfigsVirtualPoolMachinesUidUpdateResponse204;

export type CloudConfigsVirtualPoolMachinesUidUpdateResponse =
  CloudConfigsVirtualPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsVirtualPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  VirtualMachineBody: VirtualMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsVirtualPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VirtualMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualPoolMachinesUidUpdateResponse;
};

/**
 * @summary Updates and resizes the virtual cluster
 */
export type CloudConfigsVirtualUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVirtualUidUpdateResponseComposite =
  CloudConfigsVirtualUidUpdateResponse204;

export type CloudConfigsVirtualUidUpdateResponse =
  CloudConfigsVirtualUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualUidUpdateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/resize`;
};

export const CloudConfigsVirtualUidUpdate = async (
  configUid: string,
  VirtualClusterResize: VirtualClusterResize,
  options?: RequestInit,
): Promise<CloudConfigsVirtualUidUpdateResponse> => {
  const res = await fetch(getV1CloudConfigsVirtualUidUpdateUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VirtualClusterResize),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVirtualUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVirtualUidUpdateResponse;
};

/**
 * @summary Returns the specified vSphere cloud config
 */
export type CloudConfigsVsphereGetResponse200 = {
  data: VsphereCloudConfig;
  status: 200;
};

export type CloudConfigsVsphereGetResponseComposite =
  CloudConfigsVsphereGetResponse200;

export type CloudConfigsVsphereGetResponse =
  CloudConfigsVsphereGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}`;
};

export const CloudConfigsVsphereGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsVsphereGetResponse> => {
  const res = await fetch(getV1CloudConfigsVsphereGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVsphereGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVsphereGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type CloudConfigsVsphereUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVsphereUidClusterConfigResponseComposite =
  CloudConfigsVsphereUidClusterConfigResponse204;

export type CloudConfigsVsphereUidClusterConfigResponse =
  CloudConfigsVsphereUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/clusterConfig`;
};

export const CloudConfigsVsphereUidClusterConfig = async (
  configUid: string,
  VsphereCloudClusterConfigEntity: VsphereCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<CloudConfigsVsphereUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VsphereCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVsphereUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVsphereUidClusterConfigResponse;
};

/**
 * @summary Creates a vSphere cloud config's machine pool
 */
export type CloudConfigsVsphereMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsVsphereMachinePoolCreateResponseComposite =
  CloudConfigsVsphereMachinePoolCreateResponse201;

export type CloudConfigsVsphereMachinePoolCreateResponse =
  CloudConfigsVsphereMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools`;
};

export const CloudConfigsVsphereMachinePoolCreate = async (
  configUid: string,
  VsphereMachinePoolConfigEntityBody: VsphereMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsVsphereMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VsphereMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVsphereMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVsphereMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type CloudConfigsVsphereMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVsphereMachinePoolDeleteResponseComposite =
  CloudConfigsVsphereMachinePoolDeleteResponse204;

export type CloudConfigsVsphereMachinePoolDeleteResponse =
  CloudConfigsVsphereMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsVsphereMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<CloudConfigsVsphereMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVsphereMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVsphereMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified vSphere cloud config's machine pool
 */
export type CloudConfigsVsphereMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVsphereMachinePoolUpdateResponseComposite =
  CloudConfigsVsphereMachinePoolUpdateResponse204;

export type CloudConfigsVsphereMachinePoolUpdateResponse =
  CloudConfigsVsphereMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}`;
};

export const CloudConfigsVsphereMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  VsphereMachinePoolConfigEntityBody: VsphereMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<CloudConfigsVsphereMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VsphereMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVsphereMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVsphereMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of vSphere machines
 */
export type CloudConfigsVspherePoolMachinesListResponse200 = {
  data: VsphereMachines;
  status: 200;
};

export type CloudConfigsVspherePoolMachinesListResponseComposite =
  CloudConfigsVspherePoolMachinesListResponse200;

export type CloudConfigsVspherePoolMachinesListResponse =
  CloudConfigsVspherePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVspherePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsVspherePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVspherePoolMachinesListParams,
  options?: RequestInit,
): Promise<CloudConfigsVspherePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVspherePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVspherePoolMachinesListResponse;
};

/**
 * @summary Adds the vSphere machine to cloud config's machine pool
 */
export type CloudConfigsVspherePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudConfigsVspherePoolMachinesAddResponseComposite =
  CloudConfigsVspherePoolMachinesAddResponse201;

export type CloudConfigsVspherePoolMachinesAddResponse =
  CloudConfigsVspherePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const CloudConfigsVspherePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  VsphereMachineBody: VsphereMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsVspherePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VsphereMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVspherePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVspherePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified vSphere machine
 */
export type CloudConfigsVspherePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVspherePoolMachinesUidDeleteResponseComposite =
  CloudConfigsVspherePoolMachinesUidDeleteResponse204;

export type CloudConfigsVspherePoolMachinesUidDeleteResponse =
  CloudConfigsVspherePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsVspherePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsVspherePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVspherePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVspherePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified vSphere machine
 */
export type CloudConfigsVspherePoolMachinesUidGetResponse200 = {
  data: VsphereMachine;
  status: 200;
};

export type CloudConfigsVspherePoolMachinesUidGetResponseComposite =
  CloudConfigsVspherePoolMachinesUidGetResponse200;

export type CloudConfigsVspherePoolMachinesUidGetResponse =
  CloudConfigsVspherePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsVspherePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<CloudConfigsVspherePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVspherePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVspherePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type CloudConfigsVspherePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsVspherePoolMachinesUidUpdateResponseComposite =
  CloudConfigsVspherePoolMachinesUidUpdateResponse204;

export type CloudConfigsVspherePoolMachinesUidUpdateResponse =
  CloudConfigsVspherePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const CloudConfigsVspherePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  VsphereMachineBody: VsphereMachineBody,
  options?: RequestInit,
): Promise<CloudConfigsVspherePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(VsphereMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsVspherePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsVspherePoolMachinesUidUpdateResponse;
};

/**
 * @summary Updates the specified machine maintenance
 */
export type CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseComposite =
  CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse204;

export type CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse =
  CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}/maintenance`;
};

export const CloudConfigsMachinePoolsMachineUidMaintenanceUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  MachineMaintenance: MachineMaintenance,
  options?: RequestInit,
): Promise<CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MachineMaintenance),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse;
};

/**
 * @summary Updates the specified machine maintenance
 */
export type CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse204 =
  {
    data: void;
    status: 204;
  };

export type CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseComposite =
  CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse204;

export type CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse =
  CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateUrl =
  (
    cloudType: string,
    configUid: string,
    machinePoolName: string,
    machineUid: string,
  ) => {
    return `https://api.spectrocloud.com/v1/cloudconfigs/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}/maintenance/status`;
  };

export const CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  MachineMaintenanceStatus: MachineMaintenanceStatus,
  options?: RequestInit,
): Promise<CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(MachineMaintenanceStatus),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse;
};

/**
 * @summary Returns the specified cloud config's machine pools and machine uid
 */
export type CloudConfigsMachinePoolsMachineUidsGetResponse200 = {
  data: MachinePoolsMachineUids;
  status: 200;
};

export type CloudConfigsMachinePoolsMachineUidsGetResponseComposite =
  CloudConfigsMachinePoolsMachineUidsGetResponse200;

export type CloudConfigsMachinePoolsMachineUidsGetResponse =
  CloudConfigsMachinePoolsMachineUidsGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMachinePoolsMachineUidsGetUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/${configUid}/machinePools/machineUids`;
};

export const CloudConfigsMachinePoolsMachineUidsGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<CloudConfigsMachinePoolsMachineUidsGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsMachinePoolsMachineUidsGetUrl(configUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudConfigsMachinePoolsMachineUidsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudConfigsMachinePoolsMachineUidsGetResponse;
};
