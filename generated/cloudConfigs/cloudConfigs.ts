/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AwsCloudClusterConfigEntity,
  AwsCloudConfig,
  AwsCloudHybridConfigEntity,
  AwsMachine,
  AwsMachines,
  AzureCloudConfig,
  AzureMachine,
  AzureMachines,
  CloudConfigsAksPoolMachinesListParams,
  CloudConfigsAwsPoolMachinesListParams,
  CloudConfigsAzurePoolMachinesListParams,
  CloudConfigsCustomPoolMachinesListParams,
  CloudConfigsEksPoolMachinesListParams,
  CloudConfigsGcpPoolMachinesListParams,
  CloudConfigsGenericPoolMachinesListParams,
  CloudConfigsGkePoolMachinesListParams,
  CloudConfigsMaasPoolMachinesListParams,
  CloudConfigsVirtualPoolMachinesListParams,
  CloudConfigsVspherePoolMachinesListParams,
  CustomCloudClusterConfigEntity,
  CustomCloudConfig,
  CustomMachine,
  CustomMachines,
  EdgeNativeCloudClusterConfigEntity,
  EdgeNativeCloudConfig,
  EdgeNativeMachine,
  EdgeNativeMachines,
  EksCloudClusterConfigEntity,
  EksCloudConfig,
  EksFargateProfiles,
  GcpCloudConfig,
  GcpMachine,
  GcpMachines,
  GenericCloudClusterConfigEntity,
  GenericCloudConfig,
  GenericMachine,
  GenericMachines,
  HybridEdgeNativeMachinePoolConfig,
  HybridEdgeNativeMachinePoolConfigEntity,
  HybridEdgeNativeMachinePoolConfigUpdateEntity,
  MaasCloudClusterConfigEntity,
  MaasCloudConfig,
  MaasMachine,
  MaasMachines,
  MachineMaintenance,
  MachineMaintenanceStatus,
  MachinePoolsMachineUids,
  OpenStackCloudClusterConfigEntity,
  OpenStackCloudConfig,
  OpenStackMachine,
  OpenStackMachines,
  Uid,
  V1AwsMachineBody,
  V1AwsMachinePoolConfigEntityBody,
  V1AzureCloudClusterConfigEntityBody,
  V1AzureMachineBody,
  V1AzureMachinePoolConfigEntityBody,
  V1CustomMachineBody,
  V1CustomMachinePoolConfigEntityBody,
  V1EdgeNativeMachineBody,
  V1EdgeNativeMachinePoolConfigEntityBody,
  V1EksMachinePoolConfigEntityBody,
  V1GcpCloudClusterConfigEntityBody,
  V1GcpMachineBody,
  V1GcpMachinePoolConfigEntityBody,
  V1GenericMachineBody,
  V1GenericMachinePoolConfigEntityBody,
  V1MaasMachineBody,
  V1MaasMachinePoolConfigEntityBody,
  V1OpenStackMachineBody,
  V1OpenStackMachinePoolConfigEntityBody,
  V1VirtualMachineBody,
  V1VirtualMachinePoolConfigEntityBody,
  V1VsphereMachineBody,
  V1VsphereMachinePoolConfigEntityBody,
  VirtualCloudClusterConfigEntity,
  VirtualCloudConfig,
  VirtualClusterResize,
  VirtualMachine,
  VirtualMachines,
  VsphereCloudClusterConfigEntity,
  VsphereCloudConfig,
  VsphereMachine,
  VsphereMachines,
} from ".././schemas";

/**
 * @summary Returns the specified AKS cloud config
 */
export type cloudConfigsAksGetResponse200 = {
  data: AzureCloudConfig;
  status: 200;
};

export type cloudConfigsAksGetResponseComposite = cloudConfigsAksGetResponse200;

export type cloudConfigsAksGetResponse = cloudConfigsAksGetResponseComposite & {
  headers: Headers;
};

export const getCloudConfigsAksGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}`;
};

export const cloudConfigsAksGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAksGetResponse> => {
  const res = await fetch(getCloudConfigsAksGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsAksUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAksUidClusterConfigResponseComposite =
  cloudConfigsAksUidClusterConfigResponse204;

export type cloudConfigsAksUidClusterConfigResponse =
  cloudConfigsAksUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/clusterConfig`;
};

export const cloudConfigsAksUidClusterConfig = async (
  configUid: string,
  v1AzureCloudClusterConfigEntityBody: V1AzureCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAksUidClusterConfigResponse> => {
  const res = await fetch(getCloudConfigsAksUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureCloudClusterConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksUidClusterConfigResponse;
};

/**
 * @summary Creates an AKS cloud config's machine pool
 */
export type cloudConfigsAksMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsAksMachinePoolCreateResponseComposite =
  cloudConfigsAksMachinePoolCreateResponse201;

export type cloudConfigsAksMachinePoolCreateResponse =
  cloudConfigsAksMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools`;
};

export const cloudConfigsAksMachinePoolCreate = async (
  configUid: string,
  v1AzureMachinePoolConfigEntityBody: V1AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAksMachinePoolCreateResponse> => {
  const res = await fetch(getCloudConfigsAksMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsAksMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAksMachinePoolDeleteResponseComposite =
  cloudConfigsAksMachinePoolDeleteResponse204;

export type cloudConfigsAksMachinePoolDeleteResponse =
  cloudConfigsAksMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsAksMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsAksMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsAksMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified AKS cloud config's machine pool
 */
export type cloudConfigsAksMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAksMachinePoolUpdateResponseComposite =
  cloudConfigsAksMachinePoolUpdateResponse204;

export type cloudConfigsAksMachinePoolUpdateResponse =
  cloudConfigsAksMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsAksMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachinePoolConfigEntityBody: V1AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAksMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsAksMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of AKS machines
 */
export type cloudConfigsAksPoolMachinesListResponse200 = {
  data: AzureMachines;
  status: 200;
};

export type cloudConfigsAksPoolMachinesListResponseComposite =
  cloudConfigsAksPoolMachinesListResponse200;

export type cloudConfigsAksPoolMachinesListResponse =
  cloudConfigsAksPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAksPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsAksPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAksPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsAksPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsAksPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsAksPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsAksPoolMachinesAddResponseComposite =
  cloudConfigsAksPoolMachinesAddResponse201;

export type cloudConfigsAksPoolMachinesAddResponse =
  cloudConfigsAksPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsAksPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachineBody: V1AzureMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsAksPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsAksPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Azure machine
 */
export type cloudConfigsAksPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAksPoolMachinesUidDeleteResponseComposite =
  cloudConfigsAksPoolMachinesUidDeleteResponse204;

export type cloudConfigsAksPoolMachinesUidDeleteResponse =
  cloudConfigsAksPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAksPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAksPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsAksPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified AKS machine
 */
export type cloudConfigsAksPoolMachinesUidGetResponse200 = {
  data: AzureMachine;
  status: 200;
};

export type cloudConfigsAksPoolMachinesUidGetResponseComposite =
  cloudConfigsAksPoolMachinesUidGetResponse200;

export type cloudConfigsAksPoolMachinesUidGetResponse =
  cloudConfigsAksPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAksPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAksPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsAksPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsAksPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAksPoolMachinesUidUpdateResponseComposite =
  cloudConfigsAksPoolMachinesUidUpdateResponse204;

export type cloudConfigsAksPoolMachinesUidUpdateResponse =
  cloudConfigsAksPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAksPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAksPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AzureMachineBody: V1AzureMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsAksPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsAksPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAksPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAksPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified AWS cloud config
 */
export type cloudConfigsAwsGetResponse200 = {
  data: AwsCloudConfig;
  status: 200;
};

export type cloudConfigsAwsGetResponseComposite = cloudConfigsAwsGetResponse200;

export type cloudConfigsAwsGetResponse = cloudConfigsAwsGetResponseComposite & {
  headers: Headers;
};

export const getCloudConfigsAwsGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}`;
};

export const cloudConfigsAwsGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAwsGetResponse> => {
  const res = await fetch(getCloudConfigsAwsGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsAwsUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAwsUidClusterConfigResponseComposite =
  cloudConfigsAwsUidClusterConfigResponse204;

export type cloudConfigsAwsUidClusterConfigResponse =
  cloudConfigsAwsUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/clusterConfig`;
};

export const cloudConfigsAwsUidClusterConfig = async (
  configUid: string,
  awsCloudClusterConfigEntity: AwsCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsAwsUidClusterConfigResponse> => {
  const res = await fetch(getCloudConfigsAwsUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsUidClusterConfigResponse;
};

/**
 * @summary Updates the hybrid configuration information of AWS cluster
 */
export type awsCloudConfigsUidHybridConfigResponse204 = {
  data: void;
  status: 204;
};

export type awsCloudConfigsUidHybridConfigResponseComposite =
  awsCloudConfigsUidHybridConfigResponse204;

export type awsCloudConfigsUidHybridConfigResponse =
  awsCloudConfigsUidHybridConfigResponseComposite & {
    headers: Headers;
  };

export const getAwsCloudConfigsUidHybridConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/clusterConfig/hybridConfig`;
};

export const awsCloudConfigsUidHybridConfig = async (
  configUid: string,
  awsCloudHybridConfigEntity: AwsCloudHybridConfigEntity,
  options?: RequestInit,
): Promise<awsCloudConfigsUidHybridConfigResponse> => {
  const res = await fetch(getAwsCloudConfigsUidHybridConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsCloudHybridConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: awsCloudConfigsUidHybridConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as awsCloudConfigsUidHybridConfigResponse;
};

/**
 * @summary Creates an Hybrid AWS cloud config's Edge-Native machine pool
 */
export type v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponseComposite =
  v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse201;

export type v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse =
  v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeUidMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools`;
};

export const v1AwsCloudConfigsEdgeNativeUidMachinePoolCreate = async (
  configUid: string,
  hybridEdgeNativeMachinePoolConfigEntity: HybridEdgeNativeMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeUidMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(hybridEdgeNativeMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified Edge-Native machine pool of hybrid AWS cluster
 */
export type awsCloudConfigsEdgeNativeMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type awsCloudConfigsEdgeNativeMachinePoolDeleteResponseComposite =
  awsCloudConfigsEdgeNativeMachinePoolDeleteResponse204;

export type awsCloudConfigsEdgeNativeMachinePoolDeleteResponse =
  awsCloudConfigsEdgeNativeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getAwsCloudConfigsEdgeNativeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const awsCloudConfigsEdgeNativeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<awsCloudConfigsEdgeNativeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getAwsCloudConfigsEdgeNativeMachinePoolDeleteUrl(
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: awsCloudConfigsEdgeNativeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as awsCloudConfigsEdgeNativeMachinePoolDeleteResponse;
};

/**
 * @summary Returns the specified AWS Cluster's Edge-Native machine pool configuration
 */
export type awsCloudConfigsEdgeNativeMachinePoolGetResponse200 = {
  data: HybridEdgeNativeMachinePoolConfig;
  status: 200;
};

export type awsCloudConfigsEdgeNativeMachinePoolGetResponseComposite =
  awsCloudConfigsEdgeNativeMachinePoolGetResponse200;

export type awsCloudConfigsEdgeNativeMachinePoolGetResponse =
  awsCloudConfigsEdgeNativeMachinePoolGetResponseComposite & {
    headers: Headers;
  };

export const getAwsCloudConfigsEdgeNativeMachinePoolGetUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const awsCloudConfigsEdgeNativeMachinePoolGet = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<awsCloudConfigsEdgeNativeMachinePoolGetResponse> => {
  const res = await fetch(
    getAwsCloudConfigsEdgeNativeMachinePoolGetUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: awsCloudConfigsEdgeNativeMachinePoolGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as awsCloudConfigsEdgeNativeMachinePoolGetResponse;
};

/**
 * @summary Updates the specified Hybrid AWS cluster cloud config's Edge-Native machine pool
 */
export type awsCloudConfigsEdgeNativeMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type awsCloudConfigsEdgeNativeMachinePoolUpdateResponseComposite =
  awsCloudConfigsEdgeNativeMachinePoolUpdateResponse204;

export type awsCloudConfigsEdgeNativeMachinePoolUpdateResponse =
  awsCloudConfigsEdgeNativeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getAwsCloudConfigsEdgeNativeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const awsCloudConfigsEdgeNativeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  hybridEdgeNativeMachinePoolConfigUpdateEntity: HybridEdgeNativeMachinePoolConfigUpdateEntity,
  options?: RequestInit,
): Promise<awsCloudConfigsEdgeNativeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getAwsCloudConfigsEdgeNativeMachinePoolUpdateUrl(
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(hybridEdgeNativeMachinePoolConfigUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: awsCloudConfigsEdgeNativeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as awsCloudConfigsEdgeNativeMachinePoolUpdateResponse;
};

/**
 * @summary Creates an AWS cloud config's machine pool
 */
export type cloudConfigsAwsMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsAwsMachinePoolCreateResponseComposite =
  cloudConfigsAwsMachinePoolCreateResponse201;

export type cloudConfigsAwsMachinePoolCreateResponse =
  cloudConfigsAwsMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools`;
};

export const cloudConfigsAwsMachinePoolCreate = async (
  configUid: string,
  v1AwsMachinePoolConfigEntityBody: V1AwsMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAwsMachinePoolCreateResponse> => {
  const res = await fetch(getCloudConfigsAwsMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsAwsMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAwsMachinePoolDeleteResponseComposite =
  cloudConfigsAwsMachinePoolDeleteResponse204;

export type cloudConfigsAwsMachinePoolDeleteResponse =
  cloudConfigsAwsMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsAwsMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsAwsMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsAwsMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified AWS cloud config's machine pool
 */
export type cloudConfigsAwsMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAwsMachinePoolUpdateResponseComposite =
  cloudConfigsAwsMachinePoolUpdateResponse204;

export type cloudConfigsAwsMachinePoolUpdateResponse =
  cloudConfigsAwsMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsAwsMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1AwsMachinePoolConfigEntityBody: V1AwsMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAwsMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsAwsMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of AWS machines
 */
export type cloudConfigsAwsPoolMachinesListResponse200 = {
  data: AwsMachines;
  status: 200;
};

export type cloudConfigsAwsPoolMachinesListResponseComposite =
  cloudConfigsAwsPoolMachinesListResponse200;

export type cloudConfigsAwsPoolMachinesListResponse =
  cloudConfigsAwsPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAwsPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsAwsPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAwsPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsAwsPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsAwsPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsAwsPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsAwsPoolMachinesAddResponseComposite =
  cloudConfigsAwsPoolMachinesAddResponse201;

export type cloudConfigsAwsPoolMachinesAddResponse =
  cloudConfigsAwsPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsAwsPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AwsMachineBody: V1AwsMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsAwsPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsAwsPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified AWS machine
 */
export type cloudConfigsAwsPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAwsPoolMachinesUidDeleteResponseComposite =
  cloudConfigsAwsPoolMachinesUidDeleteResponse204;

export type cloudConfigsAwsPoolMachinesUidDeleteResponse =
  cloudConfigsAwsPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAwsPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAwsPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsAwsPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified AWS machine
 */
export type cloudConfigsAwsPoolMachinesUidGetResponse200 = {
  data: AwsMachine;
  status: 200;
};

export type cloudConfigsAwsPoolMachinesUidGetResponseComposite =
  cloudConfigsAwsPoolMachinesUidGetResponse200;

export type cloudConfigsAwsPoolMachinesUidGetResponse =
  cloudConfigsAwsPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAwsPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAwsPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsAwsPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsAwsPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAwsPoolMachinesUidUpdateResponseComposite =
  cloudConfigsAwsPoolMachinesUidUpdateResponse204;

export type cloudConfigsAwsPoolMachinesUidUpdateResponse =
  cloudConfigsAwsPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAwsPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAwsPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AwsMachineBody: V1AwsMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsAwsPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsAwsPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAwsPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAwsPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Azure cloud config
 */
export type cloudConfigsAzureGetResponse200 = {
  data: AzureCloudConfig;
  status: 200;
};

export type cloudConfigsAzureGetResponseComposite =
  cloudConfigsAzureGetResponse200;

export type cloudConfigsAzureGetResponse =
  cloudConfigsAzureGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzureGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}`;
};

export const cloudConfigsAzureGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAzureGetResponse> => {
  const res = await fetch(getCloudConfigsAzureGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzureGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsAzureUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAzureUidClusterConfigResponseComposite =
  cloudConfigsAzureUidClusterConfigResponse204;

export type cloudConfigsAzureUidClusterConfigResponse =
  cloudConfigsAzureUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzureUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/clusterConfig`;
};

export const cloudConfigsAzureUidClusterConfig = async (
  configUid: string,
  v1AzureCloudClusterConfigEntityBody: V1AzureCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAzureUidClusterConfigResponse> => {
  const res = await fetch(getCloudConfigsAzureUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureCloudClusterConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzureUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzureUidClusterConfigResponse;
};

/**
 * @summary Creates an Azure cloud config's machine pool
 */
export type cloudConfigsAzureMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsAzureMachinePoolCreateResponseComposite =
  cloudConfigsAzureMachinePoolCreateResponse201;

export type cloudConfigsAzureMachinePoolCreateResponse =
  cloudConfigsAzureMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzureMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools`;
};

export const cloudConfigsAzureMachinePoolCreate = async (
  configUid: string,
  v1AzureMachinePoolConfigEntityBody: V1AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAzureMachinePoolCreateResponse> => {
  const res = await fetch(getCloudConfigsAzureMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzureMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzureMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsAzureMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAzureMachinePoolDeleteResponseComposite =
  cloudConfigsAzureMachinePoolDeleteResponse204;

export type cloudConfigsAzureMachinePoolDeleteResponse =
  cloudConfigsAzureMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzureMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsAzureMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsAzureMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsAzureMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzureMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzureMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Azure cloud config's machine pool
 */
export type cloudConfigsAzureMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAzureMachinePoolUpdateResponseComposite =
  cloudConfigsAzureMachinePoolUpdateResponse204;

export type cloudConfigsAzureMachinePoolUpdateResponse =
  cloudConfigsAzureMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzureMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsAzureMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachinePoolConfigEntityBody: V1AzureMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsAzureMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsAzureMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzureMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzureMachinePoolUpdateResponse;
};

/**
 * Returns all the Azure machines restricted to the user role and filters.
 * @summary Retrieves a list of Azure machines
 */
export type cloudConfigsAzurePoolMachinesListResponse200 = {
  data: AzureMachines;
  status: 200;
};

export type cloudConfigsAzurePoolMachinesListResponseComposite =
  cloudConfigsAzurePoolMachinesListResponse200;

export type cloudConfigsAzurePoolMachinesListResponse =
  cloudConfigsAzurePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzurePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAzurePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsAzurePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsAzurePoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsAzurePoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsAzurePoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzurePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzurePoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsAzurePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsAzurePoolMachinesAddResponseComposite =
  cloudConfigsAzurePoolMachinesAddResponse201;

export type cloudConfigsAzurePoolMachinesAddResponse =
  cloudConfigsAzurePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzurePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsAzurePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachineBody: V1AzureMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsAzurePoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsAzurePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzurePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzurePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Azure machine
 */
export type cloudConfigsAzurePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAzurePoolMachinesUidDeleteResponseComposite =
  cloudConfigsAzurePoolMachinesUidDeleteResponse204;

export type cloudConfigsAzurePoolMachinesUidDeleteResponse =
  cloudConfigsAzurePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzurePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAzurePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAzurePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsAzurePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzurePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzurePoolMachinesUidDeleteResponse;
};

/**
 * Returns a Azure machine for the specified uid.
 * @summary Returns the specified Azure machine
 */
export type cloudConfigsAzurePoolMachinesUidGetResponse200 = {
  data: AzureMachine;
  status: 200;
};

export type cloudConfigsAzurePoolMachinesUidGetResponseComposite =
  cloudConfigsAzurePoolMachinesUidGetResponse200;

export type cloudConfigsAzurePoolMachinesUidGetResponse =
  cloudConfigsAzurePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzurePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAzurePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsAzurePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsAzurePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzurePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzurePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type cloudConfigsAzurePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsAzurePoolMachinesUidUpdateResponseComposite =
  cloudConfigsAzurePoolMachinesUidUpdateResponse204;

export type cloudConfigsAzurePoolMachinesUidUpdateResponse =
  cloudConfigsAzurePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsAzurePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsAzurePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AzureMachineBody: V1AzureMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsAzurePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsAzurePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsAzurePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsAzurePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Custom cloud config
 */
export type cloudConfigsCustomGetResponse200 = {
  data: CustomCloudConfig;
  status: 200;
};

export type cloudConfigsCustomGetResponseComposite =
  cloudConfigsCustomGetResponse200;

export type cloudConfigsCustomGetResponse =
  cloudConfigsCustomGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomGetUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}`;
};

export const cloudConfigsCustomGet = async (
  cloudType: string,
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsCustomGetResponse> => {
  const res = await fetch(getCloudConfigsCustomGetUrl(cloudType, configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsCustomUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsCustomUidClusterConfigResponseComposite =
  cloudConfigsCustomUidClusterConfigResponse204;

export type cloudConfigsCustomUidClusterConfigResponse =
  cloudConfigsCustomUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomUidClusterConfigUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/clusterConfig`;
};

export const cloudConfigsCustomUidClusterConfig = async (
  cloudType: string,
  configUid: string,
  customCloudClusterConfigEntity: CustomCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsCustomUidClusterConfigResponse> => {
  const res = await fetch(
    getCloudConfigsCustomUidClusterConfigUrl(cloudType, configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(customCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomUidClusterConfigResponse;
};

/**
 * @summary Creates an Custom cloud config's machine pool
 */
export type cloudConfigsCustomMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsCustomMachinePoolCreateResponseComposite =
  cloudConfigsCustomMachinePoolCreateResponse201;

export type cloudConfigsCustomMachinePoolCreateResponse =
  cloudConfigsCustomMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomMachinePoolCreateUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools`;
};

export const cloudConfigsCustomMachinePoolCreate = async (
  cloudType: string,
  configUid: string,
  v1CustomMachinePoolConfigEntityBody: V1CustomMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsCustomMachinePoolCreateResponse> => {
  const res = await fetch(
    getCloudConfigsCustomMachinePoolCreateUrl(cloudType, configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsCustomMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsCustomMachinePoolDeleteResponseComposite =
  cloudConfigsCustomMachinePoolDeleteResponse204;

export type cloudConfigsCustomMachinePoolDeleteResponse =
  cloudConfigsCustomMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomMachinePoolDeleteUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsCustomMachinePoolDelete = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsCustomMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsCustomMachinePoolDeleteUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Custom cloud config's machine pool
 */
export type cloudConfigsCustomMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsCustomMachinePoolUpdateResponseComposite =
  cloudConfigsCustomMachinePoolUpdateResponse204;

export type cloudConfigsCustomMachinePoolUpdateResponse =
  cloudConfigsCustomMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomMachinePoolUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsCustomMachinePoolUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  v1CustomMachinePoolConfigEntityBody: V1CustomMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsCustomMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsCustomMachinePoolUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Custom machines
 */
export type cloudConfigsCustomPoolMachinesListResponse200 = {
  data: CustomMachines;
  status: 200;
};

export type cloudConfigsCustomPoolMachinesListResponseComposite =
  cloudConfigsCustomPoolMachinesListResponse200;

export type cloudConfigsCustomPoolMachinesListResponse =
  cloudConfigsCustomPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomPoolMachinesListUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsCustomPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsCustomPoolMachinesList = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsCustomPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsCustomPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsCustomPoolMachinesListUrl(
      cloudType,
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsCustomPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsCustomPoolMachinesAddResponseComposite =
  cloudConfigsCustomPoolMachinesAddResponse201;

export type cloudConfigsCustomPoolMachinesAddResponse =
  cloudConfigsCustomPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomPoolMachinesAddUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsCustomPoolMachinesAdd = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  v1CustomMachineBody: V1CustomMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsCustomPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsCustomPoolMachinesAddUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Custom machine
 */
export type cloudConfigsCustomPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsCustomPoolMachinesUidDeleteResponseComposite =
  cloudConfigsCustomPoolMachinesUidDeleteResponse204;

export type cloudConfigsCustomPoolMachinesUidDeleteResponse =
  cloudConfigsCustomPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomPoolMachinesUidDeleteUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsCustomPoolMachinesUidDelete = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsCustomPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsCustomPoolMachinesUidDeleteUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified Custom machine
 */
export type cloudConfigsCustomPoolMachinesUidGetResponse200 = {
  data: CustomMachine;
  status: 200;
};

export type cloudConfigsCustomPoolMachinesUidGetResponseComposite =
  cloudConfigsCustomPoolMachinesUidGetResponse200;

export type cloudConfigsCustomPoolMachinesUidGetResponse =
  cloudConfigsCustomPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomPoolMachinesUidGetUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsCustomPoolMachinesUidGet = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsCustomPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsCustomPoolMachinesUidGetUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsCustomPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsCustomPoolMachinesUidUpdateResponseComposite =
  cloudConfigsCustomPoolMachinesUidUpdateResponse204;

export type cloudConfigsCustomPoolMachinesUidUpdateResponse =
  cloudConfigsCustomPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsCustomPoolMachinesUidUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsCustomPoolMachinesUidUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1CustomMachineBody: V1CustomMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsCustomPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsCustomPoolMachinesUidUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsCustomPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsCustomPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified edge-native cloud config
 */
export type cloudConfigsEdgeNativeGetResponse200 = {
  data: EdgeNativeCloudConfig;
  status: 200;
};

export type cloudConfigsEdgeNativeGetResponseComposite =
  cloudConfigsEdgeNativeGetResponse200;

export type cloudConfigsEdgeNativeGetResponse =
  cloudConfigsEdgeNativeGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativeGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}`;
};

export const cloudConfigsEdgeNativeGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativeGetResponse> => {
  const res = await fetch(getCloudConfigsEdgeNativeGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativeGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsEdgeNativeUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEdgeNativeUidClusterConfigResponseComposite =
  cloudConfigsEdgeNativeUidClusterConfigResponse204;

export type cloudConfigsEdgeNativeUidClusterConfigResponse =
  cloudConfigsEdgeNativeUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativeUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/clusterConfig`;
};

export const cloudConfigsEdgeNativeUidClusterConfig = async (
  configUid: string,
  edgeNativeCloudClusterConfigEntity: EdgeNativeCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativeUidClusterConfigResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativeUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(edgeNativeCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativeUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativeUidClusterConfigResponse;
};

/**
 * @summary Creates a edge-native cloud config's machine pool
 */
export type cloudConfigsEdgeNativeMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsEdgeNativeMachinePoolCreateResponseComposite =
  cloudConfigsEdgeNativeMachinePoolCreateResponse201;

export type cloudConfigsEdgeNativeMachinePoolCreateResponse =
  cloudConfigsEdgeNativeMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativeMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools`;
};

export const cloudConfigsEdgeNativeMachinePoolCreate = async (
  configUid: string,
  v1EdgeNativeMachinePoolConfigEntityBody: V1EdgeNativeMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativeMachinePoolCreateResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativeMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativeMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativeMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsEdgeNativeMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEdgeNativeMachinePoolDeleteResponseComposite =
  cloudConfigsEdgeNativeMachinePoolDeleteResponse204;

export type cloudConfigsEdgeNativeMachinePoolDeleteResponse =
  cloudConfigsEdgeNativeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsEdgeNativeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativeMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativeMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified edge-native cloud config's machine pool
 */
export type cloudConfigsEdgeNativeMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEdgeNativeMachinePoolUpdateResponseComposite =
  cloudConfigsEdgeNativeMachinePoolUpdateResponse204;

export type cloudConfigsEdgeNativeMachinePoolUpdateResponse =
  cloudConfigsEdgeNativeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsEdgeNativeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1EdgeNativeMachinePoolConfigEntityBody: V1EdgeNativeMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativeMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativeMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of edge-native machines
 */
export type cloudConfigsEdgeNativePoolMachinesListResponse200 = {
  data: EdgeNativeMachines;
  status: 200;
};

export type cloudConfigsEdgeNativePoolMachinesListResponseComposite =
  cloudConfigsEdgeNativePoolMachinesListResponse200;

export type cloudConfigsEdgeNativePoolMachinesListResponse =
  cloudConfigsEdgeNativePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsEdgeNativePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativePoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativePoolMachinesListUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativePoolMachinesListResponse;
};

/**
 * @summary Adds the edge-native machine to cloud config's machine pool
 */
export type cloudConfigsEdgeNativePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsEdgeNativePoolMachinesAddResponseComposite =
  cloudConfigsEdgeNativePoolMachinesAddResponse201;

export type cloudConfigsEdgeNativePoolMachinesAddResponse =
  cloudConfigsEdgeNativePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsEdgeNativePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1EdgeNativeMachineBody: V1EdgeNativeMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativePoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified edge-native machine
 */
export type cloudConfigsEdgeNativePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEdgeNativePoolMachinesUidDeleteResponseComposite =
  cloudConfigsEdgeNativePoolMachinesUidDeleteResponse204;

export type cloudConfigsEdgeNativePoolMachinesUidDeleteResponse =
  cloudConfigsEdgeNativePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsEdgeNativePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified edge-native machine
 */
export type cloudConfigsEdgeNativePoolMachinesUidGetResponse200 = {
  data: EdgeNativeMachine;
  status: 200;
};

export type cloudConfigsEdgeNativePoolMachinesUidGetResponseComposite =
  cloudConfigsEdgeNativePoolMachinesUidGetResponse200;

export type cloudConfigsEdgeNativePoolMachinesUidGetResponse =
  cloudConfigsEdgeNativePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsEdgeNativePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type cloudConfigsEdgeNativePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEdgeNativePoolMachinesUidUpdateResponseComposite =
  cloudConfigsEdgeNativePoolMachinesUidUpdateResponse204;

export type cloudConfigsEdgeNativePoolMachinesUidUpdateResponse =
  cloudConfigsEdgeNativePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEdgeNativePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsEdgeNativePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1EdgeNativeMachineBody: V1EdgeNativeMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsEdgeNativePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsEdgeNativePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEdgeNativePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEdgeNativePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified EKS cloud config
 */
export type cloudConfigsEksGetResponse200 = {
  data: EksCloudConfig;
  status: 200;
};

export type cloudConfigsEksGetResponseComposite = cloudConfigsEksGetResponse200;

export type cloudConfigsEksGetResponse = cloudConfigsEksGetResponseComposite & {
  headers: Headers;
};

export const getCloudConfigsEksGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}`;
};

export const cloudConfigsEksGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsEksGetResponse> => {
  const res = await fetch(getCloudConfigsEksGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsEksUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEksUidClusterConfigResponseComposite =
  cloudConfigsEksUidClusterConfigResponse204;

export type cloudConfigsEksUidClusterConfigResponse =
  cloudConfigsEksUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/clusterConfig`;
};

export const cloudConfigsEksUidClusterConfig = async (
  configUid: string,
  eksCloudClusterConfigEntity: EksCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsEksUidClusterConfigResponse> => {
  const res = await fetch(getCloudConfigsEksUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(eksCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksUidClusterConfigResponse;
};

/**
 * @summary Updates EKS cloud config's fargate profiles
 */
export type cloudConfigsEksUidFargateProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEksUidFargateProfilesUpdateResponseComposite =
  cloudConfigsEksUidFargateProfilesUpdateResponse204;

export type cloudConfigsEksUidFargateProfilesUpdateResponse =
  cloudConfigsEksUidFargateProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksUidFargateProfilesUpdateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/fargateProfiles`;
};

export const cloudConfigsEksUidFargateProfilesUpdate = async (
  configUid: string,
  eksFargateProfiles: EksFargateProfiles,
  options?: RequestInit,
): Promise<cloudConfigsEksUidFargateProfilesUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsEksUidFargateProfilesUpdateUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(eksFargateProfiles),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksUidFargateProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksUidFargateProfilesUpdateResponse;
};

/**
 * @summary Creates an EKS cloud config's machine pool
 */
export type cloudConfigsEksMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsEksMachinePoolCreateResponseComposite =
  cloudConfigsEksMachinePoolCreateResponse201;

export type cloudConfigsEksMachinePoolCreateResponse =
  cloudConfigsEksMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools`;
};

export const cloudConfigsEksMachinePoolCreate = async (
  configUid: string,
  v1EksMachinePoolConfigEntityBody: V1EksMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsEksMachinePoolCreateResponse> => {
  const res = await fetch(getCloudConfigsEksMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EksMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsEksMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEksMachinePoolDeleteResponseComposite =
  cloudConfigsEksMachinePoolDeleteResponse204;

export type cloudConfigsEksMachinePoolDeleteResponse =
  cloudConfigsEksMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsEksMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsEksMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsEksMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified EKS cloud config's machine pool
 */
export type cloudConfigsEksMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEksMachinePoolUpdateResponseComposite =
  cloudConfigsEksMachinePoolUpdateResponse204;

export type cloudConfigsEksMachinePoolUpdateResponse =
  cloudConfigsEksMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsEksMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1EksMachinePoolConfigEntityBody: V1EksMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsEksMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsEksMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EksMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of EKS machines
 */
export type cloudConfigsEksPoolMachinesListResponse200 = {
  data: AwsMachines;
  status: 200;
};

export type cloudConfigsEksPoolMachinesListResponseComposite =
  cloudConfigsEksPoolMachinesListResponse200;

export type cloudConfigsEksPoolMachinesListResponse =
  cloudConfigsEksPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsEksPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsEksPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsEksPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsEksPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsEksPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsEksPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsEksPoolMachinesAddResponseComposite =
  cloudConfigsEksPoolMachinesAddResponse201;

export type cloudConfigsEksPoolMachinesAddResponse =
  cloudConfigsEksPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsEksPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AwsMachineBody: V1AwsMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsEksPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsEksPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified EKS machine
 */
export type cloudConfigsEksPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEksPoolMachinesUidDeleteResponseComposite =
  cloudConfigsEksPoolMachinesUidDeleteResponse204;

export type cloudConfigsEksPoolMachinesUidDeleteResponse =
  cloudConfigsEksPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsEksPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsEksPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsEksPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified EKS machine
 */
export type cloudConfigsEksPoolMachinesUidGetResponse200 = {
  data: AwsMachine;
  status: 200;
};

export type cloudConfigsEksPoolMachinesUidGetResponseComposite =
  cloudConfigsEksPoolMachinesUidGetResponse200;

export type cloudConfigsEksPoolMachinesUidGetResponse =
  cloudConfigsEksPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsEksPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsEksPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsEksPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsEksPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsEksPoolMachinesUidUpdateResponseComposite =
  cloudConfigsEksPoolMachinesUidUpdateResponse204;

export type cloudConfigsEksPoolMachinesUidUpdateResponse =
  cloudConfigsEksPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsEksPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsEksPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AwsMachineBody: V1AwsMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsEksPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsEksPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsEksPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsEksPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified GCP cloud config
 */
export type cloudConfigsGcpGetResponse200 = {
  data: GcpCloudConfig;
  status: 200;
};

export type cloudConfigsGcpGetResponseComposite = cloudConfigsGcpGetResponse200;

export type cloudConfigsGcpGetResponse = cloudConfigsGcpGetResponseComposite & {
  headers: Headers;
};

export const getCloudConfigsGcpGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}`;
};

export const cloudConfigsGcpGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGcpGetResponse> => {
  const res = await fetch(getCloudConfigsGcpGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsGcpUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGcpUidClusterConfigResponseComposite =
  cloudConfigsGcpUidClusterConfigResponse204;

export type cloudConfigsGcpUidClusterConfigResponse =
  cloudConfigsGcpUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/clusterConfig`;
};

export const cloudConfigsGcpUidClusterConfig = async (
  configUid: string,
  v1GcpCloudClusterConfigEntityBody: V1GcpCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGcpUidClusterConfigResponse> => {
  const res = await fetch(getCloudConfigsGcpUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpCloudClusterConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpUidClusterConfigResponse;
};

/**
 * @summary Creates a Gcp cloud config's machine pool
 */
export type cloudConfigsGcpMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsGcpMachinePoolCreateResponseComposite =
  cloudConfigsGcpMachinePoolCreateResponse201;

export type cloudConfigsGcpMachinePoolCreateResponse =
  cloudConfigsGcpMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools`;
};

export const cloudConfigsGcpMachinePoolCreate = async (
  configUid: string,
  v1GcpMachinePoolConfigEntityBody: V1GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGcpMachinePoolCreateResponse> => {
  const res = await fetch(getCloudConfigsGcpMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsGcpMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGcpMachinePoolDeleteResponseComposite =
  cloudConfigsGcpMachinePoolDeleteResponse204;

export type cloudConfigsGcpMachinePoolDeleteResponse =
  cloudConfigsGcpMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsGcpMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsGcpMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsGcpMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified GCP cloud config's machine pool
 */
export type cloudConfigsGcpMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGcpMachinePoolUpdateResponseComposite =
  cloudConfigsGcpMachinePoolUpdateResponse204;

export type cloudConfigsGcpMachinePoolUpdateResponse =
  cloudConfigsGcpMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsGcpMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachinePoolConfigEntityBody: V1GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGcpMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsGcpMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of GCP machines
 */
export type cloudConfigsGcpPoolMachinesListResponse200 = {
  data: GcpMachines;
  status: 200;
};

export type cloudConfigsGcpPoolMachinesListResponseComposite =
  cloudConfigsGcpPoolMachinesListResponse200;

export type cloudConfigsGcpPoolMachinesListResponse =
  cloudConfigsGcpPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGcpPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsGcpPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGcpPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsGcpPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsGcpPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsGcpPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsGcpPoolMachinesAddResponseComposite =
  cloudConfigsGcpPoolMachinesAddResponse201;

export type cloudConfigsGcpPoolMachinesAddResponse =
  cloudConfigsGcpPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsGcpPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachineBody: V1GcpMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsGcpPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsGcpPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified GCP machine
 */
export type cloudConfigsGcpPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGcpPoolMachinesUidDeleteResponseComposite =
  cloudConfigsGcpPoolMachinesUidDeleteResponse204;

export type cloudConfigsGcpPoolMachinesUidDeleteResponse =
  cloudConfigsGcpPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGcpPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGcpPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsGcpPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified GCP machine
 */
export type cloudConfigsGcpPoolMachinesUidGetResponse200 = {
  data: GcpMachine;
  status: 200;
};

export type cloudConfigsGcpPoolMachinesUidGetResponseComposite =
  cloudConfigsGcpPoolMachinesUidGetResponse200;

export type cloudConfigsGcpPoolMachinesUidGetResponse =
  cloudConfigsGcpPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGcpPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGcpPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsGcpPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsGcpPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGcpPoolMachinesUidUpdateResponseComposite =
  cloudConfigsGcpPoolMachinesUidUpdateResponse204;

export type cloudConfigsGcpPoolMachinesUidUpdateResponse =
  cloudConfigsGcpPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGcpPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGcpPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1GcpMachineBody: V1GcpMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsGcpPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsGcpPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGcpPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGcpPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Generic cloud config
 */
export type cloudConfigsGenericGetResponse200 = {
  data: GenericCloudConfig;
  status: 200;
};

export type cloudConfigsGenericGetResponseComposite =
  cloudConfigsGenericGetResponse200;

export type cloudConfigsGenericGetResponse =
  cloudConfigsGenericGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}`;
};

export const cloudConfigsGenericGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGenericGetResponse> => {
  const res = await fetch(getCloudConfigsGenericGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsGenericUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGenericUidClusterConfigResponseComposite =
  cloudConfigsGenericUidClusterConfigResponse204;

export type cloudConfigsGenericUidClusterConfigResponse =
  cloudConfigsGenericUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/clusterConfig`;
};

export const cloudConfigsGenericUidClusterConfig = async (
  configUid: string,
  genericCloudClusterConfigEntity: GenericCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsGenericUidClusterConfigResponse> => {
  const res = await fetch(
    getCloudConfigsGenericUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(genericCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericUidClusterConfigResponse;
};

/**
 * @summary Creates a generic cloud config's machine pool
 */
export type cloudConfigsGenericMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsGenericMachinePoolCreateResponseComposite =
  cloudConfigsGenericMachinePoolCreateResponse201;

export type cloudConfigsGenericMachinePoolCreateResponse =
  cloudConfigsGenericMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools`;
};

export const cloudConfigsGenericMachinePoolCreate = async (
  configUid: string,
  v1GenericMachinePoolConfigEntityBody: V1GenericMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGenericMachinePoolCreateResponse> => {
  const res = await fetch(
    getCloudConfigsGenericMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsGenericMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGenericMachinePoolDeleteResponseComposite =
  cloudConfigsGenericMachinePoolDeleteResponse204;

export type cloudConfigsGenericMachinePoolDeleteResponse =
  cloudConfigsGenericMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsGenericMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsGenericMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsGenericMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified generic cloud config's machine pool
 */
export type cloudConfigsGenericMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGenericMachinePoolUpdateResponseComposite =
  cloudConfigsGenericMachinePoolUpdateResponse204;

export type cloudConfigsGenericMachinePoolUpdateResponse =
  cloudConfigsGenericMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsGenericMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1GenericMachinePoolConfigEntityBody: V1GenericMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGenericMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsGenericMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Generic machines
 */
export type cloudConfigsGenericPoolMachinesListResponse200 = {
  data: GenericMachines;
  status: 200;
};

export type cloudConfigsGenericPoolMachinesListResponseComposite =
  cloudConfigsGenericPoolMachinesListResponse200;

export type cloudConfigsGenericPoolMachinesListResponse =
  cloudConfigsGenericPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGenericPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsGenericPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGenericPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsGenericPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsGenericPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsGenericPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsGenericPoolMachinesAddResponseComposite =
  cloudConfigsGenericPoolMachinesAddResponse201;

export type cloudConfigsGenericPoolMachinesAddResponse =
  cloudConfigsGenericPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsGenericPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1GenericMachineBody: V1GenericMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsGenericPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsGenericPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified machine
 */
export type cloudConfigsGenericPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGenericPoolMachinesUidDeleteResponseComposite =
  cloudConfigsGenericPoolMachinesUidDeleteResponse204;

export type cloudConfigsGenericPoolMachinesUidDeleteResponse =
  cloudConfigsGenericPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGenericPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGenericPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsGenericPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified generic machine
 */
export type cloudConfigsGenericPoolMachinesUidGetResponse200 = {
  data: GenericMachine;
  status: 200;
};

export type cloudConfigsGenericPoolMachinesUidGetResponseComposite =
  cloudConfigsGenericPoolMachinesUidGetResponse200;

export type cloudConfigsGenericPoolMachinesUidGetResponse =
  cloudConfigsGenericPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGenericPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGenericPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsGenericPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsGenericPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGenericPoolMachinesUidUpdateResponseComposite =
  cloudConfigsGenericPoolMachinesUidUpdateResponse204;

export type cloudConfigsGenericPoolMachinesUidUpdateResponse =
  cloudConfigsGenericPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGenericPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGenericPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1GenericMachineBody: V1GenericMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsGenericPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsGenericPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGenericPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGenericPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified GKE cloud config
 */
export type cloudConfigsGkeGetResponse200 = {
  data: GcpCloudConfig;
  status: 200;
};

export type cloudConfigsGkeGetResponseComposite = cloudConfigsGkeGetResponse200;

export type cloudConfigsGkeGetResponse = cloudConfigsGkeGetResponseComposite & {
  headers: Headers;
};

export const getCloudConfigsGkeGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}`;
};

export const cloudConfigsGkeGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGkeGetResponse> => {
  const res = await fetch(getCloudConfigsGkeGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkeGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkeGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsGkeUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGkeUidClusterConfigResponseComposite =
  cloudConfigsGkeUidClusterConfigResponse204;

export type cloudConfigsGkeUidClusterConfigResponse =
  cloudConfigsGkeUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkeUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/clusterConfig`;
};

export const cloudConfigsGkeUidClusterConfig = async (
  configUid: string,
  v1GcpCloudClusterConfigEntityBody: V1GcpCloudClusterConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGkeUidClusterConfigResponse> => {
  const res = await fetch(getCloudConfigsGkeUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpCloudClusterConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkeUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkeUidClusterConfigResponse;
};

/**
 * @summary Creates an GKE cloud config's machine pool
 */
export type cloudConfigsGkeMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsGkeMachinePoolCreateResponseComposite =
  cloudConfigsGkeMachinePoolCreateResponse201;

export type cloudConfigsGkeMachinePoolCreateResponse =
  cloudConfigsGkeMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkeMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools`;
};

export const cloudConfigsGkeMachinePoolCreate = async (
  configUid: string,
  v1GcpMachinePoolConfigEntityBody: V1GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGkeMachinePoolCreateResponse> => {
  const res = await fetch(getCloudConfigsGkeMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkeMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkeMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsGkeMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGkeMachinePoolDeleteResponseComposite =
  cloudConfigsGkeMachinePoolDeleteResponse204;

export type cloudConfigsGkeMachinePoolDeleteResponse =
  cloudConfigsGkeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsGkeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsGkeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsGkeMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkeMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified GKE cloud config's machine pool
 */
export type cloudConfigsGkeMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGkeMachinePoolUpdateResponseComposite =
  cloudConfigsGkeMachinePoolUpdateResponse204;

export type cloudConfigsGkeMachinePoolUpdateResponse =
  cloudConfigsGkeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsGkeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachinePoolConfigEntityBody: V1GcpMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsGkeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsGkeMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkeMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of GKE machines
 */
export type cloudConfigsGkePoolMachinesListResponse200 = {
  data: GcpMachines;
  status: 200;
};

export type cloudConfigsGkePoolMachinesListResponseComposite =
  cloudConfigsGkePoolMachinesListResponse200;

export type cloudConfigsGkePoolMachinesListResponse =
  cloudConfigsGkePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGkePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsGkePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsGkePoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsGkePoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsGkePoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkePoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsGkePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsGkePoolMachinesAddResponseComposite =
  cloudConfigsGkePoolMachinesAddResponse201;

export type cloudConfigsGkePoolMachinesAddResponse =
  cloudConfigsGkePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsGkePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachineBody: V1GcpMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsGkePoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsGkePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Gcp machine
 */
export type cloudConfigsGkePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGkePoolMachinesUidDeleteResponseComposite =
  cloudConfigsGkePoolMachinesUidDeleteResponse204;

export type cloudConfigsGkePoolMachinesUidDeleteResponse =
  cloudConfigsGkePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGkePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGkePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsGkePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified GKE machine
 */
export type cloudConfigsGkePoolMachinesUidGetResponse200 = {
  data: GcpMachine;
  status: 200;
};

export type cloudConfigsGkePoolMachinesUidGetResponseComposite =
  cloudConfigsGkePoolMachinesUidGetResponse200;

export type cloudConfigsGkePoolMachinesUidGetResponse =
  cloudConfigsGkePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGkePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsGkePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsGkePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsGkePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsGkePoolMachinesUidUpdateResponseComposite =
  cloudConfigsGkePoolMachinesUidUpdateResponse204;

export type cloudConfigsGkePoolMachinesUidUpdateResponse =
  cloudConfigsGkePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsGkePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsGkePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1GcpMachineBody: V1GcpMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsGkePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsGkePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsGkePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsGkePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Maas cloud config
 */
export type cloudConfigsMaasGetResponse200 = {
  data: MaasCloudConfig;
  status: 200;
};

export type cloudConfigsMaasGetResponseComposite =
  cloudConfigsMaasGetResponse200;

export type cloudConfigsMaasGetResponse =
  cloudConfigsMaasGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}`;
};

export const cloudConfigsMaasGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsMaasGetResponse> => {
  const res = await fetch(getCloudConfigsMaasGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsMaasUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsMaasUidClusterConfigResponseComposite =
  cloudConfigsMaasUidClusterConfigResponse204;

export type cloudConfigsMaasUidClusterConfigResponse =
  cloudConfigsMaasUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/clusterConfig`;
};

export const cloudConfigsMaasUidClusterConfig = async (
  configUid: string,
  maasCloudClusterConfigEntity: MaasCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsMaasUidClusterConfigResponse> => {
  const res = await fetch(getCloudConfigsMaasUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(maasCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasUidClusterConfigResponse;
};

/**
 * @summary Creates an Maas cloud config's machine pool
 */
export type cloudConfigsMaasMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsMaasMachinePoolCreateResponseComposite =
  cloudConfigsMaasMachinePoolCreateResponse201;

export type cloudConfigsMaasMachinePoolCreateResponse =
  cloudConfigsMaasMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools`;
};

export const cloudConfigsMaasMachinePoolCreate = async (
  configUid: string,
  v1MaasMachinePoolConfigEntityBody: V1MaasMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsMaasMachinePoolCreateResponse> => {
  const res = await fetch(getCloudConfigsMaasMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MaasMachinePoolConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsMaasMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsMaasMachinePoolDeleteResponseComposite =
  cloudConfigsMaasMachinePoolDeleteResponse204;

export type cloudConfigsMaasMachinePoolDeleteResponse =
  cloudConfigsMaasMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsMaasMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsMaasMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsMaasMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Maas cloud config's machine pool
 */
export type cloudConfigsMaasMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsMaasMachinePoolUpdateResponseComposite =
  cloudConfigsMaasMachinePoolUpdateResponse204;

export type cloudConfigsMaasMachinePoolUpdateResponse =
  cloudConfigsMaasMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsMaasMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1MaasMachinePoolConfigEntityBody: V1MaasMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsMaasMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsMaasMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MaasMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Maas machines
 */
export type cloudConfigsMaasPoolMachinesListResponse200 = {
  data: MaasMachines;
  status: 200;
};

export type cloudConfigsMaasPoolMachinesListResponseComposite =
  cloudConfigsMaasPoolMachinesListResponse200;

export type cloudConfigsMaasPoolMachinesListResponse =
  cloudConfigsMaasPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsMaasPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsMaasPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsMaasPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsMaasPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsMaasPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsMaasPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsMaasPoolMachinesAddResponseComposite =
  cloudConfigsMaasPoolMachinesAddResponse201;

export type cloudConfigsMaasPoolMachinesAddResponse =
  cloudConfigsMaasPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsMaasPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1MaasMachineBody: V1MaasMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsMaasPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsMaasPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MaasMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Maas machine
 */
export type cloudConfigsMaasPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsMaasPoolMachinesUidDeleteResponseComposite =
  cloudConfigsMaasPoolMachinesUidDeleteResponse204;

export type cloudConfigsMaasPoolMachinesUidDeleteResponse =
  cloudConfigsMaasPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsMaasPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsMaasPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsMaasPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified Maas machine
 */
export type cloudConfigsMaasPoolMachinesUidGetResponse200 = {
  data: MaasMachine;
  status: 200;
};

export type cloudConfigsMaasPoolMachinesUidGetResponseComposite =
  cloudConfigsMaasPoolMachinesUidGetResponse200;

export type cloudConfigsMaasPoolMachinesUidGetResponse =
  cloudConfigsMaasPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsMaasPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsMaasPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsMaasPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsMaasPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsMaasPoolMachinesUidUpdateResponseComposite =
  cloudConfigsMaasPoolMachinesUidUpdateResponse204;

export type cloudConfigsMaasPoolMachinesUidUpdateResponse =
  cloudConfigsMaasPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMaasPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsMaasPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1MaasMachineBody: V1MaasMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsMaasPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsMaasPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MaasMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMaasPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMaasPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified OpenStack cloud config
 */
export type cloudConfigsOpenStackGetResponse200 = {
  data: OpenStackCloudConfig;
  status: 200;
};

export type cloudConfigsOpenStackGetResponseComposite =
  cloudConfigsOpenStackGetResponse200;

export type cloudConfigsOpenStackGetResponse =
  cloudConfigsOpenStackGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}`;
};

export const cloudConfigsOpenStackGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackGetResponse> => {
  const res = await fetch(getCloudConfigsOpenStackGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsOpenStackUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsOpenStackUidClusterConfigResponseComposite =
  cloudConfigsOpenStackUidClusterConfigResponse204;

export type cloudConfigsOpenStackUidClusterConfigResponse =
  cloudConfigsOpenStackUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/clusterConfig`;
};

export const cloudConfigsOpenStackUidClusterConfig = async (
  configUid: string,
  openStackCloudClusterConfigEntity: OpenStackCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackUidClusterConfigResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(openStackCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackUidClusterConfigResponse;
};

/**
 * @summary Creates a OpenStack cloud config's machine pool
 */
export type cloudConfigsOpenStackMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsOpenStackMachinePoolCreateResponseComposite =
  cloudConfigsOpenStackMachinePoolCreateResponse201;

export type cloudConfigsOpenStackMachinePoolCreateResponse =
  cloudConfigsOpenStackMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools`;
};

export const cloudConfigsOpenStackMachinePoolCreate = async (
  configUid: string,
  v1OpenStackMachinePoolConfigEntityBody: V1OpenStackMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackMachinePoolCreateResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsOpenStackMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsOpenStackMachinePoolDeleteResponseComposite =
  cloudConfigsOpenStackMachinePoolDeleteResponse204;

export type cloudConfigsOpenStackMachinePoolDeleteResponse =
  cloudConfigsOpenStackMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsOpenStackMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified OpenStack cloud config's machine pool
 */
export type cloudConfigsOpenStackMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsOpenStackMachinePoolUpdateResponseComposite =
  cloudConfigsOpenStackMachinePoolUpdateResponse204;

export type cloudConfigsOpenStackMachinePoolUpdateResponse =
  cloudConfigsOpenStackMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsOpenStackMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1OpenStackMachinePoolConfigEntityBody: V1OpenStackMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of OpenStack machines
 */
export type cloudConfigsOpenStackPoolMachinesListResponse200 = {
  data: OpenStackMachines;
  status: 200;
};

export type cloudConfigsOpenStackPoolMachinesListResponseComposite =
  cloudConfigsOpenStackPoolMachinesListResponse200;

export type cloudConfigsOpenStackPoolMachinesListResponse =
  cloudConfigsOpenStackPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsOpenStackPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackPoolMachinesListUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackPoolMachinesListResponse;
};

/**
 * @summary Adds the OpenStack machine to cloud config's machine pool
 */
export type cloudConfigsOpenStackPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsOpenStackPoolMachinesAddResponseComposite =
  cloudConfigsOpenStackPoolMachinesAddResponse201;

export type cloudConfigsOpenStackPoolMachinesAddResponse =
  cloudConfigsOpenStackPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsOpenStackPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1OpenStackMachineBody: V1OpenStackMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified OpenStack machine
 */
export type cloudConfigsOpenStackPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsOpenStackPoolMachinesUidDeleteResponseComposite =
  cloudConfigsOpenStackPoolMachinesUidDeleteResponse204;

export type cloudConfigsOpenStackPoolMachinesUidDeleteResponse =
  cloudConfigsOpenStackPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsOpenStackPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified OpenStack machine
 */
export type cloudConfigsOpenStackPoolMachinesUidGetResponse200 = {
  data: OpenStackMachine;
  status: 200;
};

export type cloudConfigsOpenStackPoolMachinesUidGetResponseComposite =
  cloudConfigsOpenStackPoolMachinesUidGetResponse200;

export type cloudConfigsOpenStackPoolMachinesUidGetResponse =
  cloudConfigsOpenStackPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsOpenStackPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type cloudConfigsOpenStackPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsOpenStackPoolMachinesUidUpdateResponseComposite =
  cloudConfigsOpenStackPoolMachinesUidUpdateResponse204;

export type cloudConfigsOpenStackPoolMachinesUidUpdateResponse =
  cloudConfigsOpenStackPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsOpenStackPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsOpenStackPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1OpenStackMachineBody: V1OpenStackMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsOpenStackPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsOpenStackPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsOpenStackPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsOpenStackPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Virtual cloud config
 */
export type cloudConfigsVirtualGetResponse200 = {
  data: VirtualCloudConfig;
  status: 200;
};

export type cloudConfigsVirtualGetResponseComposite =
  cloudConfigsVirtualGetResponse200;

export type cloudConfigsVirtualGetResponse =
  cloudConfigsVirtualGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}`;
};

export const cloudConfigsVirtualGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsVirtualGetResponse> => {
  const res = await fetch(getCloudConfigsVirtualGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsVirtualUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVirtualUidClusterConfigResponseComposite =
  cloudConfigsVirtualUidClusterConfigResponse204;

export type cloudConfigsVirtualUidClusterConfigResponse =
  cloudConfigsVirtualUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/clusterConfig`;
};

export const cloudConfigsVirtualUidClusterConfig = async (
  configUid: string,
  virtualCloudClusterConfigEntity: VirtualCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsVirtualUidClusterConfigResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(virtualCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualUidClusterConfigResponse;
};

/**
 * @summary Creates a virtual cloud config's machine pool
 */
export type cloudConfigsVirtualMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsVirtualMachinePoolCreateResponseComposite =
  cloudConfigsVirtualMachinePoolCreateResponse201;

export type cloudConfigsVirtualMachinePoolCreateResponse =
  cloudConfigsVirtualMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools`;
};

export const cloudConfigsVirtualMachinePoolCreate = async (
  configUid: string,
  v1VirtualMachinePoolConfigEntityBody: V1VirtualMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsVirtualMachinePoolCreateResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsVirtualMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVirtualMachinePoolDeleteResponseComposite =
  cloudConfigsVirtualMachinePoolDeleteResponse204;

export type cloudConfigsVirtualMachinePoolDeleteResponse =
  cloudConfigsVirtualMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsVirtualMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsVirtualMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified virtual cloud config's machine pool
 */
export type cloudConfigsVirtualMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVirtualMachinePoolUpdateResponseComposite =
  cloudConfigsVirtualMachinePoolUpdateResponse204;

export type cloudConfigsVirtualMachinePoolUpdateResponse =
  cloudConfigsVirtualMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsVirtualMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1VirtualMachinePoolConfigEntityBody: V1VirtualMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsVirtualMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of virtual machines
 */
export type cloudConfigsVirtualPoolMachinesListResponse200 = {
  data: VirtualMachines;
  status: 200;
};

export type cloudConfigsVirtualPoolMachinesListResponseComposite =
  cloudConfigsVirtualPoolMachinesListResponse200;

export type cloudConfigsVirtualPoolMachinesListResponse =
  cloudConfigsVirtualPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVirtualPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsVirtualPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVirtualPoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsVirtualPoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type cloudConfigsVirtualPoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsVirtualPoolMachinesAddResponseComposite =
  cloudConfigsVirtualPoolMachinesAddResponse201;

export type cloudConfigsVirtualPoolMachinesAddResponse =
  cloudConfigsVirtualPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsVirtualPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1VirtualMachineBody: V1VirtualMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsVirtualPoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified virtual machine
 */
export type cloudConfigsVirtualPoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVirtualPoolMachinesUidDeleteResponseComposite =
  cloudConfigsVirtualPoolMachinesUidDeleteResponse204;

export type cloudConfigsVirtualPoolMachinesUidDeleteResponse =
  cloudConfigsVirtualPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsVirtualPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsVirtualPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified virtual machine
 */
export type cloudConfigsVirtualPoolMachinesUidGetResponse200 = {
  data: VirtualMachine;
  status: 200;
};

export type cloudConfigsVirtualPoolMachinesUidGetResponseComposite =
  cloudConfigsVirtualPoolMachinesUidGetResponse200;

export type cloudConfigsVirtualPoolMachinesUidGetResponse =
  cloudConfigsVirtualPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsVirtualPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsVirtualPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type cloudConfigsVirtualPoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVirtualPoolMachinesUidUpdateResponseComposite =
  cloudConfigsVirtualPoolMachinesUidUpdateResponse204;

export type cloudConfigsVirtualPoolMachinesUidUpdateResponse =
  cloudConfigsVirtualPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsVirtualPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1VirtualMachineBody: V1VirtualMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsVirtualPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsVirtualPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualPoolMachinesUidUpdateResponse;
};

/**
 * @summary Updates and resizes the virtual cluster
 */
export type cloudConfigsVirtualUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVirtualUidUpdateResponseComposite =
  cloudConfigsVirtualUidUpdateResponse204;

export type cloudConfigsVirtualUidUpdateResponse =
  cloudConfigsVirtualUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVirtualUidUpdateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/resize`;
};

export const cloudConfigsVirtualUidUpdate = async (
  configUid: string,
  virtualClusterResize: VirtualClusterResize,
  options?: RequestInit,
): Promise<cloudConfigsVirtualUidUpdateResponse> => {
  const res = await fetch(getCloudConfigsVirtualUidUpdateUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(virtualClusterResize),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVirtualUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVirtualUidUpdateResponse;
};

/**
 * @summary Returns the specified vSphere cloud config
 */
export type cloudConfigsVsphereGetResponse200 = {
  data: VsphereCloudConfig;
  status: 200;
};

export type cloudConfigsVsphereGetResponseComposite =
  cloudConfigsVsphereGetResponse200;

export type cloudConfigsVsphereGetResponse =
  cloudConfigsVsphereGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVsphereGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}`;
};

export const cloudConfigsVsphereGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsVsphereGetResponse> => {
  const res = await fetch(getCloudConfigsVsphereGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVsphereGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVsphereGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type cloudConfigsVsphereUidClusterConfigResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVsphereUidClusterConfigResponseComposite =
  cloudConfigsVsphereUidClusterConfigResponse204;

export type cloudConfigsVsphereUidClusterConfigResponse =
  cloudConfigsVsphereUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVsphereUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/clusterConfig`;
};

export const cloudConfigsVsphereUidClusterConfig = async (
  configUid: string,
  vsphereCloudClusterConfigEntity: VsphereCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<cloudConfigsVsphereUidClusterConfigResponse> => {
  const res = await fetch(
    getCloudConfigsVsphereUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(vsphereCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVsphereUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVsphereUidClusterConfigResponse;
};

/**
 * @summary Creates a vSphere cloud config's machine pool
 */
export type cloudConfigsVsphereMachinePoolCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsVsphereMachinePoolCreateResponseComposite =
  cloudConfigsVsphereMachinePoolCreateResponse201;

export type cloudConfigsVsphereMachinePoolCreateResponse =
  cloudConfigsVsphereMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVsphereMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools`;
};

export const cloudConfigsVsphereMachinePoolCreate = async (
  configUid: string,
  v1VsphereMachinePoolConfigEntityBody: V1VsphereMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsVsphereMachinePoolCreateResponse> => {
  const res = await fetch(
    getCloudConfigsVsphereMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVsphereMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVsphereMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type cloudConfigsVsphereMachinePoolDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVsphereMachinePoolDeleteResponseComposite =
  cloudConfigsVsphereMachinePoolDeleteResponse204;

export type cloudConfigsVsphereMachinePoolDeleteResponse =
  cloudConfigsVsphereMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVsphereMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsVsphereMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<cloudConfigsVsphereMachinePoolDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsVsphereMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVsphereMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVsphereMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified vSphere cloud config's machine pool
 */
export type cloudConfigsVsphereMachinePoolUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVsphereMachinePoolUpdateResponseComposite =
  cloudConfigsVsphereMachinePoolUpdateResponse204;

export type cloudConfigsVsphereMachinePoolUpdateResponse =
  cloudConfigsVsphereMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVsphereMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}`;
};

export const cloudConfigsVsphereMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1VsphereMachinePoolConfigEntityBody: V1VsphereMachinePoolConfigEntityBody,
  options?: RequestInit,
): Promise<cloudConfigsVsphereMachinePoolUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsVsphereMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachinePoolConfigEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVsphereMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVsphereMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of vSphere machines
 */
export type cloudConfigsVspherePoolMachinesListResponse200 = {
  data: VsphereMachines;
  status: 200;
};

export type cloudConfigsVspherePoolMachinesListResponseComposite =
  cloudConfigsVspherePoolMachinesListResponse200;

export type cloudConfigsVspherePoolMachinesListResponse =
  cloudConfigsVspherePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVspherePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVspherePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsVspherePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: CloudConfigsVspherePoolMachinesListParams,
  options?: RequestInit,
): Promise<cloudConfigsVspherePoolMachinesListResponse> => {
  const res = await fetch(
    getCloudConfigsVspherePoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVspherePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVspherePoolMachinesListResponse;
};

/**
 * @summary Adds the vSphere machine to cloud config's machine pool
 */
export type cloudConfigsVspherePoolMachinesAddResponse201 = {
  data: Uid;
  status: 201;
};

export type cloudConfigsVspherePoolMachinesAddResponseComposite =
  cloudConfigsVspherePoolMachinesAddResponse201;

export type cloudConfigsVspherePoolMachinesAddResponse =
  cloudConfigsVspherePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVspherePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const cloudConfigsVspherePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1VsphereMachineBody: V1VsphereMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsVspherePoolMachinesAddResponse> => {
  const res = await fetch(
    getCloudConfigsVspherePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVspherePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVspherePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified vSphere machine
 */
export type cloudConfigsVspherePoolMachinesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVspherePoolMachinesUidDeleteResponseComposite =
  cloudConfigsVspherePoolMachinesUidDeleteResponse204;

export type cloudConfigsVspherePoolMachinesUidDeleteResponse =
  cloudConfigsVspherePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVspherePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsVspherePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsVspherePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getCloudConfigsVspherePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVspherePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVspherePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified vSphere machine
 */
export type cloudConfigsVspherePoolMachinesUidGetResponse200 = {
  data: VsphereMachine;
  status: 200;
};

export type cloudConfigsVspherePoolMachinesUidGetResponseComposite =
  cloudConfigsVspherePoolMachinesUidGetResponse200;

export type cloudConfigsVspherePoolMachinesUidGetResponse =
  cloudConfigsVspherePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVspherePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsVspherePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<cloudConfigsVspherePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getCloudConfigsVspherePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVspherePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVspherePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type cloudConfigsVspherePoolMachinesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsVspherePoolMachinesUidUpdateResponseComposite =
  cloudConfigsVspherePoolMachinesUidUpdateResponse204;

export type cloudConfigsVspherePoolMachinesUidUpdateResponse =
  cloudConfigsVspherePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsVspherePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const cloudConfigsVspherePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1VsphereMachineBody: V1VsphereMachineBody,
  options?: RequestInit,
): Promise<cloudConfigsVspherePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsVspherePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachineBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsVspherePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsVspherePoolMachinesUidUpdateResponse;
};

/**
 * @summary Updates the specified machine maintenance
 */
export type cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse204 = {
  data: void;
  status: 204;
};

export type cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseComposite =
  cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse204;

export type cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse =
  cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMachinePoolsMachineUidMaintenanceUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}/maintenance`;
};

export const cloudConfigsMachinePoolsMachineUidMaintenanceUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  machineMaintenance: MachineMaintenance,
  options?: RequestInit,
): Promise<cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsMachinePoolsMachineUidMaintenanceUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(machineMaintenance),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse;
};

/**
 * @summary Updates the specified machine maintenance
 */
export type cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse204 =
  {
    data: void;
    status: 204;
  };

export type cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseComposite =
  cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse204;

export type cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse =
  cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}/maintenance/status`;
};

export const cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  machineMaintenanceStatus: MachineMaintenanceStatus,
  options?: RequestInit,
): Promise<cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse> => {
  const res = await fetch(
    getCloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(machineMaintenanceStatus),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse;
};

/**
 * @summary Returns the specified cloud config's machine pools and machine uid
 */
export type cloudConfigsMachinePoolsMachineUidsGetResponse200 = {
  data: MachinePoolsMachineUids;
  status: 200;
};

export type cloudConfigsMachinePoolsMachineUidsGetResponseComposite =
  cloudConfigsMachinePoolsMachineUidsGetResponse200;

export type cloudConfigsMachinePoolsMachineUidsGetResponse =
  cloudConfigsMachinePoolsMachineUidsGetResponseComposite & {
    headers: Headers;
  };

export const getCloudConfigsMachinePoolsMachineUidsGetUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/${configUid}/machinePools/machineUids`;
};

export const cloudConfigsMachinePoolsMachineUidsGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<cloudConfigsMachinePoolsMachineUidsGetResponse> => {
  const res = await fetch(
    getCloudConfigsMachinePoolsMachineUidsGetUrl(configUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: cloudConfigsMachinePoolsMachineUidsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as cloudConfigsMachinePoolsMachineUidsGetResponse;
};
