/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ProjectRolesEntity,
  ProjectRolesPatchBody,
  ResourceRoles,
  ResourceRolesUpdateEntityBody,
  Team,
  TeamBody,
  TeamPatch,
  TeamTenantRolesEntity,
  TeamTenantRolesUpdate,
  Teams,
  TeamsListParams,
  TeamsSummaryList,
  TeamsSummarySpec,
  Uid,
} from ".././schemas";

/**
 * @summary Retrieves a list of teams
 */
export type TeamsListResponse200 = {
  data: Teams;
  status: 200;
};

export type TeamsListResponseComposite = TeamsListResponse200;

export type TeamsListResponse = TeamsListResponseComposite & {
  headers: Headers;
};

export const getV1TeamsListUrl = (params?: TeamsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/teams?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/teams`;
};

export const TeamsList = async (
  params?: TeamsListParams,
  options?: RequestInit,
): Promise<TeamsListResponse> => {
  const res = await fetch(getV1TeamsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsListResponse;
};

/**
 * @summary Creates a team with the specified users and roles
 */
export type TeamsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type TeamsCreateResponseComposite = TeamsCreateResponse201;

export type TeamsCreateResponse = TeamsCreateResponseComposite & {
  headers: Headers;
};

export const getV1TeamsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/teams`;
};

export const TeamsCreate = async (
  TeamBody: TeamBody,
  options?: RequestInit,
): Promise<TeamsCreateResponse> => {
  const res = await fetch(getV1TeamsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TeamBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsCreateResponse;
};

/**
 * @summary Retrieves a list of teams summary with provided filter spec
 */
export type TeamsSummaryGetResponse200 = {
  data: TeamsSummaryList;
  status: 200;
};

export type TeamsSummaryGetResponseComposite = TeamsSummaryGetResponse200;

export type TeamsSummaryGetResponse = TeamsSummaryGetResponseComposite & {
  headers: Headers;
};

export const getV1TeamsSummaryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/teams/summary`;
};

export const TeamsSummaryGet = async (
  TeamsSummarySpec: TeamsSummarySpec,
  options?: RequestInit,
): Promise<TeamsSummaryGetResponse> => {
  const res = await fetch(getV1TeamsSummaryGetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TeamsSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsSummaryGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsSummaryGetResponse;
};

/**
 * @summary Deletes the specified team
 */
export type TeamsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type TeamsUidDeleteResponseComposite = TeamsUidDeleteResponse204;

export type TeamsUidDeleteResponse = TeamsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const TeamsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<TeamsUidDeleteResponse> => {
  const res = await fetch(getV1TeamsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidDeleteResponse;
};

/**
 * @summary Returns the sepcified team
 */
export type TeamsUidGetResponse200 = {
  data: Team;
  status: 200;
};

export type TeamsUidGetResponseComposite = TeamsUidGetResponse200;

export type TeamsUidGetResponse = TeamsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const TeamsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<TeamsUidGetResponse> => {
  const res = await fetch(getV1TeamsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidGetResponse;
};

/**
 * @summary Patches the specified team
 */
export type TeamsUidPatchResponse204 = {
  data: void;
  status: 204;
};

export type TeamsUidPatchResponseComposite = TeamsUidPatchResponse204;

export type TeamsUidPatchResponse = TeamsUidPatchResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const TeamsUidPatch = async (
  uid: string,
  TeamPatch: TeamPatch,
  options?: RequestInit,
): Promise<TeamsUidPatchResponse> => {
  const res = await fetch(getV1TeamsUidPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TeamPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidPatchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidPatchResponse;
};

/**
 * @summary Updates the sepcified team
 */
export type TeamsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TeamsUidUpdateResponseComposite = TeamsUidUpdateResponse204;

export type TeamsUidUpdateResponse = TeamsUidUpdateResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const TeamsUidUpdate = async (
  uid: string,
  TeamBody: TeamBody,
  options?: RequestInit,
): Promise<TeamsUidUpdateResponse> => {
  const res = await fetch(getV1TeamsUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TeamBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidUpdateResponse;
};

/**
 * @summary Returns the specified team's project and roles data
 */
export type TeamsProjectRolesResponse200 = {
  data: ProjectRolesEntity;
  status: 200;
};

export type TeamsProjectRolesResponseComposite = TeamsProjectRolesResponse200;

export type TeamsProjectRolesResponse = TeamsProjectRolesResponseComposite & {
  headers: Headers;
};

export const getV1TeamsProjectRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/projects`;
};

export const TeamsProjectRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<TeamsProjectRolesResponse> => {
  const res = await fetch(getV1TeamsProjectRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsProjectRolesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsProjectRolesResponse;
};

/**
 * @summary Updates the projects and roles for the specified team
 */
export type TeamsProjectRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type TeamsProjectRolesPutResponseComposite =
  TeamsProjectRolesPutResponse204;

export type TeamsProjectRolesPutResponse =
  TeamsProjectRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsProjectRolesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/projects`;
};

export const TeamsProjectRolesPut = async (
  uid: string,
  ProjectRolesPatchBody: ProjectRolesPatchBody,
  options?: RequestInit,
): Promise<TeamsProjectRolesPutResponse> => {
  const res = await fetch(getV1TeamsProjectRolesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsProjectRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsProjectRolesPutResponse;
};

/**
 * Returns resource roles for team
 * @summary Returns the specified individual and resource roles for a team
 */
export type TeamsUidResourceRolesResponse200 = {
  data: ResourceRoles;
  status: 200;
};

export type TeamsUidResourceRolesResponseComposite =
  TeamsUidResourceRolesResponse200;

export type TeamsUidResourceRolesResponse =
  TeamsUidResourceRolesResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidResourceRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles`;
};

export const TeamsUidResourceRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<TeamsUidResourceRolesResponse> => {
  const res = await fetch(getV1TeamsUidResourceRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidResourceRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidResourceRolesResponse;
};

/**
 * Resource roles added to specific team
 * @summary Add resource roles for team
 */
export type TeamsUidResourceRolesCreateResponse204 = {
  data: void;
  status: 204;
};

export type TeamsUidResourceRolesCreateResponseComposite =
  TeamsUidResourceRolesCreateResponse204;

export type TeamsUidResourceRolesCreateResponse =
  TeamsUidResourceRolesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidResourceRolesCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles`;
};

export const TeamsUidResourceRolesCreate = async (
  uid: string,
  ResourceRolesUpdateEntityBody: ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<TeamsUidResourceRolesCreateResponse> => {
  const res = await fetch(getV1TeamsUidResourceRolesCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ResourceRolesUpdateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidResourceRolesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidResourceRolesCreateResponse;
};

/**
 * @summary Deleted the resource roles from team
 */
export type TeamsUidResourceRolesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type TeamsUidResourceRolesUidDeleteResponseComposite =
  TeamsUidResourceRolesUidDeleteResponse204;

export type TeamsUidResourceRolesUidDeleteResponse =
  TeamsUidResourceRolesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidResourceRolesUidDeleteUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const TeamsUidResourceRolesUidDelete = async (
  uid: string,
  resourceRoleUid: string,
  options?: RequestInit,
): Promise<TeamsUidResourceRolesUidDeleteResponse> => {
  const res = await fetch(
    getV1TeamsUidResourceRolesUidDeleteUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidResourceRolesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidResourceRolesUidDeleteResponse;
};

/**
 * Specific resource roles fo team is updated
 * @summary Updates the resource roles for team
 */
export type TeamsResourceRolesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TeamsResourceRolesUidUpdateResponseComposite =
  TeamsResourceRolesUidUpdateResponse204;

export type TeamsResourceRolesUidUpdateResponse =
  TeamsResourceRolesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsResourceRolesUidUpdateUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const TeamsResourceRolesUidUpdate = async (
  uid: string,
  resourceRoleUid: string,
  ResourceRolesUpdateEntityBody: ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<TeamsResourceRolesUidUpdateResponse> => {
  const res = await fetch(
    getV1TeamsResourceRolesUidUpdateUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ResourceRolesUpdateEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsResourceRolesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsResourceRolesUidUpdateResponse;
};

/**
 * @summary Returns the specified team's tenant roles
 */
export type TeamsUidTenantRolesGetResponse200 = {
  data: TeamTenantRolesEntity;
  status: 200;
};

export type TeamsUidTenantRolesGetResponseComposite =
  TeamsUidTenantRolesGetResponse200;

export type TeamsUidTenantRolesGetResponse =
  TeamsUidTenantRolesGetResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidTenantRolesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/roles`;
};

export const TeamsUidTenantRolesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<TeamsUidTenantRolesGetResponse> => {
  const res = await fetch(getV1TeamsUidTenantRolesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidTenantRolesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidTenantRolesGetResponse;
};

/**
 * @summary Updates the tenant roles of the specified team
 */
export type TeamsUidTenantRolesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TeamsUidTenantRolesUpdateResponseComposite =
  TeamsUidTenantRolesUpdateResponse204;

export type TeamsUidTenantRolesUpdateResponse =
  TeamsUidTenantRolesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidTenantRolesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/roles`;
};

export const TeamsUidTenantRolesUpdate = async (
  uid: string,
  TeamTenantRolesUpdate: TeamTenantRolesUpdate,
  options?: RequestInit,
): Promise<TeamsUidTenantRolesUpdateResponse> => {
  const res = await fetch(getV1TeamsUidTenantRolesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TeamTenantRolesUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsUidTenantRolesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsUidTenantRolesUpdateResponse;
};
