/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ProjectRolesEntity,
  ResourceRoles,
  Team,
  TeamPatch,
  TeamTenantRolesEntity,
  TeamTenantRolesUpdate,
  Teams,
  TeamsListParams,
  TeamsSummaryList,
  TeamsSummarySpec,
  Uid,
  V1ProjectRolesPatchBody,
  V1ResourceRolesUpdateEntityBody,
  V1TeamBody,
} from ".././schemas";

/**
 * @summary Retrieves a list of teams
 */
export type teamsListResponse200 = {
  data: Teams;
  status: 200;
};

export type teamsListResponseComposite = teamsListResponse200;

export type teamsListResponse = teamsListResponseComposite & {
  headers: Headers;
};

export const getTeamsListUrl = (params?: TeamsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/teams?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/teams`;
};

export const teamsList = async (
  params?: TeamsListParams,
  options?: RequestInit,
): Promise<teamsListResponse> => {
  const res = await fetch(getTeamsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsListResponse;
};

/**
 * @summary Creates a team with the specified users and roles
 */
export type teamsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type teamsCreateResponseComposite = teamsCreateResponse201;

export type teamsCreateResponse = teamsCreateResponseComposite & {
  headers: Headers;
};

export const getTeamsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/teams`;
};

export const teamsCreate = async (
  v1TeamBody: V1TeamBody,
  options?: RequestInit,
): Promise<teamsCreateResponse> => {
  const res = await fetch(getTeamsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TeamBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsCreateResponse;
};

/**
 * @summary Retrieves a list of teams summary with provided filter spec
 */
export type teamsSummaryGetResponse200 = {
  data: TeamsSummaryList;
  status: 200;
};

export type teamsSummaryGetResponseComposite = teamsSummaryGetResponse200;

export type teamsSummaryGetResponse = teamsSummaryGetResponseComposite & {
  headers: Headers;
};

export const getTeamsSummaryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/teams/summary`;
};

export const teamsSummaryGet = async (
  teamsSummarySpec: TeamsSummarySpec,
  options?: RequestInit,
): Promise<teamsSummaryGetResponse> => {
  const res = await fetch(getTeamsSummaryGetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(teamsSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsSummaryGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsSummaryGetResponse;
};

/**
 * @summary Deletes the specified team
 */
export type teamsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type teamsUidDeleteResponseComposite = teamsUidDeleteResponse204;

export type teamsUidDeleteResponse = teamsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getTeamsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const teamsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<teamsUidDeleteResponse> => {
  const res = await fetch(getTeamsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsUidDeleteResponse;
};

/**
 * @summary Returns the sepcified team
 */
export type teamsUidGetResponse200 = {
  data: Team;
  status: 200;
};

export type teamsUidGetResponseComposite = teamsUidGetResponse200;

export type teamsUidGetResponse = teamsUidGetResponseComposite & {
  headers: Headers;
};

export const getTeamsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const teamsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<teamsUidGetResponse> => {
  const res = await fetch(getTeamsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsUidGetResponse;
};

/**
 * @summary Patches the specified team
 */
export type teamsUidPatchResponse204 = {
  data: void;
  status: 204;
};

export type teamsUidPatchResponseComposite = teamsUidPatchResponse204;

export type teamsUidPatchResponse = teamsUidPatchResponseComposite & {
  headers: Headers;
};

export const getTeamsUidPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const teamsUidPatch = async (
  uid: string,
  teamPatch: TeamPatch,
  options?: RequestInit,
): Promise<teamsUidPatchResponse> => {
  const res = await fetch(getTeamsUidPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(teamPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsUidPatchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsUidPatchResponse;
};

/**
 * @summary Updates the sepcified team
 */
export type teamsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type teamsUidUpdateResponseComposite = teamsUidUpdateResponse204;

export type teamsUidUpdateResponse = teamsUidUpdateResponseComposite & {
  headers: Headers;
};

export const getTeamsUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const teamsUidUpdate = async (
  uid: string,
  v1TeamBody: V1TeamBody,
  options?: RequestInit,
): Promise<teamsUidUpdateResponse> => {
  const res = await fetch(getTeamsUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TeamBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsUidUpdateResponse;
};

/**
 * @summary Returns the specified team's project and roles data
 */
export type teamsProjectRolesResponse200 = {
  data: ProjectRolesEntity;
  status: 200;
};

export type teamsProjectRolesResponseComposite = teamsProjectRolesResponse200;

export type teamsProjectRolesResponse = teamsProjectRolesResponseComposite & {
  headers: Headers;
};

export const getTeamsProjectRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/projects`;
};

export const teamsProjectRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<teamsProjectRolesResponse> => {
  const res = await fetch(getTeamsProjectRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsProjectRolesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsProjectRolesResponse;
};

/**
 * @summary Updates the projects and roles for the specified team
 */
export type teamsProjectRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type teamsProjectRolesPutResponseComposite =
  teamsProjectRolesPutResponse204;

export type teamsProjectRolesPutResponse =
  teamsProjectRolesPutResponseComposite & {
    headers: Headers;
  };

export const getTeamsProjectRolesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/projects`;
};

export const teamsProjectRolesPut = async (
  uid: string,
  v1ProjectRolesPatchBody: V1ProjectRolesPatchBody,
  options?: RequestInit,
): Promise<teamsProjectRolesPutResponse> => {
  const res = await fetch(getTeamsProjectRolesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsProjectRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsProjectRolesPutResponse;
};

/**
 * Returns resource roles for team
 * @summary Returns the specified individual and resource roles for a team
 */
export type teamsUidResourceRolesResponse200 = {
  data: ResourceRoles;
  status: 200;
};

export type teamsUidResourceRolesResponseComposite =
  teamsUidResourceRolesResponse200;

export type teamsUidResourceRolesResponse =
  teamsUidResourceRolesResponseComposite & {
    headers: Headers;
  };

export const getTeamsUidResourceRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles`;
};

export const teamsUidResourceRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<teamsUidResourceRolesResponse> => {
  const res = await fetch(getTeamsUidResourceRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsUidResourceRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsUidResourceRolesResponse;
};

/**
 * Resource roles added to specific team
 * @summary Add resource roles for team
 */
export type teamsUidResourceRolesCreateResponse204 = {
  data: void;
  status: 204;
};

export type teamsUidResourceRolesCreateResponseComposite =
  teamsUidResourceRolesCreateResponse204;

export type teamsUidResourceRolesCreateResponse =
  teamsUidResourceRolesCreateResponseComposite & {
    headers: Headers;
  };

export const getTeamsUidResourceRolesCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles`;
};

export const teamsUidResourceRolesCreate = async (
  uid: string,
  v1ResourceRolesUpdateEntityBody: V1ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<teamsUidResourceRolesCreateResponse> => {
  const res = await fetch(getTeamsUidResourceRolesCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceRolesUpdateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsUidResourceRolesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsUidResourceRolesCreateResponse;
};

/**
 * @summary Deleted the resource roles from team
 */
export type teamsUidResourceRolesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type teamsUidResourceRolesUidDeleteResponseComposite =
  teamsUidResourceRolesUidDeleteResponse204;

export type teamsUidResourceRolesUidDeleteResponse =
  teamsUidResourceRolesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getTeamsUidResourceRolesUidDeleteUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const teamsUidResourceRolesUidDelete = async (
  uid: string,
  resourceRoleUid: string,
  options?: RequestInit,
): Promise<teamsUidResourceRolesUidDeleteResponse> => {
  const res = await fetch(
    getTeamsUidResourceRolesUidDeleteUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsUidResourceRolesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsUidResourceRolesUidDeleteResponse;
};

/**
 * Specific resource roles fo team is updated
 * @summary Updates the resource roles for team
 */
export type teamsResourceRolesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type teamsResourceRolesUidUpdateResponseComposite =
  teamsResourceRolesUidUpdateResponse204;

export type teamsResourceRolesUidUpdateResponse =
  teamsResourceRolesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getTeamsResourceRolesUidUpdateUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const teamsResourceRolesUidUpdate = async (
  uid: string,
  resourceRoleUid: string,
  v1ResourceRolesUpdateEntityBody: V1ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<teamsResourceRolesUidUpdateResponse> => {
  const res = await fetch(
    getTeamsResourceRolesUidUpdateUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ResourceRolesUpdateEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsResourceRolesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsResourceRolesUidUpdateResponse;
};

/**
 * @summary Returns the specified team's tenant roles
 */
export type v1TeamsUidTenantRolesGetResponse200 = {
  data: TeamTenantRolesEntity;
  status: 200;
};

export type v1TeamsUidTenantRolesGetResponseComposite =
  v1TeamsUidTenantRolesGetResponse200;

export type v1TeamsUidTenantRolesGetResponse =
  v1TeamsUidTenantRolesGetResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidTenantRolesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/roles`;
};

export const v1TeamsUidTenantRolesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TeamsUidTenantRolesGetResponse> => {
  const res = await fetch(getV1TeamsUidTenantRolesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidTenantRolesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidTenantRolesGetResponse;
};

/**
 * @summary Updates the tenant roles of the specified team
 */
export type v1TeamsUidTenantRolesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1TeamsUidTenantRolesUpdateResponseComposite =
  v1TeamsUidTenantRolesUpdateResponse204;

export type v1TeamsUidTenantRolesUpdateResponse =
  v1TeamsUidTenantRolesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidTenantRolesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/roles`;
};

export const v1TeamsUidTenantRolesUpdate = async (
  uid: string,
  teamTenantRolesUpdate: TeamTenantRolesUpdate,
  options?: RequestInit,
): Promise<v1TeamsUidTenantRolesUpdateResponse> => {
  const res = await fetch(getV1TeamsUidTenantRolesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(teamTenantRolesUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidTenantRolesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidTenantRolesUpdateResponse;
};
