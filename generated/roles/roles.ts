/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  Role,
  RoleClone,
  Roles,
  RolesListParams,
  Uid,
  V1RoleBody,
} from ".././schemas";

/**
 * @summary Retrieves a list of roles
 */
export type rolesListResponse200 = {
  data: Roles;
  status: 200;
};

export type rolesListResponseComposite = rolesListResponse200;

export type rolesListResponse = rolesListResponseComposite & {
  headers: Headers;
};

export const getRolesListUrl = (params?: RolesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/roles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/roles`;
};

export const rolesList = async (
  params?: RolesListParams,
  options?: RequestInit,
): Promise<rolesListResponse> => {
  const res = await fetch(getRolesListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rolesListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rolesListResponse;
};

/**
 * @summary Creates a role with specified permissions
 */
export type rolesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type rolesCreateResponseComposite = rolesCreateResponse201;

export type rolesCreateResponse = rolesCreateResponseComposite & {
  headers: Headers;
};

export const getRolesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/roles`;
};

export const rolesCreate = async (
  v1RoleBody: V1RoleBody,
  options?: RequestInit,
): Promise<rolesCreateResponse> => {
  const res = await fetch(getRolesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1RoleBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rolesCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rolesCreateResponse;
};

/**
 * @summary Deletes the specified role
 */
export type rolesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type rolesUidDeleteResponseComposite = rolesUidDeleteResponse204;

export type rolesUidDeleteResponse = rolesUidDeleteResponseComposite & {
  headers: Headers;
};

export const getRolesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const rolesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<rolesUidDeleteResponse> => {
  const res = await fetch(getRolesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rolesUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rolesUidDeleteResponse;
};

/**
 * @summary Returns the specified role
 */
export type rolesUidGetResponse200 = {
  data: Role;
  status: 200;
};

export type rolesUidGetResponseComposite = rolesUidGetResponse200;

export type rolesUidGetResponse = rolesUidGetResponseComposite & {
  headers: Headers;
};

export const getRolesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const rolesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<rolesUidGetResponse> => {
  const res = await fetch(getRolesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rolesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rolesUidGetResponse;
};

/**
 * @summary Updates the specified role
 */
export type rolesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type rolesUidUpdateResponseComposite = rolesUidUpdateResponse204;

export type rolesUidUpdateResponse = rolesUidUpdateResponseComposite & {
  headers: Headers;
};

export const getRolesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const rolesUidUpdate = async (
  uid: string,
  v1RoleBody: V1RoleBody,
  options?: RequestInit,
): Promise<rolesUidUpdateResponse> => {
  const res = await fetch(getRolesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1RoleBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rolesUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rolesUidUpdateResponse;
};

/**
 * @summary Clone the role
 */
export type rolesCloneResponse201 = {
  data: Uid;
  status: 201;
};

export type rolesCloneResponseComposite = rolesCloneResponse201;

export type rolesCloneResponse = rolesCloneResponseComposite & {
  headers: Headers;
};

export const getRolesCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}/clone`;
};

export const rolesClone = async (
  uid: string,
  roleClone: RoleClone,
  options?: RequestInit,
): Promise<rolesCloneResponse> => {
  const res = await fetch(getRolesCloneUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(roleClone),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: rolesCloneResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as rolesCloneResponse;
};
