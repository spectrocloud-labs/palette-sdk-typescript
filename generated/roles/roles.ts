/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  Role,
  RoleBody,
  RoleClone,
  Roles,
  RolesListParams,
  Uid,
} from ".././schemas";

/**
 * @summary Retrieves a list of roles
 */
export type RolesListResponse200 = {
  data: Roles;
  status: 200;
};

export type RolesListResponseComposite = RolesListResponse200;

export type RolesListResponse = RolesListResponseComposite & {
  headers: Headers;
};

export const getV1RolesListUrl = (params?: RolesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/roles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/roles`;
};

export const RolesList = async (
  params?: RolesListParams,
  options?: RequestInit,
): Promise<RolesListResponse> => {
  const res = await fetch(getV1RolesListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RolesListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RolesListResponse;
};

/**
 * @summary Creates a role with specified permissions
 */
export type RolesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type RolesCreateResponseComposite = RolesCreateResponse201;

export type RolesCreateResponse = RolesCreateResponseComposite & {
  headers: Headers;
};

export const getV1RolesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/roles`;
};

export const RolesCreate = async (
  RoleBody: RoleBody,
  options?: RequestInit,
): Promise<RolesCreateResponse> => {
  const res = await fetch(getV1RolesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(RoleBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RolesCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RolesCreateResponse;
};

/**
 * @summary Deletes the specified role
 */
export type RolesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type RolesUidDeleteResponseComposite = RolesUidDeleteResponse204;

export type RolesUidDeleteResponse = RolesUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1RolesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const RolesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<RolesUidDeleteResponse> => {
  const res = await fetch(getV1RolesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RolesUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RolesUidDeleteResponse;
};

/**
 * @summary Returns the specified role
 */
export type RolesUidGetResponse200 = {
  data: Role;
  status: 200;
};

export type RolesUidGetResponseComposite = RolesUidGetResponse200;

export type RolesUidGetResponse = RolesUidGetResponseComposite & {
  headers: Headers;
};

export const getV1RolesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const RolesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<RolesUidGetResponse> => {
  const res = await fetch(getV1RolesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RolesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RolesUidGetResponse;
};

/**
 * @summary Updates the specified role
 */
export type RolesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type RolesUidUpdateResponseComposite = RolesUidUpdateResponse204;

export type RolesUidUpdateResponse = RolesUidUpdateResponseComposite & {
  headers: Headers;
};

export const getV1RolesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const RolesUidUpdate = async (
  uid: string,
  RoleBody: RoleBody,
  options?: RequestInit,
): Promise<RolesUidUpdateResponse> => {
  const res = await fetch(getV1RolesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(RoleBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RolesUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RolesUidUpdateResponse;
};

/**
 * @summary Clone the role
 */
export type RolesCloneResponse201 = {
  data: Uid;
  status: 201;
};

export type RolesCloneResponseComposite = RolesCloneResponse201;

export type RolesCloneResponse = RolesCloneResponseComposite & {
  headers: Headers;
};

export const getV1RolesCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}/clone`;
};

export const RolesClone = async (
  uid: string,
  RoleClone: RoleClone,
  options?: RequestInit,
): Promise<RolesCloneResponse> => {
  const res = await fetch(getV1RolesCloneUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(RoleClone),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RolesCloneResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RolesCloneResponse;
};
