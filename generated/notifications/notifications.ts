/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  NotificationEvent,
  Notifications,
  NotificationsListParams,
  NotificationsObjTypeUidListParams,
  Uid,
} from ".././schemas";

/**
 * Returns a paginated list of notifications based on request parameters
 * @summary Returns a paginated list of notifications based on request parameters
 */
export type NotificationsListResponse200 = {
  data: Notifications;
  status: 200;
};

export type NotificationsListResponseComposite =
  NotificationsListResponse200;

export type NotificationsListResponse =
  NotificationsListResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsListUrl = (
  params?: NotificationsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/notifications/?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/notifications/`;
};

export const NotificationsList = async (
  params?: NotificationsListParams,
  options?: RequestInit,
): Promise<NotificationsListResponse> => {
  const res = await fetch(getV1NotificationsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: NotificationsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as NotificationsListResponse;
};

/**
 * Creates a notification event
 * @summary Creates a notification event
 */
export type NotificationsEventCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type NotificationsEventCreateResponseComposite =
  NotificationsEventCreateResponse201;

export type NotificationsEventCreateResponse =
  NotificationsEventCreateResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsEventCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/notifications/events`;
};

export const NotificationsEventCreate = async (
  NotificationEvent: NotificationEvent,
  options?: RequestInit,
): Promise<NotificationsEventCreateResponse> => {
  const res = await fetch(getV1NotificationsEventCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(NotificationEvent),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: NotificationsEventCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as NotificationsEventCreateResponse;
};

/**
 * Returns a list of notifications for the specified related object
 * @summary Returns a list of notifications for the specified related object
 */
export type NotificationsObjTypeUidListResponse200 = {
  data: Notifications;
  status: 200;
};

export type NotificationsObjTypeUidListResponseComposite =
  NotificationsObjTypeUidListResponse200;

export type NotificationsObjTypeUidListResponse =
  NotificationsObjTypeUidListResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsObjTypeUidListUrl = (
  objectKind: "spectrocluster" | "clusterprofile" | "appdeployment",
  objectUid: string,
  params?: NotificationsObjTypeUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/notifications/${objectKind}/${objectUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/notifications/${objectKind}/${objectUid}`;
};

export const NotificationsObjTypeUidList = async (
  objectKind: "spectrocluster" | "clusterprofile" | "appdeployment",
  objectUid: string,
  params?: NotificationsObjTypeUidListParams,
  options?: RequestInit,
): Promise<NotificationsObjTypeUidListResponse> => {
  const res = await fetch(
    getV1NotificationsObjTypeUidListUrl(objectKind, objectUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: NotificationsObjTypeUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as NotificationsObjTypeUidListResponse;
};

/**
 * Updates the specified notification for the acknowledgment
 * @summary Updates the specified notification for the acknowledgment
 */
export type NotificationsUidAckResponse204 = {
  data: void;
  status: 204;
};

export type NotificationsUidAckResponseComposite =
  NotificationsUidAckResponse204;

export type NotificationsUidAckResponse =
  NotificationsUidAckResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsUidAckUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/notifications/${uid}/ack`;
};

export const NotificationsUidAck = async (
  uid: string,
  options?: RequestInit,
): Promise<NotificationsUidAckResponse> => {
  const res = await fetch(getV1NotificationsUidAckUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: NotificationsUidAckResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as NotificationsUidAckResponse;
};

/**
 * Updates the specified notification action as done
 * @summary Updates the specified notification action as done
 */
export type NotificationsUidDoneResponse204 = {
  data: void;
  status: 204;
};

export type NotificationsUidDoneResponseComposite =
  NotificationsUidDoneResponse204;

export type NotificationsUidDoneResponse =
  NotificationsUidDoneResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsUidDoneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/notifications/${uid}/done`;
};

export const NotificationsUidDone = async (
  uid: string,
  options?: RequestInit,
): Promise<NotificationsUidDoneResponse> => {
  const res = await fetch(getV1NotificationsUidDoneUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: NotificationsUidDoneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as NotificationsUidDoneResponse;
};
