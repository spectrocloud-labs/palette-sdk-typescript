/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AlertEntity,
  Channel,
  ChannelBody,
  Macros,
  MacrosBody,
  NodesAutoRemediationSettingsBody,
  ObjectMetaBody,
  Project,
  ProjectActiveResources,
  ProjectAlertComponents,
  ProjectCleanup,
  ProjectClusterSettings,
  ProjectEntityBody,
  ProjectTeamsEntity,
  ProjectUsersEntity,
  ProjectsUidDeleteParams,
  Uid,
} from ".././schemas";

/**
 * @summary Creates a project
 */
export type ProjectsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ProjectsCreateResponseComposite = ProjectsCreateResponse201;

export type ProjectsCreateResponse = ProjectsCreateResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/projects`;
};

export const ProjectsCreate = async (
  ProjectEntityBody: ProjectEntityBody,
  options?: RequestInit,
): Promise<ProjectsCreateResponse> => {
  const res = await fetch(getV1ProjectsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsCreateResponse;
};

/**
 * @summary Retrieves a list of supported alerts for a project
 */
export type ProjectsAlertsResponse200 = {
  data: ProjectAlertComponents;
  status: 200;
};

export type ProjectsAlertsResponseComposite = ProjectsAlertsResponse200;

export type ProjectsAlertsResponse = ProjectsAlertsResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsAlertsUrl = () => {
  return `https://api.spectrocloud.com/v1/projects/alerts`;
};

export const ProjectsAlerts = async (
  options?: RequestInit,
): Promise<ProjectsAlertsResponse> => {
  const res = await fetch(getV1ProjectsAlertsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsAlertsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsAlertsResponse;
};

/**
 * @summary Deletes the specified project
 */
export type ProjectsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidDeleteResponseComposite =
  ProjectsUidDeleteResponse204;

export type ProjectsUidDeleteResponse =
  ProjectsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidDeleteUrl = (
  uid: string,
  params?: ProjectsUidDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/projects/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const ProjectsUidDelete = async (
  uid: string,
  ProjectCleanup: ProjectCleanup,
  params?: ProjectsUidDeleteParams,
  options?: RequestInit,
): Promise<ProjectsUidDeleteResponse> => {
  const res = await fetch(getV1ProjectsUidDeleteUrl(uid, params), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectCleanup),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidDeleteResponse;
};

/**
 * @summary Returns the specified project
 */
export type ProjectsUidGetResponse200 = {
  data: Project;
  status: 200;
};

export type ProjectsUidGetResponseComposite = ProjectsUidGetResponse200;

export type ProjectsUidGetResponse = ProjectsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const ProjectsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ProjectsUidGetResponse> => {
  const res = await fetch(getV1ProjectsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidGetResponse;
};

/**
 * @summary Updates the specified project
 */
export type ProjectsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidUpdateResponseComposite =
  ProjectsUidUpdateResponse204;

export type ProjectsUidUpdateResponse =
  ProjectsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const ProjectsUidUpdate = async (
  uid: string,
  ProjectEntityBody: ProjectEntityBody,
  options?: RequestInit,
): Promise<ProjectsUidUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidUpdateResponse;
};

/**
 * @summary Deletes the specified alert to the specified project
 */
export type ProjectsUidAlertDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidAlertDeleteResponseComposite =
  ProjectsUidAlertDeleteResponse204;

export type ProjectsUidAlertDeleteResponse =
  ProjectsUidAlertDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertDeleteUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const ProjectsUidAlertDelete = async (
  uid: string,
  component: string,
  options?: RequestInit,
): Promise<ProjectsUidAlertDeleteResponse> => {
  const res = await fetch(getV1ProjectsUidAlertDeleteUrl(uid, component), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidAlertDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidAlertDeleteResponse;
};

/**
 * @summary Create the specified alert to the specified project
 */
export type ProjectsUidAlertCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ProjectsUidAlertCreateResponseComposite =
  ProjectsUidAlertCreateResponse201;

export type ProjectsUidAlertCreateResponse =
  ProjectsUidAlertCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertCreateUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const ProjectsUidAlertCreate = async (
  uid: string,
  component: string,
  ChannelBody: ChannelBody,
  options?: RequestInit,
): Promise<ProjectsUidAlertCreateResponse> => {
  const res = await fetch(getV1ProjectsUidAlertCreateUrl(uid, component), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ChannelBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidAlertCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidAlertCreateResponse;
};

/**
 * @summary Upsert the specified alert to the specified project
 */
export type ProjectsUidAlertUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidAlertUpdateResponseComposite =
  ProjectsUidAlertUpdateResponse204;

export type ProjectsUidAlertUpdateResponse =
  ProjectsUidAlertUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertUpdateUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const ProjectsUidAlertUpdate = async (
  uid: string,
  component: string,
  AlertEntity: AlertEntity,
  options?: RequestInit,
): Promise<ProjectsUidAlertUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidAlertUpdateUrl(uid, component), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AlertEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidAlertUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidAlertUpdateResponse;
};

/**
 * @summary Deletes the specified alert of the specified project
 */
export type ProjectsUidAlertsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidAlertsUidDeleteResponseComposite =
  ProjectsUidAlertsUidDeleteResponse204;

export type ProjectsUidAlertsUidDeleteResponse =
  ProjectsUidAlertsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertsUidDeleteUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const ProjectsUidAlertsUidDelete = async (
  uid: string,
  component: string,
  alertUid: string,
  options?: RequestInit,
): Promise<ProjectsUidAlertsUidDeleteResponse> => {
  const res = await fetch(
    getV1ProjectsUidAlertsUidDeleteUrl(uid, component, alertUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidAlertsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidAlertsUidDeleteResponse;
};

/**
 * @summary Get the specified alert of the specified project
 */
export type ProjectsUidAlertsUidGetResponse200 = {
  data: Channel;
  status: 200;
};

export type ProjectsUidAlertsUidGetResponseComposite =
  ProjectsUidAlertsUidGetResponse200;

export type ProjectsUidAlertsUidGetResponse =
  ProjectsUidAlertsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertsUidGetUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const ProjectsUidAlertsUidGet = async (
  uid: string,
  component: string,
  alertUid: string,
  options?: RequestInit,
): Promise<ProjectsUidAlertsUidGetResponse> => {
  const res = await fetch(
    getV1ProjectsUidAlertsUidGetUrl(uid, component, alertUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidAlertsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidAlertsUidGetResponse;
};

/**
 * @summary Update the specified alert of the specified project
 */
export type ProjectsUidAlertsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidAlertsUidUpdateResponseComposite =
  ProjectsUidAlertsUidUpdateResponse204;

export type ProjectsUidAlertsUidUpdateResponse =
  ProjectsUidAlertsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertsUidUpdateUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const ProjectsUidAlertsUidUpdate = async (
  uid: string,
  component: string,
  alertUid: string,
  ChannelBody: ChannelBody,
  options?: RequestInit,
): Promise<ProjectsUidAlertsUidUpdateResponse> => {
  const res = await fetch(
    getV1ProjectsUidAlertsUidUpdateUrl(uid, component, alertUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ChannelBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidAlertsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidAlertsUidUpdateResponse;
};

/**
 * @summary Delete the macros for the specified project by macro name
 */
export type ProjectsUidMacrosDeleteByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidMacrosDeleteByMacroNameResponseComposite =
  ProjectsUidMacrosDeleteByMacroNameResponse204;

export type ProjectsUidMacrosDeleteByMacroNameResponse =
  ProjectsUidMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosDeleteByMacroNameUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const ProjectsUidMacrosDeleteByMacroName = async (
  uid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<ProjectsUidMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosDeleteByMacroNameUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the specified project
 */
export type ProjectsUidMacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type ProjectsUidMacrosListResponseComposite =
  ProjectsUidMacrosListResponse200;

export type ProjectsUidMacrosListResponse =
  ProjectsUidMacrosListResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const ProjectsUidMacrosList = async (
  uid: string,
  options?: RequestInit,
): Promise<ProjectsUidMacrosListResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosListUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidMacrosListResponse;
};

/**
 * @summary Update the macros for the specified project by macro name
 */
export type ProjectsUidMacrosUpdateByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidMacrosUpdateByMacroNameResponseComposite =
  ProjectsUidMacrosUpdateByMacroNameResponse204;

export type ProjectsUidMacrosUpdateByMacroNameResponse =
  ProjectsUidMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosUpdateByMacroNameUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const ProjectsUidMacrosUpdateByMacroName = async (
  uid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<ProjectsUidMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosUpdateByMacroNameUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the specified project
 */
export type ProjectsUidMacrosCreateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidMacrosCreateResponseComposite =
  ProjectsUidMacrosCreateResponse204;

export type ProjectsUidMacrosCreateResponse =
  ProjectsUidMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const ProjectsUidMacrosCreate = async (
  uid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<ProjectsUidMacrosCreateResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidMacrosCreateResponse;
};

/**
 * @summary Update the macros of the specified project
 */
export type ProjectsUidMacrosUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidMacrosUpdateResponseComposite =
  ProjectsUidMacrosUpdateResponse204;

export type ProjectsUidMacrosUpdateResponse =
  ProjectsUidMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const ProjectsUidMacrosUpdate = async (
  uid: string,
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<ProjectsUidMacrosUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidMacrosUpdateResponse;
};

/**
 * @summary Update the metadata of the specified project
 */
export type ProjectsUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidMetaUpdateResponseComposite =
  ProjectsUidMetaUpdateResponse204;

export type ProjectsUidMetaUpdateResponse =
  ProjectsUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/meta`;
};

export const ProjectsUidMetaUpdate = async (
  uid: string,
  ObjectMetaBody: ObjectMetaBody,
  options?: RequestInit,
): Promise<ProjectsUidMetaUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ObjectMetaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidMetaUpdateResponse;
};

/**
 * @summary Get project cluster settings
 */
export type ProjectClusterSettingsGetResponse200 = {
  data: ProjectClusterSettings;
  status: 200;
};

export type ProjectClusterSettingsGetResponseComposite =
  ProjectClusterSettingsGetResponse200;

export type ProjectClusterSettingsGetResponse =
  ProjectClusterSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectClusterSettingsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/preferences/clusterSettings`;
};

export const ProjectClusterSettingsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ProjectClusterSettingsGetResponse> => {
  const res = await fetch(getV1ProjectClusterSettingsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectClusterSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectClusterSettingsGetResponse;
};

/**
 * @summary Update project clusters nodes auto remediation setting
 */
export type ProjectClustersNodesAutoRemediationSettingUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectClustersNodesAutoRemediationSettingUpdateResponseComposite =
  ProjectClustersNodesAutoRemediationSettingUpdateResponse204;

export type ProjectClustersNodesAutoRemediationSettingUpdateResponse =
  ProjectClustersNodesAutoRemediationSettingUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectClustersNodesAutoRemediationSettingUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/preferences/clusterSettings/nodesAutoRemediationSetting`;
};

export const ProjectClustersNodesAutoRemediationSettingUpdate = async (
  uid: string,
  NodesAutoRemediationSettingsBody: NodesAutoRemediationSettingsBody,
  options?: RequestInit,
): Promise<ProjectClustersNodesAutoRemediationSettingUpdateResponse> => {
  const res = await fetch(
    getV1ProjectClustersNodesAutoRemediationSettingUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(NodesAutoRemediationSettingsBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectClustersNodesAutoRemediationSettingUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectClustersNodesAutoRemediationSettingUpdateResponse;
};

/**
 * @summary Update the teams association to the specified project
 */
export type ProjectsUidTeamsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidTeamsUpdateResponseComposite =
  ProjectsUidTeamsUpdateResponse204;

export type ProjectsUidTeamsUpdateResponse =
  ProjectsUidTeamsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidTeamsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/teams`;
};

export const ProjectsUidTeamsUpdate = async (
  uid: string,
  ProjectTeamsEntity: ProjectTeamsEntity,
  options?: RequestInit,
): Promise<ProjectsUidTeamsUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidTeamsUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectTeamsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidTeamsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidTeamsUpdateResponse;
};

/**
 * @summary Update the users association to the specified project
 */
export type ProjectsUidUsersUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ProjectsUidUsersUpdateResponseComposite =
  ProjectsUidUsersUpdateResponse204;

export type ProjectsUidUsersUpdateResponse =
  ProjectsUidUsersUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidUsersUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/users`;
};

export const ProjectsUidUsersUpdate = async (
  uid: string,
  ProjectUsersEntity: ProjectUsersEntity,
  options?: RequestInit,
): Promise<ProjectsUidUsersUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidUsersUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectUsersEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidUsersUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidUsersUpdateResponse;
};

/**
 * @summary Validate and returns active resource of project before delete
 */
export type ProjectsUidValidateResponse200 = {
  data: ProjectActiveResources;
  status: 200;
};

export type ProjectsUidValidateResponseComposite =
  ProjectsUidValidateResponse200;

export type ProjectsUidValidateResponse =
  ProjectsUidValidateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/validate`;
};

export const ProjectsUidValidate = async (
  uid: string,
  options?: RequestInit,
): Promise<ProjectsUidValidateResponse> => {
  const res = await fetch(getV1ProjectsUidValidateUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ProjectsUidValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ProjectsUidValidateResponse;
};
