/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  V1AWSVolumeTypes,
  V1AlertEntity,
  V1AmiTypes,
  V1ApiEndpoint,
  V1ApiKey,
  V1ApiKeyActiveState,
  V1ApiKeyCreateResponse,
  V1ApiKeyEntity,
  V1ApiKeyUpdate,
  V1ApiKeys,
  V1AppDeployment,
  V1AppDeploymentClusterGroupEntity,
  V1AppDeploymentProfileEntity,
  V1AppDeploymentProfileSpec,
  V1AppDeploymentProfileVersions,
  V1AppDeploymentVirtualClusterEntity,
  V1AppDeploymentsFilterSpec,
  V1AppDeploymentsSummary,
  V1AppDeploymentsUidProfileApplyParams,
  V1AppProfile,
  V1AppProfileCloneEntity,
  V1AppProfileCloneMetaInputEntity,
  V1AppProfileEntity,
  V1AppProfileMetaEntity,
  V1AppProfileTiers,
  V1AppProfilesFilterSpec,
  V1AppProfilesMetadata,
  V1AppProfilesSummary,
  V1AppTier,
  V1AppTierEntity,
  V1AppTierManifests,
  V1AppTierPatchEntity,
  V1AppTierResolvedValues,
  V1AppTierUpdateEntity,
  V1AsyncOperationIdEntity,
  V1Audit,
  V1AuditMsgUpdate,
  V1AuditSysMsg,
  V1Audits,
  V1AuditsListParams,
  V1AuthLogin,
  V1AuthOrgParams,
  V1AuthRefreshParams,
  V1AuthTokenRevoke,
  V1AuthTokenSettings,
  V1AuthUserOrgForgotParams,
  V1AuthenticateParams,
  V1AwsAccount,
  V1AwsAccountCredentials,
  V1AwsAccountSts,
  V1AwsAccountStsGetParams,
  V1AwsAccounts,
  V1AwsAvailabilityZones,
  V1AwsCloudAccount,
  V1AwsCloudClusterConfigEntity,
  V1AwsCloudConfig,
  V1AwsCloudCostSpec,
  V1AwsCloudCostSummary,
  V1AwsCloudHybridConfigEntity,
  V1AwsClusterNameValidateParams,
  V1AwsCreditAccountEntity,
  V1AwsFindImageRequest,
  V1AwsIamPoliciesParams,
  V1AwsImage,
  V1AwsInstanceTypes,
  V1AwsInstanceTypesParams,
  V1AwsKeyPairValidateParams,
  V1AwsKeyPairs,
  V1AwsKeyPairsParams,
  V1AwsKmsKeyEntity,
  V1AwsKmsKeyGetParams,
  V1AwsKmsKeyValidateParams,
  V1AwsKmsKeys,
  V1AwsKmsKeysParams,
  V1AwsMachine,
  V1AwsMachinePoolConfigEntity,
  V1AwsMachines,
  V1AwsPolicies,
  V1AwsPolicyArnsSpec,
  V1AwsPolicyArnsValidateParams,
  V1AwsPropertiesValidateSpec,
  V1AwsRegions,
  V1AwsRegionsParams,
  V1AwsS3BucketCredentials,
  V1AwsSecretSpecInputEntity,
  V1AwsSecurityGroups,
  V1AwsSecurityGroupsParams,
  V1AwsStorageTypes,
  V1AwsVolumeSize,
  V1AwsVolumeSizeGetParams,
  V1AwsVolumeTypesGetParams,
  V1AwsVpcs,
  V1AwsVpcsParams,
  V1AwsZonesParams,
  V1AzValidateEntity,
  V1AzureAccount,
  V1AzureAccounts,
  V1AzureCloudAccount,
  V1AzureCloudClusterConfigEntity,
  V1AzureCloudConfig,
  V1AzureClusterNameValidateParams,
  V1AzureGroups,
  V1AzureGroupsParams,
  V1AzureInstanceTypes,
  V1AzureInstanceTypesParams,
  V1AzureMachine,
  V1AzureMachinePoolConfigEntity,
  V1AzureMachines,
  V1AzurePrivateDnsZones,
  V1AzurePrivateDnsZonesParams,
  V1AzureRegions,
  V1AzureRegionsParams,
  V1AzureResourceGroupList,
  V1AzureResourceGroupListParams,
  V1AzureStorageAccountEntity,
  V1AzureStorageAccountTypesParams,
  V1AzureStorageAccounts,
  V1AzureStorageAccountsParams,
  V1AzureStorageContainers,
  V1AzureStorageContainersParams,
  V1AzureStorageTypes,
  V1AzureSubscriptionList,
  V1AzureSubscriptionListParams,
  V1AzureVhdUrlEntity,
  V1AzureVirtualNetworkList,
  V1AzureVirtualNetworkListParams,
  V1AzureZoneEntity,
  V1AzureZonesParams,
  V1BasicOciRegistriesCreateParams,
  V1BasicOciRegistriesUidSyncParams,
  V1BasicOciRegistry,
  V1BasicOciRegistrySpec,
  V1BulkDeleteRequest,
  V1BulkDeleteResponse,
  V1BulkEvents,
  V1Channel,
  V1CloudAccountUidEntity,
  V1CloudAccountsAwsGetParams,
  V1CloudAccountsAwsListParams,
  V1CloudAccountsAzureListParams,
  V1CloudAccountsCustomListParams,
  V1CloudAccountsGcpListParams,
  V1CloudAccountsListSummaryParams,
  V1CloudAccountsMaasListParams,
  V1CloudAccountsMetadata,
  V1CloudAccountsOpenStackListParams,
  V1CloudAccountsPatch,
  V1CloudAccountsSummary,
  V1CloudAccountsVsphereListParams,
  V1CloudComputeRateParams,
  V1CloudConfigsAksPoolMachinesListParams,
  V1CloudConfigsAwsPoolMachinesListParams,
  V1CloudConfigsAzurePoolMachinesListParams,
  V1CloudConfigsCustomPoolMachinesListParams,
  V1CloudConfigsEksPoolMachinesListParams,
  V1CloudConfigsGcpPoolMachinesListParams,
  V1CloudConfigsGenericPoolMachinesListParams,
  V1CloudConfigsGkePoolMachinesListParams,
  V1CloudConfigsMaasPoolMachinesListParams,
  V1CloudConfigsVirtualPoolMachinesListParams,
  V1CloudConfigsVspherePoolMachinesListParams,
  V1CloudCost,
  V1CloudStorageRateParams,
  V1CloudWatchConfig,
  V1ClusterBackup,
  V1ClusterBackupConfig,
  V1ClusterBackupLocationType,
  V1ClusterComplianceOnDemandConfig,
  V1ClusterComplianceScan,
  V1ClusterComplianceScanLogs,
  V1ClusterComplianceScheduleConfig,
  V1ClusterCondition,
  V1ClusterDefinitionEntity,
  V1ClusterEdgeInstallerConfig,
  V1ClusterFeatureBackupGetParams,
  V1ClusterFeatureDriverLogDownloadParams,
  V1ClusterFeatureKubeBenchLogGetParams,
  V1ClusterFeatureKubeHunterLogGetParams,
  V1ClusterFeatureLogFetcherGetParams,
  V1ClusterFeatureLogFetcherLogDownloadParams,
  V1ClusterFeatureLogFetcherLogUpdateParams,
  V1ClusterFeatureLogFetcherLogUpdateRequest,
  V1ClusterFeatureRestoreGetParams,
  V1ClusterFeatureSonobuoyLogGetParams,
  V1ClusterGroup,
  V1ClusterGroupEntity,
  V1ClusterGroupHostClusterEntity,
  V1ClusterGroupUidHostClustersSummaryParams,
  V1ClusterGroupUidVirtualClustersSummaryParams,
  V1ClusterGroupsDeveloperCreditUsage,
  V1ClusterGroupsHostClusterMetadata,
  V1ClusterGroupsHostClusterSummary,
  V1ClusterGroupsUidProfilesGetParams,
  V1ClusterGroupsValidateNameParams,
  V1ClusterHelmCharts,
  V1ClusterHybridSettingsEntity,
  V1ClusterLogFetcher,
  V1ClusterLogFetcherRequest,
  V1ClusterManifests,
  V1ClusterMetaAttributeEntity,
  V1ClusterNamespaceResource,
  V1ClusterNamespaceResourceInputEntity,
  V1ClusterNamespaceResources,
  V1ClusterNamespaceResourcesUpdateEntity,
  V1ClusterNamespaces,
  V1ClusterNamespacesGetParams,
  V1ClusterNotificationUpdateEntity,
  V1ClusterProfile,
  V1ClusterProfileCloneEntity,
  V1ClusterProfileCloneMetaInputEntity,
  V1ClusterProfileEntity,
  V1ClusterProfileImportEntity,
  V1ClusterProfileNotificationUpdateEntity,
  V1ClusterProfilePackConfigList,
  V1ClusterProfilePacksEntities,
  V1ClusterProfilePacksManifests,
  V1ClusterProfileSummary,
  V1ClusterProfileTemplateDraft,
  V1ClusterProfileUpdateEntity,
  V1ClusterProfileValidatorResponse,
  V1ClusterProfilesCreateParams,
  V1ClusterProfilesDeleteParams,
  V1ClusterProfilesFilterSpec,
  V1ClusterProfilesFilterSummaryParams,
  V1ClusterProfilesGetParams,
  V1ClusterProfilesImportFileParams,
  V1ClusterProfilesImportFileRequest,
  V1ClusterProfilesImportParams,
  V1ClusterProfilesMetadata,
  V1ClusterProfilesPacksRefUpdateParams,
  V1ClusterProfilesSummary,
  V1ClusterProfilesUidExportParams,
  V1ClusterProfilesUidExportTerraformParams,
  V1ClusterProfilesUidPacksAddParams,
  V1ClusterProfilesUidPacksConfigGetParams,
  V1ClusterProfilesUidPacksGetParams,
  V1ClusterProfilesUidPacksManifestsGetParams,
  V1ClusterProfilesUpdateParams,
  V1ClusterProfilesValidateNameVersionParams,
  V1ClusterRbac,
  V1ClusterRbacInputEntity,
  V1ClusterRbacResourcesUpdateEntity,
  V1ClusterRbacs,
  V1ClusterRefs,
  V1ClusterRestore,
  V1ClusterRestoreConfig,
  V1ClusterScanLogKubeBench,
  V1ClusterScanLogKubeHunter,
  V1ClusterScanLogSonobuoy,
  V1ClusterScanLogSyft,
  V1ClusterSearchInputSpec,
  V1ClusterUpgradeSettingsEntity,
  V1ClusterVMSnapshotsListParams,
  V1ClusterVirtualMachine,
  V1ClusterVirtualMachineList,
  V1ClusterVirtualPacksValues,
  V1ClusterWorkload,
  V1ClusterWorkloadCronJobs,
  V1ClusterWorkloadDaemonSets,
  V1ClusterWorkloadDeployments,
  V1ClusterWorkloadJobs,
  V1ClusterWorkloadNamespaces,
  V1ClusterWorkloadPods,
  V1ClusterWorkloadRoleBindings,
  V1ClusterWorkloadStatefulSets,
  V1ClusterWorkloadsSpec,
  V1ControlPlaneHealthCheckTimeoutEntity,
  V1CustomAccount,
  V1CustomAccountEntity,
  V1CustomAccounts,
  V1CustomCloudClusterConfigEntity,
  V1CustomCloudConfig,
  V1CustomCloudMetaEntity,
  V1CustomCloudRequestEntity,
  V1CustomCloudTypeBootstrapUpdateRequest,
  V1CustomCloudTypeCloudAccountKeys,
  V1CustomCloudTypeContentResponse,
  V1CustomCloudTypes,
  V1CustomMachine,
  V1CustomMachinePoolConfigEntity,
  V1CustomMachines,
  V1DashboardAppDeploymentsParams,
  V1DashboardAppProfilesParams,
  V1DashboardCloudAccountsMetadataParams,
  V1DashboardClustersSearchSummaryExportGetParams,
  V1DashboardClustersSearchSummaryExportParams,
  V1DashboardEdgehostsSearchParams,
  V1DashboardPcgsSearchSummaryParams,
  V1DashboardSpectroClustersRepaveListParams,
  V1DashboardWorkspaces,
  V1DataSinkCloudWatchConfig,
  V1DataSinkConfig,
  V1DeletedMsg,
  V1DeveloperCredit,
  V1EcrRegistriesCreateParams,
  V1EcrRegistriesUidSyncParams,
  V1EcrRegistry,
  V1EcrRegistrySpec,
  V1EdgeHostClusterEntity,
  V1EdgeHostConfig,
  V1EdgeHostDevice,
  V1EdgeHostDeviceEntity,
  V1EdgeHostDeviceHostCheckSum,
  V1EdgeHostDeviceHostPairingKey,
  V1EdgeHostDeviceMetaUpdateEntity,
  V1EdgeHostDevices,
  V1EdgeHostDevicesUidGetParams,
  V1EdgeHostDevicesUidPackManifestsUidGetParams,
  V1EdgeHostDevicesUidProfilesGetParams,
  V1EdgeHostHealth,
  V1EdgeHostVsphereCloudProperties,
  V1EdgeHostsMeta,
  V1EdgeHostsMetadataFilter,
  V1EdgeHostsMetadataQuickFilterGetParams,
  V1EdgeHostsMetadataSummary,
  V1EdgeHostsSearchSummary,
  V1EdgeHostsTags,
  V1EdgeNativeCloudClusterConfigEntity,
  V1EdgeNativeCloudConfig,
  V1EdgeNativeMachine,
  V1EdgeNativeMachinePoolConfigEntity,
  V1EdgeNativeMachines,
  V1EdgeToken,
  V1EdgeTokenActiveState,
  V1EdgeTokenEntity,
  V1EdgeTokenUpdate,
  V1EdgeTokens,
  V1EksCloudClusterConfigEntity,
  V1EksCloudConfig,
  V1EksFargateProfiles,
  V1EksMachinePoolConfigEntity,
  V1EksPropertiesValidateSpec,
  V1Event,
  V1Events,
  V1EventsComponentsListParams,
  V1EventsComponentsObjTypeUidListParams,
  V1FeatureUpdate,
  V1Features,
  V1FiltersListParams,
  V1FiltersMetadata,
  V1FiltersMetadataParams,
  V1FiltersSummary,
  V1FipsSettings,
  V1GcpAccount,
  V1GcpAccountEntity,
  V1GcpAccountNameValidateSpec,
  V1GcpAccounts,
  V1GcpAvailabilityZonesParams,
  V1GcpCloudAccountValidateEntity,
  V1GcpCloudClusterConfigEntity,
  V1GcpCloudConfig,
  V1GcpContainerImageValidateParams,
  V1GcpImageUrlEntity,
  V1GcpInstanceTypes,
  V1GcpInstanceTypesParams,
  V1GcpMachine,
  V1GcpMachinePoolConfigEntity,
  V1GcpMachines,
  V1GcpNetworks,
  V1GcpNetworksParams,
  V1GcpProjects,
  V1GcpProjectsParams,
  V1GcpPropertiesValidateSpec,
  V1GcpRegions,
  V1GcpRegionsParams,
  V1GcpStorageTypes,
  V1GcpZones,
  V1GcpZonesParams,
  V1GenericCloudClusterConfigEntity,
  V1GenericCloudConfig,
  V1GenericMachine,
  V1GenericMachinePoolConfigEntity,
  V1GenericMachines,
  V1GeolocationLatlong,
  V1HelmRegistries,
  V1HelmRegistriesSummary,
  V1HelmRegistry,
  V1HelmRegistryEntity,
  V1HelmRegistrySpec,
  V1HostClusterConfigEntity,
  V1HybridEdgeNativeMachinePoolConfig,
  V1HybridEdgeNativeMachinePoolConfigEntity,
  V1HybridEdgeNativeMachinePoolConfigUpdateEntity,
  V1IdentityProviders,
  V1Invoice,
  V1IpPoolInputEntity,
  V1IpPools,
  V1KubeBenchEntity,
  V1KubeHunterEntity,
  V1LifecycleConfigEntity,
  V1LoadBalancerService,
  V1LoginBannerSettings,
  V1LoginResponse,
  V1MaasAccount,
  V1MaasAccounts,
  V1MaasCloudAccount,
  V1MaasCloudClusterConfigEntity,
  V1MaasCloudConfig,
  V1MaasDomains,
  V1MaasDomainsGetParams,
  V1MaasMachine,
  V1MaasMachinePoolConfigEntity,
  V1MaasMachines,
  V1MaasPools,
  V1MaasPoolsGetParams,
  V1MaasSubnets,
  V1MaasSubnetsGetParams,
  V1MaasTags,
  V1MaasTagsGetParams,
  V1MaasZones,
  V1MaasZonesGetParams,
  V1MachineCertificates,
  V1MachineMaintenance,
  V1MachineMaintenanceStatus,
  V1MachinePoolsMachineUids,
  V1Macros,
  V1Manifest,
  V1ManifestEntities,
  V1ManifestEntity,
  V1ManifestInputEntity,
  V1ManifestRefInputEntities,
  V1ManifestRefUpdateEntity,
  V1MetricTimeSeries,
  V1MetricTimeSeriesList,
  V1MetricsListParams,
  V1MetricsUidListParams,
  V1NodesAutoRemediationSettings,
  V1NotificationEvent,
  V1Notifications,
  V1NotificationsListParams,
  V1NotificationsObjTypeUidListParams,
  V1ObjectMeta,
  V1ObjectMetaInputEntitySchema,
  V1OciImageRegistry,
  V1OciRegistries,
  V1OciRegistriesGetParams,
  V1OciRegistryEntity,
  V1OidcCallbackParams,
  V1OidcLogoutParams,
  V1OpenStackAccount,
  V1OpenStackAccounts,
  V1OpenStackAzs,
  V1OpenStackAzsGetParams,
  V1OpenStackCloudAccount,
  V1OpenStackCloudClusterConfigEntity,
  V1OpenStackCloudConfig,
  V1OpenStackFlavors,
  V1OpenStackFlavorsGetParams,
  V1OpenStackKeypairs,
  V1OpenStackKeypairsGetParams,
  V1OpenStackMachine,
  V1OpenStackMachinePoolConfigEntity,
  V1OpenStackMachines,
  V1OpenStackNetworks,
  V1OpenStackNetworksGetParams,
  V1OpenStackProjects,
  V1OpenStackProjectsGetParams,
  V1OpenStackRegions,
  V1OpenStackRegionsGetParams,
  V1OpenstackAccountsUidAzsParams,
  V1OpenstackAccountsUidFlavorsParams,
  V1OpenstackAccountsUidKeypairsParams,
  V1OpenstackAccountsUidNetworksParams,
  V1Organizations,
  V1OsPatchEntity,
  V1OverloadVsphereOva,
  V1Overlord,
  V1OverlordMaasAccountCreate,
  V1OverlordMaasAccountEntity,
  V1OverlordMaasCloudConfig,
  V1OverlordManifest,
  V1OverlordMigrateEntity,
  V1OverlordOpenStackAccountCreate,
  V1OverlordOpenStackAccountEntity,
  V1OverlordOpenStackCloudConfig,
  V1OverlordVsphereAccountCreate,
  V1OverlordVsphereAccountEntity,
  V1OverlordVsphereCloudConfig,
  V1Overlords,
  V1OverlordsListParams,
  V1OverlordsMaasManifestParams,
  V1OverlordsOpenStackManifestParams,
  V1OverlordsPairingCodeParams,
  V1OverlordsUidMaasAccountValidateRequest,
  V1OverlordsUidOpenStackAccountValidateRequest,
  V1OverlordsUidVsphereAccountValidateRequest,
  V1OverlordsUidVsphereComputeclusterResParams,
  V1OverlordsVsphereManifestParams,
  V1PackInputEntity,
  V1PackManifests,
  V1PackMetadataList,
  V1PackParamsEntity,
  V1PackReadme,
  V1PackRefSummaryResponse,
  V1PackRegistries,
  V1PackRegistriesSummary,
  V1PackRegistry,
  V1PackRegistrySpec,
  V1PackResolvedValues,
  V1PackSummaries,
  V1PackTagEntity,
  V1PackUpdateEntity,
  V1PacksFilterSpec,
  V1PacksNameRegistryUidListParams,
  V1PacksSearchParams,
  V1PacksSummaryListParams,
  V1PairingCode,
  V1PasswordActivateRequest,
  V1PasswordResetRequestRequest,
  V1PasswordsBlockList,
  V1PcgSelfHostedParams,
  V1PcgServiceKubectlCommands,
  V1PcgsSummary,
  V1Permissions,
  V1PermissionsListParams,
  V1ProfileMetaEntity,
  V1Project,
  V1ProjectActiveResources,
  V1ProjectAlertComponents,
  V1ProjectCleanup,
  V1ProjectClusterSettings,
  V1ProjectEntity,
  V1ProjectRolesEntity,
  V1ProjectRolesPatch,
  V1ProjectTeamsEntity,
  V1ProjectUsersEntity,
  V1ProjectsFilterSpec,
  V1ProjectsFilterSummaryParams,
  V1ProjectsMetadata,
  V1ProjectsMetadataParams,
  V1ProjectsSummary,
  V1ProjectsUidDeleteParams,
  V1RateConfig,
  V1RegistriesHelmCreateParams,
  V1RegistriesHelmListParams,
  V1RegistriesHelmSummaryListParams,
  V1RegistriesHelmUidSyncParams,
  V1RegistriesMetadata,
  V1RegistriesMetadataParams,
  V1RegistriesPackCreateParams,
  V1RegistriesPackListParams,
  V1RegistriesPackSummaryListParams,
  V1RegistriesPackUidSyncParams,
  V1RegistryConfigEntity,
  V1RegistrySyncStatus,
  V1ResourceConsumptionSpec,
  V1ResourceCostSummarySpec,
  V1ResourceRoles,
  V1ResourceRolesUpdateEntity,
  V1ResourceUsageSummarySpec,
  V1ResourcesCloudCostSummary,
  V1ResourcesConsumption,
  V1ResourcesCostSummary,
  V1ResourcesUsageSummary,
  V1Role,
  V1RoleClone,
  V1Roles,
  V1RolesListParams,
  V1SamlCallbackParams,
  V1SamlCallbackRequest,
  V1SamlLogoutParams,
  V1SamlLogoutRequest,
  V1SearchFilterSchemaSpec,
  V1SearchFilterSummarySpec,
  V1SectroClusterK8sDashboardUrl,
  V1ServiceManifest,
  V1ServiceManifestGetParams,
  V1ServiceVersion,
  V1ServiceVersionGetParams,
  V1SonobuoyEntity,
  V1SpcApply,
  V1SpcPatchTimeEntity,
  V1SpectroAwsClusterEntity,
  V1SpectroAwsClusterImportEntity,
  V1SpectroAwsClusterRateEntity,
  V1SpectroAzureClusterEntity,
  V1SpectroAzureClusterImportEntity,
  V1SpectroAzureClusterRateEntity,
  V1SpectroCluster,
  V1SpectroClusterAssetEntity,
  V1SpectroClusterAssetFrpKubeConfig,
  V1SpectroClusterAssetKubeConfig,
  V1SpectroClusterAssetKubeConfigClient,
  V1SpectroClusterAssetManifest,
  V1SpectroClusterAssetTokenKubeConfig,
  V1SpectroClusterCloudCostSummarySpec,
  V1SpectroClusterCostSummary,
  V1SpectroClusterHeartbeat,
  V1SpectroClusterHybridPoolsMetadata,
  V1SpectroClusterK8sCertificate,
  V1SpectroClusterKubeCtlRedirect,
  V1SpectroClusterLocationInputEntity,
  V1SpectroClusterMetadataSpec,
  V1SpectroClusterOidcSpec,
  V1SpectroClusterPackConfigList,
  V1SpectroClusterPackProperties,
  V1SpectroClusterPacksEntity,
  V1SpectroClusterPacksStatusEntity,
  V1SpectroClusterProfileList,
  V1SpectroClusterProfileUpdates,
  V1SpectroClusterProfiles,
  V1SpectroClusterProfilesDeleteEntity,
  V1SpectroClusterProfilesPacksManifests,
  V1SpectroClusterProfilesParamReferenceEntity,
  V1SpectroClusterProfilesResolvedValues,
  V1SpectroClusterRate,
  V1SpectroClusterRepave,
  V1SpectroClusterRepaveValidationResponse,
  V1SpectroClusterStatusEntity,
  V1SpectroClusterTags,
  V1SpectroClusterUidSummary,
  V1SpectroClusterUidUpgrades,
  V1SpectroClusterVMCloneEntity,
  V1SpectroClusterValidatorResponse,
  V1SpectroClusterVariableUpdateEntity,
  V1SpectroClusterVariables,
  V1SpectroClustersAksRateParams,
  V1SpectroClustersAwsRateParams,
  V1SpectroClustersAzureRateParams,
  V1SpectroClustersDeleteParams,
  V1SpectroClustersEdgeNativeRateParams,
  V1SpectroClustersEksRateParams,
  V1SpectroClustersFiltersWorkspaceParams,
  V1SpectroClustersGcpRateParams,
  V1SpectroClustersGenericRateParams,
  V1SpectroClustersGetParams,
  V1SpectroClustersGetProfilesPacksManifestsParams,
  V1SpectroClustersGetProfilesParams,
  V1SpectroClustersGkeRateParams,
  V1SpectroClustersMaasRateParams,
  V1SpectroClustersMeta,
  V1SpectroClustersMetadata,
  V1SpectroClustersMetadataGetParams,
  V1SpectroClustersMetadataSearch,
  V1SpectroClustersOpenStackRateParams,
  V1SpectroClustersPacksRefUpdateParams,
  V1SpectroClustersPatchProfilesParams,
  V1SpectroClustersSearchFilterSummaryParams,
  V1SpectroClustersSummary,
  V1SpectroClustersUidCostSummaryParams,
  V1SpectroClustersUidKubeConfigParams,
  V1SpectroClustersUidPackManifestsUidGetParams,
  V1SpectroClustersUidPackPropertiesParams,
  V1SpectroClustersUidRateParams,
  V1SpectroClustersUpdateProfilesParams,
  V1SpectroClustersVMAddVolumeParams,
  V1SpectroClustersVMCloneParams,
  V1SpectroClustersVMCreateParams,
  V1SpectroClustersVMDeleteParams,
  V1SpectroClustersVMGetParams,
  V1SpectroClustersVMListParams,
  V1SpectroClustersVMMigrateParams,
  V1SpectroClustersVMPauseParams,
  V1SpectroClustersVMRemoveVolumeParams,
  V1SpectroClustersVMRestartParams,
  V1SpectroClustersVMResumeParams,
  V1SpectroClustersVMStartParams,
  V1SpectroClustersVMStopParams,
  V1SpectroClustersVMUpdateParams,
  V1SpectroClustersValidateNameParams,
  V1SpectroClustersVsphereRateParams,
  V1SpectroCustomClusterEntity,
  V1SpectroEdgeNativeClusterEntity,
  V1SpectroEdgeNativeClusterImportEntity,
  V1SpectroEdgeNativeClusterRateEntity,
  V1SpectroEksClusterEntity,
  V1SpectroEksClusterRateEntity,
  V1SpectroGcpClusterEntity,
  V1SpectroGcpClusterImportEntity,
  V1SpectroGcpClusterRateEntity,
  V1SpectroGenericClusterImportEntity,
  V1SpectroGenericClusterRateEntity,
  V1SpectroMaasClusterEntity,
  V1SpectroMaasClusterImportEntity,
  V1SpectroMaasClusterRateEntity,
  V1SpectroOpenStackClusterEntity,
  V1SpectroOpenStackClusterImportEntity,
  V1SpectroOpenStackClusterRateEntity,
  V1SpectroTunnelConfig,
  V1SpectroTunnelStatus,
  V1SpectroVirtualClusterEntity,
  V1SpectroVsphereClusterEntity,
  V1SpectroVsphereClusterImportEntity,
  V1SpectroVsphereClusterRateEntity,
  V1SsoCallbackParams,
  V1SsoLogins,
  V1SsoLoginsParams,
  V1SyftEntity,
  V1SyftScanLogImageSBOMGetParams,
  V1SystemFeatures,
  V1SystemReverseProxy,
  V1SystemScarSpec,
  V1TagFilter,
  V1TagFilterSummary,
  V1Team,
  V1TeamPatch,
  V1TeamTenantRolesEntity,
  V1TeamTenantRolesUpdate,
  V1Teams,
  V1TeamsListParams,
  V1TeamsSummaryList,
  V1TeamsSummarySpec,
  V1TenantAddressPatch,
  V1TenantAssetCert,
  V1TenantAssetCerts,
  V1TenantClusterSettings,
  V1TenantDomains,
  V1TenantEmailPatch,
  V1TenantEnableClusterGroup,
  V1TenantFreemium,
  V1TenantFreemiumUsage,
  V1TenantOidcClientSpec,
  V1TenantPasswordPolicyEntity,
  V1TenantResourceLimits,
  V1TenantResourceLimitsEntity,
  V1TenantSamlRequestSpec,
  V1TenantSamlSpec,
  V1TenantSsoAuthProvidersEntity,
  V1TenantsCreditAccountDeleteParams,
  V1Uid,
  V1Uids,
  V1Updated,
  V1UpdatedMsg,
  V1User,
  V1UserAssetSsh,
  V1UserAssetSshEntity,
  V1UserAssetsLocationAzure,
  V1UserAssetsLocationGcp,
  V1UserAssetsLocationS3,
  V1UserAssetsLocations,
  V1UserAssetsSsh,
  V1UserEntity,
  V1UserInfo,
  V1UserKubectlSession,
  V1UserPatch,
  V1UserRoleUIDs,
  V1UserRolesEntity,
  V1UserStatusLoginMode,
  V1UserToken,
  V1UserUpdateEntity,
  V1Users,
  V1UsersAssetsLocationGetParams,
  V1UsersAssetsSshGetParams,
  V1UsersEmailPasswordResetRequest,
  V1UsersListParams,
  V1UsersMetadata,
  V1UsersPasswordChangeRequest,
  V1UsersSummaryList,
  V1UsersSummarySpec,
  V1UsersUidPasswordChangeRequest,
  V1VMAddVolumeEntity,
  V1VMClusters,
  V1VMRemoveVolumeEntity,
  V1VMSnapshotCreateParams,
  V1VMSnapshotDeleteParams,
  V1VMSnapshotGetParams,
  V1VMSnapshotUpdateParams,
  V1VariableNames,
  V1Variables,
  V1VirtualCloudClusterConfigEntity,
  V1VirtualCloudConfig,
  V1VirtualClusterResize,
  V1VirtualClustersPacksValuesParams,
  V1VirtualMachine,
  V1VirtualMachinePoolConfigEntity,
  V1VirtualMachineSnapshot,
  V1VirtualMachineSnapshotList,
  V1VirtualMachines,
  V1VsphereAccount,
  V1VsphereAccounts,
  V1VsphereAccountsUidClusterResParams,
  V1VsphereCloudAccount,
  V1VsphereCloudClusterConfigEntity,
  V1VsphereCloudConfig,
  V1VsphereComputeClusterResources,
  V1VsphereComputeClusterResourcesParams,
  V1VsphereDatacenters,
  V1VsphereDatacentersParams,
  V1VsphereDnsMapping,
  V1VsphereDnsMappings,
  V1VsphereDnsMappingsGetParams,
  V1VsphereEnv,
  V1VsphereMachine,
  V1VsphereMachinePoolConfigEntity,
  V1VsphereMachines,
  V1VsphereMappingGetParams,
  V1Workspace,
  V1WorkspaceBackup,
  V1WorkspaceBackupConfigEntity,
  V1WorkspaceBackupDeleteEntity,
  V1WorkspaceClusterNamespacesEntity,
  V1WorkspaceClustersWorkloadCronJobs,
  V1WorkspaceClustersWorkloadDaemonSets,
  V1WorkspaceClustersWorkloadDeployments,
  V1WorkspaceClustersWorkloadJobs,
  V1WorkspaceClustersWorkloadNamespaces,
  V1WorkspaceClustersWorkloadPods,
  V1WorkspaceClustersWorkloadRoleBindings,
  V1WorkspaceClustersWorkloadStatefulSets,
  V1WorkspaceEntity,
  V1WorkspaceOpsBackupGetParams,
  V1WorkspaceOpsRestoreGetParams,
  V1WorkspaceRestore,
  V1WorkspaceRestoreConfigEntity,
  V1WorkspaceScopeRoles,
  V1WorkspaceWorkloadsSpec,
  V1WorkspacesRolesPatch,
  V1WorkspacesValidateNameParams,
} from "./schemas";

/**
 * @summary Retrieves a list of API keys
 */
export type v1ApiKeysListResponse200 = {
  data: V1ApiKeys;
  status: 200;
};

export type v1ApiKeysListResponseComposite = v1ApiKeysListResponse200;

export type v1ApiKeysListResponse = v1ApiKeysListResponseComposite & {
  headers: Headers;
};

export const getV1ApiKeysListUrl = () => {
  return `https://api.spectrocloud.com/v1/apiKeys`;
};

export const v1ApiKeysList = async (
  options?: RequestInit,
): Promise<v1ApiKeysListResponse> => {
  const res = await fetch(getV1ApiKeysListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ApiKeysListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ApiKeysListResponse;
};

/**
 * @summary Create an API key
 */
export type v1ApiKeysCreateResponse201 = {
  data: V1ApiKeyCreateResponse;
  status: 201;
};

export type v1ApiKeysCreateResponseComposite = v1ApiKeysCreateResponse201;

export type v1ApiKeysCreateResponse = v1ApiKeysCreateResponseComposite & {
  headers: Headers;
};

export const getV1ApiKeysCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/apiKeys`;
};

export const v1ApiKeysCreate = async (
  v1ApiKeyEntity?: V1ApiKeyEntity,
  options?: RequestInit,
): Promise<v1ApiKeysCreateResponse> => {
  const res = await fetch(getV1ApiKeysCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ApiKeyEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ApiKeysCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ApiKeysCreateResponse;
};

/**
 * @summary Deletes the specified API key
 */
export type v1ApiKeysUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ApiKeysUidDeleteResponseComposite =
  v1ApiKeysUidDeleteResponseDefault;

export type v1ApiKeysUidDeleteResponse = v1ApiKeysUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1ApiKeysUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/apiKeys/${uid}`;
};

export const v1ApiKeysUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ApiKeysUidDeleteResponse> => {
  const res = await fetch(getV1ApiKeysUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ApiKeysUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ApiKeysUidDeleteResponse;
};

/**
 * @summary Returns the specified API key
 */
export type v1ApiKeysUidGetResponse200 = {
  data: V1ApiKey;
  status: 200;
};

export type v1ApiKeysUidGetResponseComposite = v1ApiKeysUidGetResponse200;

export type v1ApiKeysUidGetResponse = v1ApiKeysUidGetResponseComposite & {
  headers: Headers;
};

export const getV1ApiKeysUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/apiKeys/${uid}`;
};

export const v1ApiKeysUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ApiKeysUidGetResponse> => {
  const res = await fetch(getV1ApiKeysUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ApiKeysUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ApiKeysUidGetResponse;
};

/**
 * @summary Activate or de-active the specified API key
 */
export type v1ApiKeysUidActiveStateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ApiKeysUidActiveStateResponseComposite =
  v1ApiKeysUidActiveStateResponseDefault;

export type v1ApiKeysUidActiveStateResponse =
  v1ApiKeysUidActiveStateResponseComposite & {
    headers: Headers;
  };

export const getV1ApiKeysUidActiveStateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/apiKeys/${uid}`;
};

export const v1ApiKeysUidActiveState = async (
  uid: string,
  v1ApiKeyActiveState?: V1ApiKeyActiveState,
  options?: RequestInit,
): Promise<v1ApiKeysUidActiveStateResponse> => {
  const res = await fetch(getV1ApiKeysUidActiveStateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ApiKeyActiveState),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ApiKeysUidActiveStateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ApiKeysUidActiveStateResponse;
};

/**
 * @summary Update the specified API key
 */
export type v1ApiKeysUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ApiKeysUidUpdateResponseComposite =
  v1ApiKeysUidUpdateResponseDefault;

export type v1ApiKeysUidUpdateResponse = v1ApiKeysUidUpdateResponseComposite & {
  headers: Headers;
};

export const getV1ApiKeysUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/apiKeys/${uid}`;
};

export const v1ApiKeysUidUpdate = async (
  uid: string,
  v1ApiKeyUpdate?: V1ApiKeyUpdate,
  options?: RequestInit,
): Promise<v1ApiKeysUidUpdateResponse> => {
  const res = await fetch(getV1ApiKeysUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ApiKeyUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ApiKeysUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ApiKeysUidUpdateResponse;
};

/**
 * @summary Revoke or re-activate the API key access
 */
export type v1ApiKeysUidStateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ApiKeysUidStateResponseComposite =
  v1ApiKeysUidStateResponseDefault;

export type v1ApiKeysUidStateResponse = v1ApiKeysUidStateResponseComposite & {
  headers: Headers;
};

export const getV1ApiKeysUidStateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/apiKeys/${uid}/state`;
};

export const v1ApiKeysUidState = async (
  uid: string,
  v1ApiKeyActiveState?: V1ApiKeyActiveState,
  options?: RequestInit,
): Promise<v1ApiKeysUidStateResponse> => {
  const res = await fetch(getV1ApiKeysUidStateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ApiKeyActiveState),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ApiKeysUidStateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ApiKeysUidStateResponse;
};

/**
 * @summary Creates a application deployment in the virtual cluster
 */
export type v1AppDeploymentsVirtualClusterCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AppDeploymentsVirtualClusterCreateResponseComposite =
  v1AppDeploymentsVirtualClusterCreateResponse201;

export type v1AppDeploymentsVirtualClusterCreateResponse =
  v1AppDeploymentsVirtualClusterCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsVirtualClusterCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/appDeployments`;
};

export const v1AppDeploymentsVirtualClusterCreate = async (
  v1AppDeploymentVirtualClusterEntity?: V1AppDeploymentVirtualClusterEntity,
  options?: RequestInit,
): Promise<v1AppDeploymentsVirtualClusterCreateResponse> => {
  const res = await fetch(getV1AppDeploymentsVirtualClusterCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppDeploymentVirtualClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsVirtualClusterCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsVirtualClusterCreateResponse;
};

/**
 * @summary Creates a application deployment in one of virtual clusters in the cluster group
 */
export type v1AppDeploymentsClusterGroupCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AppDeploymentsClusterGroupCreateResponseComposite =
  v1AppDeploymentsClusterGroupCreateResponse201;

export type v1AppDeploymentsClusterGroupCreateResponse =
  v1AppDeploymentsClusterGroupCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsClusterGroupCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/appDeployments/clusterGroup`;
};

export const v1AppDeploymentsClusterGroupCreate = async (
  v1AppDeploymentClusterGroupEntity?: V1AppDeploymentClusterGroupEntity,
  options?: RequestInit,
): Promise<v1AppDeploymentsClusterGroupCreateResponse> => {
  const res = await fetch(getV1AppDeploymentsClusterGroupCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppDeploymentClusterGroupEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsClusterGroupCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsClusterGroupCreateResponse;
};

/**
 * @summary Deletes the specified application deployment
 */
export type v1AppDeploymentsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppDeploymentsUidDeleteResponseComposite =
  v1AppDeploymentsUidDeleteResponseDefault;

export type v1AppDeploymentsUidDeleteResponse =
  v1AppDeploymentsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}`;
};

export const v1AppDeploymentsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AppDeploymentsUidDeleteResponse> => {
  const res = await fetch(getV1AppDeploymentsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsUidDeleteResponse;
};

/**
 * @summary Returns the specified application deployment
 */
export type v1AppDeploymentsUidGetResponse200 = {
  data: V1AppDeployment;
  status: 200;
};

export type v1AppDeploymentsUidGetResponseComposite =
  v1AppDeploymentsUidGetResponse200;

export type v1AppDeploymentsUidGetResponse =
  v1AppDeploymentsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}`;
};

export const v1AppDeploymentsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AppDeploymentsUidGetResponse> => {
  const res = await fetch(getV1AppDeploymentsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsUidGetResponse;
};

/**
 * @summary Returns profile of the specified application deployment
 */
export type v1AppDeploymentsUidProfileGetResponse200 = {
  data: V1AppDeploymentProfileSpec;
  status: 200;
};

export type v1AppDeploymentsUidProfileGetResponseComposite =
  v1AppDeploymentsUidProfileGetResponse200;

export type v1AppDeploymentsUidProfileGetResponse =
  v1AppDeploymentsUidProfileGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsUidProfileGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile`;
};

export const v1AppDeploymentsUidProfileGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AppDeploymentsUidProfileGetResponse> => {
  const res = await fetch(getV1AppDeploymentsUidProfileGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsUidProfileGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsUidProfileGetResponse;
};

/**
 * @summary Updates the specified application deployment profile
 */
export type v1AppDeploymentsUidProfileUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppDeploymentsUidProfileUpdateResponseComposite =
  v1AppDeploymentsUidProfileUpdateResponseDefault;

export type v1AppDeploymentsUidProfileUpdateResponse =
  v1AppDeploymentsUidProfileUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsUidProfileUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile`;
};

export const v1AppDeploymentsUidProfileUpdate = async (
  uid: string,
  v1AppDeploymentProfileEntity?: V1AppDeploymentProfileEntity,
  options?: RequestInit,
): Promise<v1AppDeploymentsUidProfileUpdateResponse> => {
  const res = await fetch(getV1AppDeploymentsUidProfileUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppDeploymentProfileEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsUidProfileUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsUidProfileUpdateResponse;
};

/**
 * @summary Apply the application deployment profile updates
 */
export type v1AppDeploymentsUidProfileApplyResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppDeploymentsUidProfileApplyResponseComposite =
  v1AppDeploymentsUidProfileApplyResponseDefault;

export type v1AppDeploymentsUidProfileApplyResponse =
  v1AppDeploymentsUidProfileApplyResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsUidProfileApplyUrl = (
  uid: string,
  params?: V1AppDeploymentsUidProfileApplyParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/apply?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/apply`;
};

export const v1AppDeploymentsUidProfileApply = async (
  uid: string,
  params?: V1AppDeploymentsUidProfileApplyParams,
  options?: RequestInit,
): Promise<v1AppDeploymentsUidProfileApplyResponse> => {
  const res = await fetch(getV1AppDeploymentsUidProfileApplyUrl(uid, params), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsUidProfileApplyResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsUidProfileApplyResponse;
};

/**
 * @summary Returns the specified application deployment profile tier information
 */
export type v1AppDeploymentsProfileTiersUidGetResponse200 = {
  data: V1AppTier;
  status: 200;
};

export type v1AppDeploymentsProfileTiersUidGetResponseComposite =
  v1AppDeploymentsProfileTiersUidGetResponse200;

export type v1AppDeploymentsProfileTiersUidGetResponse =
  v1AppDeploymentsProfileTiersUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsProfileTiersUidGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}`;
};

export const v1AppDeploymentsProfileTiersUidGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<v1AppDeploymentsProfileTiersUidGetResponse> => {
  const res = await fetch(
    getV1AppDeploymentsProfileTiersUidGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsProfileTiersUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsProfileTiersUidGetResponse;
};

/**
 * @summary Updates the specified application deployment profile tier information
 */
export type v1AppDeploymentsProfileTiersUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppDeploymentsProfileTiersUidUpdateResponseComposite =
  v1AppDeploymentsProfileTiersUidUpdateResponseDefault;

export type v1AppDeploymentsProfileTiersUidUpdateResponse =
  v1AppDeploymentsProfileTiersUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsProfileTiersUidUpdateUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}`;
};

export const v1AppDeploymentsProfileTiersUidUpdate = async (
  uid: string,
  tierUid: string,
  v1AppTierUpdateEntity?: V1AppTierUpdateEntity,
  options?: RequestInit,
): Promise<v1AppDeploymentsProfileTiersUidUpdateResponse> => {
  const res = await fetch(
    getV1AppDeploymentsProfileTiersUidUpdateUrl(uid, tierUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AppTierUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsProfileTiersUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsProfileTiersUidUpdateResponse;
};

/**
 * @summary Retrieves a list of manifests of the specified application deployment profile tier
 */
export type v1AppDeploymentsProfileTiersUidManifestsGetResponse200 = {
  data: V1AppTierManifests;
  status: 200;
};

export type v1AppDeploymentsProfileTiersUidManifestsGetResponseComposite =
  v1AppDeploymentsProfileTiersUidManifestsGetResponse200;

export type v1AppDeploymentsProfileTiersUidManifestsGetResponse =
  v1AppDeploymentsProfileTiersUidManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsProfileTiersUidManifestsGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}/manifests`;
};

export const v1AppDeploymentsProfileTiersUidManifestsGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<v1AppDeploymentsProfileTiersUidManifestsGetResponse> => {
  const res = await fetch(
    getV1AppDeploymentsProfileTiersUidManifestsGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsProfileTiersUidManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsProfileTiersUidManifestsGetResponse;
};

/**
 * @summary Returns the specified application deployment tier manifest information
 */
export type v1AppDeploymentsProfileTiersManifestsUidGetResponse200 = {
  data: V1Manifest;
  status: 200;
};

export type v1AppDeploymentsProfileTiersManifestsUidGetResponseComposite =
  v1AppDeploymentsProfileTiersManifestsUidGetResponse200;

export type v1AppDeploymentsProfileTiersManifestsUidGetResponse =
  v1AppDeploymentsProfileTiersManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsProfileTiersManifestsUidGetUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const v1AppDeploymentsProfileTiersManifestsUidGet = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<v1AppDeploymentsProfileTiersManifestsUidGetResponse> => {
  const res = await fetch(
    getV1AppDeploymentsProfileTiersManifestsUidGetUrl(
      uid,
      tierUid,
      manifestUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsProfileTiersManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsProfileTiersManifestsUidGetResponse;
};

/**
 * @summary Updates the specified application deployment tier manifest information
 */
export type v1AppDeploymentsProfileTiersManifestsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppDeploymentsProfileTiersManifestsUidUpdateResponseComposite =
  v1AppDeploymentsProfileTiersManifestsUidUpdateResponseDefault;

export type v1AppDeploymentsProfileTiersManifestsUidUpdateResponse =
  v1AppDeploymentsProfileTiersManifestsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsProfileTiersManifestsUidUpdateUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const v1AppDeploymentsProfileTiersManifestsUidUpdate = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  v1ManifestRefUpdateEntity?: V1ManifestRefUpdateEntity,
  options?: RequestInit,
): Promise<v1AppDeploymentsProfileTiersManifestsUidUpdateResponse> => {
  const res = await fetch(
    getV1AppDeploymentsProfileTiersManifestsUidUpdateUrl(
      uid,
      tierUid,
      manifestUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestRefUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsProfileTiersManifestsUidUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsProfileTiersManifestsUidUpdateResponse;
};

/**
 * @summary Retrieves a list of profile versions of the specified application deployment
 */
export type v1AppDeploymentsUidProfileVersionsGetResponse200 = {
  data: V1AppDeploymentProfileVersions;
  status: 200;
};

export type v1AppDeploymentsUidProfileVersionsGetResponseComposite =
  v1AppDeploymentsUidProfileVersionsGetResponse200;

export type v1AppDeploymentsUidProfileVersionsGetResponse =
  v1AppDeploymentsUidProfileVersionsGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppDeploymentsUidProfileVersionsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appDeployments/${uid}/profile/versions`;
};

export const v1AppDeploymentsUidProfileVersionsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AppDeploymentsUidProfileVersionsGetResponse> => {
  const res = await fetch(getV1AppDeploymentsUidProfileVersionsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppDeploymentsUidProfileVersionsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppDeploymentsUidProfileVersionsGetResponse;
};

/**
 * @summary Creates a application profile
 */
export type v1AppProfilesCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AppProfilesCreateResponseComposite =
  v1AppProfilesCreateResponse201;

export type v1AppProfilesCreateResponse =
  v1AppProfilesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/appProfiles`;
};

export const v1AppProfilesCreate = async (
  v1AppProfileEntity?: V1AppProfileEntity,
  options?: RequestInit,
): Promise<v1AppProfilesCreateResponse> => {
  const res = await fetch(getV1AppProfilesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfileEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesCreateResponse;
};

/**
 * @summary Retrieves a list of application profile macros
 */
export type v1AppProfilesMacrosListResponse200 = {
  data: V1Macros;
  status: 200;
};

export type v1AppProfilesMacrosListResponseComposite =
  v1AppProfilesMacrosListResponse200;

export type v1AppProfilesMacrosListResponse =
  v1AppProfilesMacrosListResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesMacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/appProfiles/macros`;
};

export const v1AppProfilesMacrosList = async (
  options?: RequestInit,
): Promise<v1AppProfilesMacrosListResponse> => {
  const res = await fetch(getV1AppProfilesMacrosListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesMacrosListResponse;
};

/**
 * @summary Deletes the specified application profile
 */
export type v1AppProfilesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidDeleteResponseComposite =
  v1AppProfilesUidDeleteResponseDefault;

export type v1AppProfilesUidDeleteResponse =
  v1AppProfilesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}`;
};

export const v1AppProfilesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidDeleteResponse> => {
  const res = await fetch(getV1AppProfilesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidDeleteResponse;
};

/**
 * @summary Returns the specified application profile
 */
export type v1AppProfilesUidGetResponse200 = {
  data: V1AppProfile;
  status: 200;
};

export type v1AppProfilesUidGetResponseComposite =
  v1AppProfilesUidGetResponse200;

export type v1AppProfilesUidGetResponse =
  v1AppProfilesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}`;
};

export const v1AppProfilesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidGetResponse> => {
  const res = await fetch(getV1AppProfilesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidGetResponse;
};

/**
 * @summary Updates the specified application profile
 */
export type v1AppProfilesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidUpdateResponseComposite =
  v1AppProfilesUidUpdateResponseDefault;

export type v1AppProfilesUidUpdateResponse =
  v1AppProfilesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}`;
};

export const v1AppProfilesUidUpdate = async (
  uid: string,
  v1AppProfileEntity?: V1AppProfileEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidUpdateResponse> => {
  const res = await fetch(getV1AppProfilesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfileEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidUpdateResponse;
};

/**
 * @summary Clones the specified application profile
 */
export type v1AppProfilesUidCloneResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AppProfilesUidCloneResponseComposite =
  v1AppProfilesUidCloneResponse201;

export type v1AppProfilesUidCloneResponse =
  v1AppProfilesUidCloneResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/clone`;
};

export const v1AppProfilesUidClone = async (
  uid: string,
  v1AppProfileCloneEntity?: V1AppProfileCloneEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidCloneResponse> => {
  const res = await fetch(getV1AppProfilesUidCloneUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfileCloneEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidCloneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidCloneResponse;
};

/**
 * @summary Validates the specified application profile clone
 */
export type v1AppProfilesUidCloneValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidCloneValidateResponseComposite =
  v1AppProfilesUidCloneValidateResponseDefault;

export type v1AppProfilesUidCloneValidateResponse =
  v1AppProfilesUidCloneValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidCloneValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/clone/validate`;
};

export const v1AppProfilesUidCloneValidate = async (
  uid: string,
  v1AppProfileCloneMetaInputEntity?: V1AppProfileCloneMetaInputEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidCloneValidateResponse> => {
  const res = await fetch(getV1AppProfilesUidCloneValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfileCloneMetaInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidCloneValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidCloneValidateResponse;
};

/**
 * @summary Updates the specified application profile metadata
 */
export type v1AppProfilesUidMetadataUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidMetadataUpdateResponseComposite =
  v1AppProfilesUidMetadataUpdateResponseDefault;

export type v1AppProfilesUidMetadataUpdateResponse =
  v1AppProfilesUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/metadata`;
};

export const v1AppProfilesUidMetadataUpdate = async (
  uid: string,
  v1AppProfileMetaEntity?: V1AppProfileMetaEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidMetadataUpdateResponse> => {
  const res = await fetch(getV1AppProfilesUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfileMetaEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidMetadataUpdateResponse;
};

/**
 * @summary Retrieves a list of tiers of the specified application profile
 */
export type v1AppProfilesUidTiersGetResponse200 = {
  data: V1AppProfileTiers;
  status: 200;
};

export type v1AppProfilesUidTiersGetResponseComposite =
  v1AppProfilesUidTiersGetResponse200;

export type v1AppProfilesUidTiersGetResponse =
  v1AppProfilesUidTiersGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers`;
};

export const v1AppProfilesUidTiersGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersGetResponse> => {
  const res = await fetch(getV1AppProfilesUidTiersGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersGetResponse;
};

/**
 * @summary Updates app tier of the specified application profile
 */
export type v1AppProfilesUidTiersPatchResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AppProfilesUidTiersPatchResponseComposite =
  v1AppProfilesUidTiersPatchResponse201;

export type v1AppProfilesUidTiersPatchResponse =
  v1AppProfilesUidTiersPatchResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers`;
};

export const v1AppProfilesUidTiersPatch = async (
  uid: string,
  v1AppTierPatchEntity?: V1AppTierPatchEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersPatchResponse> => {
  const res = await fetch(getV1AppProfilesUidTiersPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppTierPatchEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersPatchResponse;
};

/**
 * @summary Adds tier to the specified application profile
 */
export type v1AppProfilesUidTiersCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AppProfilesUidTiersCreateResponseComposite =
  v1AppProfilesUidTiersCreateResponse201;

export type v1AppProfilesUidTiersCreateResponse =
  v1AppProfilesUidTiersCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers`;
};

export const v1AppProfilesUidTiersCreate = async (
  uid: string,
  v1AppTierEntity?: V1AppTierEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersCreateResponse> => {
  const res = await fetch(getV1AppProfilesUidTiersCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppTierEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersCreateResponse;
};

/**
 * @summary Deletes the specified application profile tier
 */
export type v1AppProfilesUidTiersUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidTiersUidDeleteResponseComposite =
  v1AppProfilesUidTiersUidDeleteResponseDefault;

export type v1AppProfilesUidTiersUidDeleteResponse =
  v1AppProfilesUidTiersUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidDeleteUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}`;
};

export const v1AppProfilesUidTiersUidDelete = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidDeleteResponse> => {
  const res = await fetch(getV1AppProfilesUidTiersUidDeleteUrl(uid, tierUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidDeleteResponse;
};

/**
 * @summary Returns the specified application profile tier information
 */
export type v1AppProfilesUidTiersUidGetResponse200 = {
  data: V1AppTier;
  status: 200;
};

export type v1AppProfilesUidTiersUidGetResponseComposite =
  v1AppProfilesUidTiersUidGetResponse200;

export type v1AppProfilesUidTiersUidGetResponse =
  v1AppProfilesUidTiersUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}`;
};

export const v1AppProfilesUidTiersUidGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidGetResponse> => {
  const res = await fetch(getV1AppProfilesUidTiersUidGetUrl(uid, tierUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidGetResponse;
};

/**
 * @summary Updates the specified application profile tier
 */
export type v1AppProfilesUidTiersUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidTiersUidUpdateResponseComposite =
  v1AppProfilesUidTiersUidUpdateResponseDefault;

export type v1AppProfilesUidTiersUidUpdateResponse =
  v1AppProfilesUidTiersUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidUpdateUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}`;
};

export const v1AppProfilesUidTiersUidUpdate = async (
  uid: string,
  tierUid: string,
  v1AppTierUpdateEntity?: V1AppTierUpdateEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidUpdateResponse> => {
  const res = await fetch(getV1AppProfilesUidTiersUidUpdateUrl(uid, tierUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppTierUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidUpdateResponse;
};

/**
 * @summary Retrieves a list of manifests of the specified application profile tier
 */
export type v1AppProfilesUidTiersUidManifestsGetResponse200 = {
  data: V1AppTierManifests;
  status: 200;
};

export type v1AppProfilesUidTiersUidManifestsGetResponseComposite =
  v1AppProfilesUidTiersUidManifestsGetResponse200;

export type v1AppProfilesUidTiersUidManifestsGetResponse =
  v1AppProfilesUidTiersUidManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidManifestsGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests`;
};

export const v1AppProfilesUidTiersUidManifestsGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidManifestsGetResponse> => {
  const res = await fetch(
    getV1AppProfilesUidTiersUidManifestsGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidManifestsGetResponse;
};

/**
 * @summary Adds manifest to the specified application profile tier
 */
export type v1AppProfilesUidTiersUidManifestsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AppProfilesUidTiersUidManifestsCreateResponseComposite =
  v1AppProfilesUidTiersUidManifestsCreateResponse201;

export type v1AppProfilesUidTiersUidManifestsCreateResponse =
  v1AppProfilesUidTiersUidManifestsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidManifestsCreateUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests`;
};

export const v1AppProfilesUidTiersUidManifestsCreate = async (
  uid: string,
  tierUid: string,
  v1ManifestInputEntity?: V1ManifestInputEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidManifestsCreateResponse> => {
  const res = await fetch(
    getV1AppProfilesUidTiersUidManifestsCreateUrl(uid, tierUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestInputEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidManifestsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidManifestsCreateResponse;
};

/**
 * @summary Deletes the specified application profile tier manifest
 */
export type v1AppProfilesUidTiersUidManifestsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidTiersUidManifestsUidDeleteResponseComposite =
  v1AppProfilesUidTiersUidManifestsUidDeleteResponseDefault;

export type v1AppProfilesUidTiersUidManifestsUidDeleteResponse =
  v1AppProfilesUidTiersUidManifestsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidManifestsUidDeleteUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const v1AppProfilesUidTiersUidManifestsUidDelete = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidManifestsUidDeleteResponse> => {
  const res = await fetch(
    getV1AppProfilesUidTiersUidManifestsUidDeleteUrl(uid, tierUid, manifestUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidManifestsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidManifestsUidDeleteResponse;
};

/**
 * @summary Returns the specified application profile tier manifest information
 */
export type v1AppProfilesUidTiersUidManifestsUidGetResponse200 = {
  data: V1Manifest;
  status: 200;
};

export type v1AppProfilesUidTiersUidManifestsUidGetResponseComposite =
  v1AppProfilesUidTiersUidManifestsUidGetResponse200;

export type v1AppProfilesUidTiersUidManifestsUidGetResponse =
  v1AppProfilesUidTiersUidManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidManifestsUidGetUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const v1AppProfilesUidTiersUidManifestsUidGet = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidManifestsUidGetResponse> => {
  const res = await fetch(
    getV1AppProfilesUidTiersUidManifestsUidGetUrl(uid, tierUid, manifestUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidManifestsUidGetResponse;
};

/**
 * @summary Updates the specified application profile tier manifest information
 */
export type v1AppProfilesUidTiersUidManifestsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AppProfilesUidTiersUidManifestsUidUpdateResponseComposite =
  v1AppProfilesUidTiersUidManifestsUidUpdateResponseDefault;

export type v1AppProfilesUidTiersUidManifestsUidUpdateResponse =
  v1AppProfilesUidTiersUidManifestsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidManifestsUidUpdateUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const v1AppProfilesUidTiersUidManifestsUidUpdate = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  v1ManifestRefUpdateEntity?: V1ManifestRefUpdateEntity,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidManifestsUidUpdateResponse> => {
  const res = await fetch(
    getV1AppProfilesUidTiersUidManifestsUidUpdateUrl(uid, tierUid, manifestUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestRefUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidManifestsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidManifestsUidUpdateResponse;
};

/**
 * @summary Returns the specified application profile tier resolved values
 */
export type v1AppProfilesUidTiersUidResolvedValuesGetResponse200 = {
  data: V1AppTierResolvedValues;
  status: 200;
};

export type v1AppProfilesUidTiersUidResolvedValuesGetResponseComposite =
  v1AppProfilesUidTiersUidResolvedValuesGetResponse200;

export type v1AppProfilesUidTiersUidResolvedValuesGetResponse =
  v1AppProfilesUidTiersUidResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getV1AppProfilesUidTiersUidResolvedValuesGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/resolvedValues`;
};

export const v1AppProfilesUidTiersUidResolvedValuesGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<v1AppProfilesUidTiersUidResolvedValuesGetResponse> => {
  const res = await fetch(
    getV1AppProfilesUidTiersUidResolvedValuesGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AppProfilesUidTiersUidResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AppProfilesUidTiersUidResolvedValuesGetResponse;
};

/**
 * @summary Retrieves the list of audit logs
 */
export type v1AuditsListResponse200 = {
  data: V1Audits;
  status: 200;
};

export type v1AuditsListResponseComposite = v1AuditsListResponse200;

export type v1AuditsListResponse = v1AuditsListResponseComposite & {
  headers: Headers;
};

export const getV1AuditsListUrl = (params?: V1AuditsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/audits?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/audits`;
};

export const v1AuditsList = async (
  params?: V1AuditsListParams,
  options?: RequestInit,
): Promise<v1AuditsListResponse> => {
  const res = await fetch(getV1AuditsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuditsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuditsListResponse;
};

/**
 * @summary Returns the specified audit log
 */
export type v1AuditsUidGetResponse200 = {
  data: V1Audit;
  status: 200;
};

export type v1AuditsUidGetResponseComposite = v1AuditsUidGetResponse200;

export type v1AuditsUidGetResponse = v1AuditsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1AuditsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/audits/${uid}`;
};

export const v1AuditsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AuditsUidGetResponse> => {
  const res = await fetch(getV1AuditsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuditsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuditsUidGetResponse;
};

/**
 * @summary Returns the specified system audit message
 */
export type v1AuditsUidGetSysMsgResponse200 = {
  data: V1AuditSysMsg;
  status: 200;
};

export type v1AuditsUidGetSysMsgResponseComposite =
  v1AuditsUidGetSysMsgResponse200;

export type v1AuditsUidGetSysMsgResponse =
  v1AuditsUidGetSysMsgResponseComposite & {
    headers: Headers;
  };

export const getV1AuditsUidGetSysMsgUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/audits/${uid}/sysMsg`;
};

export const v1AuditsUidGetSysMsg = async (
  uid: string,
  options?: RequestInit,
): Promise<v1AuditsUidGetSysMsgResponse> => {
  const res = await fetch(getV1AuditsUidGetSysMsgUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuditsUidGetSysMsgResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuditsUidGetSysMsgResponse;
};

/**
 * @summary Updates the specified user message for the specified audit
 */
export type v1AuditsUidMsgUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AuditsUidMsgUpdateResponseComposite =
  v1AuditsUidMsgUpdateResponseDefault;

export type v1AuditsUidMsgUpdateResponse =
  v1AuditsUidMsgUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AuditsUidMsgUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/audits/${uid}/userMsg`;
};

export const v1AuditsUidMsgUpdate = async (
  uid: string,
  v1AuditMsgUpdate?: V1AuditMsgUpdate,
  options?: RequestInit,
): Promise<v1AuditsUidMsgUpdateResponse> => {
  const res = await fetch(getV1AuditsUidMsgUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AuditMsgUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuditsUidMsgUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuditsUidMsgUpdateResponse;
};

/**
 * Creates a authentication request with the specified credentials
 * @summary Authenticates the user for the specified crendentials
 */
export type v1AuthenticateResponse200 = {
  data: V1UserToken;
  status: 200;
};

export type v1AuthenticateResponseComposite = v1AuthenticateResponse200;

export type v1AuthenticateResponse = v1AuthenticateResponseComposite & {
  headers: Headers;
};

export const getV1AuthenticateUrl = (params?: V1AuthenticateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/authenticate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/authenticate`;
};

export const v1Authenticate = async (
  v1AuthLogin: V1AuthLogin,
  params?: V1AuthenticateParams,
  options?: RequestInit,
): Promise<v1AuthenticateResponse> => {
  const res = await fetch(getV1AuthenticateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AuthLogin),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthenticateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthenticateResponse;
};

/**
 * Returns the allowed login method and information with the organization details
 * @summary Returns the user organization details
 */
export type v1AuthOrgResponse200 = {
  data: V1LoginResponse;
  status: 200;
};

export type v1AuthOrgResponseComposite = v1AuthOrgResponse200;

export type v1AuthOrgResponse = v1AuthOrgResponseComposite & {
  headers: Headers;
};

export const getV1AuthOrgUrl = (params?: V1AuthOrgParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org`;
};

export const v1AuthOrg = async (
  params?: V1AuthOrgParams,
  options?: RequestInit,
): Promise<v1AuthOrgResponse> => {
  const res = await fetch(getV1AuthOrgUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthOrgResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthOrgResponse;
};

/**
 * Returns the Authorization token for the palette. This is called by the IDP as a callback url after IDP authenticates the user with its server.
 * @summary Idp authorization code callback
 */
export type v1OidcCallbackResponse200 = {
  data: V1UserToken;
  status: 200;
};

export type v1OidcCallbackResponseComposite = v1OidcCallbackResponse200;

export type v1OidcCallbackResponse = v1OidcCallbackResponseComposite & {
  headers: Headers;
};

export const getV1OidcCallbackUrl = (
  org: string,
  params?: V1OidcCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/callback`;
};

export const v1OidcCallback = async (
  org: string,
  params?: V1OidcCallbackParams,
  options?: RequestInit,
): Promise<v1OidcCallbackResponse> => {
  const res = await fetch(getV1OidcCallbackUrl(org, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OidcCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OidcCallbackResponse;
};

/**
 * Returns No Content. Works as a callback url after the IDP logout from their server.
 * @summary Identity provider logout url for the Oidc
 */
export type v1OidcLogoutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OidcLogoutResponseComposite = v1OidcLogoutResponseDefault;

export type v1OidcLogoutResponse = v1OidcLogoutResponseComposite & {
  headers: Headers;
};

export const getV1OidcLogoutUrl = (
  org: string,
  params?: V1OidcLogoutParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/logout?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/logout`;
};

export const v1OidcLogout = async (
  org: string,
  params?: V1OidcLogoutParams,
  options?: RequestInit,
): Promise<v1OidcLogoutResponse> => {
  const res = await fetch(getV1OidcLogoutUrl(org, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OidcLogoutResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OidcLogoutResponse;
};

/**
 * Returns the Authorization token for the palette. This is called by the SAML based IDP as a callback url after IDP authenticates the user with its server.
 * @summary Identity provider callback url for the SMAL authentication
 */
export type v1SamlCallbackResponse200 = {
  data: V1UserToken;
  status: 200;
};

export type v1SamlCallbackResponseComposite = v1SamlCallbackResponse200;

export type v1SamlCallbackResponse = v1SamlCallbackResponseComposite & {
  headers: Headers;
};

export const getV1SamlCallbackUrl = (
  org: string,
  params?: V1SamlCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/saml/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/saml/callback`;
};

export const v1SamlCallback = async (
  org: string,
  v1SamlCallbackRequest: V1SamlCallbackRequest,
  params?: V1SamlCallbackParams,
  options?: RequestInit,
): Promise<v1SamlCallbackResponse> => {
  const formUrlEncoded = new URLSearchParams();
  if (v1SamlCallbackRequest.SAMLResponse !== undefined) {
    formUrlEncoded.append(`SAMLResponse`, v1SamlCallbackRequest.SAMLResponse);
  }
  if (v1SamlCallbackRequest.RelayState !== undefined) {
    formUrlEncoded.append(`RelayState`, v1SamlCallbackRequest.RelayState);
  }

  const res = await fetch(getV1SamlCallbackUrl(org, params), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SamlCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SamlCallbackResponse;
};

/**
 * Returns No Content. Works as a callback url after the IDP logout from their server.
 * @summary Identity provider logout url for the SMAL
 */
export type v1SamlLogoutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SamlLogoutResponseComposite = v1SamlLogoutResponseDefault;

export type v1SamlLogoutResponse = v1SamlLogoutResponseComposite & {
  headers: Headers;
};

export const getV1SamlLogoutUrl = (
  org: string,
  params?: V1SamlLogoutParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/saml/logout?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/saml/logout`;
};

export const v1SamlLogout = async (
  org: string,
  v1SamlLogoutRequest: V1SamlLogoutRequest,
  params?: V1SamlLogoutParams,
  options?: RequestInit,
): Promise<v1SamlLogoutResponse> => {
  const formUrlEncoded = new URLSearchParams();
  if (v1SamlLogoutRequest.SAMLResponse !== undefined) {
    formUrlEncoded.append(`SAMLResponse`, v1SamlLogoutRequest.SAMLResponse);
  }

  const res = await fetch(getV1SamlLogoutUrl(org, params), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SamlLogoutResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SamlLogoutResponse;
};

/**
 * Returns a list of user's organizations details and login methods
 * @summary Returns a list of user's organizations
 */
export type v1AuthOrgsResponse200 = {
  data: V1Organizations;
  status: 200;
};

export type v1AuthOrgsResponseComposite = v1AuthOrgsResponse200;

export type v1AuthOrgsResponse = v1AuthOrgsResponseComposite & {
  headers: Headers;
};

export const getV1AuthOrgsUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/orgs`;
};

export const v1AuthOrgs = async (
  options?: RequestInit,
): Promise<v1AuthOrgsResponse> => {
  const res = await fetch(getV1AuthOrgsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthOrgsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthOrgsResponse;
};

/**
 * Updates and Activates user password with the help of password token
 * @summary Updates and Activates the specified user password using the password token
 */
export type v1PasswordActivateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1PasswordActivateResponseComposite =
  v1PasswordActivateResponseDefault;

export type v1PasswordActivateResponse = v1PasswordActivateResponseComposite & {
  headers: Headers;
};

export const getV1PasswordActivateUrl = (passwordToken: string) => {
  return `https://api.spectrocloud.com/v1/auth/password/${passwordToken}/activate`;
};

export const v1PasswordActivate = async (
  passwordToken: string,
  v1PasswordActivateRequest: V1PasswordActivateRequest,
  options?: RequestInit,
): Promise<v1PasswordActivateResponse> => {
  const res = await fetch(getV1PasswordActivateUrl(passwordToken), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PasswordActivateRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PasswordActivateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PasswordActivateResponse;
};

/**
 * Updates the new user password with the help of password token
 * @summary Resets the user password using the password token
 */
export type v1PasswordResetResponseDefault = {
  data: unknown;
  status: number;
};

export type v1PasswordResetResponseComposite = v1PasswordResetResponseDefault;

export type v1PasswordResetResponse = v1PasswordResetResponseComposite & {
  headers: Headers;
};

export const getV1PasswordResetUrl = (passwordToken: string) => {
  return `https://api.spectrocloud.com/v1/auth/password/${passwordToken}/reset`;
};

export const v1PasswordReset = async (
  passwordToken: string,
  v1PasswordActivateRequest: V1PasswordActivateRequest,
  options?: RequestInit,
): Promise<v1PasswordResetResponse> => {
  const res = await fetch(getV1PasswordResetUrl(passwordToken), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PasswordActivateRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PasswordResetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PasswordResetResponse;
};

/**
 * Returns a new token within refresh timeout and same session id is maintained
 * @summary Refreshes authentication token
 */
export type v1AuthRefreshResponse200 = {
  data: V1UserToken;
  status: 200;
};

export type v1AuthRefreshResponseComposite = v1AuthRefreshResponse200;

export type v1AuthRefreshResponse = v1AuthRefreshResponseComposite & {
  headers: Headers;
};

export const getV1AuthRefreshUrl = (
  token: string,
  params?: V1AuthRefreshParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/refresh/${token}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/refresh/${token}`;
};

export const v1AuthRefresh = async (
  token: string,
  params?: V1AuthRefreshParams,
  options?: RequestInit,
): Promise<v1AuthRefreshResponse> => {
  const res = await fetch(getV1AuthRefreshUrl(token, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthRefreshResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthRefreshResponse;
};

/**
 * Returns a list of predefined Identity Provider (IDP)
 * @summary Returns a list of predefined Identity Provider (IDP)
 */
export type v1SsoIdpsResponse200 = {
  data: V1IdentityProviders;
  status: 200;
};

export type v1SsoIdpsResponseComposite = v1SsoIdpsResponse200;

export type v1SsoIdpsResponse = v1SsoIdpsResponseComposite & {
  headers: Headers;
};

export const getV1SsoIdpsUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/sso/idps`;
};

export const v1SsoIdps = async (
  options?: RequestInit,
): Promise<v1SsoIdpsResponse> => {
  const res = await fetch(getV1SsoIdpsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SsoIdpsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SsoIdpsResponse;
};

/**
 * Returns a list of supported sso logins and their authentication mechanism
 * @summary Returns a list of supported sso logins
 */
export type v1SsoLoginsResponse200 = {
  data: V1SsoLogins;
  status: 200;
};

export type v1SsoLoginsResponseComposite = v1SsoLoginsResponse200;

export type v1SsoLoginsResponse = v1SsoLoginsResponseComposite & {
  headers: Headers;
};

export const getV1SsoLoginsUrl = (params?: V1SsoLoginsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/sso/logins?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/sso/logins`;
};

export const v1SsoLogins = async (
  params?: V1SsoLoginsParams,
  options?: RequestInit,
): Promise<v1SsoLoginsResponse> => {
  const res = await fetch(getV1SsoLoginsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SsoLoginsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SsoLoginsResponse;
};

/**
 * Returns a list of supported sso auth providers
 * @summary Returns a list of supported sso auth providers
 */
export type v1AuthSsoProvidersResponse200 = {
  data: V1SsoLogins;
  status: 200;
};

export type v1AuthSsoProvidersResponseComposite = v1AuthSsoProvidersResponse200;

export type v1AuthSsoProvidersResponse = v1AuthSsoProvidersResponseComposite & {
  headers: Headers;
};

export const getV1AuthSsoProvidersUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/sso/providers`;
};

export const v1AuthSsoProviders = async (
  options?: RequestInit,
): Promise<v1AuthSsoProvidersResponse> => {
  const res = await fetch(getV1AuthSsoProvidersUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthSsoProvidersResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthSsoProvidersResponse;
};

/**
 * Returns Authorization token. Works as a callback url for the system defined sso apps
 * @summary Returns Authorization token. Works as a callback url for the system defined sso apps
 */
export type v1SsoCallbackResponse200 = {
  data: V1UserToken;
  status: 200;
};

export type v1SsoCallbackResponseComposite = v1SsoCallbackResponse200;

export type v1SsoCallbackResponse = v1SsoCallbackResponseComposite & {
  headers: Headers;
};

export const getV1SsoCallbackUrl = (
  ssoApp: string,
  params?: V1SsoCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/sso/${ssoApp}/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/sso/${ssoApp}/callback`;
};

export const v1SsoCallback = async (
  ssoApp: string,
  params?: V1SsoCallbackParams,
  options?: RequestInit,
): Promise<v1SsoCallbackResponse> => {
  const res = await fetch(getV1SsoCallbackUrl(ssoApp, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SsoCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SsoCallbackResponse;
};

/**
 * Returns No Content. Sends the user organization(s) information via email
 * @summary Returns No Content. Sends the user organization information via email
 */
export type v1AuthUserOrgForgotResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AuthUserOrgForgotResponseComposite =
  v1AuthUserOrgForgotResponseDefault;

export type v1AuthUserOrgForgotResponse =
  v1AuthUserOrgForgotResponseComposite & {
    headers: Headers;
  };

export const getV1AuthUserOrgForgotUrl = (
  params: V1AuthUserOrgForgotParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/user/org/forgot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/user/org/forgot`;
};

export const v1AuthUserOrgForgot = async (
  params: V1AuthUserOrgForgotParams,
  options?: RequestInit,
): Promise<v1AuthUserOrgForgotResponse> => {
  const res = await fetch(getV1AuthUserOrgForgotUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthUserOrgForgotResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthUserOrgForgotResponse;
};

/**
 * Creates request to reset password via email. Password reset email will be sent to the user. Sends 204 No Content.
 * @summary Creates request to reset password via email
 */
export type v1PasswordResetRequestResponseDefault = {
  data: unknown;
  status: number;
};

export type v1PasswordResetRequestResponseComposite =
  v1PasswordResetRequestResponseDefault;

export type v1PasswordResetRequestResponse =
  v1PasswordResetRequestResponseComposite & {
    headers: Headers;
  };

export const getV1PasswordResetRequestUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/user/password/reset`;
};

export const v1PasswordResetRequest = async (
  v1PasswordResetRequestRequest: V1PasswordResetRequestRequest,
  options?: RequestInit,
): Promise<v1PasswordResetRequestResponse> => {
  const res = await fetch(getV1PasswordResetRequestUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PasswordResetRequestRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PasswordResetRequestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PasswordResetRequestResponse;
};

/**
 * @summary Retrieves a list of AWS cloud accounts
 */
export type v1CloudAccountsAwsListResponse200 = {
  data: V1AwsAccounts;
  status: 200;
};

export type v1CloudAccountsAwsListResponseComposite =
  v1CloudAccountsAwsListResponse200;

export type v1CloudAccountsAwsListResponse =
  v1CloudAccountsAwsListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsListUrl = (
  params?: V1CloudAccountsAwsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/aws?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/aws`;
};

export const v1CloudAccountsAwsList = async (
  params?: V1CloudAccountsAwsListParams,
  options?: RequestInit,
): Promise<v1CloudAccountsAwsListResponse> => {
  const res = await fetch(getV1CloudAccountsAwsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAwsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAwsListResponse;
};

/**
 * @summary Creates an AWS cloud account
 */
export type v1CloudAccountsAwsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudAccountsAwsCreateResponseComposite =
  v1CloudAccountsAwsCreateResponse201;

export type v1CloudAccountsAwsCreateResponse =
  v1CloudAccountsAwsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws`;
};

export const v1CloudAccountsAwsCreate = async (
  v1AwsAccount?: V1AwsAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsAwsCreateResponse> => {
  const res = await fetch(getV1CloudAccountsAwsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAwsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAwsCreateResponse;
};

/**
 * @summary Deletes the specified AWS account
 */
export type v1CloudAccountsAwsDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsAwsDeleteResponseComposite =
  v1CloudAccountsAwsDeleteResponseDefault;

export type v1CloudAccountsAwsDeleteResponse =
  v1CloudAccountsAwsDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const v1CloudAccountsAwsDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsAwsDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsAwsDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAwsDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAwsDeleteResponse;
};

/**
 * @summary Returns the specified AWS account
 */
export type v1CloudAccountsAwsGetResponse200 = {
  data: V1AwsAccount;
  status: 200;
};

export type v1CloudAccountsAwsGetResponseComposite =
  v1CloudAccountsAwsGetResponse200;

export type v1CloudAccountsAwsGetResponse =
  v1CloudAccountsAwsGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsGetUrl = (
  uid: string,
  params?: V1CloudAccountsAwsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const v1CloudAccountsAwsGet = async (
  uid: string,
  params?: V1CloudAccountsAwsGetParams,
  options?: RequestInit,
): Promise<v1CloudAccountsAwsGetResponse> => {
  const res = await fetch(getV1CloudAccountsAwsGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAwsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAwsGetResponse;
};

/**
 * @summary Updates the specified AWS account
 */
export type v1CloudAccountsAwsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsAwsUpdateResponseComposite =
  v1CloudAccountsAwsUpdateResponseDefault;

export type v1CloudAccountsAwsUpdateResponse =
  v1CloudAccountsAwsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const v1CloudAccountsAwsUpdate = async (
  uid: string,
  v1AwsAccount?: V1AwsAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsAwsUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsAwsUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAwsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAwsUpdateResponse;
};

/**
 * @summary Retrieves a list of azure cloud accounts
 */
export type v1CloudAccountsAzureListResponse200 = {
  data: V1AzureAccounts;
  status: 200;
};

export type v1CloudAccountsAzureListResponseComposite =
  v1CloudAccountsAzureListResponse200;

export type v1CloudAccountsAzureListResponse =
  v1CloudAccountsAzureListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureListUrl = (
  params?: V1CloudAccountsAzureListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/azure?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/azure`;
};

export const v1CloudAccountsAzureList = async (
  params?: V1CloudAccountsAzureListParams,
  options?: RequestInit,
): Promise<v1CloudAccountsAzureListResponse> => {
  const res = await fetch(getV1CloudAccountsAzureListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAzureListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAzureListResponse;
};

/**
 * @summary Create azure cloud account
 */
export type v1CloudAccountsAzureCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudAccountsAzureCreateResponseComposite =
  v1CloudAccountsAzureCreateResponse201;

export type v1CloudAccountsAzureCreateResponse =
  v1CloudAccountsAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure`;
};

export const v1CloudAccountsAzureCreate = async (
  v1AzureAccount?: V1AzureAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsAzureCreateResponse> => {
  const res = await fetch(getV1CloudAccountsAzureCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAzureCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAzureCreateResponse;
};

/**
 * @summary Deletes the specified azure account
 */
export type v1CloudAccountsAzureDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsAzureDeleteResponseComposite =
  v1CloudAccountsAzureDeleteResponseDefault;

export type v1CloudAccountsAzureDeleteResponse =
  v1CloudAccountsAzureDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const v1CloudAccountsAzureDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsAzureDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsAzureDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAzureDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAzureDeleteResponse;
};

/**
 * @summary Returns the specified azure cloud account
 */
export type v1CloudAccountsAzureGetResponse200 = {
  data: V1AzureAccount;
  status: 200;
};

export type v1CloudAccountsAzureGetResponseComposite =
  v1CloudAccountsAzureGetResponse200;

export type v1CloudAccountsAzureGetResponse =
  v1CloudAccountsAzureGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const v1CloudAccountsAzureGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsAzureGetResponse> => {
  const res = await fetch(getV1CloudAccountsAzureGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAzureGetResponse;
};

/**
 * @summary Updates the specified azure account
 */
export type v1CloudAccountsAzureUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsAzureUpdateResponseComposite =
  v1CloudAccountsAzureUpdateResponseDefault;

export type v1CloudAccountsAzureUpdateResponse =
  v1CloudAccountsAzureUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const v1CloudAccountsAzureUpdate = async (
  uid: string,
  v1AzureAccount?: V1AzureAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsAzureUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsAzureUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsAzureUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsAzureUpdateResponse;
};

/**
 * @summary Retrieves a list of cloud accounts by cloud type
 */
export type v1CloudAccountsCustomListResponse200 = {
  data: V1CustomAccounts;
  status: 200;
};

export type v1CloudAccountsCustomListResponseComposite =
  v1CloudAccountsCustomListResponse200;

export type v1CloudAccountsCustomListResponse =
  v1CloudAccountsCustomListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomListUrl = (
  cloudType: string,
  params?: V1CloudAccountsCustomListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}`;
};

export const v1CloudAccountsCustomList = async (
  cloudType: string,
  params?: V1CloudAccountsCustomListParams,
  options?: RequestInit,
): Promise<v1CloudAccountsCustomListResponse> => {
  const res = await fetch(getV1CloudAccountsCustomListUrl(cloudType, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsCustomListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsCustomListResponse;
};

/**
 * @summary Creates an cloud account of specific cloud type
 */
export type v1CloudAccountsCustomCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudAccountsCustomCreateResponseComposite =
  v1CloudAccountsCustomCreateResponse201;

export type v1CloudAccountsCustomCreateResponse =
  v1CloudAccountsCustomCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomCreateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}`;
};

export const v1CloudAccountsCustomCreate = async (
  cloudType: string,
  v1CustomAccountEntity?: V1CustomAccountEntity,
  options?: RequestInit,
): Promise<v1CloudAccountsCustomCreateResponse> => {
  const res = await fetch(getV1CloudAccountsCustomCreateUrl(cloudType), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CustomAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsCustomCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsCustomCreateResponse;
};

/**
 * @summary Deletes the specified account by cloud type
 */
export type v1CloudAccountsCustomDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsCustomDeleteResponseComposite =
  v1CloudAccountsCustomDeleteResponseDefault;

export type v1CloudAccountsCustomDeleteResponse =
  v1CloudAccountsCustomDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomDeleteUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const v1CloudAccountsCustomDelete = async (
  cloudType: string,
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsCustomDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsCustomDeleteUrl(cloudType, uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsCustomDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsCustomDeleteResponse;
};

/**
 * @summary Returns the specified account by cloud type
 */
export type v1CloudAccountsCustomGetResponse200 = {
  data: V1CustomAccount;
  status: 200;
};

export type v1CloudAccountsCustomGetResponseComposite =
  v1CloudAccountsCustomGetResponse200;

export type v1CloudAccountsCustomGetResponse =
  v1CloudAccountsCustomGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomGetUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const v1CloudAccountsCustomGet = async (
  cloudType: string,
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsCustomGetResponse> => {
  const res = await fetch(getV1CloudAccountsCustomGetUrl(cloudType, uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsCustomGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsCustomGetResponse;
};

/**
 * @summary Updates the specified account by cloud type
 */
export type v1CloudAccountsCustomUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsCustomUpdateResponseComposite =
  v1CloudAccountsCustomUpdateResponseDefault;

export type v1CloudAccountsCustomUpdateResponse =
  v1CloudAccountsCustomUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomUpdateUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const v1CloudAccountsCustomUpdate = async (
  cloudType: string,
  uid: string,
  v1CustomAccountEntity?: V1CustomAccountEntity,
  options?: RequestInit,
): Promise<v1CloudAccountsCustomUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsCustomUpdateUrl(cloudType, uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CustomAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsCustomUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsCustomUpdateResponse;
};

/**
 * @summary Retrieves a list of gcp cloud accounts
 */
export type v1CloudAccountsGcpListResponse200 = {
  data: V1GcpAccounts;
  status: 200;
};

export type v1CloudAccountsGcpListResponseComposite =
  v1CloudAccountsGcpListResponse200;

export type v1CloudAccountsGcpListResponse =
  v1CloudAccountsGcpListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpListUrl = (
  params?: V1CloudAccountsGcpListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/gcp?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/gcp`;
};

export const v1CloudAccountsGcpList = async (
  params?: V1CloudAccountsGcpListParams,
  options?: RequestInit,
): Promise<v1CloudAccountsGcpListResponse> => {
  const res = await fetch(getV1CloudAccountsGcpListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsGcpListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsGcpListResponse;
};

/**
 * @summary Creates a GCP cloud account
 */
export type v1CloudAccountsGcpCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudAccountsGcpCreateResponseComposite =
  v1CloudAccountsGcpCreateResponse201;

export type v1CloudAccountsGcpCreateResponse =
  v1CloudAccountsGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp`;
};

export const v1CloudAccountsGcpCreate = async (
  v1GcpAccountEntity?: V1GcpAccountEntity,
  options?: RequestInit,
): Promise<v1CloudAccountsGcpCreateResponse> => {
  const res = await fetch(getV1CloudAccountsGcpCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsGcpCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsGcpCreateResponse;
};

/**
 * @summary Deletes the specified GCP account
 */
export type v1CloudAccountsGcpDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsGcpDeleteResponseComposite =
  v1CloudAccountsGcpDeleteResponseDefault;

export type v1CloudAccountsGcpDeleteResponse =
  v1CloudAccountsGcpDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const v1CloudAccountsGcpDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsGcpDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsGcpDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsGcpDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsGcpDeleteResponse;
};

/**
 * @summary Returns the specified GCP cloud account
 */
export type v1CloudAccountsGcpGetResponse200 = {
  data: V1GcpAccount;
  status: 200;
};

export type v1CloudAccountsGcpGetResponseComposite =
  v1CloudAccountsGcpGetResponse200;

export type v1CloudAccountsGcpGetResponse =
  v1CloudAccountsGcpGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const v1CloudAccountsGcpGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsGcpGetResponse> => {
  const res = await fetch(getV1CloudAccountsGcpGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsGcpGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsGcpGetResponse;
};

/**
 * @summary Updates the specified GCP account
 */
export type v1CloudAccountsGcpUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsGcpUpdateResponseComposite =
  v1CloudAccountsGcpUpdateResponseDefault;

export type v1CloudAccountsGcpUpdateResponse =
  v1CloudAccountsGcpUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const v1CloudAccountsGcpUpdate = async (
  uid: string,
  v1GcpAccountEntity?: V1GcpAccountEntity,
  options?: RequestInit,
): Promise<v1CloudAccountsGcpUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsGcpUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsGcpUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsGcpUpdateResponse;
};

/**
 * @summary Retrieves a list of Maas cloud accounts
 */
export type v1CloudAccountsMaasListResponse200 = {
  data: V1MaasAccounts;
  status: 200;
};

export type v1CloudAccountsMaasListResponseComposite =
  v1CloudAccountsMaasListResponse200;

export type v1CloudAccountsMaasListResponse =
  v1CloudAccountsMaasListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasListUrl = (
  params?: V1CloudAccountsMaasListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/maas?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/maas`;
};

export const v1CloudAccountsMaasList = async (
  params?: V1CloudAccountsMaasListParams,
  options?: RequestInit,
): Promise<v1CloudAccountsMaasListResponse> => {
  const res = await fetch(getV1CloudAccountsMaasListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsMaasListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsMaasListResponse;
};

/**
 * @summary Creates an Maas cloud account
 */
export type v1CloudAccountsMaasCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudAccountsMaasCreateResponseComposite =
  v1CloudAccountsMaasCreateResponse201;

export type v1CloudAccountsMaasCreateResponse =
  v1CloudAccountsMaasCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas`;
};

export const v1CloudAccountsMaasCreate = async (
  v1MaasAccount?: V1MaasAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsMaasCreateResponse> => {
  const res = await fetch(getV1CloudAccountsMaasCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MaasAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsMaasCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsMaasCreateResponse;
};

/**
 * @summary Deletes the specified Maas account
 */
export type v1CloudAccountsMaasDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsMaasDeleteResponseComposite =
  v1CloudAccountsMaasDeleteResponseDefault;

export type v1CloudAccountsMaasDeleteResponse =
  v1CloudAccountsMaasDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const v1CloudAccountsMaasDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsMaasDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsMaasDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsMaasDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsMaasDeleteResponse;
};

/**
 * @summary Returns the specified Maas account
 */
export type v1CloudAccountsMaasGetResponse200 = {
  data: V1MaasAccount;
  status: 200;
};

export type v1CloudAccountsMaasGetResponseComposite =
  v1CloudAccountsMaasGetResponse200;

export type v1CloudAccountsMaasGetResponse =
  v1CloudAccountsMaasGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const v1CloudAccountsMaasGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsMaasGetResponse> => {
  const res = await fetch(getV1CloudAccountsMaasGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsMaasGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsMaasGetResponse;
};

/**
 * @summary Patches the specified CloudAccount Maas
 */
export type v1CloudAccountsMaasPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsMaasPatchResponseComposite =
  v1CloudAccountsMaasPatchResponseDefault;

export type v1CloudAccountsMaasPatchResponse =
  v1CloudAccountsMaasPatchResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const v1CloudAccountsMaasPatch = async (
  uid: string,
  v1CloudAccountsPatch: V1CloudAccountsPatch,
  options?: RequestInit,
): Promise<v1CloudAccountsMaasPatchResponse> => {
  const res = await fetch(getV1CloudAccountsMaasPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CloudAccountsPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsMaasPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsMaasPatchResponse;
};

/**
 * @summary Updates the specified Maas account
 */
export type v1CloudAccountsMaasUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsMaasUpdateResponseComposite =
  v1CloudAccountsMaasUpdateResponseDefault;

export type v1CloudAccountsMaasUpdateResponse =
  v1CloudAccountsMaasUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const v1CloudAccountsMaasUpdate = async (
  uid: string,
  v1MaasAccount?: V1MaasAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsMaasUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsMaasUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MaasAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsMaasUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsMaasUpdateResponse;
};

/**
 * @summary Get the maas azs for a given account
 */
export type v1MaasAccountsUidAzsResponse200 = {
  data: V1MaasZones;
  status: 200;
};

export type v1MaasAccountsUidAzsResponseComposite =
  v1MaasAccountsUidAzsResponse200;

export type v1MaasAccountsUidAzsResponse =
  v1MaasAccountsUidAzsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidAzsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/azs`;
};

export const v1MaasAccountsUidAzs = async (
  uid: string,
  options?: RequestInit,
): Promise<v1MaasAccountsUidAzsResponse> => {
  const res = await fetch(getV1MaasAccountsUidAzsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasAccountsUidAzsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasAccountsUidAzsResponse;
};

/**
 * @summary Get the maas domains for a given account
 */
export type v1MaasAccountsUidDomainsResponse200 = {
  data: V1MaasDomains;
  status: 200;
};

export type v1MaasAccountsUidDomainsResponseComposite =
  v1MaasAccountsUidDomainsResponse200;

export type v1MaasAccountsUidDomainsResponse =
  v1MaasAccountsUidDomainsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidDomainsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/domains`;
};

export const v1MaasAccountsUidDomains = async (
  uid: string,
  options?: RequestInit,
): Promise<v1MaasAccountsUidDomainsResponse> => {
  const res = await fetch(getV1MaasAccountsUidDomainsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasAccountsUidDomainsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasAccountsUidDomainsResponse;
};

/**
 * @summary Get the maas pools for a given account
 */
export type v1MaasAccountsUidPoolsResponse200 = {
  data: V1MaasPools;
  status: 200;
};

export type v1MaasAccountsUidPoolsResponseComposite =
  v1MaasAccountsUidPoolsResponse200;

export type v1MaasAccountsUidPoolsResponse =
  v1MaasAccountsUidPoolsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidPoolsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/resourcePools`;
};

export const v1MaasAccountsUidPools = async (
  uid: string,
  options?: RequestInit,
): Promise<v1MaasAccountsUidPoolsResponse> => {
  const res = await fetch(getV1MaasAccountsUidPoolsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasAccountsUidPoolsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasAccountsUidPoolsResponse;
};

/**
 * @summary Get the maas subnets for a given account
 */
export type v1MaasAccountsUidSubnetsResponse200 = {
  data: V1MaasSubnets;
  status: 200;
};

export type v1MaasAccountsUidSubnetsResponseComposite =
  v1MaasAccountsUidSubnetsResponse200;

export type v1MaasAccountsUidSubnetsResponse =
  v1MaasAccountsUidSubnetsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidSubnetsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/subnets`;
};

export const v1MaasAccountsUidSubnets = async (
  uid: string,
  options?: RequestInit,
): Promise<v1MaasAccountsUidSubnetsResponse> => {
  const res = await fetch(getV1MaasAccountsUidSubnetsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasAccountsUidSubnetsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasAccountsUidSubnetsResponse;
};

/**
 * @summary Get the maas tags for a given account
 */
export type v1MaasAccountsUidTagsResponse200 = {
  data: V1MaasTags;
  status: 200;
};

export type v1MaasAccountsUidTagsResponseComposite =
  v1MaasAccountsUidTagsResponse200;

export type v1MaasAccountsUidTagsResponse =
  v1MaasAccountsUidTagsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidTagsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/tags`;
};

export const v1MaasAccountsUidTags = async (
  uid: string,
  options?: RequestInit,
): Promise<v1MaasAccountsUidTagsResponse> => {
  const res = await fetch(getV1MaasAccountsUidTagsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasAccountsUidTagsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasAccountsUidTagsResponse;
};

/**
 * @summary Retrieves a list of OpenStack cloud accounts
 */
export type v1CloudAccountsOpenStackListResponse200 = {
  data: V1OpenStackAccounts;
  status: 200;
};

export type v1CloudAccountsOpenStackListResponseComposite =
  v1CloudAccountsOpenStackListResponse200;

export type v1CloudAccountsOpenStackListResponse =
  v1CloudAccountsOpenStackListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackListUrl = (
  params?: V1CloudAccountsOpenStackListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack`;
};

export const v1CloudAccountsOpenStackList = async (
  params?: V1CloudAccountsOpenStackListParams,
  options?: RequestInit,
): Promise<v1CloudAccountsOpenStackListResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsOpenStackListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsOpenStackListResponse;
};

/**
 * @summary Creates a OpenStack cloud account
 */
export type v1CloudAccountsOpenStackCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudAccountsOpenStackCreateResponseComposite =
  v1CloudAccountsOpenStackCreateResponse201;

export type v1CloudAccountsOpenStackCreateResponse =
  v1CloudAccountsOpenStackCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack`;
};

export const v1CloudAccountsOpenStackCreate = async (
  v1OpenStackAccount?: V1OpenStackAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsOpenStackCreateResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OpenStackAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsOpenStackCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsOpenStackCreateResponse;
};

/**
 * @summary Deletes the specified OpenStack account
 */
export type v1CloudAccountsOpenStackDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsOpenStackDeleteResponseComposite =
  v1CloudAccountsOpenStackDeleteResponseDefault;

export type v1CloudAccountsOpenStackDeleteResponse =
  v1CloudAccountsOpenStackDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const v1CloudAccountsOpenStackDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsOpenStackDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsOpenStackDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsOpenStackDeleteResponse;
};

/**
 * @summary Returns the specified OpenStack account
 */
export type v1CloudAccountsOpenStackGetResponse200 = {
  data: V1OpenStackAccount;
  status: 200;
};

export type v1CloudAccountsOpenStackGetResponseComposite =
  v1CloudAccountsOpenStackGetResponse200;

export type v1CloudAccountsOpenStackGetResponse =
  v1CloudAccountsOpenStackGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const v1CloudAccountsOpenStackGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsOpenStackGetResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsOpenStackGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsOpenStackGetResponse;
};

/**
 * @summary Updates the specified OpenStack account
 */
export type v1CloudAccountsOpenStackUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsOpenStackUpdateResponseComposite =
  v1CloudAccountsOpenStackUpdateResponseDefault;

export type v1CloudAccountsOpenStackUpdateResponse =
  v1CloudAccountsOpenStackUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const v1CloudAccountsOpenStackUpdate = async (
  uid: string,
  v1OpenStackAccount?: V1OpenStackAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsOpenStackUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OpenStackAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsOpenStackUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsOpenStackUpdateResponse;
};

/**
 * @summary Get the openstack azs for a given account and region
 */
export type v1OpenstackAccountsUidAzsResponse200 = {
  data: V1OpenStackAzs;
  status: 200;
};

export type v1OpenstackAccountsUidAzsResponseComposite =
  v1OpenstackAccountsUidAzsResponse200;

export type v1OpenstackAccountsUidAzsResponse =
  v1OpenstackAccountsUidAzsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidAzsUrl = (
  uid: string,
  params?: V1OpenstackAccountsUidAzsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/azs`;
};

export const v1OpenstackAccountsUidAzs = async (
  uid: string,
  params?: V1OpenstackAccountsUidAzsParams,
  options?: RequestInit,
): Promise<v1OpenstackAccountsUidAzsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidAzsUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenstackAccountsUidAzsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenstackAccountsUidAzsResponse;
};

/**
 * @summary Get the openstack keypairs for a given account and scope
 */
export type v1OpenstackAccountsUidFlavorsResponse200 = {
  data: V1OpenStackFlavors;
  status: 200;
};

export type v1OpenstackAccountsUidFlavorsResponseComposite =
  v1OpenstackAccountsUidFlavorsResponse200;

export type v1OpenstackAccountsUidFlavorsResponse =
  v1OpenstackAccountsUidFlavorsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidFlavorsUrl = (
  uid: string,
  params?: V1OpenstackAccountsUidFlavorsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/flavors?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/flavors`;
};

export const v1OpenstackAccountsUidFlavors = async (
  uid: string,
  params?: V1OpenstackAccountsUidFlavorsParams,
  options?: RequestInit,
): Promise<v1OpenstackAccountsUidFlavorsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidFlavorsUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenstackAccountsUidFlavorsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenstackAccountsUidFlavorsResponse;
};

/**
 * @summary Get the openstack keypairs for a given account and scope
 */
export type v1OpenstackAccountsUidKeypairsResponse200 = {
  data: V1OpenStackKeypairs;
  status: 200;
};

export type v1OpenstackAccountsUidKeypairsResponseComposite =
  v1OpenstackAccountsUidKeypairsResponse200;

export type v1OpenstackAccountsUidKeypairsResponse =
  v1OpenstackAccountsUidKeypairsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidKeypairsUrl = (
  uid: string,
  params?: V1OpenstackAccountsUidKeypairsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/keypairs`;
};

export const v1OpenstackAccountsUidKeypairs = async (
  uid: string,
  params?: V1OpenstackAccountsUidKeypairsParams,
  options?: RequestInit,
): Promise<v1OpenstackAccountsUidKeypairsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidKeypairsUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenstackAccountsUidKeypairsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenstackAccountsUidKeypairsResponse;
};

/**
 * @summary Get the openstack networks for a given account and scope
 */
export type v1OpenstackAccountsUidNetworksResponse200 = {
  data: V1OpenStackNetworks;
  status: 200;
};

export type v1OpenstackAccountsUidNetworksResponseComposite =
  v1OpenstackAccountsUidNetworksResponse200;

export type v1OpenstackAccountsUidNetworksResponse =
  v1OpenstackAccountsUidNetworksResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidNetworksUrl = (
  uid: string,
  params?: V1OpenstackAccountsUidNetworksParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/networks`;
};

export const v1OpenstackAccountsUidNetworks = async (
  uid: string,
  params?: V1OpenstackAccountsUidNetworksParams,
  options?: RequestInit,
): Promise<v1OpenstackAccountsUidNetworksResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidNetworksUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenstackAccountsUidNetworksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenstackAccountsUidNetworksResponse;
};

/**
 * @summary Get the openstack projects for a given account
 */
export type v1OpenstackAccountsUidProjectsResponse200 = {
  data: V1OpenStackProjects;
  status: 200;
};

export type v1OpenstackAccountsUidProjectsResponseComposite =
  v1OpenstackAccountsUidProjectsResponse200;

export type v1OpenstackAccountsUidProjectsResponse =
  v1OpenstackAccountsUidProjectsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidProjectsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/projects`;
};

export const v1OpenstackAccountsUidProjects = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OpenstackAccountsUidProjectsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidProjectsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenstackAccountsUidProjectsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenstackAccountsUidProjectsResponse;
};

/**
 * @summary Get the openstack regions for a given account
 */
export type v1OpenstackAccountsUidRegionsResponse200 = {
  data: V1OpenStackRegions;
  status: 200;
};

export type v1OpenstackAccountsUidRegionsResponseComposite =
  v1OpenstackAccountsUidRegionsResponse200;

export type v1OpenstackAccountsUidRegionsResponse =
  v1OpenstackAccountsUidRegionsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidRegionsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/regions`;
};

export const v1OpenstackAccountsUidRegions = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OpenstackAccountsUidRegionsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidRegionsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenstackAccountsUidRegionsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenstackAccountsUidRegionsResponse;
};

/**
 * @summary Retrieves a list of cloud accounts summary
 */
export type v1CloudAccountsListSummaryResponse200 = {
  data: V1CloudAccountsSummary;
  status: 200;
};

export type v1CloudAccountsListSummaryResponseComposite =
  v1CloudAccountsListSummaryResponse200;

export type v1CloudAccountsListSummaryResponse =
  v1CloudAccountsListSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsListSummaryUrl = (
  params?: V1CloudAccountsListSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/summary`;
};

export const v1CloudAccountsListSummary = async (
  params?: V1CloudAccountsListSummaryParams,
  options?: RequestInit,
): Promise<v1CloudAccountsListSummaryResponse> => {
  const res = await fetch(getV1CloudAccountsListSummaryUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsListSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsListSummaryResponse;
};

/**
 * @summary Retrieves a list of vSphere cloud accounts
 */
export type v1CloudAccountsVsphereListResponse200 = {
  data: V1VsphereAccounts;
  status: 200;
};

export type v1CloudAccountsVsphereListResponseComposite =
  v1CloudAccountsVsphereListResponse200;

export type v1CloudAccountsVsphereListResponse =
  v1CloudAccountsVsphereListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereListUrl = (
  params?: V1CloudAccountsVsphereListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/vsphere?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/vsphere`;
};

export const v1CloudAccountsVsphereList = async (
  params?: V1CloudAccountsVsphereListParams,
  options?: RequestInit,
): Promise<v1CloudAccountsVsphereListResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsVsphereListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsVsphereListResponse;
};

/**
 * @summary Creates a vSphere cloud account
 */
export type v1CloudAccountsVsphereCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudAccountsVsphereCreateResponseComposite =
  v1CloudAccountsVsphereCreateResponse201;

export type v1CloudAccountsVsphereCreateResponse =
  v1CloudAccountsVsphereCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere`;
};

export const v1CloudAccountsVsphereCreate = async (
  v1VsphereAccount?: V1VsphereAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsVsphereCreateResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsVsphereCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsVsphereCreateResponse;
};

/**
 * @summary Deletes the specified vSphere account
 */
export type v1CloudAccountsVsphereDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsVsphereDeleteResponseComposite =
  v1CloudAccountsVsphereDeleteResponseDefault;

export type v1CloudAccountsVsphereDeleteResponse =
  v1CloudAccountsVsphereDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const v1CloudAccountsVsphereDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsVsphereDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsVsphereDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsVsphereDeleteResponse;
};

/**
 * @summary Returns the specified vSphere account
 */
export type v1CloudAccountsVsphereGetResponse200 = {
  data: V1VsphereAccount;
  status: 200;
};

export type v1CloudAccountsVsphereGetResponseComposite =
  v1CloudAccountsVsphereGetResponse200;

export type v1CloudAccountsVsphereGetResponse =
  v1CloudAccountsVsphereGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const v1CloudAccountsVsphereGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1CloudAccountsVsphereGetResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsVsphereGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsVsphereGetResponse;
};

/**
 * @summary Updates the specified VSphere account
 */
export type v1CloudAccountsVsphereUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudAccountsVsphereUpdateResponseComposite =
  v1CloudAccountsVsphereUpdateResponseDefault;

export type v1CloudAccountsVsphereUpdateResponse =
  v1CloudAccountsVsphereUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const v1CloudAccountsVsphereUpdate = async (
  uid: string,
  v1VsphereAccount?: V1VsphereAccount,
  options?: RequestInit,
): Promise<v1CloudAccountsVsphereUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudAccountsVsphereUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudAccountsVsphereUpdateResponse;
};

/**
 * @summary Get the vSphere computecluster resources for the given overlord account
 */
export type v1VsphereAccountsUidClusterResResponse200 = {
  data: V1VsphereComputeClusterResources;
  status: 200;
};

export type v1VsphereAccountsUidClusterResResponseComposite =
  v1VsphereAccountsUidClusterResResponse200;

export type v1VsphereAccountsUidClusterResResponse =
  v1VsphereAccountsUidClusterResResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereAccountsUidClusterResUrl = (
  uid: string,
  params: V1VsphereAccountsUidClusterResParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/computecluster/resources?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/computecluster/resources`;
};

export const v1VsphereAccountsUidClusterRes = async (
  uid: string,
  params: V1VsphereAccountsUidClusterResParams,
  options?: RequestInit,
): Promise<v1VsphereAccountsUidClusterResResponse> => {
  const res = await fetch(getV1VsphereAccountsUidClusterResUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereAccountsUidClusterResResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereAccountsUidClusterResResponse;
};

/**
 * @summary Get the vSphere datacenters & datacluster for the given overlord account
 */
export type v1VsphereAccountsUidDatacentersResponse200 = {
  data: V1VsphereDatacenters;
  status: 200;
};

export type v1VsphereAccountsUidDatacentersResponseComposite =
  v1VsphereAccountsUidDatacentersResponse200;

export type v1VsphereAccountsUidDatacentersResponse =
  v1VsphereAccountsUidDatacentersResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereAccountsUidDatacentersUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/datacenters`;
};

export const v1VsphereAccountsUidDatacenters = async (
  uid: string,
  options?: RequestInit,
): Promise<v1VsphereAccountsUidDatacentersResponse> => {
  const res = await fetch(getV1VsphereAccountsUidDatacentersUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereAccountsUidDatacentersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereAccountsUidDatacentersResponse;
};

/**
 * @summary Update the geolocation annotation
 */
export type v1AccountsGeolocationPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AccountsGeolocationPatchResponseComposite =
  v1AccountsGeolocationPatchResponseDefault;

export type v1AccountsGeolocationPatchResponse =
  v1AccountsGeolocationPatchResponseComposite & {
    headers: Headers;
  };

export const getV1AccountsGeolocationPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/${uid}/geoLocation`;
};

export const v1AccountsGeolocationPatch = async (
  uid: string,
  v1GeolocationLatlong: V1GeolocationLatlong,
  options?: RequestInit,
): Promise<v1AccountsGeolocationPatchResponse> => {
  const res = await fetch(getV1AccountsGeolocationPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GeolocationLatlong),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AccountsGeolocationPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AccountsGeolocationPatchResponse;
};

/**
 * @summary Returns the specified AKS cloud config
 */
export type v1CloudConfigsAksGetResponse200 = {
  data: V1AzureCloudConfig;
  status: 200;
};

export type v1CloudConfigsAksGetResponseComposite =
  v1CloudConfigsAksGetResponse200;

export type v1CloudConfigsAksGetResponse =
  v1CloudConfigsAksGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}`;
};

export const v1CloudConfigsAksGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAksGetResponse> => {
  const res = await fetch(getV1CloudConfigsAksGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsAksUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAksUidClusterConfigResponseComposite =
  v1CloudConfigsAksUidClusterConfigResponseDefault;

export type v1CloudConfigsAksUidClusterConfigResponse =
  v1CloudConfigsAksUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/clusterConfig`;
};

export const v1CloudConfigsAksUidClusterConfig = async (
  configUid: string,
  v1AzureCloudClusterConfigEntity?: V1AzureCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAksUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsAksUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksUidClusterConfigResponse;
};

/**
 * @summary Creates an AKS cloud config's machine pool
 */
export type v1CloudConfigsAksMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsAksMachinePoolCreateResponseComposite =
  v1CloudConfigsAksMachinePoolCreateResponse201;

export type v1CloudConfigsAksMachinePoolCreateResponse =
  v1CloudConfigsAksMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools`;
};

export const v1CloudConfigsAksMachinePoolCreate = async (
  configUid: string,
  v1AzureMachinePoolConfigEntity?: V1AzureMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAksMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsAksMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureMachinePoolConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsAksMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAksMachinePoolDeleteResponseComposite =
  v1CloudConfigsAksMachinePoolDeleteResponseDefault;

export type v1CloudConfigsAksMachinePoolDeleteResponse =
  v1CloudConfigsAksMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsAksMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAksMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified AKS cloud config's machine pool
 */
export type v1CloudConfigsAksMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAksMachinePoolUpdateResponseComposite =
  v1CloudConfigsAksMachinePoolUpdateResponseDefault;

export type v1CloudConfigsAksMachinePoolUpdateResponse =
  v1CloudConfigsAksMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsAksMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachinePoolConfigEntity?: V1AzureMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAksMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of AKS machines
 */
export type v1CloudConfigsAksPoolMachinesListResponse200 = {
  data: V1AzureMachines;
  status: 200;
};

export type v1CloudConfigsAksPoolMachinesListResponseComposite =
  v1CloudConfigsAksPoolMachinesListResponse200;

export type v1CloudConfigsAksPoolMachinesListResponse =
  v1CloudConfigsAksPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsAksPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsAksPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsAksPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsAksPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsAksPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsAksPoolMachinesAddResponseComposite =
  v1CloudConfigsAksPoolMachinesAddResponse201;

export type v1CloudConfigsAksPoolMachinesAddResponse =
  v1CloudConfigsAksPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsAksPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachine?: V1AzureMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsAksPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Azure machine
 */
export type v1CloudConfigsAksPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAksPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsAksPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsAksPoolMachinesUidDeleteResponse =
  v1CloudConfigsAksPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAksPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAksPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified AKS machine
 */
export type v1CloudConfigsAksPoolMachinesUidGetResponse200 = {
  data: V1AzureMachine;
  status: 200;
};

export type v1CloudConfigsAksPoolMachinesUidGetResponseComposite =
  v1CloudConfigsAksPoolMachinesUidGetResponse200;

export type v1CloudConfigsAksPoolMachinesUidGetResponse =
  v1CloudConfigsAksPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAksPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAksPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsAksPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAksPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsAksPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsAksPoolMachinesUidUpdateResponse =
  v1CloudConfigsAksPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAksPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAksPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AzureMachine?: V1AzureMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsAksPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAksPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAksPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAksPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified AWS cloud config
 */
export type v1CloudConfigsAwsGetResponse200 = {
  data: V1AwsCloudConfig;
  status: 200;
};

export type v1CloudConfigsAwsGetResponseComposite =
  v1CloudConfigsAwsGetResponse200;

export type v1CloudConfigsAwsGetResponse =
  v1CloudConfigsAwsGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}`;
};

export const v1CloudConfigsAwsGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsGetResponse> => {
  const res = await fetch(getV1CloudConfigsAwsGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsAwsUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAwsUidClusterConfigResponseComposite =
  v1CloudConfigsAwsUidClusterConfigResponseDefault;

export type v1CloudConfigsAwsUidClusterConfigResponse =
  v1CloudConfigsAwsUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/clusterConfig`;
};

export const v1CloudConfigsAwsUidClusterConfig = async (
  configUid: string,
  v1AwsCloudClusterConfigEntity?: V1AwsCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsAwsUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsUidClusterConfigResponse;
};

/**
 * @summary Updates the hybrid configuration information of AWS cluster
 */
export type v1AwsCloudConfigsUidHybridConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsCloudConfigsUidHybridConfigResponseComposite =
  v1AwsCloudConfigsUidHybridConfigResponseDefault;

export type v1AwsCloudConfigsUidHybridConfigResponse =
  v1AwsCloudConfigsUidHybridConfigResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsUidHybridConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/clusterConfig/hybridConfig`;
};

export const v1AwsCloudConfigsUidHybridConfig = async (
  configUid: string,
  v1AwsCloudHybridConfigEntity?: V1AwsCloudHybridConfigEntity,
  options?: RequestInit,
): Promise<v1AwsCloudConfigsUidHybridConfigResponse> => {
  const res = await fetch(getV1AwsCloudConfigsUidHybridConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsCloudHybridConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCloudConfigsUidHybridConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCloudConfigsUidHybridConfigResponse;
};

/**
 * @summary Creates an Hybrid AWS cloud config's Edge-Native machine pool
 */
export type v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponseComposite =
  v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse201;

export type v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse =
  v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeUidMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools`;
};

export const v1AwsCloudConfigsEdgeNativeUidMachinePoolCreate = async (
  configUid: string,
  v1HybridEdgeNativeMachinePoolConfigEntity?: V1HybridEdgeNativeMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeUidMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1HybridEdgeNativeMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCloudConfigsEdgeNativeUidMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified Edge-Native machine pool of hybrid AWS cluster
 */
export type v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponseComposite =
  v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponseDefault;

export type v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse =
  v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const v1AwsCloudConfigsEdgeNativeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeMachinePoolDeleteUrl(
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCloudConfigsEdgeNativeMachinePoolDeleteResponse;
};

/**
 * @summary Returns the specified AWS Cluster's Edge-Native machine pool configuration
 */
export type v1AwsCloudConfigsEdgeNativeMachinePoolGetResponse200 = {
  data: V1HybridEdgeNativeMachinePoolConfig;
  status: 200;
};

export type v1AwsCloudConfigsEdgeNativeMachinePoolGetResponseComposite =
  v1AwsCloudConfigsEdgeNativeMachinePoolGetResponse200;

export type v1AwsCloudConfigsEdgeNativeMachinePoolGetResponse =
  v1AwsCloudConfigsEdgeNativeMachinePoolGetResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeMachinePoolGetUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const v1AwsCloudConfigsEdgeNativeMachinePoolGet = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1AwsCloudConfigsEdgeNativeMachinePoolGetResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeMachinePoolGetUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCloudConfigsEdgeNativeMachinePoolGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCloudConfigsEdgeNativeMachinePoolGetResponse;
};

/**
 * @summary Updates the specified Hybrid AWS cluster cloud config's Edge-Native machine pool
 */
export type v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponseComposite =
  v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponseDefault;

export type v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse =
  v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCloudConfigsEdgeNativeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/edge-native/machinePools/${machinePoolName}`;
};

export const v1AwsCloudConfigsEdgeNativeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1HybridEdgeNativeMachinePoolConfigUpdateEntity?: V1HybridEdgeNativeMachinePoolConfigUpdateEntity,
  options?: RequestInit,
): Promise<v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1AwsCloudConfigsEdgeNativeMachinePoolUpdateUrl(
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1HybridEdgeNativeMachinePoolConfigUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCloudConfigsEdgeNativeMachinePoolUpdateResponse;
};

/**
 * @summary Creates an AWS cloud config's machine pool
 */
export type v1CloudConfigsAwsMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsAwsMachinePoolCreateResponseComposite =
  v1CloudConfigsAwsMachinePoolCreateResponse201;

export type v1CloudConfigsAwsMachinePoolCreateResponse =
  v1CloudConfigsAwsMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools`;
};

export const v1CloudConfigsAwsMachinePoolCreate = async (
  configUid: string,
  v1AwsMachinePoolConfigEntity?: V1AwsMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsAwsMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsMachinePoolConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsAwsMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAwsMachinePoolDeleteResponseComposite =
  v1CloudConfigsAwsMachinePoolDeleteResponseDefault;

export type v1CloudConfigsAwsMachinePoolDeleteResponse =
  v1CloudConfigsAwsMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsAwsMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified AWS cloud config's machine pool
 */
export type v1CloudConfigsAwsMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAwsMachinePoolUpdateResponseComposite =
  v1CloudConfigsAwsMachinePoolUpdateResponseDefault;

export type v1CloudConfigsAwsMachinePoolUpdateResponse =
  v1CloudConfigsAwsMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsAwsMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1AwsMachinePoolConfigEntity?: V1AwsMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of AWS machines
 */
export type v1CloudConfigsAwsPoolMachinesListResponse200 = {
  data: V1AwsMachines;
  status: 200;
};

export type v1CloudConfigsAwsPoolMachinesListResponseComposite =
  v1CloudConfigsAwsPoolMachinesListResponse200;

export type v1CloudConfigsAwsPoolMachinesListResponse =
  v1CloudConfigsAwsPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsAwsPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsAwsPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsAwsPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsAwsPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsAwsPoolMachinesAddResponseComposite =
  v1CloudConfigsAwsPoolMachinesAddResponse201;

export type v1CloudConfigsAwsPoolMachinesAddResponse =
  v1CloudConfigsAwsPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsAwsPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AwsMachine?: V1AwsMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified AWS machine
 */
export type v1CloudConfigsAwsPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAwsPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsAwsPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsAwsPoolMachinesUidDeleteResponse =
  v1CloudConfigsAwsPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAwsPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified AWS machine
 */
export type v1CloudConfigsAwsPoolMachinesUidGetResponse200 = {
  data: V1AwsMachine;
  status: 200;
};

export type v1CloudConfigsAwsPoolMachinesUidGetResponseComposite =
  v1CloudConfigsAwsPoolMachinesUidGetResponse200;

export type v1CloudConfigsAwsPoolMachinesUidGetResponse =
  v1CloudConfigsAwsPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAwsPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsAwsPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAwsPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsAwsPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsAwsPoolMachinesUidUpdateResponse =
  v1CloudConfigsAwsPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAwsPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/aws/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAwsPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AwsMachine?: V1AwsMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsAwsPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAwsPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAwsPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAwsPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Azure cloud config
 */
export type v1CloudConfigsAzureGetResponse200 = {
  data: V1AzureCloudConfig;
  status: 200;
};

export type v1CloudConfigsAzureGetResponseComposite =
  v1CloudConfigsAzureGetResponse200;

export type v1CloudConfigsAzureGetResponse =
  v1CloudConfigsAzureGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}`;
};

export const v1CloudConfigsAzureGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAzureGetResponse> => {
  const res = await fetch(getV1CloudConfigsAzureGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzureGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsAzureUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAzureUidClusterConfigResponseComposite =
  v1CloudConfigsAzureUidClusterConfigResponseDefault;

export type v1CloudConfigsAzureUidClusterConfigResponse =
  v1CloudConfigsAzureUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/clusterConfig`;
};

export const v1CloudConfigsAzureUidClusterConfig = async (
  configUid: string,
  v1AzureCloudClusterConfigEntity?: V1AzureCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAzureUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzureUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzureUidClusterConfigResponse;
};

/**
 * @summary Creates an Azure cloud config's machine pool
 */
export type v1CloudConfigsAzureMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsAzureMachinePoolCreateResponseComposite =
  v1CloudConfigsAzureMachinePoolCreateResponse201;

export type v1CloudConfigsAzureMachinePoolCreateResponse =
  v1CloudConfigsAzureMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools`;
};

export const v1CloudConfigsAzureMachinePoolCreate = async (
  configUid: string,
  v1AzureMachinePoolConfigEntity?: V1AzureMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAzureMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzureMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzureMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsAzureMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAzureMachinePoolDeleteResponseComposite =
  v1CloudConfigsAzureMachinePoolDeleteResponseDefault;

export type v1CloudConfigsAzureMachinePoolDeleteResponse =
  v1CloudConfigsAzureMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsAzureMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAzureMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzureMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzureMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Azure cloud config's machine pool
 */
export type v1CloudConfigsAzureMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAzureMachinePoolUpdateResponseComposite =
  v1CloudConfigsAzureMachinePoolUpdateResponseDefault;

export type v1CloudConfigsAzureMachinePoolUpdateResponse =
  v1CloudConfigsAzureMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzureMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsAzureMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachinePoolConfigEntity?: V1AzureMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsAzureMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzureMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzureMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzureMachinePoolUpdateResponse;
};

/**
 * Returns all the Azure machines restricted to the user role and filters.
 * @summary Retrieves a list of Azure machines
 */
export type v1CloudConfigsAzurePoolMachinesListResponse200 = {
  data: V1AzureMachines;
  status: 200;
};

export type v1CloudConfigsAzurePoolMachinesListResponseComposite =
  v1CloudConfigsAzurePoolMachinesListResponse200;

export type v1CloudConfigsAzurePoolMachinesListResponse =
  v1CloudConfigsAzurePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsAzurePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsAzurePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsAzurePoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsAzurePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzurePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzurePoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsAzurePoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsAzurePoolMachinesAddResponseComposite =
  v1CloudConfigsAzurePoolMachinesAddResponse201;

export type v1CloudConfigsAzurePoolMachinesAddResponse =
  v1CloudConfigsAzurePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsAzurePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AzureMachine?: V1AzureMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsAzurePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzurePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzurePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Azure machine
 */
export type v1CloudConfigsAzurePoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAzurePoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsAzurePoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsAzurePoolMachinesUidDeleteResponse =
  v1CloudConfigsAzurePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAzurePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAzurePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzurePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzurePoolMachinesUidDeleteResponse;
};

/**
 * Returns a Azure machine for the specified uid.
 * @summary Returns the specified Azure machine
 */
export type v1CloudConfigsAzurePoolMachinesUidGetResponse200 = {
  data: V1AzureMachine;
  status: 200;
};

export type v1CloudConfigsAzurePoolMachinesUidGetResponseComposite =
  v1CloudConfigsAzurePoolMachinesUidGetResponse200;

export type v1CloudConfigsAzurePoolMachinesUidGetResponse =
  v1CloudConfigsAzurePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAzurePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsAzurePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzurePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzurePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type v1CloudConfigsAzurePoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsAzurePoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsAzurePoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsAzurePoolMachinesUidUpdateResponse =
  v1CloudConfigsAzurePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsAzurePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/azure/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsAzurePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AzureMachine?: V1AzureMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsAzurePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsAzurePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AzureMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsAzurePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsAzurePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Custom cloud config
 */
export type v1CloudConfigsCustomGetResponse200 = {
  data: V1CustomCloudConfig;
  status: 200;
};

export type v1CloudConfigsCustomGetResponseComposite =
  v1CloudConfigsCustomGetResponse200;

export type v1CloudConfigsCustomGetResponse =
  v1CloudConfigsCustomGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomGetUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}`;
};

export const v1CloudConfigsCustomGet = async (
  cloudType: string,
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomGetResponse> => {
  const res = await fetch(getV1CloudConfigsCustomGetUrl(cloudType, configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsCustomUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsCustomUidClusterConfigResponseComposite =
  v1CloudConfigsCustomUidClusterConfigResponseDefault;

export type v1CloudConfigsCustomUidClusterConfigResponse =
  v1CloudConfigsCustomUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomUidClusterConfigUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/clusterConfig`;
};

export const v1CloudConfigsCustomUidClusterConfig = async (
  cloudType: string,
  configUid: string,
  v1CustomCloudClusterConfigEntity?: V1CustomCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomUidClusterConfigUrl(cloudType, configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomUidClusterConfigResponse;
};

/**
 * @summary Creates an Custom cloud config's machine pool
 */
export type v1CloudConfigsCustomMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsCustomMachinePoolCreateResponseComposite =
  v1CloudConfigsCustomMachinePoolCreateResponse201;

export type v1CloudConfigsCustomMachinePoolCreateResponse =
  v1CloudConfigsCustomMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomMachinePoolCreateUrl = (
  cloudType: string,
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools`;
};

export const v1CloudConfigsCustomMachinePoolCreate = async (
  cloudType: string,
  configUid: string,
  v1CustomMachinePoolConfigEntity?: V1CustomMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomMachinePoolCreateUrl(cloudType, configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsCustomMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsCustomMachinePoolDeleteResponseComposite =
  v1CloudConfigsCustomMachinePoolDeleteResponseDefault;

export type v1CloudConfigsCustomMachinePoolDeleteResponse =
  v1CloudConfigsCustomMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomMachinePoolDeleteUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsCustomMachinePoolDelete = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomMachinePoolDeleteUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Custom cloud config's machine pool
 */
export type v1CloudConfigsCustomMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsCustomMachinePoolUpdateResponseComposite =
  v1CloudConfigsCustomMachinePoolUpdateResponseDefault;

export type v1CloudConfigsCustomMachinePoolUpdateResponse =
  v1CloudConfigsCustomMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomMachinePoolUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsCustomMachinePoolUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  v1CustomMachinePoolConfigEntity?: V1CustomMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomMachinePoolUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Custom machines
 */
export type v1CloudConfigsCustomPoolMachinesListResponse200 = {
  data: V1CustomMachines;
  status: 200;
};

export type v1CloudConfigsCustomPoolMachinesListResponseComposite =
  v1CloudConfigsCustomPoolMachinesListResponse200;

export type v1CloudConfigsCustomPoolMachinesListResponse =
  v1CloudConfigsCustomPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesListUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsCustomPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsCustomPoolMachinesList = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsCustomPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesListUrl(
      cloudType,
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsCustomPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsCustomPoolMachinesAddResponseComposite =
  v1CloudConfigsCustomPoolMachinesAddResponse201;

export type v1CloudConfigsCustomPoolMachinesAddResponse =
  v1CloudConfigsCustomPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesAddUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsCustomPoolMachinesAdd = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  v1CustomMachine?: V1CustomMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesAddUrl(
      cloudType,
      configUid,
      machinePoolName,
    ),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Custom machine
 */
export type v1CloudConfigsCustomPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsCustomPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsCustomPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsCustomPoolMachinesUidDeleteResponse =
  v1CloudConfigsCustomPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesUidDeleteUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsCustomPoolMachinesUidDelete = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesUidDeleteUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified Custom machine
 */
export type v1CloudConfigsCustomPoolMachinesUidGetResponse200 = {
  data: V1CustomMachine;
  status: 200;
};

export type v1CloudConfigsCustomPoolMachinesUidGetResponseComposite =
  v1CloudConfigsCustomPoolMachinesUidGetResponse200;

export type v1CloudConfigsCustomPoolMachinesUidGetResponse =
  v1CloudConfigsCustomPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesUidGetUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsCustomPoolMachinesUidGet = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesUidGetUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsCustomPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsCustomPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsCustomPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsCustomPoolMachinesUidUpdateResponse =
  v1CloudConfigsCustomPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsCustomPoolMachinesUidUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/cloudTypes/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsCustomPoolMachinesUidUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1CustomMachine?: V1CustomMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsCustomPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsCustomPoolMachinesUidUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsCustomPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsCustomPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified edge-native cloud config
 */
export type v1CloudConfigsEdgeNativeGetResponse200 = {
  data: V1EdgeNativeCloudConfig;
  status: 200;
};

export type v1CloudConfigsEdgeNativeGetResponseComposite =
  v1CloudConfigsEdgeNativeGetResponse200;

export type v1CloudConfigsEdgeNativeGetResponse =
  v1CloudConfigsEdgeNativeGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}`;
};

export const v1CloudConfigsEdgeNativeGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativeGetResponse> => {
  const res = await fetch(getV1CloudConfigsEdgeNativeGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativeGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsEdgeNativeUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEdgeNativeUidClusterConfigResponseComposite =
  v1CloudConfigsEdgeNativeUidClusterConfigResponseDefault;

export type v1CloudConfigsEdgeNativeUidClusterConfigResponse =
  v1CloudConfigsEdgeNativeUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/clusterConfig`;
};

export const v1CloudConfigsEdgeNativeUidClusterConfig = async (
  configUid: string,
  v1EdgeNativeCloudClusterConfigEntity?: V1EdgeNativeCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativeUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativeUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativeUidClusterConfigResponse;
};

/**
 * @summary Creates a edge-native cloud config's machine pool
 */
export type v1CloudConfigsEdgeNativeMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsEdgeNativeMachinePoolCreateResponseComposite =
  v1CloudConfigsEdgeNativeMachinePoolCreateResponse201;

export type v1CloudConfigsEdgeNativeMachinePoolCreateResponse =
  v1CloudConfigsEdgeNativeMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools`;
};

export const v1CloudConfigsEdgeNativeMachinePoolCreate = async (
  configUid: string,
  v1EdgeNativeMachinePoolConfigEntity?: V1EdgeNativeMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativeMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativeMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativeMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsEdgeNativeMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEdgeNativeMachinePoolDeleteResponseComposite =
  v1CloudConfigsEdgeNativeMachinePoolDeleteResponseDefault;

export type v1CloudConfigsEdgeNativeMachinePoolDeleteResponse =
  v1CloudConfigsEdgeNativeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsEdgeNativeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativeMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified edge-native cloud config's machine pool
 */
export type v1CloudConfigsEdgeNativeMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEdgeNativeMachinePoolUpdateResponseComposite =
  v1CloudConfigsEdgeNativeMachinePoolUpdateResponseDefault;

export type v1CloudConfigsEdgeNativeMachinePoolUpdateResponse =
  v1CloudConfigsEdgeNativeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsEdgeNativeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1EdgeNativeMachinePoolConfigEntity?: V1EdgeNativeMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativeMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativeMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of edge-native machines
 */
export type v1CloudConfigsEdgeNativePoolMachinesListResponse200 = {
  data: V1EdgeNativeMachines;
  status: 200;
};

export type v1CloudConfigsEdgeNativePoolMachinesListResponseComposite =
  v1CloudConfigsEdgeNativePoolMachinesListResponse200;

export type v1CloudConfigsEdgeNativePoolMachinesListResponse =
  v1CloudConfigsEdgeNativePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsEdgeNativePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesListUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativePoolMachinesListResponse;
};

/**
 * @summary Adds the edge-native machine to cloud config's machine pool
 */
export type v1CloudConfigsEdgeNativePoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsEdgeNativePoolMachinesAddResponseComposite =
  v1CloudConfigsEdgeNativePoolMachinesAddResponse201;

export type v1CloudConfigsEdgeNativePoolMachinesAddResponse =
  v1CloudConfigsEdgeNativePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsEdgeNativePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1EdgeNativeMachine?: V1EdgeNativeMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified edge-native machine
 */
export type v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponse =
  v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsEdgeNativePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified edge-native machine
 */
export type v1CloudConfigsEdgeNativePoolMachinesUidGetResponse200 = {
  data: V1EdgeNativeMachine;
  status: 200;
};

export type v1CloudConfigsEdgeNativePoolMachinesUidGetResponseComposite =
  v1CloudConfigsEdgeNativePoolMachinesUidGetResponse200;

export type v1CloudConfigsEdgeNativePoolMachinesUidGetResponse =
  v1CloudConfigsEdgeNativePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsEdgeNativePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponse =
  v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEdgeNativePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/edge-native/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsEdgeNativePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1EdgeNativeMachine?: V1EdgeNativeMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEdgeNativePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeNativeMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEdgeNativePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified EKS cloud config
 */
export type v1CloudConfigsEksGetResponse200 = {
  data: V1EksCloudConfig;
  status: 200;
};

export type v1CloudConfigsEksGetResponseComposite =
  v1CloudConfigsEksGetResponse200;

export type v1CloudConfigsEksGetResponse =
  v1CloudConfigsEksGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}`;
};

export const v1CloudConfigsEksGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEksGetResponse> => {
  const res = await fetch(getV1CloudConfigsEksGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsEksUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEksUidClusterConfigResponseComposite =
  v1CloudConfigsEksUidClusterConfigResponseDefault;

export type v1CloudConfigsEksUidClusterConfigResponse =
  v1CloudConfigsEksUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/clusterConfig`;
};

export const v1CloudConfigsEksUidClusterConfig = async (
  configUid: string,
  v1EksCloudClusterConfigEntity?: V1EksCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsEksUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsEksUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EksCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksUidClusterConfigResponse;
};

/**
 * @summary Updates EKS cloud config's fargate profiles
 */
export type v1CloudConfigsEksUidFargateProfilesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEksUidFargateProfilesUpdateResponseComposite =
  v1CloudConfigsEksUidFargateProfilesUpdateResponseDefault;

export type v1CloudConfigsEksUidFargateProfilesUpdateResponse =
  v1CloudConfigsEksUidFargateProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksUidFargateProfilesUpdateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/fargateProfiles`;
};

export const v1CloudConfigsEksUidFargateProfilesUpdate = async (
  configUid: string,
  v1EksFargateProfiles?: V1EksFargateProfiles,
  options?: RequestInit,
): Promise<v1CloudConfigsEksUidFargateProfilesUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksUidFargateProfilesUpdateUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EksFargateProfiles),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksUidFargateProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksUidFargateProfilesUpdateResponse;
};

/**
 * @summary Creates an EKS cloud config's machine pool
 */
export type v1CloudConfigsEksMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsEksMachinePoolCreateResponseComposite =
  v1CloudConfigsEksMachinePoolCreateResponse201;

export type v1CloudConfigsEksMachinePoolCreateResponse =
  v1CloudConfigsEksMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools`;
};

export const v1CloudConfigsEksMachinePoolCreate = async (
  configUid: string,
  v1EksMachinePoolConfigEntity?: V1EksMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsEksMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsEksMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EksMachinePoolConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsEksMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEksMachinePoolDeleteResponseComposite =
  v1CloudConfigsEksMachinePoolDeleteResponseDefault;

export type v1CloudConfigsEksMachinePoolDeleteResponse =
  v1CloudConfigsEksMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsEksMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEksMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified EKS cloud config's machine pool
 */
export type v1CloudConfigsEksMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEksMachinePoolUpdateResponseComposite =
  v1CloudConfigsEksMachinePoolUpdateResponseDefault;

export type v1CloudConfigsEksMachinePoolUpdateResponse =
  v1CloudConfigsEksMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsEksMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1EksMachinePoolConfigEntity?: V1EksMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsEksMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EksMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of EKS machines
 */
export type v1CloudConfigsEksPoolMachinesListResponse200 = {
  data: V1AwsMachines;
  status: 200;
};

export type v1CloudConfigsEksPoolMachinesListResponseComposite =
  v1CloudConfigsEksPoolMachinesListResponse200;

export type v1CloudConfigsEksPoolMachinesListResponse =
  v1CloudConfigsEksPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsEksPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsEksPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsEksPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsEksPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsEksPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsEksPoolMachinesAddResponseComposite =
  v1CloudConfigsEksPoolMachinesAddResponse201;

export type v1CloudConfigsEksPoolMachinesAddResponse =
  v1CloudConfigsEksPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsEksPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1AwsMachine?: V1AwsMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsEksPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified EKS machine
 */
export type v1CloudConfigsEksPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEksPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsEksPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsEksPoolMachinesUidDeleteResponse =
  v1CloudConfigsEksPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsEksPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEksPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified EKS machine
 */
export type v1CloudConfigsEksPoolMachinesUidGetResponse200 = {
  data: V1AwsMachine;
  status: 200;
};

export type v1CloudConfigsEksPoolMachinesUidGetResponseComposite =
  v1CloudConfigsEksPoolMachinesUidGetResponse200;

export type v1CloudConfigsEksPoolMachinesUidGetResponse =
  v1CloudConfigsEksPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsEksPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsEksPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsEksPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsEksPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsEksPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsEksPoolMachinesUidUpdateResponse =
  v1CloudConfigsEksPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsEksPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/eks/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsEksPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1AwsMachine?: V1AwsMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsEksPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsEksPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1AwsMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsEksPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsEksPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified GCP cloud config
 */
export type v1CloudConfigsGcpGetResponse200 = {
  data: V1GcpCloudConfig;
  status: 200;
};

export type v1CloudConfigsGcpGetResponseComposite =
  v1CloudConfigsGcpGetResponse200;

export type v1CloudConfigsGcpGetResponse =
  v1CloudConfigsGcpGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}`;
};

export const v1CloudConfigsGcpGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpGetResponse> => {
  const res = await fetch(getV1CloudConfigsGcpGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsGcpUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGcpUidClusterConfigResponseComposite =
  v1CloudConfigsGcpUidClusterConfigResponseDefault;

export type v1CloudConfigsGcpUidClusterConfigResponse =
  v1CloudConfigsGcpUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/clusterConfig`;
};

export const v1CloudConfigsGcpUidClusterConfig = async (
  configUid: string,
  v1GcpCloudClusterConfigEntity?: V1GcpCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsGcpUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpUidClusterConfigResponse;
};

/**
 * @summary Creates a Gcp cloud config's machine pool
 */
export type v1CloudConfigsGcpMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsGcpMachinePoolCreateResponseComposite =
  v1CloudConfigsGcpMachinePoolCreateResponse201;

export type v1CloudConfigsGcpMachinePoolCreateResponse =
  v1CloudConfigsGcpMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools`;
};

export const v1CloudConfigsGcpMachinePoolCreate = async (
  configUid: string,
  v1GcpMachinePoolConfigEntity?: V1GcpMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsGcpMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpMachinePoolConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsGcpMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGcpMachinePoolDeleteResponseComposite =
  v1CloudConfigsGcpMachinePoolDeleteResponseDefault;

export type v1CloudConfigsGcpMachinePoolDeleteResponse =
  v1CloudConfigsGcpMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsGcpMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified GCP cloud config's machine pool
 */
export type v1CloudConfigsGcpMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGcpMachinePoolUpdateResponseComposite =
  v1CloudConfigsGcpMachinePoolUpdateResponseDefault;

export type v1CloudConfigsGcpMachinePoolUpdateResponse =
  v1CloudConfigsGcpMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsGcpMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachinePoolConfigEntity?: V1GcpMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of GCP machines
 */
export type v1CloudConfigsGcpPoolMachinesListResponse200 = {
  data: V1GcpMachines;
  status: 200;
};

export type v1CloudConfigsGcpPoolMachinesListResponseComposite =
  v1CloudConfigsGcpPoolMachinesListResponse200;

export type v1CloudConfigsGcpPoolMachinesListResponse =
  v1CloudConfigsGcpPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsGcpPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsGcpPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsGcpPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsGcpPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsGcpPoolMachinesAddResponseComposite =
  v1CloudConfigsGcpPoolMachinesAddResponse201;

export type v1CloudConfigsGcpPoolMachinesAddResponse =
  v1CloudConfigsGcpPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsGcpPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachine?: V1GcpMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified GCP machine
 */
export type v1CloudConfigsGcpPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGcpPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsGcpPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsGcpPoolMachinesUidDeleteResponse =
  v1CloudConfigsGcpPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGcpPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified GCP machine
 */
export type v1CloudConfigsGcpPoolMachinesUidGetResponse200 = {
  data: V1GcpMachine;
  status: 200;
};

export type v1CloudConfigsGcpPoolMachinesUidGetResponseComposite =
  v1CloudConfigsGcpPoolMachinesUidGetResponse200;

export type v1CloudConfigsGcpPoolMachinesUidGetResponse =
  v1CloudConfigsGcpPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGcpPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsGcpPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGcpPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsGcpPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsGcpPoolMachinesUidUpdateResponse =
  v1CloudConfigsGcpPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGcpPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gcp/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGcpPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1GcpMachine?: V1GcpMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsGcpPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGcpPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGcpPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGcpPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Generic cloud config
 */
export type v1CloudConfigsGenericGetResponse200 = {
  data: V1GenericCloudConfig;
  status: 200;
};

export type v1CloudConfigsGenericGetResponseComposite =
  v1CloudConfigsGenericGetResponse200;

export type v1CloudConfigsGenericGetResponse =
  v1CloudConfigsGenericGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}`;
};

export const v1CloudConfigsGenericGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericGetResponse> => {
  const res = await fetch(getV1CloudConfigsGenericGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsGenericUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGenericUidClusterConfigResponseComposite =
  v1CloudConfigsGenericUidClusterConfigResponseDefault;

export type v1CloudConfigsGenericUidClusterConfigResponse =
  v1CloudConfigsGenericUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/clusterConfig`;
};

export const v1CloudConfigsGenericUidClusterConfig = async (
  configUid: string,
  v1GenericCloudClusterConfigEntity?: V1GenericCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericUidClusterConfigResponse;
};

/**
 * @summary Creates a generic cloud config's machine pool
 */
export type v1CloudConfigsGenericMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsGenericMachinePoolCreateResponseComposite =
  v1CloudConfigsGenericMachinePoolCreateResponse201;

export type v1CloudConfigsGenericMachinePoolCreateResponse =
  v1CloudConfigsGenericMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools`;
};

export const v1CloudConfigsGenericMachinePoolCreate = async (
  configUid: string,
  v1GenericMachinePoolConfigEntity?: V1GenericMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsGenericMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGenericMachinePoolDeleteResponseComposite =
  v1CloudConfigsGenericMachinePoolDeleteResponseDefault;

export type v1CloudConfigsGenericMachinePoolDeleteResponse =
  v1CloudConfigsGenericMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsGenericMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified generic cloud config's machine pool
 */
export type v1CloudConfigsGenericMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGenericMachinePoolUpdateResponseComposite =
  v1CloudConfigsGenericMachinePoolUpdateResponseDefault;

export type v1CloudConfigsGenericMachinePoolUpdateResponse =
  v1CloudConfigsGenericMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsGenericMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1GenericMachinePoolConfigEntity?: V1GenericMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Generic machines
 */
export type v1CloudConfigsGenericPoolMachinesListResponse200 = {
  data: V1GenericMachines;
  status: 200;
};

export type v1CloudConfigsGenericPoolMachinesListResponseComposite =
  v1CloudConfigsGenericPoolMachinesListResponse200;

export type v1CloudConfigsGenericPoolMachinesListResponse =
  v1CloudConfigsGenericPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsGenericPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsGenericPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsGenericPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsGenericPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsGenericPoolMachinesAddResponseComposite =
  v1CloudConfigsGenericPoolMachinesAddResponse201;

export type v1CloudConfigsGenericPoolMachinesAddResponse =
  v1CloudConfigsGenericPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsGenericPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1GenericMachine?: V1GenericMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified machine
 */
export type v1CloudConfigsGenericPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGenericPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsGenericPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsGenericPoolMachinesUidDeleteResponse =
  v1CloudConfigsGenericPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGenericPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified generic machine
 */
export type v1CloudConfigsGenericPoolMachinesUidGetResponse200 = {
  data: V1GenericMachine;
  status: 200;
};

export type v1CloudConfigsGenericPoolMachinesUidGetResponseComposite =
  v1CloudConfigsGenericPoolMachinesUidGetResponse200;

export type v1CloudConfigsGenericPoolMachinesUidGetResponse =
  v1CloudConfigsGenericPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGenericPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsGenericPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGenericPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsGenericPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsGenericPoolMachinesUidUpdateResponse =
  v1CloudConfigsGenericPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGenericPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/generic/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGenericPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1GenericMachine?: V1GenericMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsGenericPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGenericPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GenericMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGenericPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGenericPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified GKE cloud config
 */
export type v1CloudConfigsGkeGetResponse200 = {
  data: V1GcpCloudConfig;
  status: 200;
};

export type v1CloudConfigsGkeGetResponseComposite =
  v1CloudConfigsGkeGetResponse200;

export type v1CloudConfigsGkeGetResponse =
  v1CloudConfigsGkeGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}`;
};

export const v1CloudConfigsGkeGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGkeGetResponse> => {
  const res = await fetch(getV1CloudConfigsGkeGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkeGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsGkeUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGkeUidClusterConfigResponseComposite =
  v1CloudConfigsGkeUidClusterConfigResponseDefault;

export type v1CloudConfigsGkeUidClusterConfigResponse =
  v1CloudConfigsGkeUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/clusterConfig`;
};

export const v1CloudConfigsGkeUidClusterConfig = async (
  configUid: string,
  v1GcpCloudClusterConfigEntity?: V1GcpCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGkeUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsGkeUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkeUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkeUidClusterConfigResponse;
};

/**
 * @summary Creates an GKE cloud config's machine pool
 */
export type v1CloudConfigsGkeMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsGkeMachinePoolCreateResponseComposite =
  v1CloudConfigsGkeMachinePoolCreateResponse201;

export type v1CloudConfigsGkeMachinePoolCreateResponse =
  v1CloudConfigsGkeMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeMachinePoolCreateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools`;
};

export const v1CloudConfigsGkeMachinePoolCreate = async (
  configUid: string,
  v1GcpMachinePoolConfigEntity?: V1GcpMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGkeMachinePoolCreateResponse> => {
  const res = await fetch(getV1CloudConfigsGkeMachinePoolCreateUrl(configUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpMachinePoolConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkeMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkeMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsGkeMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGkeMachinePoolDeleteResponseComposite =
  v1CloudConfigsGkeMachinePoolDeleteResponseDefault;

export type v1CloudConfigsGkeMachinePoolDeleteResponse =
  v1CloudConfigsGkeMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsGkeMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGkeMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkeMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkeMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkeMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified GKE cloud config's machine pool
 */
export type v1CloudConfigsGkeMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGkeMachinePoolUpdateResponseComposite =
  v1CloudConfigsGkeMachinePoolUpdateResponseDefault;

export type v1CloudConfigsGkeMachinePoolUpdateResponse =
  v1CloudConfigsGkeMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkeMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsGkeMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachinePoolConfigEntity?: V1GcpMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsGkeMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkeMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkeMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkeMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of GKE machines
 */
export type v1CloudConfigsGkePoolMachinesListResponse200 = {
  data: V1GcpMachines;
  status: 200;
};

export type v1CloudConfigsGkePoolMachinesListResponseComposite =
  v1CloudConfigsGkePoolMachinesListResponse200;

export type v1CloudConfigsGkePoolMachinesListResponse =
  v1CloudConfigsGkePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsGkePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsGkePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsGkePoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsGkePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesListUrl(configUid, machinePoolName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkePoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsGkePoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsGkePoolMachinesAddResponseComposite =
  v1CloudConfigsGkePoolMachinesAddResponse201;

export type v1CloudConfigsGkePoolMachinesAddResponse =
  v1CloudConfigsGkePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsGkePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1GcpMachine?: V1GcpMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsGkePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Gcp machine
 */
export type v1CloudConfigsGkePoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGkePoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsGkePoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsGkePoolMachinesUidDeleteResponse =
  v1CloudConfigsGkePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGkePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGkePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified GKE machine
 */
export type v1CloudConfigsGkePoolMachinesUidGetResponse200 = {
  data: V1GcpMachine;
  status: 200;
};

export type v1CloudConfigsGkePoolMachinesUidGetResponseComposite =
  v1CloudConfigsGkePoolMachinesUidGetResponse200;

export type v1CloudConfigsGkePoolMachinesUidGetResponse =
  v1CloudConfigsGkePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGkePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsGkePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsGkePoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsGkePoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsGkePoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsGkePoolMachinesUidUpdateResponse =
  v1CloudConfigsGkePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsGkePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/gke/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsGkePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1GcpMachine?: V1GcpMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsGkePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsGkePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1GcpMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsGkePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsGkePoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Maas cloud config
 */
export type v1CloudConfigsMaasGetResponse200 = {
  data: V1MaasCloudConfig;
  status: 200;
};

export type v1CloudConfigsMaasGetResponseComposite =
  v1CloudConfigsMaasGetResponse200;

export type v1CloudConfigsMaasGetResponse =
  v1CloudConfigsMaasGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}`;
};

export const v1CloudConfigsMaasGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasGetResponse> => {
  const res = await fetch(getV1CloudConfigsMaasGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsMaasUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsMaasUidClusterConfigResponseComposite =
  v1CloudConfigsMaasUidClusterConfigResponseDefault;

export type v1CloudConfigsMaasUidClusterConfigResponse =
  v1CloudConfigsMaasUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasUidClusterConfigUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/clusterConfig`;
};

export const v1CloudConfigsMaasUidClusterConfig = async (
  configUid: string,
  v1MaasCloudClusterConfigEntity?: V1MaasCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasUidClusterConfigResponse> => {
  const res = await fetch(getV1CloudConfigsMaasUidClusterConfigUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MaasCloudClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasUidClusterConfigResponse;
};

/**
 * @summary Creates an Maas cloud config's machine pool
 */
export type v1CloudConfigsMaasMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsMaasMachinePoolCreateResponseComposite =
  v1CloudConfigsMaasMachinePoolCreateResponse201;

export type v1CloudConfigsMaasMachinePoolCreateResponse =
  v1CloudConfigsMaasMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools`;
};

export const v1CloudConfigsMaasMachinePoolCreate = async (
  configUid: string,
  v1MaasMachinePoolConfigEntity?: V1MaasMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MaasMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsMaasMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsMaasMachinePoolDeleteResponseComposite =
  v1CloudConfigsMaasMachinePoolDeleteResponseDefault;

export type v1CloudConfigsMaasMachinePoolDeleteResponse =
  v1CloudConfigsMaasMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsMaasMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified Maas cloud config's machine pool
 */
export type v1CloudConfigsMaasMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsMaasMachinePoolUpdateResponseComposite =
  v1CloudConfigsMaasMachinePoolUpdateResponseDefault;

export type v1CloudConfigsMaasMachinePoolUpdateResponse =
  v1CloudConfigsMaasMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsMaasMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1MaasMachinePoolConfigEntity?: V1MaasMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MaasMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of Maas machines
 */
export type v1CloudConfigsMaasPoolMachinesListResponse200 = {
  data: V1MaasMachines;
  status: 200;
};

export type v1CloudConfigsMaasPoolMachinesListResponseComposite =
  v1CloudConfigsMaasPoolMachinesListResponse200;

export type v1CloudConfigsMaasPoolMachinesListResponse =
  v1CloudConfigsMaasPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsMaasPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsMaasPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsMaasPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsMaasPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsMaasPoolMachinesAddResponseComposite =
  v1CloudConfigsMaasPoolMachinesAddResponse201;

export type v1CloudConfigsMaasPoolMachinesAddResponse =
  v1CloudConfigsMaasPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsMaasPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1MaasMachine?: V1MaasMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MaasMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified Maas machine
 */
export type v1CloudConfigsMaasPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsMaasPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsMaasPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsMaasPoolMachinesUidDeleteResponse =
  v1CloudConfigsMaasPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsMaasPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified Maas machine
 */
export type v1CloudConfigsMaasPoolMachinesUidGetResponse200 = {
  data: V1MaasMachine;
  status: 200;
};

export type v1CloudConfigsMaasPoolMachinesUidGetResponseComposite =
  v1CloudConfigsMaasPoolMachinesUidGetResponse200;

export type v1CloudConfigsMaasPoolMachinesUidGetResponse =
  v1CloudConfigsMaasPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsMaasPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsMaasPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsMaasPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsMaasPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsMaasPoolMachinesUidUpdateResponse =
  v1CloudConfigsMaasPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMaasPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/maas/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsMaasPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1MaasMachine?: V1MaasMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsMaasPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMaasPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MaasMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMaasPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMaasPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified OpenStack cloud config
 */
export type v1CloudConfigsOpenStackGetResponse200 = {
  data: V1OpenStackCloudConfig;
  status: 200;
};

export type v1CloudConfigsOpenStackGetResponseComposite =
  v1CloudConfigsOpenStackGetResponse200;

export type v1CloudConfigsOpenStackGetResponse =
  v1CloudConfigsOpenStackGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}`;
};

export const v1CloudConfigsOpenStackGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackGetResponse> => {
  const res = await fetch(getV1CloudConfigsOpenStackGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsOpenStackUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsOpenStackUidClusterConfigResponseComposite =
  v1CloudConfigsOpenStackUidClusterConfigResponseDefault;

export type v1CloudConfigsOpenStackUidClusterConfigResponse =
  v1CloudConfigsOpenStackUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/clusterConfig`;
};

export const v1CloudConfigsOpenStackUidClusterConfig = async (
  configUid: string,
  v1OpenStackCloudClusterConfigEntity?: V1OpenStackCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackUidClusterConfigResponse;
};

/**
 * @summary Creates a OpenStack cloud config's machine pool
 */
export type v1CloudConfigsOpenStackMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsOpenStackMachinePoolCreateResponseComposite =
  v1CloudConfigsOpenStackMachinePoolCreateResponse201;

export type v1CloudConfigsOpenStackMachinePoolCreateResponse =
  v1CloudConfigsOpenStackMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools`;
};

export const v1CloudConfigsOpenStackMachinePoolCreate = async (
  configUid: string,
  v1OpenStackMachinePoolConfigEntity?: V1OpenStackMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsOpenStackMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsOpenStackMachinePoolDeleteResponseComposite =
  v1CloudConfigsOpenStackMachinePoolDeleteResponseDefault;

export type v1CloudConfigsOpenStackMachinePoolDeleteResponse =
  v1CloudConfigsOpenStackMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsOpenStackMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified OpenStack cloud config's machine pool
 */
export type v1CloudConfigsOpenStackMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsOpenStackMachinePoolUpdateResponseComposite =
  v1CloudConfigsOpenStackMachinePoolUpdateResponseDefault;

export type v1CloudConfigsOpenStackMachinePoolUpdateResponse =
  v1CloudConfigsOpenStackMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsOpenStackMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1OpenStackMachinePoolConfigEntity?: V1OpenStackMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of OpenStack machines
 */
export type v1CloudConfigsOpenStackPoolMachinesListResponse200 = {
  data: V1OpenStackMachines;
  status: 200;
};

export type v1CloudConfigsOpenStackPoolMachinesListResponseComposite =
  v1CloudConfigsOpenStackPoolMachinesListResponse200;

export type v1CloudConfigsOpenStackPoolMachinesListResponse =
  v1CloudConfigsOpenStackPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsOpenStackPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesListUrl(configUid, machinePoolName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackPoolMachinesListResponse;
};

/**
 * @summary Adds the OpenStack machine to cloud config's machine pool
 */
export type v1CloudConfigsOpenStackPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsOpenStackPoolMachinesAddResponseComposite =
  v1CloudConfigsOpenStackPoolMachinesAddResponse201;

export type v1CloudConfigsOpenStackPoolMachinesAddResponse =
  v1CloudConfigsOpenStackPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsOpenStackPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1OpenStackMachine?: V1OpenStackMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified OpenStack machine
 */
export type v1CloudConfigsOpenStackPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsOpenStackPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsOpenStackPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsOpenStackPoolMachinesUidDeleteResponse =
  v1CloudConfigsOpenStackPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsOpenStackPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackPoolMachinesUidDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified OpenStack machine
 */
export type v1CloudConfigsOpenStackPoolMachinesUidGetResponse200 = {
  data: V1OpenStackMachine;
  status: 200;
};

export type v1CloudConfigsOpenStackPoolMachinesUidGetResponseComposite =
  v1CloudConfigsOpenStackPoolMachinesUidGetResponse200;

export type v1CloudConfigsOpenStackPoolMachinesUidGetResponse =
  v1CloudConfigsOpenStackPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsOpenStackPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type v1CloudConfigsOpenStackPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsOpenStackPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsOpenStackPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsOpenStackPoolMachinesUidUpdateResponse =
  v1CloudConfigsOpenStackPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsOpenStackPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/openstack/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsOpenStackPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1OpenStackMachine?: V1OpenStackMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsOpenStackPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsOpenStackPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1OpenStackMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsOpenStackPoolMachinesUidUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsOpenStackPoolMachinesUidUpdateResponse;
};

/**
 * @summary Returns the specified Virtual cloud config
 */
export type v1CloudConfigsVirtualGetResponse200 = {
  data: V1VirtualCloudConfig;
  status: 200;
};

export type v1CloudConfigsVirtualGetResponseComposite =
  v1CloudConfigsVirtualGetResponse200;

export type v1CloudConfigsVirtualGetResponse =
  v1CloudConfigsVirtualGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}`;
};

export const v1CloudConfigsVirtualGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualGetResponse> => {
  const res = await fetch(getV1CloudConfigsVirtualGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsVirtualUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVirtualUidClusterConfigResponseComposite =
  v1CloudConfigsVirtualUidClusterConfigResponseDefault;

export type v1CloudConfigsVirtualUidClusterConfigResponse =
  v1CloudConfigsVirtualUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/clusterConfig`;
};

export const v1CloudConfigsVirtualUidClusterConfig = async (
  configUid: string,
  v1VirtualCloudClusterConfigEntity?: V1VirtualCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualUidClusterConfigResponse;
};

/**
 * @summary Creates a virtual cloud config's machine pool
 */
export type v1CloudConfigsVirtualMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsVirtualMachinePoolCreateResponseComposite =
  v1CloudConfigsVirtualMachinePoolCreateResponse201;

export type v1CloudConfigsVirtualMachinePoolCreateResponse =
  v1CloudConfigsVirtualMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools`;
};

export const v1CloudConfigsVirtualMachinePoolCreate = async (
  configUid: string,
  v1VirtualMachinePoolConfigEntity?: V1VirtualMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsVirtualMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVirtualMachinePoolDeleteResponseComposite =
  v1CloudConfigsVirtualMachinePoolDeleteResponseDefault;

export type v1CloudConfigsVirtualMachinePoolDeleteResponse =
  v1CloudConfigsVirtualMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsVirtualMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified virtual cloud config's machine pool
 */
export type v1CloudConfigsVirtualMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVirtualMachinePoolUpdateResponseComposite =
  v1CloudConfigsVirtualMachinePoolUpdateResponseDefault;

export type v1CloudConfigsVirtualMachinePoolUpdateResponse =
  v1CloudConfigsVirtualMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsVirtualMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1VirtualMachinePoolConfigEntity?: V1VirtualMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of virtual machines
 */
export type v1CloudConfigsVirtualPoolMachinesListResponse200 = {
  data: V1VirtualMachines;
  status: 200;
};

export type v1CloudConfigsVirtualPoolMachinesListResponseComposite =
  v1CloudConfigsVirtualPoolMachinesListResponse200;

export type v1CloudConfigsVirtualPoolMachinesListResponse =
  v1CloudConfigsVirtualPoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsVirtualPoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsVirtualPoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsVirtualPoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualPoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualPoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualPoolMachinesListResponse;
};

/**
 * @summary Adds the machine to cloud config's machine pool
 */
export type v1CloudConfigsVirtualPoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsVirtualPoolMachinesAddResponseComposite =
  v1CloudConfigsVirtualPoolMachinesAddResponse201;

export type v1CloudConfigsVirtualPoolMachinesAddResponse =
  v1CloudConfigsVirtualPoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsVirtualPoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1VirtualMachine?: V1VirtualMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualPoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualPoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualPoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified virtual machine
 */
export type v1CloudConfigsVirtualPoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVirtualPoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsVirtualPoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsVirtualPoolMachinesUidDeleteResponse =
  v1CloudConfigsVirtualPoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsVirtualPoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualPoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualPoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualPoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified virtual machine
 */
export type v1CloudConfigsVirtualPoolMachinesUidGetResponse200 = {
  data: V1VirtualMachine;
  status: 200;
};

export type v1CloudConfigsVirtualPoolMachinesUidGetResponseComposite =
  v1CloudConfigsVirtualPoolMachinesUidGetResponse200;

export type v1CloudConfigsVirtualPoolMachinesUidGetResponse =
  v1CloudConfigsVirtualPoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsVirtualPoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualPoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualPoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualPoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to the cloud config's machine pool
 */
export type v1CloudConfigsVirtualPoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVirtualPoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsVirtualPoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsVirtualPoolMachinesUidUpdateResponse =
  v1CloudConfigsVirtualPoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualPoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsVirtualPoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1VirtualMachine?: V1VirtualMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualPoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVirtualPoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualPoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualPoolMachinesUidUpdateResponse;
};

/**
 * @summary Updates and resizes the virtual cluster
 */
export type v1CloudConfigsVirtualUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVirtualUidUpdateResponseComposite =
  v1CloudConfigsVirtualUidUpdateResponseDefault;

export type v1CloudConfigsVirtualUidUpdateResponse =
  v1CloudConfigsVirtualUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVirtualUidUpdateUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/virtual/${configUid}/resize`;
};

export const v1CloudConfigsVirtualUidUpdate = async (
  configUid: string,
  v1VirtualClusterResize?: V1VirtualClusterResize,
  options?: RequestInit,
): Promise<v1CloudConfigsVirtualUidUpdateResponse> => {
  const res = await fetch(getV1CloudConfigsVirtualUidUpdateUrl(configUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VirtualClusterResize),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVirtualUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVirtualUidUpdateResponse;
};

/**
 * @summary Returns the specified vSphere cloud config
 */
export type v1CloudConfigsVsphereGetResponse200 = {
  data: V1VsphereCloudConfig;
  status: 200;
};

export type v1CloudConfigsVsphereGetResponseComposite =
  v1CloudConfigsVsphereGetResponse200;

export type v1CloudConfigsVsphereGetResponse =
  v1CloudConfigsVsphereGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereGetUrl = (configUid: string) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}`;
};

export const v1CloudConfigsVsphereGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVsphereGetResponse> => {
  const res = await fetch(getV1CloudConfigsVsphereGetUrl(configUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVsphereGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVsphereGetResponse;
};

/**
 * @summary Updates the cluster configuration information
 */
export type v1CloudConfigsVsphereUidClusterConfigResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVsphereUidClusterConfigResponseComposite =
  v1CloudConfigsVsphereUidClusterConfigResponseDefault;

export type v1CloudConfigsVsphereUidClusterConfigResponse =
  v1CloudConfigsVsphereUidClusterConfigResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereUidClusterConfigUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/clusterConfig`;
};

export const v1CloudConfigsVsphereUidClusterConfig = async (
  configUid: string,
  v1VsphereCloudClusterConfigEntity?: V1VsphereCloudClusterConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsVsphereUidClusterConfigResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereUidClusterConfigUrl(configUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereCloudClusterConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVsphereUidClusterConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVsphereUidClusterConfigResponse;
};

/**
 * @summary Creates a vSphere cloud config's machine pool
 */
export type v1CloudConfigsVsphereMachinePoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsVsphereMachinePoolCreateResponseComposite =
  v1CloudConfigsVsphereMachinePoolCreateResponse201;

export type v1CloudConfigsVsphereMachinePoolCreateResponse =
  v1CloudConfigsVsphereMachinePoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereMachinePoolCreateUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools`;
};

export const v1CloudConfigsVsphereMachinePoolCreate = async (
  configUid: string,
  v1VsphereMachinePoolConfigEntity?: V1VsphereMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsVsphereMachinePoolCreateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereMachinePoolCreateUrl(configUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVsphereMachinePoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVsphereMachinePoolCreateResponse;
};

/**
 * @summary Deletes the specified machine pool
 */
export type v1CloudConfigsVsphereMachinePoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVsphereMachinePoolDeleteResponseComposite =
  v1CloudConfigsVsphereMachinePoolDeleteResponseDefault;

export type v1CloudConfigsVsphereMachinePoolDeleteResponse =
  v1CloudConfigsVsphereMachinePoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereMachinePoolDeleteUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsVsphereMachinePoolDelete = async (
  configUid: string,
  machinePoolName: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVsphereMachinePoolDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereMachinePoolDeleteUrl(configUid, machinePoolName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVsphereMachinePoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVsphereMachinePoolDeleteResponse;
};

/**
 * @summary Updates the specified vSphere cloud config's machine pool
 */
export type v1CloudConfigsVsphereMachinePoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVsphereMachinePoolUpdateResponseComposite =
  v1CloudConfigsVsphereMachinePoolUpdateResponseDefault;

export type v1CloudConfigsVsphereMachinePoolUpdateResponse =
  v1CloudConfigsVsphereMachinePoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVsphereMachinePoolUpdateUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}`;
};

export const v1CloudConfigsVsphereMachinePoolUpdate = async (
  configUid: string,
  machinePoolName: string,
  v1VsphereMachinePoolConfigEntity?: V1VsphereMachinePoolConfigEntity,
  options?: RequestInit,
): Promise<v1CloudConfigsVsphereMachinePoolUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVsphereMachinePoolUpdateUrl(configUid, machinePoolName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachinePoolConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVsphereMachinePoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVsphereMachinePoolUpdateResponse;
};

/**
 * @summary Retrieves a list of vSphere machines
 */
export type v1CloudConfigsVspherePoolMachinesListResponse200 = {
  data: V1VsphereMachines;
  status: 200;
};

export type v1CloudConfigsVspherePoolMachinesListResponseComposite =
  v1CloudConfigsVspherePoolMachinesListResponse200;

export type v1CloudConfigsVspherePoolMachinesListResponse =
  v1CloudConfigsVspherePoolMachinesListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesListUrl = (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsVspherePoolMachinesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsVspherePoolMachinesList = async (
  configUid: string,
  machinePoolName: string,
  params?: V1CloudConfigsVspherePoolMachinesListParams,
  options?: RequestInit,
): Promise<v1CloudConfigsVspherePoolMachinesListResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesListUrl(
      configUid,
      machinePoolName,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVspherePoolMachinesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVspherePoolMachinesListResponse;
};

/**
 * @summary Adds the vSphere machine to cloud config's machine pool
 */
export type v1CloudConfigsVspherePoolMachinesAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CloudConfigsVspherePoolMachinesAddResponseComposite =
  v1CloudConfigsVspherePoolMachinesAddResponse201;

export type v1CloudConfigsVspherePoolMachinesAddResponse =
  v1CloudConfigsVspherePoolMachinesAddResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesAddUrl = (
  configUid: string,
  machinePoolName: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines`;
};

export const v1CloudConfigsVspherePoolMachinesAdd = async (
  configUid: string,
  machinePoolName: string,
  v1VsphereMachine?: V1VsphereMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsVspherePoolMachinesAddResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesAddUrl(configUid, machinePoolName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVspherePoolMachinesAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVspherePoolMachinesAddResponse;
};

/**
 * @summary Deletes the specified vSphere machine
 */
export type v1CloudConfigsVspherePoolMachinesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVspherePoolMachinesUidDeleteResponseComposite =
  v1CloudConfigsVspherePoolMachinesUidDeleteResponseDefault;

export type v1CloudConfigsVspherePoolMachinesUidDeleteResponse =
  v1CloudConfigsVspherePoolMachinesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesUidDeleteUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsVspherePoolMachinesUidDelete = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVspherePoolMachinesUidDeleteResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesUidDeleteUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVspherePoolMachinesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVspherePoolMachinesUidDeleteResponse;
};

/**
 * @summary Returns the specified vSphere machine
 */
export type v1CloudConfigsVspherePoolMachinesUidGetResponse200 = {
  data: V1VsphereMachine;
  status: 200;
};

export type v1CloudConfigsVspherePoolMachinesUidGetResponseComposite =
  v1CloudConfigsVspherePoolMachinesUidGetResponse200;

export type v1CloudConfigsVspherePoolMachinesUidGetResponse =
  v1CloudConfigsVspherePoolMachinesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesUidGetUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsVspherePoolMachinesUidGet = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsVspherePoolMachinesUidGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesUidGetUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVspherePoolMachinesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVspherePoolMachinesUidGetResponse;
};

/**
 * @summary Updates the specified machine to cloud config's machine pool
 */
export type v1CloudConfigsVspherePoolMachinesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudConfigsVspherePoolMachinesUidUpdateResponseComposite =
  v1CloudConfigsVspherePoolMachinesUidUpdateResponseDefault;

export type v1CloudConfigsVspherePoolMachinesUidUpdateResponse =
  v1CloudConfigsVspherePoolMachinesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsVspherePoolMachinesUidUpdateUrl = (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/vsphere/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}`;
};

export const v1CloudConfigsVspherePoolMachinesUidUpdate = async (
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1VsphereMachine?: V1VsphereMachine,
  options?: RequestInit,
): Promise<v1CloudConfigsVspherePoolMachinesUidUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsVspherePoolMachinesUidUpdateUrl(
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VsphereMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsVspherePoolMachinesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsVspherePoolMachinesUidUpdateResponse;
};

/**
 * @summary Updates the specified machine maintenance
 */
export type v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseDefault =
  {
    data: unknown;
    status: number;
  };

export type v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseComposite =
  v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseDefault;

export type v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse =
  v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateUrl = (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}/maintenance`;
};

export const v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdate = async (
  cloudType: string,
  configUid: string,
  machinePoolName: string,
  machineUid: string,
  v1MachineMaintenance?: V1MachineMaintenance,
  options?: RequestInit,
): Promise<v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse> => {
  const res = await fetch(
    getV1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateUrl(
      cloudType,
      configUid,
      machinePoolName,
      machineUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1MachineMaintenance),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdateResponse;
};

/**
 * @summary Updates the specified machine maintenance
 */
export type v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseDefault =
  {
    data: unknown;
    status: number;
  };

export type v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseComposite =
  v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseDefault;

export type v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse =
  v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateUrl =
  (
    cloudType: string,
    configUid: string,
    machinePoolName: string,
    machineUid: string,
  ) => {
    return `https://api.spectrocloud.com/v1/cloudconfigs/${cloudType}/${configUid}/machinePools/${machinePoolName}/machines/${machineUid}/maintenance/status`;
  };

export const v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdate =
  async (
    cloudType: string,
    configUid: string,
    machinePoolName: string,
    machineUid: string,
    v1MachineMaintenanceStatus?: V1MachineMaintenanceStatus,
    options?: RequestInit,
  ): Promise<v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse> => {
    const res = await fetch(
      getV1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateUrl(
        cloudType,
        configUid,
        machinePoolName,
        machineUid,
      ),
      {
        ...options,
        method: "PUT",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(v1MachineMaintenanceStatus),
      },
    );

    const body = [204, 205, 304].includes(res.status) ? null : await res.text();
    const data: v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse["data"] =
      body ? JSON.parse(body) : {};

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdateResponse;
  };

/**
 * @summary Returns the specified cloud config's machine pools and machine uid
 */
export type v1CloudConfigsMachinePoolsMachineUidsGetResponse200 = {
  data: V1MachinePoolsMachineUids;
  status: 200;
};

export type v1CloudConfigsMachinePoolsMachineUidsGetResponseComposite =
  v1CloudConfigsMachinePoolsMachineUidsGetResponse200;

export type v1CloudConfigsMachinePoolsMachineUidsGetResponse =
  v1CloudConfigsMachinePoolsMachineUidsGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudConfigsMachinePoolsMachineUidsGetUrl = (
  configUid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudconfigs/${configUid}/machinePools/machineUids`;
};

export const v1CloudConfigsMachinePoolsMachineUidsGet = async (
  configUid: string,
  options?: RequestInit,
): Promise<v1CloudConfigsMachinePoolsMachineUidsGetResponse> => {
  const res = await fetch(
    getV1CloudConfigsMachinePoolsMachineUidsGetUrl(configUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudConfigsMachinePoolsMachineUidsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudConfigsMachinePoolsMachineUidsGetResponse;
};

/**
 * @summary Retrieves the Aws secret credentials
 */
export type v1AwsAccountSecretCredentialsResponse200 = {
  data: V1AwsAccountCredentials;
  status: 200;
};

export type v1AwsAccountSecretCredentialsResponseComposite =
  v1AwsAccountSecretCredentialsResponse200;

export type v1AwsAccountSecretCredentialsResponse =
  v1AwsAccountSecretCredentialsResponseComposite & {
    headers: Headers;
  };

export const getV1AwsAccountSecretCredentialsUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/account/secret/credentials`;
};

export const v1AwsAccountSecretCredentials = async (
  v1AwsSecretSpecInputEntity: V1AwsSecretSpecInputEntity,
  options?: RequestInit,
): Promise<v1AwsAccountSecretCredentialsResponse> => {
  const res = await fetch(getV1AwsAccountSecretCredentialsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsSecretSpecInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAccountSecretCredentialsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAccountSecretCredentialsResponse;
};

/**
 * @summary Retrieves AWS external id and account id
 */
export type v1AwsAccountStsGetResponse200 = {
  data: V1AwsAccountSts;
  status: 200;
};

export type v1AwsAccountStsGetResponseComposite = v1AwsAccountStsGetResponse200;

export type v1AwsAccountStsGetResponse = v1AwsAccountStsGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsAccountStsGetUrl = (params?: V1AwsAccountStsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/account/sts?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/account/sts`;
};

export const v1AwsAccountStsGet = async (
  params?: V1AwsAccountStsGetParams,
  options?: RequestInit,
): Promise<v1AwsAccountStsGetResponse> => {
  const res = await fetch(getV1AwsAccountStsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAccountStsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAccountStsGetResponse;
};

/**
 * @summary Validate the specified AWS account credentials
 */
export type v1AwsAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsAccountValidateResponseComposite =
  v1AwsAccountValidateResponseDefault;

export type v1AwsAccountValidateResponse =
  v1AwsAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/account/validate`;
};

export const v1AwsAccountValidate = async (
  v1AwsCloudAccount: V1AwsCloudAccount,
  options?: RequestInit,
): Promise<v1AwsAccountValidateResponse> => {
  const res = await fetch(getV1AwsAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAccountValidateResponse;
};

/**
 * @summary Retrieves a list of AWS AMI types
 */
export type v1AwsAmiTypesResponse200 = {
  data: V1AmiTypes;
  status: 200;
};

export type v1AwsAmiTypesResponseComposite = v1AwsAmiTypesResponse200;

export type v1AwsAmiTypesResponse = v1AwsAmiTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsAmiTypesUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/amiTypes`;
};

export const v1AwsAmiTypes = async (
  options?: RequestInit,
): Promise<v1AwsAmiTypesResponse> => {
  const res = await fetch(getV1AwsAmiTypesUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAmiTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAmiTypesResponse;
};

/**
 * Validates aws cloud watch credentials
 * @summary validates aws cloud watch credentials
 */
export type v1CloudsAwsCloudWatchValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CloudsAwsCloudWatchValidateResponseComposite =
  v1CloudsAwsCloudWatchValidateResponseDefault;

export type v1CloudsAwsCloudWatchValidateResponse =
  v1CloudsAwsCloudWatchValidateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudsAwsCloudWatchValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/cloudwatch/validate`;
};

export const v1CloudsAwsCloudWatchValidate = async (
  v1CloudWatchConfig: V1CloudWatchConfig,
  options?: RequestInit,
): Promise<v1CloudsAwsCloudWatchValidateResponse> => {
  const res = await fetch(getV1CloudsAwsCloudWatchValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CloudWatchConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudsAwsCloudWatchValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudsAwsCloudWatchValidateResponse;
};

/**
 * @summary Retrieves AWS cloud account usage cost from cost explorer.
 */
export type v1AwsCloudCostResponse200 = {
  data: V1AwsCloudCostSummary;
  status: 200;
};

export type v1AwsCloudCostResponseComposite = v1AwsCloudCostResponse200;

export type v1AwsCloudCostResponse = v1AwsCloudCostResponseComposite & {
  headers: Headers;
};

export const getV1AwsCloudCostUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/cost`;
};

export const v1AwsCloudCost = async (
  v1AwsCloudCostSpec: V1AwsCloudCostSpec,
  options?: RequestInit,
): Promise<v1AwsCloudCostResponse> => {
  const res = await fetch(getV1AwsCloudCostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsCloudCostSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCloudCostResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCloudCostResponse;
};

/**
 * Get AWS Volume Size
 * @summary Get AWS Volume Size
 */
export type v1AwsVolumeSizeGetResponse200 = {
  data: V1AwsVolumeSize;
  status: 200;
};

export type v1AwsVolumeSizeGetResponseComposite = v1AwsVolumeSizeGetResponse200;

export type v1AwsVolumeSizeGetResponse = v1AwsVolumeSizeGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsVolumeSizeGetUrl = (
  imageId: string,
  params: V1AwsVolumeSizeGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/imageIds/${imageId}/volumeSize?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/imageIds/${imageId}/volumeSize`;
};

export const v1AwsVolumeSizeGet = async (
  imageId: string,
  params: V1AwsVolumeSizeGetParams,
  options?: RequestInit,
): Promise<v1AwsVolumeSizeGetResponse> => {
  const res = await fetch(getV1AwsVolumeSizeGetUrl(imageId, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsVolumeSizeGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsVolumeSizeGetResponse;
};

/**
 * @summary Retrieves a list of AWS policies for the specified account
 */
export type v1AwsIamPoliciesResponse200 = {
  data: V1AwsPolicies;
  status: 200;
};

export type v1AwsIamPoliciesResponseComposite = v1AwsIamPoliciesResponse200;

export type v1AwsIamPoliciesResponse = v1AwsIamPoliciesResponseComposite & {
  headers: Headers;
};

export const getV1AwsIamPoliciesUrl = (params?: V1AwsIamPoliciesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/policies?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/policies`;
};

export const v1AwsIamPolicies = async (
  v1AwsCloudAccount: V1AwsCloudAccount,
  params?: V1AwsIamPoliciesParams,
  options?: RequestInit,
): Promise<v1AwsIamPoliciesResponse> => {
  const res = await fetch(getV1AwsIamPoliciesUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsIamPoliciesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsIamPoliciesResponse;
};

/**
 * @summary Validate the aws policy arns validate
 */
export type v1AwsPolicyArnsValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsPolicyArnsValidateResponseComposite =
  v1AwsPolicyArnsValidateResponseDefault;

export type v1AwsPolicyArnsValidateResponse =
  v1AwsPolicyArnsValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsPolicyArnsValidateUrl = (
  params?: V1AwsPolicyArnsValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/policyArns/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/policyArns/validate`;
};

export const v1AwsPolicyArnsValidate = async (
  v1AwsPolicyArnsSpec: V1AwsPolicyArnsSpec,
  params?: V1AwsPolicyArnsValidateParams,
  options?: RequestInit,
): Promise<v1AwsPolicyArnsValidateResponse> => {
  const res = await fetch(getV1AwsPolicyArnsValidateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsPolicyArnsSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsPolicyArnsValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsPolicyArnsValidateResponse;
};

/**
 * @summary Validate AWS properties
 */
export type v1AwsPropertiesValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsPropertiesValidateResponseComposite =
  v1AwsPropertiesValidateResponseDefault;

export type v1AwsPropertiesValidateResponse =
  v1AwsPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/properties/validate`;
};

export const v1AwsPropertiesValidate = async (
  v1AwsPropertiesValidateSpec: V1AwsPropertiesValidateSpec,
  options?: RequestInit,
): Promise<v1AwsPropertiesValidateResponse> => {
  const res = await fetch(getV1AwsPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsPropertiesValidateResponse;
};

/**
 * @summary Retrieves a list of AWS regions for the specified account
 */
export type v1AwsRegionsResponse200 = {
  data: V1AwsRegions;
  status: 200;
};

export type v1AwsRegionsResponseComposite = v1AwsRegionsResponse200;

export type v1AwsRegionsResponse = v1AwsRegionsResponseComposite & {
  headers: Headers;
};

export const getV1AwsRegionsUrl = (params: V1AwsRegionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions`;
};

export const v1AwsRegions = async (
  params: V1AwsRegionsParams,
  options?: RequestInit,
): Promise<v1AwsRegionsResponse> => {
  const res = await fetch(getV1AwsRegionsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsRegionsResponse;
};

/**
 * @summary Retrieves a list of AWS availability zones for the specified region
 */
export type v1AwsZonesResponse200 = {
  data: V1AwsAvailabilityZones;
  status: 200;
};

export type v1AwsZonesResponseComposite = v1AwsZonesResponse200;

export type v1AwsZonesResponse = v1AwsZonesResponseComposite & {
  headers: Headers;
};

export const getV1AwsZonesUrl = (region: string, params: V1AwsZonesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/availabilityzones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/availabilityzones`;
};

export const v1AwsZones = async (
  region: string,
  params: V1AwsZonesParams,
  options?: RequestInit,
): Promise<v1AwsZonesResponse> => {
  const res = await fetch(getV1AwsZonesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsZonesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsZonesResponse;
};

/**
 * @summary Copies the specified image from one region to another region
 */
export type v1AwsCopyImageFromDefaultRegionResponse200 = {
  data: V1AsyncOperationIdEntity;
  status: 200;
};

export type v1AwsCopyImageFromDefaultRegionResponseComposite =
  v1AwsCopyImageFromDefaultRegionResponse200;

export type v1AwsCopyImageFromDefaultRegionResponse =
  v1AwsCopyImageFromDefaultRegionResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCopyImageFromDefaultRegionUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/copydefaultimages`;
};

export const v1AwsCopyImageFromDefaultRegion = async (
  region: string,
  v1AwsFindImageRequest?: V1AwsFindImageRequest,
  options?: RequestInit,
): Promise<v1AwsCopyImageFromDefaultRegionResponse> => {
  const res = await fetch(getV1AwsCopyImageFromDefaultRegionUrl(region), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsFindImageRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCopyImageFromDefaultRegionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCopyImageFromDefaultRegionResponse;
};

/**
 * Returns no contents if aws cluster name is valid else error.
 * @summary Check if Aws cluster name is valid
 */
export type v1AwsClusterNameValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsClusterNameValidateResponseComposite =
  v1AwsClusterNameValidateResponseDefault;

export type v1AwsClusterNameValidateResponse =
  v1AwsClusterNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsClusterNameValidateUrl = (
  region: string,
  params: V1AwsClusterNameValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/eksClusters/name/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/eksClusters/name/validate`;
};

export const v1AwsClusterNameValidate = async (
  region: string,
  params: V1AwsClusterNameValidateParams,
  options?: RequestInit,
): Promise<v1AwsClusterNameValidateResponse> => {
  const res = await fetch(getV1AwsClusterNameValidateUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsClusterNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsClusterNameValidateResponse;
};

/**
 * @summary Returns AWS image for the specified AMI name
 */
export type v1AwsFindImageResponse200 = {
  data: V1AwsImage;
  status: 200;
};

export type v1AwsFindImageResponseComposite = v1AwsFindImageResponse200;

export type v1AwsFindImageResponse = v1AwsFindImageResponseComposite & {
  headers: Headers;
};

export const getV1AwsFindImageUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/images`;
};

export const v1AwsFindImage = async (
  region: string,
  v1AwsFindImageRequest?: V1AwsFindImageRequest,
  options?: RequestInit,
): Promise<v1AwsFindImageResponse> => {
  const res = await fetch(getV1AwsFindImageUrl(region), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsFindImageRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsFindImageResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsFindImageResponse;
};

/**
 * @summary Retrieves a list of AWS instance types
 */
export type v1AwsInstanceTypesResponse200 = {
  data: V1AwsInstanceTypes;
  status: 200;
};

export type v1AwsInstanceTypesResponseComposite = v1AwsInstanceTypesResponse200;

export type v1AwsInstanceTypesResponse = v1AwsInstanceTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsInstanceTypesUrl = (
  region: string,
  params?: V1AwsInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/instancetypes`;
};

export const v1AwsInstanceTypes = async (
  region: string,
  params?: V1AwsInstanceTypesParams,
  options?: RequestInit,
): Promise<v1AwsInstanceTypesResponse> => {
  const res = await fetch(getV1AwsInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsInstanceTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of AWS keypairs
 */
export type v1AwsKeyPairsResponse200 = {
  data: V1AwsKeyPairs;
  status: 200;
};

export type v1AwsKeyPairsResponseComposite = v1AwsKeyPairsResponse200;

export type v1AwsKeyPairsResponse = v1AwsKeyPairsResponseComposite & {
  headers: Headers;
};

export const getV1AwsKeyPairsUrl = (
  region: string,
  params: V1AwsKeyPairsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs`;
};

export const v1AwsKeyPairs = async (
  region: string,
  params: V1AwsKeyPairsParams,
  options?: RequestInit,
): Promise<v1AwsKeyPairsResponse> => {
  const res = await fetch(getV1AwsKeyPairsUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKeyPairsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKeyPairsResponse;
};

/**
 * @summary Validate the specified AWS keypair
 */
export type v1AwsKeyPairValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsKeyPairValidateResponseComposite =
  v1AwsKeyPairValidateResponseDefault;

export type v1AwsKeyPairValidateResponse =
  v1AwsKeyPairValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsKeyPairValidateUrl = (
  region: string,
  keypair: string,
  params: V1AwsKeyPairValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs/${keypair}/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs/${keypair}/validate`;
};

export const v1AwsKeyPairValidate = async (
  region: string,
  keypair: string,
  params: V1AwsKeyPairValidateParams,
  options?: RequestInit,
): Promise<v1AwsKeyPairValidateResponse> => {
  const res = await fetch(getV1AwsKeyPairValidateUrl(region, keypair, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKeyPairValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKeyPairValidateResponse;
};

/**
 * @summary Get AWS KMS key by Id
 */
export type v1AwsKmsKeyGetResponse200 = {
  data: V1AwsKmsKeyEntity;
  status: 200;
};

export type v1AwsKmsKeyGetResponseComposite = v1AwsKmsKeyGetResponse200;

export type v1AwsKmsKeyGetResponse = v1AwsKmsKeyGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsKmsKeyGetUrl = (
  region: string,
  keyId: string,
  params: V1AwsKmsKeyGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kms/${keyId}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kms/${keyId}`;
};

export const v1AwsKmsKeyGet = async (
  region: string,
  keyId: string,
  params: V1AwsKmsKeyGetParams,
  options?: RequestInit,
): Promise<v1AwsKmsKeyGetResponse> => {
  const res = await fetch(getV1AwsKmsKeyGetUrl(region, keyId, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKmsKeyGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKmsKeyGetResponse;
};

/**
 * @summary Retrieves a list of AWS KMS keys for the specified account
 */
export type v1AwsKmsKeysResponse200 = {
  data: V1AwsKmsKeys;
  status: 200;
};

export type v1AwsKmsKeysResponseComposite = v1AwsKmsKeysResponse200;

export type v1AwsKmsKeysResponse = v1AwsKmsKeysResponseComposite & {
  headers: Headers;
};

export const getV1AwsKmsKeysUrl = (
  region: string,
  params: V1AwsKmsKeysParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys`;
};

export const v1AwsKmsKeys = async (
  region: string,
  params: V1AwsKmsKeysParams,
  options?: RequestInit,
): Promise<v1AwsKmsKeysResponse> => {
  const res = await fetch(getV1AwsKmsKeysUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKmsKeysResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKmsKeysResponse;
};

/**
 * @summary Validate an Aws KMS key for the specified account
 */
export type v1AwsKmsKeyValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsKmsKeyValidateResponseComposite =
  v1AwsKmsKeyValidateResponseDefault;

export type v1AwsKmsKeyValidateResponse =
  v1AwsKmsKeyValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsKmsKeyValidateUrl = (
  region: string,
  params: V1AwsKmsKeyValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys/validate`;
};

export const v1AwsKmsKeyValidate = async (
  region: string,
  params: V1AwsKmsKeyValidateParams,
  options?: RequestInit,
): Promise<v1AwsKmsKeyValidateResponse> => {
  const res = await fetch(getV1AwsKmsKeyValidateUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKmsKeyValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKmsKeyValidateResponse;
};

/**
 * @summary Retrieves a list of AWS storage types
 */
export type v1AwsStorageTypesResponse200 = {
  data: V1AwsStorageTypes;
  status: 200;
};

export type v1AwsStorageTypesResponseComposite = v1AwsStorageTypesResponse200;

export type v1AwsStorageTypesResponse = v1AwsStorageTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/storagetypes`;
};

export const v1AwsStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<v1AwsStorageTypesResponse> => {
  const res = await fetch(getV1AwsStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsStorageTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsStorageTypesResponse;
};

/**
 * @summary Retrieves a list of VPCs for the specified account
 */
export type v1AwsVpcsResponse200 = {
  data: V1AwsVpcs;
  status: 200;
};

export type v1AwsVpcsResponseComposite = v1AwsVpcsResponse200;

export type v1AwsVpcsResponse = v1AwsVpcsResponseComposite & {
  headers: Headers;
};

export const getV1AwsVpcsUrl = (region: string, params: V1AwsVpcsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/vpcs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/vpcs`;
};

export const v1AwsVpcs = async (
  region: string,
  params: V1AwsVpcsParams,
  options?: RequestInit,
): Promise<v1AwsVpcsResponse> => {
  const res = await fetch(getV1AwsVpcsUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsVpcsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsVpcsResponse;
};

/**
 * @summary Validate the AWS S3 bucket
 */
export type v1AwsS3ValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AwsS3ValidateResponseComposite = v1AwsS3ValidateResponseDefault;

export type v1AwsS3ValidateResponse = v1AwsS3ValidateResponseComposite & {
  headers: Headers;
};

export const getV1AwsS3ValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/s3/validate`;
};

export const v1AwsS3Validate = async (
  v1AwsS3BucketCredentials: V1AwsS3BucketCredentials,
  options?: RequestInit,
): Promise<v1AwsS3ValidateResponse> => {
  const res = await fetch(getV1AwsS3ValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AwsS3BucketCredentials),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsS3ValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsS3ValidateResponse;
};

/**
 * @summary Retrieves a list of AWS security groups for the specified account
 */
export type v1AwsSecurityGroupsResponse200 = {
  data: V1AwsSecurityGroups;
  status: 200;
};

export type v1AwsSecurityGroupsResponseComposite =
  v1AwsSecurityGroupsResponse200;

export type v1AwsSecurityGroupsResponse =
  v1AwsSecurityGroupsResponseComposite & {
    headers: Headers;
  };

export const getV1AwsSecurityGroupsUrl = (
  params: V1AwsSecurityGroupsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/securitygroups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/securitygroups`;
};

export const v1AwsSecurityGroups = async (
  params: V1AwsSecurityGroupsParams,
  options?: RequestInit,
): Promise<v1AwsSecurityGroupsResponse> => {
  const res = await fetch(getV1AwsSecurityGroupsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsSecurityGroupsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsSecurityGroupsResponse;
};

/**
 * List all AWS Volume Types
 * @summary Get all AWS Volume Types
 */
export type v1AwsVolumeTypesGetResponse200 = {
  data: V1AWSVolumeTypes;
  status: 200;
};

export type v1AwsVolumeTypesGetResponseComposite =
  v1AwsVolumeTypesGetResponse200;

export type v1AwsVolumeTypesGetResponse =
  v1AwsVolumeTypesGetResponseComposite & {
    headers: Headers;
  };

export const getV1AwsVolumeTypesGetUrl = (
  params: V1AwsVolumeTypesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/volumeTypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/volumeTypes`;
};

export const v1AwsVolumeTypesGet = async (
  params: V1AwsVolumeTypesGetParams,
  options?: RequestInit,
): Promise<v1AwsVolumeTypesGetResponse> => {
  const res = await fetch(getV1AwsVolumeTypesGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsVolumeTypesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsVolumeTypesGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Azure account is valid
 */
export type v1AzureAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AzureAccountValidateResponseComposite =
  v1AzureAccountValidateResponseDefault;

export type v1AzureAccountValidateResponse =
  v1AzureAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AzureAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/azure/account/validate`;
};

export const v1AzureAccountValidate = async (
  v1AzureCloudAccount: V1AzureCloudAccount,
  options?: RequestInit,
): Promise<v1AzureAccountValidateResponse> => {
  const res = await fetch(getV1AzureAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzureCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureAccountValidateResponse;
};

/**
 * @summary Retrieves a list of Azure groups
 */
export type v1AzureGroupsResponse200 = {
  data: V1AzureGroups;
  status: 200;
};

export type v1AzureGroupsResponseComposite = v1AzureGroupsResponse200;

export type v1AzureGroupsResponse = v1AzureGroupsResponseComposite & {
  headers: Headers;
};

export const getV1AzureGroupsUrl = (params?: V1AzureGroupsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/groups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/groups`;
};

export const v1AzureGroups = async (
  params?: V1AzureGroupsParams,
  options?: RequestInit,
): Promise<v1AzureGroupsResponse> => {
  const res = await fetch(getV1AzureGroupsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureGroupsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureGroupsResponse;
};

/**
 * @summary Retrieves a list of Azure regions
 */
export type v1AzureRegionsResponse200 = {
  data: V1AzureRegions;
  status: 200;
};

export type v1AzureRegionsResponseComposite = v1AzureRegionsResponse200;

export type v1AzureRegionsResponse = v1AzureRegionsResponseComposite & {
  headers: Headers;
};

export const getV1AzureRegionsUrl = (params?: V1AzureRegionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions`;
};

export const v1AzureRegions = async (
  params?: V1AzureRegionsParams,
  options?: RequestInit,
): Promise<v1AzureRegionsResponse> => {
  const res = await fetch(getV1AzureRegionsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureRegionsResponse;
};

/**
 * @summary Retrieves a list of Azure instance types
 */
export type v1AzureInstanceTypesResponse200 = {
  data: V1AzureInstanceTypes;
  status: 200;
};

export type v1AzureInstanceTypesResponseComposite =
  v1AzureInstanceTypesResponse200;

export type v1AzureInstanceTypesResponse =
  v1AzureInstanceTypesResponseComposite & {
    headers: Headers;
  };

export const getV1AzureInstanceTypesUrl = (
  region: string,
  params?: V1AzureInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/instancetypes`;
};

export const v1AzureInstanceTypes = async (
  region: string,
  params?: V1AzureInstanceTypesParams,
  options?: RequestInit,
): Promise<v1AzureInstanceTypesResponse> => {
  const res = await fetch(getV1AzureInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureInstanceTypesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of Azure storage types
 */
export type v1AzureStorageTypesResponse200 = {
  data: V1AzureStorageTypes;
  status: 200;
};

export type v1AzureStorageTypesResponseComposite =
  v1AzureStorageTypesResponse200;

export type v1AzureStorageTypesResponse =
  v1AzureStorageTypesResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/storagetypes`;
};

export const v1AzureStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<v1AzureStorageTypesResponse> => {
  const res = await fetch(getV1AzureStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageTypesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageTypesResponse;
};

/**
 * Returns no contents if Azure cluster name is valid else error.
 * @summary Check if Azure cluster name is valid
 */
export type v1AzureClusterNameValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1AzureClusterNameValidateResponseComposite =
  v1AzureClusterNameValidateResponseDefault;

export type v1AzureClusterNameValidateResponse =
  v1AzureClusterNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AzureClusterNameValidateUrl = (
  region: string,
  subscriptionId: string,
  params: V1AzureClusterNameValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/aksClusters/name/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/aksClusters/name/validate`;
};

export const v1AzureClusterNameValidate = async (
  region: string,
  subscriptionId: string,
  params: V1AzureClusterNameValidateParams,
  options?: RequestInit,
): Promise<v1AzureClusterNameValidateResponse> => {
  const res = await fetch(
    getV1AzureClusterNameValidateUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureClusterNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureClusterNameValidateResponse;
};

/**
 * @summary Retrieves a list of Azure virtual network list for the sepcified account
 */
export type v1AzureVirtualNetworkListResponse200 = {
  data: V1AzureVirtualNetworkList;
  status: 200;
};

export type v1AzureVirtualNetworkListResponseComposite =
  v1AzureVirtualNetworkListResponse200;

export type v1AzureVirtualNetworkListResponse =
  v1AzureVirtualNetworkListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureVirtualNetworkListUrl = (
  region: string,
  subscriptionId: string,
  params: V1AzureVirtualNetworkListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/networks`;
};

export const v1AzureVirtualNetworkList = async (
  region: string,
  subscriptionId: string,
  params: V1AzureVirtualNetworkListParams,
  options?: RequestInit,
): Promise<v1AzureVirtualNetworkListResponse> => {
  const res = await fetch(
    getV1AzureVirtualNetworkListUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureVirtualNetworkListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureVirtualNetworkListResponse;
};

/**
 * @summary Retrieves a list of Azure resource group for the specified account
 */
export type v1AzureResourceGroupListResponse200 = {
  data: V1AzureResourceGroupList;
  status: 200;
};

export type v1AzureResourceGroupListResponseComposite =
  v1AzureResourceGroupListResponse200;

export type v1AzureResourceGroupListResponse =
  v1AzureResourceGroupListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureResourceGroupListUrl = (
  region: string,
  subscriptionId: string,
  params: V1AzureResourceGroupListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/resourceGroups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/resourceGroups`;
};

export const v1AzureResourceGroupList = async (
  region: string,
  subscriptionId: string,
  params: V1AzureResourceGroupListParams,
  options?: RequestInit,
): Promise<v1AzureResourceGroupListResponse> => {
  const res = await fetch(
    getV1AzureResourceGroupListUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureResourceGroupListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureResourceGroupListResponse;
};

/**
 * @summary Retrieves a list of Azure zones for the specified region
 */
export type v1AzureZonesResponse200 = {
  data: V1AzureZoneEntity;
  status: 200;
};

export type v1AzureZonesResponseComposite = v1AzureZonesResponse200;

export type v1AzureZonesResponse = v1AzureZonesResponseComposite & {
  headers: Headers;
};

export const getV1AzureZonesUrl = (
  region: string,
  params?: V1AzureZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/zones`;
};

export const v1AzureZones = async (
  region: string,
  params?: V1AzureZonesParams,
  options?: RequestInit,
): Promise<v1AzureZonesResponse> => {
  const res = await fetch(getV1AzureZonesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureZonesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureZonesResponse;
};

/**
 * Returns Azure private DNS zones
 * @summary Get Azure private DNS zones for the given resource group
 */
export type v1AzurePrivateDnsZonesResponse200 = {
  data: V1AzurePrivateDnsZones;
  status: 200;
};

export type v1AzurePrivateDnsZonesResponseComposite =
  v1AzurePrivateDnsZonesResponse200;

export type v1AzurePrivateDnsZonesResponse =
  v1AzurePrivateDnsZonesResponseComposite & {
    headers: Headers;
  };

export const getV1AzurePrivateDnsZonesUrl = (
  resourceGroup: string,
  params: V1AzurePrivateDnsZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/privateDnsZones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/privateDnsZones`;
};

export const v1AzurePrivateDnsZones = async (
  resourceGroup: string,
  params: V1AzurePrivateDnsZonesParams,
  options?: RequestInit,
): Promise<v1AzurePrivateDnsZonesResponse> => {
  const res = await fetch(getV1AzurePrivateDnsZonesUrl(resourceGroup, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzurePrivateDnsZonesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzurePrivateDnsZonesResponse;
};

/**
 * Returns Azure storage accounts.
 * @summary Get Azure storage accounts
 */
export type v1AzureStorageAccountsResponse200 = {
  data: V1AzureStorageAccounts;
  status: 200;
};

export type v1AzureStorageAccountsResponseComposite =
  v1AzureStorageAccountsResponse200;

export type v1AzureStorageAccountsResponse =
  v1AzureStorageAccountsResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageAccountsUrl = (
  resourceGroup: string,
  params: V1AzureStorageAccountsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts`;
};

export const v1AzureStorageAccounts = async (
  resourceGroup: string,
  params: V1AzureStorageAccountsParams,
  options?: RequestInit,
): Promise<v1AzureStorageAccountsResponse> => {
  const res = await fetch(getV1AzureStorageAccountsUrl(resourceGroup, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageAccountsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageAccountsResponse;
};

/**
 * Returns Azure storage containers for the given account.
 * @summary Get Azure storage containers
 */
export type v1AzureStorageContainersResponse200 = {
  data: V1AzureStorageContainers;
  status: 200;
};

export type v1AzureStorageContainersResponseComposite =
  v1AzureStorageContainersResponse200;

export type v1AzureStorageContainersResponse =
  v1AzureStorageContainersResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageContainersUrl = (
  resourceGroup: string,
  storageAccountName: string,
  params: V1AzureStorageContainersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts/${storageAccountName}/containers?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts/${storageAccountName}/containers`;
};

export const v1AzureStorageContainers = async (
  resourceGroup: string,
  storageAccountName: string,
  params: V1AzureStorageContainersParams,
  options?: RequestInit,
): Promise<v1AzureStorageContainersResponse> => {
  const res = await fetch(
    getV1AzureStorageContainersUrl(resourceGroup, storageAccountName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageContainersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageContainersResponse;
};

/**
 * Returns Azure storage account types.
 * @summary Get Azure storage account types
 */
export type v1AzureStorageAccountTypesResponse200 = {
  data: V1AzureStorageAccountEntity;
  status: 200;
};

export type v1AzureStorageAccountTypesResponseComposite =
  v1AzureStorageAccountTypesResponse200;

export type v1AzureStorageAccountTypesResponse =
  v1AzureStorageAccountTypesResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageAccountTypesUrl = (
  params?: V1AzureStorageAccountTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/storageaccounttypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/storageaccounttypes`;
};

export const v1AzureStorageAccountTypes = async (
  params?: V1AzureStorageAccountTypesParams,
  options?: RequestInit,
): Promise<v1AzureStorageAccountTypesResponse> => {
  const res = await fetch(getV1AzureStorageAccountTypesUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageAccountTypesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageAccountTypesResponse;
};

/**
 * Returns list of Azure subscription list.
 * @summary Retrieves a list of Azure subscription list for the specified account
 */
export type v1AzureSubscriptionListResponse200 = {
  data: V1AzureSubscriptionList;
  status: 200;
};

export type v1AzureSubscriptionListResponseComposite =
  v1AzureSubscriptionListResponse200;

export type v1AzureSubscriptionListResponse =
  v1AzureSubscriptionListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureSubscriptionListUrl = (
  params: V1AzureSubscriptionListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/subscriptions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/subscriptions`;
};

export const v1AzureSubscriptionList = async (
  params: V1AzureSubscriptionListParams,
  options?: RequestInit,
): Promise<v1AzureSubscriptionListResponse> => {
  const res = await fetch(getV1AzureSubscriptionListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureSubscriptionListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureSubscriptionListResponse;
};

/**
 * @summary Returns the Azure vhd url for the specified vhd location
 */
export type v1AzureVhdUrlResponse200 = {
  data: V1AzureVhdUrlEntity;
  status: 200;
};

export type v1AzureVhdUrlResponseComposite = v1AzureVhdUrlResponse200;

export type v1AzureVhdUrlResponse = v1AzureVhdUrlResponseComposite & {
  headers: Headers;
};

export const getV1AzureVhdUrlUrl = (vhd: string) => {
  return `https://api.spectrocloud.com/v1/clouds/azure/vhds/${vhd}/url`;
};

export const v1AzureVhdUrl = async (
  vhd: string,
  options?: RequestInit,
): Promise<v1AzureVhdUrlResponse> => {
  const res = await fetch(getV1AzureVhdUrlUrl(vhd), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureVhdUrlResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureVhdUrlResponse;
};

/**
 * @summary Returns the custom cloud types
 */
export type v1CustomCloudTypesGetResponse200 = {
  data: V1CustomCloudTypes;
  status: 200;
};

export type v1CustomCloudTypesGetResponseComposite =
  v1CustomCloudTypesGetResponse200;

export type v1CustomCloudTypesGetResponse =
  v1CustomCloudTypesGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypesGetUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes`;
};

export const v1CustomCloudTypesGet = async (
  options?: RequestInit,
): Promise<v1CustomCloudTypesGetResponse> => {
  const res = await fetch(getV1CustomCloudTypesGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypesGetResponse;
};

/**
 * @summary Registers the custom cloud type
 */
export type v1CustomCloudTypeRegisterResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1CustomCloudTypeRegisterResponseComposite =
  v1CustomCloudTypeRegisterResponse201;

export type v1CustomCloudTypeRegisterResponse =
  v1CustomCloudTypeRegisterResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeRegisterUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/register`;
};

export const v1CustomCloudTypeRegister = async (
  v1CustomCloudRequestEntity?: V1CustomCloudRequestEntity,
  options?: RequestInit,
): Promise<v1CustomCloudTypeRegisterResponse> => {
  const res = await fetch(getV1CustomCloudTypeRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CustomCloudRequestEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeRegisterResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeRegisterResponse;
};

/**
 * @summary Deletes the custom cloud type
 */
export type v1CustomCloudTypesDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypesDeleteResponseComposite =
  v1CustomCloudTypesDeleteResponseDefault;

export type v1CustomCloudTypesDeleteResponse =
  v1CustomCloudTypesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypesDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}`;
};

export const v1CustomCloudTypesDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypesDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypesDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypesDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypesDeleteResponse;
};

/**
 * @summary Returns valid keys for the cloud account used for custom cloud type
 */
export type v1CustomCloudTypeCloudAccountKeysGetResponse200 = {
  data: V1CustomCloudTypeCloudAccountKeys;
  status: 200;
};

export type v1CustomCloudTypeCloudAccountKeysGetResponseComposite =
  v1CustomCloudTypeCloudAccountKeysGetResponse200;

export type v1CustomCloudTypeCloudAccountKeysGetResponse =
  v1CustomCloudTypeCloudAccountKeysGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudAccountKeysGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/cloudAccountKeys`;
};

export const v1CustomCloudTypeCloudAccountKeysGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudAccountKeysGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudAccountKeysGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudAccountKeysGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudAccountKeysGetResponse;
};

/**
 * @summary Update the custom cloud type cloud account keys
 */
export type v1CustomCloudTypeCloudAccountKeysUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeCloudAccountKeysUpdateResponseComposite =
  v1CustomCloudTypeCloudAccountKeysUpdateResponseDefault;

export type v1CustomCloudTypeCloudAccountKeysUpdateResponse =
  v1CustomCloudTypeCloudAccountKeysUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudAccountKeysUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/cloudAccountKeys`;
};

export const v1CustomCloudTypeCloudAccountKeysUpdate = async (
  cloudType: string,
  v1CustomCloudTypeCloudAccountKeys: V1CustomCloudTypeCloudAccountKeys,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudAccountKeysUpdateResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudAccountKeysUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1CustomCloudTypeCloudAccountKeys),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudAccountKeysUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudAccountKeysUpdateResponse;
};

/**
 * @summary Delete the custom cloud type bootstrap
 */
export type v1CustomCloudTypeBootstrapDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeBootstrapDeleteResponseComposite =
  v1CustomCloudTypeBootstrapDeleteResponseDefault;

export type v1CustomCloudTypeBootstrapDeleteResponse =
  v1CustomCloudTypeBootstrapDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const v1CustomCloudTypeBootstrapDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeBootstrapDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypeBootstrapDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeBootstrapDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeBootstrapDeleteResponse;
};

/**
 * @summary Returns the custom cloud type bootstrap
 */
export type v1CustomCloudTypeBootstrapGetResponse200 = {
  data: V1CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeBootstrapGetResponseComposite =
  v1CustomCloudTypeBootstrapGetResponse200;

export type v1CustomCloudTypeBootstrapGetResponse =
  v1CustomCloudTypeBootstrapGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const v1CustomCloudTypeBootstrapGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeBootstrapGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeBootstrapGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeBootstrapGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeBootstrapGetResponse;
};

/**
 * @summary Update the custom cloud type bootstrap
 */
export type v1CustomCloudTypeBootstrapUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeBootstrapUpdateResponseComposite =
  v1CustomCloudTypeBootstrapUpdateResponseDefault;

export type v1CustomCloudTypeBootstrapUpdateResponse =
  v1CustomCloudTypeBootstrapUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const v1CustomCloudTypeBootstrapUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeBootstrapUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(getV1CustomCloudTypeBootstrapUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeBootstrapUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeBootstrapUpdateResponse;
};

/**
 * @summary Delete the custom cloud type cloud provider
 */
export type v1CustomCloudTypeCloudProviderDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeCloudProviderDeleteResponseComposite =
  v1CustomCloudTypeCloudProviderDeleteResponseDefault;

export type v1CustomCloudTypeCloudProviderDeleteResponse =
  v1CustomCloudTypeCloudProviderDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const v1CustomCloudTypeCloudProviderDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudProviderDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudProviderDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudProviderDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudProviderDeleteResponse;
};

/**
 * @summary Returns the custom cloud type cloud provider
 */
export type v1CustomCloudTypeCloudProviderGetResponse200 = {
  data: V1CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeCloudProviderGetResponseComposite =
  v1CustomCloudTypeCloudProviderGetResponse200;

export type v1CustomCloudTypeCloudProviderGetResponse =
  v1CustomCloudTypeCloudProviderGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const v1CustomCloudTypeCloudProviderGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudProviderGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeCloudProviderGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudProviderGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudProviderGetResponse;
};

/**
 * @summary Update the custom cloud type cloud provider
 */
export type v1CustomCloudTypeCloudProviderUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeCloudProviderUpdateResponseComposite =
  v1CustomCloudTypeCloudProviderUpdateResponseDefault;

export type v1CustomCloudTypeCloudProviderUpdateResponse =
  v1CustomCloudTypeCloudProviderUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const v1CustomCloudTypeCloudProviderUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudProviderUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(
    getV1CustomCloudTypeCloudProviderUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudProviderUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudProviderUpdateResponse;
};

/**
 * @summary Delete the custom cloud type control plane
 */
export type v1CustomCloudTypeControlPlaneDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeControlPlaneDeleteResponseComposite =
  v1CustomCloudTypeControlPlaneDeleteResponseDefault;

export type v1CustomCloudTypeControlPlaneDeleteResponse =
  v1CustomCloudTypeControlPlaneDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const v1CustomCloudTypeControlPlaneDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlaneDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlaneDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlaneDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlaneDeleteResponse;
};

/**
 * @summary Returns the custom cloud type control plane
 */
export type v1CustomCloudTypeControlPlaneGetResponse200 = {
  data: V1CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeControlPlaneGetResponseComposite =
  v1CustomCloudTypeControlPlaneGetResponse200;

export type v1CustomCloudTypeControlPlaneGetResponse =
  v1CustomCloudTypeControlPlaneGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const v1CustomCloudTypeControlPlaneGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlaneGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeControlPlaneGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlaneGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlaneGetResponse;
};

/**
 * @summary Update the custom cloud type control plane
 */
export type v1CustomCloudTypeControlPlaneUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeControlPlaneUpdateResponseComposite =
  v1CustomCloudTypeControlPlaneUpdateResponseDefault;

export type v1CustomCloudTypeControlPlaneUpdateResponse =
  v1CustomCloudTypeControlPlaneUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const v1CustomCloudTypeControlPlaneUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlaneUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(
    getV1CustomCloudTypeControlPlaneUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlaneUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlaneUpdateResponse;
};

/**
 * @summary Delete the custom cloud type core
 */
export type v1CustomCloudTypeCoreDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeCoreDeleteResponseComposite =
  v1CustomCloudTypeCoreDeleteResponseDefault;

export type v1CustomCloudTypeCoreDeleteResponse =
  v1CustomCloudTypeCoreDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const v1CustomCloudTypeCoreDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCoreDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypeCoreDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCoreDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCoreDeleteResponse;
};

/**
 * @summary Returns the custom cloud type core
 */
export type v1CustomCloudTypeCoreGetResponse200 = {
  data: V1CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeCoreGetResponseComposite =
  v1CustomCloudTypeCoreGetResponse200;

export type v1CustomCloudTypeCoreGetResponse =
  v1CustomCloudTypeCoreGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const v1CustomCloudTypeCoreGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCoreGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeCoreGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCoreGetResponse;
};

/**
 * @summary Update the custom cloud type core
 */
export type v1CustomCloudTypeCoreUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeCoreUpdateResponseComposite =
  v1CustomCloudTypeCoreUpdateResponseDefault;

export type v1CustomCloudTypeCoreUpdateResponse =
  v1CustomCloudTypeCoreUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const v1CustomCloudTypeCoreUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCoreUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(getV1CustomCloudTypeCoreUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCoreUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCoreUpdateResponse;
};

/**
 * @summary Delete the custom cloud type cluster template
 */
export type v1CustomCloudTypeClusterTemplateDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeClusterTemplateDeleteResponseComposite =
  v1CustomCloudTypeClusterTemplateDeleteResponseDefault;

export type v1CustomCloudTypeClusterTemplateDeleteResponse =
  v1CustomCloudTypeClusterTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const v1CustomCloudTypeClusterTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeClusterTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeClusterTemplateDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeClusterTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type cluster template
 */
export type v1CustomCloudTypeClusterTemplateGetResponse200 = {
  data: V1CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeClusterTemplateGetResponseComposite =
  v1CustomCloudTypeClusterTemplateGetResponse200;

export type v1CustomCloudTypeClusterTemplateGetResponse =
  v1CustomCloudTypeClusterTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const v1CustomCloudTypeClusterTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeClusterTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeClusterTemplateGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeClusterTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type cluster template
 */
export type v1CustomCloudTypeClusterTemplateUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeClusterTemplateUpdateResponseComposite =
  v1CustomCloudTypeClusterTemplateUpdateResponseDefault;

export type v1CustomCloudTypeClusterTemplateUpdateResponse =
  v1CustomCloudTypeClusterTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const v1CustomCloudTypeClusterTemplateUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeClusterTemplateUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeClusterTemplateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeClusterTemplateUpdateResponse;
};

/**
 * @summary Delete the custom cloud type controlPlane pool template
 */
export type v1CustomCloudTypeControlPlanePoolTemplateDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeControlPlanePoolTemplateDeleteResponseComposite =
  v1CustomCloudTypeControlPlanePoolTemplateDeleteResponseDefault;

export type v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse =
  v1CustomCloudTypeControlPlanePoolTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const v1CustomCloudTypeControlPlanePoolTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type controlPlane pool template
 */
export type v1CustomCloudTypeControlPlanePoolTemplateGetResponse200 = {
  data: V1CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeControlPlanePoolTemplateGetResponseComposite =
  v1CustomCloudTypeControlPlanePoolTemplateGetResponse200;

export type v1CustomCloudTypeControlPlanePoolTemplateGetResponse =
  v1CustomCloudTypeControlPlanePoolTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const v1CustomCloudTypeControlPlanePoolTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlanePoolTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlanePoolTemplateGetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlanePoolTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type controlPlane pool template
 */
export type v1CustomCloudTypeControlPlanePoolTemplateUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeControlPlanePoolTemplateUpdateResponseComposite =
  v1CustomCloudTypeControlPlanePoolTemplateUpdateResponseDefault;

export type v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse =
  v1CustomCloudTypeControlPlanePoolTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const v1CustomCloudTypeControlPlanePoolTemplateUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse;
};

/**
 * @summary Delete the custom cloud type worker pool template
 */
export type v1CustomCloudTypeWorkerPoolTemplateDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeWorkerPoolTemplateDeleteResponseComposite =
  v1CustomCloudTypeWorkerPoolTemplateDeleteResponseDefault;

export type v1CustomCloudTypeWorkerPoolTemplateDeleteResponse =
  v1CustomCloudTypeWorkerPoolTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const v1CustomCloudTypeWorkerPoolTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeWorkerPoolTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeWorkerPoolTemplateDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeWorkerPoolTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type worker pool template
 */
export type v1CustomCloudTypeWorkerPoolTemplateGetResponse200 = {
  data: V1CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeWorkerPoolTemplateGetResponseComposite =
  v1CustomCloudTypeWorkerPoolTemplateGetResponse200;

export type v1CustomCloudTypeWorkerPoolTemplateGetResponse =
  v1CustomCloudTypeWorkerPoolTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const v1CustomCloudTypeWorkerPoolTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeWorkerPoolTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeWorkerPoolTemplateGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeWorkerPoolTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type worker pool template
 */
export type v1CustomCloudTypeWorkerPoolTemplateUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeWorkerPoolTemplateUpdateResponseComposite =
  v1CustomCloudTypeWorkerPoolTemplateUpdateResponseDefault;

export type v1CustomCloudTypeWorkerPoolTemplateUpdateResponse =
  v1CustomCloudTypeWorkerPoolTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const v1CustomCloudTypeWorkerPoolTemplateUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeWorkerPoolTemplateUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeWorkerPoolTemplateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeWorkerPoolTemplateUpdateResponse;
};

/**
 * @summary Returns the custom cloud type logo
 */
export type v1CustomCloudTypeLogoGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1CustomCloudTypeLogoGetResponseComposite =
  v1CustomCloudTypeLogoGetResponse200;

export type v1CustomCloudTypeLogoGetResponse =
  v1CustomCloudTypeLogoGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeLogoGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/logo`;
};

export const v1CustomCloudTypeLogoGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeLogoGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeLogoGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeLogoGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeLogoGetResponse;
};

/**
 * @summary Update the custom cloud type logo
 */
export type v1CustomCloudTypeLogoUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeLogoUpdateResponseComposite =
  v1CustomCloudTypeLogoUpdateResponseDefault;

export type v1CustomCloudTypeLogoUpdateResponse =
  v1CustomCloudTypeLogoUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeLogoUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/logo`;
};

export const v1CustomCloudTypeLogoUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateRequest: V1CustomCloudTypeBootstrapUpdateRequest,
  options?: RequestInit,
): Promise<v1CustomCloudTypeLogoUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1CustomCloudTypeBootstrapUpdateRequest.fileName,
    );
  }

  const res = await fetch(getV1CustomCloudTypeLogoUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeLogoUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeLogoUpdateResponse;
};

/**
 * @summary Returns the custom cloud type meta
 */
export type v1CustomCloudTypeMetaGetResponse200 = {
  data: V1CustomCloudMetaEntity;
  status: 200;
};

export type v1CustomCloudTypeMetaGetResponseComposite =
  v1CustomCloudTypeMetaGetResponse200;

export type v1CustomCloudTypeMetaGetResponse =
  v1CustomCloudTypeMetaGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeMetaGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/meta`;
};

export const v1CustomCloudTypeMetaGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeMetaGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeMetaGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeMetaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeMetaGetResponse;
};

/**
 * @summary Update the custom cloud type meta
 */
export type v1CustomCloudTypeMetaUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1CustomCloudTypeMetaUpdateResponseComposite =
  v1CustomCloudTypeMetaUpdateResponseDefault;

export type v1CustomCloudTypeMetaUpdateResponse =
  v1CustomCloudTypeMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeMetaUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/meta`;
};

export const v1CustomCloudTypeMetaUpdate = async (
  cloudType: string,
  v1CustomCloudRequestEntity: V1CustomCloudRequestEntity,
  options?: RequestInit,
): Promise<v1CustomCloudTypeMetaUpdateResponse> => {
  const res = await fetch(getV1CustomCloudTypeMetaUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CustomCloudRequestEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeMetaUpdateResponse;
};

/**
 * @summary Validate EKS properties
 */
export type v1EksPropertiesValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EksPropertiesValidateResponseComposite =
  v1EksPropertiesValidateResponseDefault;

export type v1EksPropertiesValidateResponse =
  v1EksPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1EksPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/eks/properties/validate`;
};

export const v1EksPropertiesValidate = async (
  v1EksPropertiesValidateSpec: V1EksPropertiesValidateSpec,
  options?: RequestInit,
): Promise<v1EksPropertiesValidateResponse> => {
  const res = await fetch(getV1EksPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EksPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EksPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EksPropertiesValidateResponse;
};

/**
 * @summary Validate the specified GCP account credentials
 */
export type v1GcpAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1GcpAccountValidateResponseComposite =
  v1GcpAccountValidateResponseDefault;

export type v1GcpAccountValidateResponse =
  v1GcpAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/account/validate`;
};

export const v1GcpAccountValidate = async (
  v1GcpCloudAccountValidateEntity: V1GcpCloudAccountValidateEntity,
  options?: RequestInit,
): Promise<v1GcpAccountValidateResponse> => {
  const res = await fetch(getV1GcpAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpCloudAccountValidateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpAccountValidateResponse;
};

/**
 * @summary Validate the specified GCP az
 */
export type v1GcpAzValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1GcpAzValidateResponseComposite = v1GcpAzValidateResponseDefault;

export type v1GcpAzValidateResponse = v1GcpAzValidateResponseComposite & {
  headers: Headers;
};

export const getV1GcpAzValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/azs/validate`;
};

export const v1GcpAzValidate = async (
  v1AzValidateEntity: V1AzValidateEntity,
  options?: RequestInit,
): Promise<v1GcpAzValidateResponse> => {
  const res = await fetch(getV1GcpAzValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AzValidateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpAzValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpAzValidateResponse;
};

/**
 * @summary Validate the specified GCP bucket name credentials
 */
export type v1GcpBucketNameValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1GcpBucketNameValidateResponseComposite =
  v1GcpBucketNameValidateResponseDefault;

export type v1GcpBucketNameValidateResponse =
  v1GcpBucketNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpBucketNameValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/bucketname/validate`;
};

export const v1GcpBucketNameValidate = async (
  v1GcpAccountNameValidateSpec: V1GcpAccountNameValidateSpec,
  options?: RequestInit,
): Promise<v1GcpBucketNameValidateResponse> => {
  const res = await fetch(getV1GcpBucketNameValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpAccountNameValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpBucketNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpBucketNameValidateResponse;
};

/**
 * @summary Validates the image with tag
 */
export type v1GcpContainerImageValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1GcpContainerImageValidateResponseComposite =
  v1GcpContainerImageValidateResponseDefault;

export type v1GcpContainerImageValidateResponse =
  v1GcpContainerImageValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpContainerImageValidateUrl = (
  params: V1GcpContainerImageValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/image/container/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/image/container/validate`;
};

export const v1GcpContainerImageValidate = async (
  params: V1GcpContainerImageValidateParams,
  options?: RequestInit,
): Promise<v1GcpContainerImageValidateResponse> => {
  const res = await fetch(getV1GcpContainerImageValidateUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpContainerImageValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpContainerImageValidateResponse;
};

/**
 * @summary Returns the Gcp image url for the specified image location
 */
export type v1GcpImageUrlResponse200 = {
  data: V1GcpImageUrlEntity;
  status: 200;
};

export type v1GcpImageUrlResponseComposite = v1GcpImageUrlResponse200;

export type v1GcpImageUrlResponse = v1GcpImageUrlResponseComposite & {
  headers: Headers;
};

export const getV1GcpImageUrlUrl = (imageName: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/images/${imageName}/url`;
};

export const v1GcpImageUrl = async (
  imageName: string,
  options?: RequestInit,
): Promise<v1GcpImageUrlResponse> => {
  const res = await fetch(getV1GcpImageUrlUrl(imageName), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpImageUrlResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpImageUrlResponse;
};

/**
 * @summary Retrieves a list of GCP projects for the specified account
 */
export type v1GcpProjectsResponse200 = {
  data: V1GcpProjects;
  status: 200;
};

export type v1GcpProjectsResponseComposite = v1GcpProjectsResponse200;

export type v1GcpProjectsResponse = v1GcpProjectsResponseComposite & {
  headers: Headers;
};

export const getV1GcpProjectsUrl = (params: V1GcpProjectsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects`;
};

export const v1GcpProjects = async (
  params: V1GcpProjectsParams,
  options?: RequestInit,
): Promise<v1GcpProjectsResponse> => {
  const res = await fetch(getV1GcpProjectsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpProjectsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpProjectsResponse;
};

/**
 * @summary Retrieves a list of GCP regions
 */
export type v1GcpRegionsResponse200 = {
  data: V1GcpRegions;
  status: 200;
};

export type v1GcpRegionsResponseComposite = v1GcpRegionsResponse200;

export type v1GcpRegionsResponse = v1GcpRegionsResponseComposite & {
  headers: Headers;
};

export const getV1GcpRegionsUrl = (
  project: string,
  params: V1GcpRegionsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions`;
};

export const v1GcpRegions = async (
  project: string,
  params: V1GcpRegionsParams,
  options?: RequestInit,
): Promise<v1GcpRegionsResponse> => {
  const res = await fetch(getV1GcpRegionsUrl(project, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpRegionsResponse;
};

/**
 * @summary Retrieves a list of GCP networks for the specified account
 */
export type v1GcpNetworksResponse200 = {
  data: V1GcpNetworks;
  status: 200;
};

export type v1GcpNetworksResponseComposite = v1GcpNetworksResponse200;

export type v1GcpNetworksResponse = v1GcpNetworksResponseComposite & {
  headers: Headers;
};

export const getV1GcpNetworksUrl = (
  project: string,
  region: string,
  params: V1GcpNetworksParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/networks`;
};

export const v1GcpNetworks = async (
  project: string,
  region: string,
  params: V1GcpNetworksParams,
  options?: RequestInit,
): Promise<v1GcpNetworksResponse> => {
  const res = await fetch(getV1GcpNetworksUrl(project, region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpNetworksResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpNetworksResponse;
};

/**
 * @summary Retrieves a list of GCP zones for the specified account and region
 */
export type v1GcpZonesResponse200 = {
  data: V1GcpZones;
  status: 200;
};

export type v1GcpZonesResponseComposite = v1GcpZonesResponse200;

export type v1GcpZonesResponse = v1GcpZonesResponseComposite & {
  headers: Headers;
};

export const getV1GcpZonesUrl = (
  project: string,
  region: string,
  params: V1GcpZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/zones`;
};

export const v1GcpZones = async (
  project: string,
  region: string,
  params: V1GcpZonesParams,
  options?: RequestInit,
): Promise<v1GcpZonesResponse> => {
  const res = await fetch(getV1GcpZonesUrl(project, region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpZonesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpZonesResponse;
};

/**
 * @summary Validate the specified GCP project
 */
export type v1GcpProjectValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1GcpProjectValidateResponseComposite =
  v1GcpProjectValidateResponseDefault;

export type v1GcpProjectValidateResponse =
  v1GcpProjectValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpProjectValidateUrl = (project: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/validate`;
};

export const v1GcpProjectValidate = async (
  project: string,
  v1CloudAccountUidEntity: V1CloudAccountUidEntity,
  options?: RequestInit,
): Promise<v1GcpProjectValidateResponse> => {
  const res = await fetch(getV1GcpProjectValidateUrl(project), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CloudAccountUidEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpProjectValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpProjectValidateResponse;
};

/**
 * @summary Retrieves a list of GCP zones for the specified account
 */
export type v1GcpAvailabilityZonesResponse200 = {
  data: V1GcpZones;
  status: 200;
};

export type v1GcpAvailabilityZonesResponseComposite =
  v1GcpAvailabilityZonesResponse200;

export type v1GcpAvailabilityZonesResponse =
  v1GcpAvailabilityZonesResponseComposite & {
    headers: Headers;
  };

export const getV1GcpAvailabilityZonesUrl = (
  project: string,
  params: V1GcpAvailabilityZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/zones`;
};

export const v1GcpAvailabilityZones = async (
  project: string,
  params: V1GcpAvailabilityZonesParams,
  options?: RequestInit,
): Promise<v1GcpAvailabilityZonesResponse> => {
  const res = await fetch(getV1GcpAvailabilityZonesUrl(project, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpAvailabilityZonesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpAvailabilityZonesResponse;
};

/**
 * @summary Validate GCP properties
 */
export type v1GcpPropertiesValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1GcpPropertiesValidateResponseComposite =
  v1GcpPropertiesValidateResponseDefault;

export type v1GcpPropertiesValidateResponse =
  v1GcpPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/properties/validate`;
};

export const v1GcpPropertiesValidate = async (
  v1GcpPropertiesValidateSpec: V1GcpPropertiesValidateSpec,
  options?: RequestInit,
): Promise<v1GcpPropertiesValidateResponse> => {
  const res = await fetch(getV1GcpPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1GcpPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpPropertiesValidateResponse;
};

/**
 * @summary Retrieves a list of GCP instance types
 */
export type v1GcpInstanceTypesResponse200 = {
  data: V1GcpInstanceTypes;
  status: 200;
};

export type v1GcpInstanceTypesResponseComposite = v1GcpInstanceTypesResponse200;

export type v1GcpInstanceTypesResponse = v1GcpInstanceTypesResponseComposite & {
  headers: Headers;
};

export const getV1GcpInstanceTypesUrl = (
  region: string,
  params?: V1GcpInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/instancetypes`;
};

export const v1GcpInstanceTypes = async (
  region: string,
  params?: V1GcpInstanceTypesParams,
  options?: RequestInit,
): Promise<v1GcpInstanceTypesResponse> => {
  const res = await fetch(getV1GcpInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpInstanceTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of Gcp storage types
 */
export type v1GcpStorageTypesResponse200 = {
  data: V1GcpStorageTypes;
  status: 200;
};

export type v1GcpStorageTypesResponseComposite = v1GcpStorageTypesResponse200;

export type v1GcpStorageTypesResponse = v1GcpStorageTypesResponseComposite & {
  headers: Headers;
};

export const getV1GcpStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/storagetypes`;
};

export const v1GcpStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<v1GcpStorageTypesResponse> => {
  const res = await fetch(getV1GcpStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpStorageTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpStorageTypesResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Maas account is valid
 */
export type v1MaasAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1MaasAccountValidateResponseComposite =
  v1MaasAccountValidateResponseDefault;

export type v1MaasAccountValidateResponse =
  v1MaasAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/maas/account/validate`;
};

export const v1MaasAccountValidate = async (
  v1MaasCloudAccount: V1MaasCloudAccount,
  options?: RequestInit,
): Promise<v1MaasAccountValidateResponse> => {
  const res = await fetch(getV1MaasAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MaasCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasAccountValidateResponse;
};

/**
 * @summary Retrieves a list of Maas zones for a particular account uid
 */
export type v1MaasZonesGetResponse200 = {
  data: V1MaasZones;
  status: 200;
};

export type v1MaasZonesGetResponseComposite = v1MaasZonesGetResponse200;

export type v1MaasZonesGetResponse = v1MaasZonesGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasZonesGetUrl = (params?: V1MaasZonesGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/azs`;
};

export const v1MaasZonesGet = async (
  params?: V1MaasZonesGetParams,
  options?: RequestInit,
): Promise<v1MaasZonesGetResponse> => {
  const res = await fetch(getV1MaasZonesGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasZonesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasZonesGetResponse;
};

/**
 * @summary Retrieves a list of Maas domains
 */
export type v1MaasDomainsGetResponse200 = {
  data: V1MaasDomains;
  status: 200;
};

export type v1MaasDomainsGetResponseComposite = v1MaasDomainsGetResponse200;

export type v1MaasDomainsGetResponse = v1MaasDomainsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasDomainsGetUrl = (params?: V1MaasDomainsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/domains?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/domains`;
};

export const v1MaasDomainsGet = async (
  params?: V1MaasDomainsGetParams,
  options?: RequestInit,
): Promise<v1MaasDomainsGetResponse> => {
  const res = await fetch(getV1MaasDomainsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasDomainsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasDomainsGetResponse;
};

/**
 * @summary Retrieves a list of Maas pools for a particular account uid
 */
export type v1MaasPoolsGetResponse200 = {
  data: V1MaasPools;
  status: 200;
};

export type v1MaasPoolsGetResponseComposite = v1MaasPoolsGetResponse200;

export type v1MaasPoolsGetResponse = v1MaasPoolsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasPoolsGetUrl = (params?: V1MaasPoolsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/resourcePools?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/resourcePools`;
};

export const v1MaasPoolsGet = async (
  params?: V1MaasPoolsGetParams,
  options?: RequestInit,
): Promise<v1MaasPoolsGetResponse> => {
  const res = await fetch(getV1MaasPoolsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasPoolsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasPoolsGetResponse;
};

/**
 * @summary Retrieves a list of Maas subnets for a particular account uid
 */
export type v1MaasSubnetsGetResponse200 = {
  data: V1MaasSubnets;
  status: 200;
};

export type v1MaasSubnetsGetResponseComposite = v1MaasSubnetsGetResponse200;

export type v1MaasSubnetsGetResponse = v1MaasSubnetsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasSubnetsGetUrl = (params?: V1MaasSubnetsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/subnets?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/subnets`;
};

export const v1MaasSubnetsGet = async (
  params?: V1MaasSubnetsGetParams,
  options?: RequestInit,
): Promise<v1MaasSubnetsGetResponse> => {
  const res = await fetch(getV1MaasSubnetsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasSubnetsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasSubnetsGetResponse;
};

/**
 * @summary Retrieves a list of Maas tags for a particular account uid
 */
export type v1MaasTagsGetResponse200 = {
  data: V1MaasTags;
  status: 200;
};

export type v1MaasTagsGetResponseComposite = v1MaasTagsGetResponse200;

export type v1MaasTagsGetResponse = v1MaasTagsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasTagsGetUrl = (params?: V1MaasTagsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/tags?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/tags`;
};

export const v1MaasTagsGet = async (
  params?: V1MaasTagsGetParams,
  options?: RequestInit,
): Promise<v1MaasTagsGetResponse> => {
  const res = await fetch(getV1MaasTagsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasTagsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasTagsGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if OpenStack account is valid
 */
export type v1OpenStackAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OpenStackAccountValidateResponseComposite =
  v1OpenStackAccountValidateResponseDefault;

export type v1OpenStackAccountValidateResponse =
  v1OpenStackAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/openstack/account/validate`;
};

export const v1OpenStackAccountValidate = async (
  v1OpenStackCloudAccount: V1OpenStackCloudAccount,
  options?: RequestInit,
): Promise<v1OpenStackAccountValidateResponse> => {
  const res = await fetch(getV1OpenStackAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OpenStackCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackAccountValidateResponse;
};

/**
 * @summary Retrieves a list of OpenStack azs for a particular account uid
 */
export type v1OpenStackAzsGetResponse200 = {
  data: V1OpenStackAzs;
  status: 200;
};

export type v1OpenStackAzsGetResponseComposite = v1OpenStackAzsGetResponse200;

export type v1OpenStackAzsGetResponse = v1OpenStackAzsGetResponseComposite & {
  headers: Headers;
};

export const getV1OpenStackAzsGetUrl = (params?: V1OpenStackAzsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/azs`;
};

export const v1OpenStackAzsGet = async (
  params?: V1OpenStackAzsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackAzsGetResponse> => {
  const res = await fetch(getV1OpenStackAzsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackAzsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackAzsGetResponse;
};

/**
 * @summary Returns the OpenStack flavors
 */
export type v1OpenStackFlavorsGetResponse200 = {
  data: V1OpenStackFlavors;
  status: 200;
};

export type v1OpenStackFlavorsGetResponseComposite =
  v1OpenStackFlavorsGetResponse200;

export type v1OpenStackFlavorsGetResponse =
  v1OpenStackFlavorsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackFlavorsGetUrl = (
  params?: V1OpenStackFlavorsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/flavors?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/flavors`;
};

export const v1OpenStackFlavorsGet = async (
  params?: V1OpenStackFlavorsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackFlavorsGetResponse> => {
  const res = await fetch(getV1OpenStackFlavorsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackFlavorsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackFlavorsGetResponse;
};

/**
 * @summary Returns the OpenStack keypair
 */
export type v1OpenStackKeypairsGetResponse200 = {
  data: V1OpenStackKeypairs;
  status: 200;
};

export type v1OpenStackKeypairsGetResponseComposite =
  v1OpenStackKeypairsGetResponse200;

export type v1OpenStackKeypairsGetResponse =
  v1OpenStackKeypairsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackKeypairsGetUrl = (
  params?: V1OpenStackKeypairsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/keypairs`;
};

export const v1OpenStackKeypairsGet = async (
  params?: V1OpenStackKeypairsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackKeypairsGetResponse> => {
  const res = await fetch(getV1OpenStackKeypairsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackKeypairsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackKeypairsGetResponse;
};

/**
 * @summary Returns the OpenStack networks
 */
export type v1OpenStackNetworksGetResponse200 = {
  data: V1OpenStackNetworks;
  status: 200;
};

export type v1OpenStackNetworksGetResponseComposite =
  v1OpenStackNetworksGetResponse200;

export type v1OpenStackNetworksGetResponse =
  v1OpenStackNetworksGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackNetworksGetUrl = (
  params?: V1OpenStackNetworksGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/networks`;
};

export const v1OpenStackNetworksGet = async (
  params?: V1OpenStackNetworksGetParams,
  options?: RequestInit,
): Promise<v1OpenStackNetworksGetResponse> => {
  const res = await fetch(getV1OpenStackNetworksGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackNetworksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackNetworksGetResponse;
};

/**
 * @summary Returns the OpenStack projects
 */
export type v1OpenStackProjectsGetResponse200 = {
  data: V1OpenStackProjects;
  status: 200;
};

export type v1OpenStackProjectsGetResponseComposite =
  v1OpenStackProjectsGetResponse200;

export type v1OpenStackProjectsGetResponse =
  v1OpenStackProjectsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackProjectsGetUrl = (
  params?: V1OpenStackProjectsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/projects`;
};

export const v1OpenStackProjectsGet = async (
  params?: V1OpenStackProjectsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackProjectsGetResponse> => {
  const res = await fetch(getV1OpenStackProjectsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackProjectsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackProjectsGetResponse;
};

/**
 * @summary Returns the OpenStack regions
 */
export type v1OpenStackRegionsGetResponse200 = {
  data: V1OpenStackRegions;
  status: 200;
};

export type v1OpenStackRegionsGetResponseComposite =
  v1OpenStackRegionsGetResponse200;

export type v1OpenStackRegionsGetResponse =
  v1OpenStackRegionsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackRegionsGetUrl = (
  params?: V1OpenStackRegionsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/regions`;
};

export const v1OpenStackRegionsGet = async (
  params?: V1OpenStackRegionsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackRegionsGetResponse> => {
  const res = await fetch(getV1OpenStackRegionsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackRegionsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackRegionsGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Vsphere account is valid
 */
export type v1VsphereAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1VsphereAccountValidateResponseComposite =
  v1VsphereAccountValidateResponseDefault;

export type v1VsphereAccountValidateResponse =
  v1VsphereAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/vsphere/account/validate`;
};

export const v1VsphereAccountValidate = async (
  v1VsphereCloudAccount: V1VsphereCloudAccount,
  options?: RequestInit,
): Promise<v1VsphereAccountValidateResponse> => {
  const res = await fetch(getV1VsphereAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereAccountValidateResponse;
};

/**
 * @summary Returns the vsphere data centers
 */
export type v1VsphereDatacentersResponse200 = {
  data: V1VsphereDatacenters;
  status: 200;
};

export type v1VsphereDatacentersResponseComposite =
  v1VsphereDatacentersResponse200;

export type v1VsphereDatacentersResponse =
  v1VsphereDatacentersResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDatacentersUrl = (
  params?: V1VsphereDatacentersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters`;
};

export const v1VsphereDatacenters = async (
  params?: V1VsphereDatacentersParams,
  options?: RequestInit,
): Promise<v1VsphereDatacentersResponse> => {
  const res = await fetch(getV1VsphereDatacentersUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereDatacentersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereDatacentersResponse;
};

/**
 * @summary Returns the resources for vsphere compute cluster
 */
export type v1VsphereComputeClusterResourcesResponse200 = {
  data: V1VsphereComputeClusterResources;
  status: 200;
};

export type v1VsphereComputeClusterResourcesResponseComposite =
  v1VsphereComputeClusterResourcesResponse200;

export type v1VsphereComputeClusterResourcesResponse =
  v1VsphereComputeClusterResourcesResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereComputeClusterResourcesUrl = (
  uid: string,
  computecluster: string,
  params: V1VsphereComputeClusterResourcesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters/${uid}/computeclusters/${computecluster}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters/${uid}/computeclusters/${computecluster}`;
};

export const v1VsphereComputeClusterResources = async (
  uid: string,
  computecluster: string,
  params: V1VsphereComputeClusterResourcesParams,
  options?: RequestInit,
): Promise<v1VsphereComputeClusterResourcesResponse> => {
  const res = await fetch(
    getV1VsphereComputeClusterResourcesUrl(uid, computecluster, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereComputeClusterResourcesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereComputeClusterResourcesResponse;
};

/**
 * @summary Retrieves vsphere env
 */
export type v1VsphereEnvResponse200 = {
  data: V1VsphereEnv;
  status: 200;
};

export type v1VsphereEnvResponseComposite = v1VsphereEnvResponse200;

export type v1VsphereEnvResponse = v1VsphereEnvResponseComposite & {
  headers: Headers;
};

export const getV1VsphereEnvUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/vsphere/env`;
};

export const v1VsphereEnv = async (
  v1VsphereCloudAccount: V1VsphereCloudAccount,
  options?: RequestInit,
): Promise<v1VsphereEnvResponse> => {
  const res = await fetch(getV1VsphereEnvUrl(), {
    ...options,
    method: "GET",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereEnvResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereEnvResponse;
};

/**
 * @summary Returns the cloud compute rate
 */
export type v1CloudComputeRateResponse200 = {
  data: V1CloudCost;
  status: 200;
};

export type v1CloudComputeRateResponseComposite = v1CloudComputeRateResponse200;

export type v1CloudComputeRateResponse = v1CloudComputeRateResponseComposite & {
  headers: Headers;
};

export const getV1CloudComputeRateUrl = (
  cloud: string,
  type: string,
  params: V1CloudComputeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/${cloud}/compute/${type}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/${cloud}/compute/${type}/rate`;
};

export const v1CloudComputeRate = async (
  cloud: string,
  type: string,
  params: V1CloudComputeRateParams,
  options?: RequestInit,
): Promise<v1CloudComputeRateResponse> => {
  const res = await fetch(getV1CloudComputeRateUrl(cloud, type, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudComputeRateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudComputeRateResponse;
};

/**
 * @summary Returns the cloud storage rate
 */
export type v1CloudStorageRateResponse200 = {
  data: V1CloudCost;
  status: 200;
};

export type v1CloudStorageRateResponseComposite = v1CloudStorageRateResponse200;

export type v1CloudStorageRateResponse = v1CloudStorageRateResponseComposite & {
  headers: Headers;
};

export const getV1CloudStorageRateUrl = (
  cloud: string,
  type: string,
  params: V1CloudStorageRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/${cloud}/storage/${type}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/${cloud}/storage/${type}/rate`;
};

export const v1CloudStorageRate = async (
  cloud: string,
  type: string,
  params: V1CloudStorageRateParams,
  options?: RequestInit,
): Promise<v1CloudStorageRateResponse> => {
  const res = await fetch(getV1CloudStorageRateUrl(cloud, type, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudStorageRateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudStorageRateResponse;
};

/**
 * @summary Create cluster groups
 */
export type v1ClusterGroupsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterGroupsCreateResponseComposite =
  v1ClusterGroupsCreateResponse201;

export type v1ClusterGroupsCreateResponse =
  v1ClusterGroupsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups`;
};

export const v1ClusterGroupsCreate = async (
  v1ClusterGroupEntity?: V1ClusterGroupEntity,
  options?: RequestInit,
): Promise<v1ClusterGroupsCreateResponse> => {
  const res = await fetch(getV1ClusterGroupsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterGroupEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsCreateResponse;
};

/**
 * @summary Get cluster group developer credit usage by scope
 */
export type v1ClusterGroupsDeveloperCreditUsageGetResponse200 = {
  data: V1ClusterGroupsDeveloperCreditUsage;
  status: 200;
};

export type v1ClusterGroupsDeveloperCreditUsageGetResponseComposite =
  v1ClusterGroupsDeveloperCreditUsageGetResponse200;

export type v1ClusterGroupsDeveloperCreditUsageGetResponse =
  v1ClusterGroupsDeveloperCreditUsageGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsDeveloperCreditUsageGetUrl = (
  scope: "system" | "tenant",
) => {
  return `https://api.spectrocloud.com/v1/clustergroups/developerCredit/usage/${scope}`;
};

export const v1ClusterGroupsDeveloperCreditUsageGet = async (
  scope: "system" | "tenant",
  options?: RequestInit,
): Promise<v1ClusterGroupsDeveloperCreditUsageGetResponse> => {
  const res = await fetch(getV1ClusterGroupsDeveloperCreditUsageGetUrl(scope), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsDeveloperCreditUsageGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsDeveloperCreditUsageGetResponse;
};

/**
 * @summary Retrieves a list of cluster groups host cluster summary
 */
export type v1ClusterGroupsHostClusterSummaryResponse200 = {
  data: V1ClusterGroupsHostClusterSummary;
  status: 200;
};

export type v1ClusterGroupsHostClusterSummaryResponseComposite =
  v1ClusterGroupsHostClusterSummaryResponse200;

export type v1ClusterGroupsHostClusterSummaryResponse =
  v1ClusterGroupsHostClusterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsHostClusterSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster`;
};

export const v1ClusterGroupsHostClusterSummary = async (
  options?: RequestInit,
): Promise<v1ClusterGroupsHostClusterSummaryResponse> => {
  const res = await fetch(getV1ClusterGroupsHostClusterSummaryUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsHostClusterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsHostClusterSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster groups host cluster metadata
 */
export type v1ClusterGroupsHostClusterMetadataResponse200 = {
  data: V1ClusterGroupsHostClusterMetadata;
  status: 200;
};

export type v1ClusterGroupsHostClusterMetadataResponseComposite =
  v1ClusterGroupsHostClusterMetadataResponse200;

export type v1ClusterGroupsHostClusterMetadataResponse =
  v1ClusterGroupsHostClusterMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsHostClusterMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster/metadata`;
};

export const v1ClusterGroupsHostClusterMetadata = async (
  options?: RequestInit,
): Promise<v1ClusterGroupsHostClusterMetadataResponse> => {
  const res = await fetch(getV1ClusterGroupsHostClusterMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsHostClusterMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsHostClusterMetadataResponse;
};

/**
 * @summary Validates the cluster groups name
 */
export type v1ClusterGroupsValidateNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterGroupsValidateNameResponseComposite =
  v1ClusterGroupsValidateNameResponseDefault;

export type v1ClusterGroupsValidateNameResponse =
  v1ClusterGroupsValidateNameResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsValidateNameUrl = (
  params: V1ClusterGroupsValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/validate/name`;
};

export const v1ClusterGroupsValidateName = async (
  params: V1ClusterGroupsValidateNameParams,
  options?: RequestInit,
): Promise<v1ClusterGroupsValidateNameResponse> => {
  const res = await fetch(getV1ClusterGroupsValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsValidateNameResponse;
};

/**
 * @summary Deletes the specified cluster group
 */
export type v1ClusterGroupsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterGroupsUidDeleteResponseComposite =
  v1ClusterGroupsUidDeleteResponseDefault;

export type v1ClusterGroupsUidDeleteResponse =
  v1ClusterGroupsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const v1ClusterGroupsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterGroupsUidDeleteResponse> => {
  const res = await fetch(getV1ClusterGroupsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsUidDeleteResponse;
};

/**
 * @summary Returns the specified cluster groups
 */
export type v1ClusterGroupsUidGetResponse200 = {
  data: V1ClusterGroup;
  status: 200;
};

export type v1ClusterGroupsUidGetResponseComposite =
  v1ClusterGroupsUidGetResponse200;

export type v1ClusterGroupsUidGetResponse =
  v1ClusterGroupsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const v1ClusterGroupsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterGroupsUidGetResponse> => {
  const res = await fetch(getV1ClusterGroupsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsUidGetResponse;
};

/**
 * @summary Updates cluster reference and host cluster config
 */
export type v1ClusterGroupsUidHostClusterUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterGroupsUidHostClusterUpdateResponseComposite =
  v1ClusterGroupsUidHostClusterUpdateResponseDefault;

export type v1ClusterGroupsUidHostClusterUpdateResponse =
  v1ClusterGroupsUidHostClusterUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidHostClusterUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/hostCluster`;
};

export const v1ClusterGroupsUidHostClusterUpdate = async (
  uid: string,
  v1ClusterGroupHostClusterEntity?: V1ClusterGroupHostClusterEntity,
  options?: RequestInit,
): Promise<v1ClusterGroupsUidHostClusterUpdateResponse> => {
  const res = await fetch(getV1ClusterGroupsUidHostClusterUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterGroupHostClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsUidHostClusterUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsUidHostClusterUpdateResponse;
};

/**
 * @summary Updates the specified cluster groups meta
 */
export type v1ClusterGroupsUidMetaUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterGroupsUidMetaUpdateResponseComposite =
  v1ClusterGroupsUidMetaUpdateResponseDefault;

export type v1ClusterGroupsUidMetaUpdateResponse =
  v1ClusterGroupsUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/meta`;
};

export const v1ClusterGroupsUidMetaUpdate = async (
  uid: string,
  v1ObjectMeta?: V1ObjectMeta,
  options?: RequestInit,
): Promise<v1ClusterGroupsUidMetaUpdateResponse> => {
  const res = await fetch(getV1ClusterGroupsUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMeta),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsUidMetaUpdateResponse;
};

/**
 * @summary Returns the specified clustergroup's profile packs resolved values
 */
export type v1ClusterGroupsUidPacksResolvedValuesGetResponse200 = {
  data: V1SpectroClusterProfilesResolvedValues;
  status: 200;
};

export type v1ClusterGroupsUidPacksResolvedValuesGetResponseComposite =
  v1ClusterGroupsUidPacksResolvedValuesGetResponse200;

export type v1ClusterGroupsUidPacksResolvedValuesGetResponse =
  v1ClusterGroupsUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidPacksResolvedValuesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/packs/resolvedValues`;
};

export const v1ClusterGroupsUidPacksResolvedValuesGet = async (
  uid: string,
  v1SpectroClusterProfilesParamReferenceEntity?: V1SpectroClusterProfilesParamReferenceEntity,
  options?: RequestInit,
): Promise<v1ClusterGroupsUidPacksResolvedValuesGetResponse> => {
  const res = await fetch(getV1ClusterGroupsUidPacksResolvedValuesGetUrl(uid), {
    ...options,
    method: "GET",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfilesParamReferenceEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsUidPacksResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsUidPacksResolvedValuesGetResponse;
};

/**
 * @summary Returns the associated profiles of a specified cluster group
 */
export type v1ClusterGroupsUidProfilesGetResponse200 = {
  data: V1SpectroClusterProfileList;
  status: 200;
};

export type v1ClusterGroupsUidProfilesGetResponseComposite =
  v1ClusterGroupsUidProfilesGetResponse200;

export type v1ClusterGroupsUidProfilesGetResponse =
  v1ClusterGroupsUidProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidProfilesGetUrl = (
  uid: string,
  params?: V1ClusterGroupsUidProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const v1ClusterGroupsUidProfilesGet = async (
  uid: string,
  params?: V1ClusterGroupsUidProfilesGetParams,
  options?: RequestInit,
): Promise<v1ClusterGroupsUidProfilesGetResponse> => {
  const res = await fetch(getV1ClusterGroupsUidProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsUidProfilesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsUidProfilesGetResponse;
};

/**
 * @summary Updates the specified cluster groups profiles
 */
export type v1ClusterGroupsUidProfilesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterGroupsUidProfilesUpdateResponseComposite =
  v1ClusterGroupsUidProfilesUpdateResponseDefault;

export type v1ClusterGroupsUidProfilesUpdateResponse =
  v1ClusterGroupsUidProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidProfilesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const v1ClusterGroupsUidProfilesUpdate = async (
  uid: string,
  v1SpectroClusterProfiles?: V1SpectroClusterProfiles,
  options?: RequestInit,
): Promise<v1ClusterGroupsUidProfilesUpdateResponse> => {
  const res = await fetch(getV1ClusterGroupsUidProfilesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfiles),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupsUidProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupsUidProfilesUpdateResponse;
};

/**
 * @summary Creates a cluster profile
 */
export type v1ClusterProfilesCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterProfilesCreateResponseComposite =
  v1ClusterProfilesCreateResponse201;

export type v1ClusterProfilesCreateResponse =
  v1ClusterProfilesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesCreateUrl = (
  params?: V1ClusterProfilesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles`;
};

export const v1ClusterProfilesCreate = async (
  v1ClusterProfileEntity?: V1ClusterProfileEntity,
  params?: V1ClusterProfilesCreateParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesCreateResponse> => {
  const res = await fetch(getV1ClusterProfilesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesCreateResponse;
};

/**
 * @summary Deletes list of cluster profiles
 */
export type v1ClusterProfilesBulkDeleteResponse200 = {
  data: V1BulkDeleteResponse;
  status: 200;
};

export type v1ClusterProfilesBulkDeleteResponseComposite =
  v1ClusterProfilesBulkDeleteResponse200;

export type v1ClusterProfilesBulkDeleteResponse =
  v1ClusterProfilesBulkDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesBulkDeleteUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/bulk`;
};

export const v1ClusterProfilesBulkDelete = async (
  v1BulkDeleteRequest?: V1BulkDeleteRequest,
  options?: RequestInit,
): Promise<v1ClusterProfilesBulkDeleteResponse> => {
  const res = await fetch(getV1ClusterProfilesBulkDeleteUrl(), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1BulkDeleteRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesBulkDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesBulkDeleteResponse;
};

/**
 * @summary Imports a cluster profile
 */
export type v1ClusterProfilesImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterProfilesImportResponseComposite =
  v1ClusterProfilesImportResponse201;

export type v1ClusterProfilesImportResponse =
  v1ClusterProfilesImportResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesImportUrl = (
  params?: V1ClusterProfilesImportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/import?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/import`;
};

export const v1ClusterProfilesImport = async (
  v1ClusterProfileImportEntity?: V1ClusterProfileImportEntity,
  params?: V1ClusterProfilesImportParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesImportResponse> => {
  const res = await fetch(getV1ClusterProfilesImportUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesImportResponse;
};

/**
 * @summary Imports a cluster profile via file
 */
export type v1ClusterProfilesImportFileResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterProfilesImportFileResponseComposite =
  v1ClusterProfilesImportFileResponse201;

export type v1ClusterProfilesImportFileResponse =
  v1ClusterProfilesImportFileResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesImportFileUrl = (
  params?: V1ClusterProfilesImportFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/import/file?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/import/file`;
};

export const v1ClusterProfilesImportFile = async (
  v1ClusterProfilesImportFileRequest: V1ClusterProfilesImportFileRequest,
  params?: V1ClusterProfilesImportFileParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesImportFileResponse> => {
  const formData = new FormData();
  if (v1ClusterProfilesImportFileRequest.importFile !== undefined) {
    formData.append(
      `importFile`,
      v1ClusterProfilesImportFileRequest.importFile,
    );
  }

  const res = await fetch(getV1ClusterProfilesImportFileUrl(params), {
    ...options,
    method: "POST",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesImportFileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesImportFileResponse;
};

/**
 * @summary Validates cluster profile import
 */
export type v1ClusterProfilesImportValidateResponse200 = {
  data: V1ClusterProfileImportEntity;
  status: 200;
};

export type v1ClusterProfilesImportValidateResponseComposite =
  v1ClusterProfilesImportValidateResponse200;

export type v1ClusterProfilesImportValidateResponse =
  v1ClusterProfilesImportValidateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesImportValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/import/validate`;
};

export const v1ClusterProfilesImportValidate = async (
  v1ClusterProfileImportEntity?: V1ClusterProfileImportEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesImportValidateResponse> => {
  const res = await fetch(getV1ClusterProfilesImportValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesImportValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesImportValidateResponse;
};

/**
 * @summary Retrieves a list of macros
 */
export type v1MacrosListResponse200 = {
  data: V1Macros;
  status: 200;
};

export type v1MacrosListResponseComposite = v1MacrosListResponse200;

export type v1MacrosListResponse = v1MacrosListResponseComposite & {
  headers: Headers;
};

export const getV1MacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/macros`;
};

export const v1MacrosList = async (
  options?: RequestInit,
): Promise<v1MacrosListResponse> => {
  const res = await fetch(getV1MacrosListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MacrosListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MacrosListResponse;
};

/**
 * Validates the cluster profile name and version
 * @summary Validates the cluster profile metadata
 */
export type v1ClusterProfilesValidateNameVersionResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesValidateNameVersionResponseComposite =
  v1ClusterProfilesValidateNameVersionResponseDefault;

export type v1ClusterProfilesValidateNameVersionResponse =
  v1ClusterProfilesValidateNameVersionResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesValidateNameVersionUrl = (
  params?: V1ClusterProfilesValidateNameVersionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/validate/name`;
};

export const v1ClusterProfilesValidateNameVersion = async (
  params?: V1ClusterProfilesValidateNameVersionParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesValidateNameVersionResponse> => {
  const res = await fetch(getV1ClusterProfilesValidateNameVersionUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesValidateNameVersionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesValidateNameVersionResponse;
};

/**
 * @summary Validates cluster profile packs
 */
export type v1ClusterProfilesValidatePacksResponse200 = {
  data: V1ClusterProfileValidatorResponse;
  status: 200;
};

export type v1ClusterProfilesValidatePacksResponseComposite =
  v1ClusterProfilesValidatePacksResponse200;

export type v1ClusterProfilesValidatePacksResponse =
  v1ClusterProfilesValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesValidatePacksUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/validate/packs`;
};

export const v1ClusterProfilesValidatePacks = async (
  v1ClusterProfileTemplateDraft?: V1ClusterProfileTemplateDraft,
  options?: RequestInit,
): Promise<v1ClusterProfilesValidatePacksResponse> => {
  const res = await fetch(getV1ClusterProfilesValidatePacksUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileTemplateDraft),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesValidatePacksResponse;
};

/**
 * @summary Deletes the specified cluster profile
 */
export type v1ClusterProfilesDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesDeleteResponseComposite =
  v1ClusterProfilesDeleteResponseDefault;

export type v1ClusterProfilesDeleteResponse =
  v1ClusterProfilesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesDeleteUrl = (
  uid: string,
  params?: V1ClusterProfilesDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const v1ClusterProfilesDelete = async (
  uid: string,
  params?: V1ClusterProfilesDeleteParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesDeleteResponse> => {
  const res = await fetch(getV1ClusterProfilesDeleteUrl(uid, params), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesDeleteResponse;
};

/**
 * @summary Returns a specified cluster profile
 */
export type v1ClusterProfilesGetResponse200 = {
  data: V1ClusterProfile;
  status: 200;
};

export type v1ClusterProfilesGetResponseComposite =
  v1ClusterProfilesGetResponse200;

export type v1ClusterProfilesGetResponse =
  v1ClusterProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesGetUrl = (
  uid: string,
  params?: V1ClusterProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const v1ClusterProfilesGet = async (
  uid: string,
  params?: V1ClusterProfilesGetParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesGetResponse> => {
  const res = await fetch(getV1ClusterProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesGetResponse;
};

/**
 * @summary Updates the specified cluster profile
 */
export type v1ClusterProfilesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUpdateResponseComposite =
  v1ClusterProfilesUpdateResponseDefault;

export type v1ClusterProfilesUpdateResponse =
  v1ClusterProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUpdateUrl = (
  uid: string,
  params?: V1ClusterProfilesUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const v1ClusterProfilesUpdate = async (
  uid: string,
  v1ClusterProfileUpdateEntity?: V1ClusterProfileUpdateEntity,
  params?: V1ClusterProfilesUpdateParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUpdateResponse> => {
  const res = await fetch(getV1ClusterProfilesUpdateUrl(uid, params), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUpdateResponse;
};

/**
 * @summary Creates a clone of the specified cluster profile
 */
export type v1ClusterProfilesUidCloneResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterProfilesUidCloneResponseComposite =
  v1ClusterProfilesUidCloneResponse201;

export type v1ClusterProfilesUidCloneResponse =
  v1ClusterProfilesUidCloneResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/clone`;
};

export const v1ClusterProfilesUidClone = async (
  uid: string,
  v1ClusterProfileCloneEntity?: V1ClusterProfileCloneEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidCloneResponse> => {
  const res = await fetch(getV1ClusterProfilesUidCloneUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileCloneEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidCloneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidCloneResponse;
};

/**
 * Validates the cloned cluster profile name, version and target project uid
 * @summary Validates the cluster profile clone
 */
export type v1ClusterProfilesUidCloneValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidCloneValidateResponseComposite =
  v1ClusterProfilesUidCloneValidateResponseDefault;

export type v1ClusterProfilesUidCloneValidateResponse =
  v1ClusterProfilesUidCloneValidateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidCloneValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/clone/validate`;
};

export const v1ClusterProfilesUidCloneValidate = async (
  uid: string,
  v1ClusterProfileCloneMetaInputEntity?: V1ClusterProfileCloneMetaInputEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidCloneValidateResponse> => {
  const res = await fetch(getV1ClusterProfilesUidCloneValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileCloneMetaInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidCloneValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidCloneValidateResponse;
};

/**
 * @summary Export the specified cluster profile
 */
export type v1ClusterProfilesUidExportResponse200 = {
  data: Blob;
  status: 200;
};

export type v1ClusterProfilesUidExportResponseComposite =
  v1ClusterProfilesUidExportResponse200;

export type v1ClusterProfilesUidExportResponse =
  v1ClusterProfilesUidExportResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidExportUrl = (
  uid: string,
  params?: V1ClusterProfilesUidExportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export`;
};

export const v1ClusterProfilesUidExport = async (
  uid: string,
  params?: V1ClusterProfilesUidExportParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidExportResponse> => {
  const res = await fetch(getV1ClusterProfilesUidExportUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidExportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidExportResponse;
};

/**
 * @summary Downloads the specified cluster profile
 */
export type v1ClusterProfilesUidExportTerraformResponse200 = {
  data: Blob;
  status: 200;
};

export type v1ClusterProfilesUidExportTerraformResponseComposite =
  v1ClusterProfilesUidExportTerraformResponse200;

export type v1ClusterProfilesUidExportTerraformResponse =
  v1ClusterProfilesUidExportTerraformResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidExportTerraformUrl = (
  uid: string,
  params?: V1ClusterProfilesUidExportTerraformParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export/terraform?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export/terraform`;
};

export const v1ClusterProfilesUidExportTerraform = async (
  uid: string,
  params?: V1ClusterProfilesUidExportTerraformParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidExportTerraformResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidExportTerraformUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidExportTerraformResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidExportTerraformResponse;
};

/**
 * @summary Updates the specified cluster profile metadata
 */
export type v1ClusterProfilesUidMetadataUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidMetadataUpdateResponseComposite =
  v1ClusterProfilesUidMetadataUpdateResponseDefault;

export type v1ClusterProfilesUidMetadataUpdateResponse =
  v1ClusterProfilesUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/metadata`;
};

export const v1ClusterProfilesUidMetadataUpdate = async (
  uid: string,
  v1ProfileMetaEntity?: V1ProfileMetaEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidMetadataUpdateResponse> => {
  const res = await fetch(getV1ClusterProfilesUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProfileMetaEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidMetadataUpdateResponse;
};

/**
 * @summary Updates cluster profile packs ref
 */
export type v1ClusterProfilesPacksRefUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesPacksRefUpdateResponseComposite =
  v1ClusterProfilesPacksRefUpdateResponseDefault;

export type v1ClusterProfilesPacksRefUpdateResponse =
  v1ClusterProfilesPacksRefUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesPacksRefUpdateUrl = (
  uid: string,
  params?: V1ClusterProfilesPacksRefUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packRefs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packRefs`;
};

export const v1ClusterProfilesPacksRefUpdate = async (
  uid: string,
  v1ClusterProfileNotificationUpdateEntity?: V1ClusterProfileNotificationUpdateEntity,
  params?: V1ClusterProfilesPacksRefUpdateParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesPacksRefUpdateResponse> => {
  const res = await fetch(getV1ClusterProfilesPacksRefUpdateUrl(uid, params), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileNotificationUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesPacksRefUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesPacksRefUpdateResponse;
};

/**
 * @summary Returns the specified cluster profile packs
 */
export type v1ClusterProfilesUidPacksGetResponse200 = {
  data: V1ClusterProfilePacksEntities;
  status: 200;
};

export type v1ClusterProfilesUidPacksGetResponseComposite =
  v1ClusterProfilesUidPacksGetResponse200;

export type v1ClusterProfilesUidPacksGetResponse =
  v1ClusterProfilesUidPacksGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksGetUrl = (
  uid: string,
  params?: V1ClusterProfilesUidPacksGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs`;
};

export const v1ClusterProfilesUidPacksGet = async (
  uid: string,
  params?: V1ClusterProfilesUidPacksGetParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksGetResponse> => {
  const res = await fetch(getV1ClusterProfilesUidPacksGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksGetResponse;
};

/**
 * @summary Adds a new pack to the specified cluster profile and returns the created pack uid
 */
export type v1ClusterProfilesUidPacksAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterProfilesUidPacksAddResponseComposite =
  v1ClusterProfilesUidPacksAddResponse201;

export type v1ClusterProfilesUidPacksAddResponse =
  v1ClusterProfilesUidPacksAddResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksAddUrl = (
  uid: string,
  params?: V1ClusterProfilesUidPacksAddParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs`;
};

export const v1ClusterProfilesUidPacksAdd = async (
  uid: string,
  v1PackInputEntity?: V1PackInputEntity,
  params?: V1ClusterProfilesUidPacksAddParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksAddResponse> => {
  const res = await fetch(getV1ClusterProfilesUidPacksAddUrl(uid, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PackInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksAddResponse;
};

/**
 * @summary Returns the specified cluster profile pack manifests
 */
export type v1ClusterProfilesUidPacksManifestsGetResponse200 = {
  data: V1ClusterProfilePacksManifests;
  status: 200;
};

export type v1ClusterProfilesUidPacksManifestsGetResponseComposite =
  v1ClusterProfilesUidPacksManifestsGetResponse200;

export type v1ClusterProfilesUidPacksManifestsGetResponse =
  v1ClusterProfilesUidPacksManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksManifestsGetUrl = (
  uid: string,
  params?: V1ClusterProfilesUidPacksManifestsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/manifests?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/manifests`;
};

export const v1ClusterProfilesUidPacksManifestsGet = async (
  uid: string,
  params?: V1ClusterProfilesUidPacksManifestsGetParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksManifestsGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksManifestsGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksManifestsGetResponse;
};

/**
 * @summary Returns the specified cluster profile packs resolved values
 */
export type v1ClusterProfilesUidPacksResolvedValuesGetResponse200 = {
  data: V1PackResolvedValues;
  status: 200;
};

export type v1ClusterProfilesUidPacksResolvedValuesGetResponseComposite =
  v1ClusterProfilesUidPacksResolvedValuesGetResponse200;

export type v1ClusterProfilesUidPacksResolvedValuesGetResponse =
  v1ClusterProfilesUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksResolvedValuesGetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/resolvedValues`;
};

export const v1ClusterProfilesUidPacksResolvedValuesGet = async (
  uid: string,
  v1PackParamsEntity?: V1PackParamsEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksResolvedValuesGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksResolvedValuesGetUrl(uid),
    {
      ...options,
      method: "GET",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1PackParamsEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksResolvedValuesGetResponse;
};

/**
 * @summary Deletes the specified pack information in the cluster profile
 */
export type v1ClusterProfilesUidPacksNameDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidPacksNameDeleteResponseComposite =
  v1ClusterProfilesUidPacksNameDeleteResponseDefault;

export type v1ClusterProfilesUidPacksNameDeleteResponse =
  v1ClusterProfilesUidPacksNameDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameDeleteUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const v1ClusterProfilesUidPacksNameDelete = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameDeleteResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameDeleteUrl(uid, packName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksNameDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksNameDeleteResponse;
};

/**
 * @summary Returns the specified cluster profile pack
 */
export type v1ClusterProfilesUidPacksNameGetResponse200 = {
  data: V1PackRefSummaryResponse;
  status: 200;
};

export type v1ClusterProfilesUidPacksNameGetResponseComposite =
  v1ClusterProfilesUidPacksNameGetResponse200;

export type v1ClusterProfilesUidPacksNameGetResponse =
  v1ClusterProfilesUidPacksNameGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameGetUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const v1ClusterProfilesUidPacksNameGet = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameGetUrl(uid, packName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksNameGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksNameGetResponse;
};

/**
 * @summary Updates the specified pack information in the cluster profile
 */
export type v1ClusterProfilesUidPacksNameUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidPacksNameUpdateResponseComposite =
  v1ClusterProfilesUidPacksNameUpdateResponseDefault;

export type v1ClusterProfilesUidPacksNameUpdateResponse =
  v1ClusterProfilesUidPacksNameUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameUpdateUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const v1ClusterProfilesUidPacksNameUpdate = async (
  uid: string,
  packName: string,
  v1PackUpdateEntity?: V1PackUpdateEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameUpdateResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameUpdateUrl(uid, packName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1PackUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksNameUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksNameUpdateResponse;
};

/**
 * @summary Returns the specified cluster profile pack configuration
 */
export type v1ClusterProfilesUidPacksConfigGetResponse200 = {
  data: V1ClusterProfilePackConfigList;
  status: 200;
};

export type v1ClusterProfilesUidPacksConfigGetResponseComposite =
  v1ClusterProfilesUidPacksConfigGetResponse200;

export type v1ClusterProfilesUidPacksConfigGetResponse =
  v1ClusterProfilesUidPacksConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksConfigGetUrl = (
  uid: string,
  packName: string,
  params: V1ClusterProfilesUidPacksConfigGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/config?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/config`;
};

export const v1ClusterProfilesUidPacksConfigGet = async (
  uid: string,
  packName: string,
  params: V1ClusterProfilesUidPacksConfigGetParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksConfigGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksConfigGetUrl(uid, packName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksConfigGetResponse;
};

/**
 * @summary Returns the associated manifests for the specified profile's pack
 */
export type v1ClusterProfilesUidPacksUidManifestsResponse200 = {
  data: V1ManifestEntities;
  status: 200;
};

export type v1ClusterProfilesUidPacksUidManifestsResponseComposite =
  v1ClusterProfilesUidPacksUidManifestsResponse200;

export type v1ClusterProfilesUidPacksUidManifestsResponse =
  v1ClusterProfilesUidPacksUidManifestsResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksUidManifestsUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests`;
};

export const v1ClusterProfilesUidPacksUidManifests = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksUidManifestsResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksUidManifestsUrl(uid, packName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksUidManifestsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksUidManifestsResponse;
};

/**
 * @summary Adds manifest to the profiles packs and returns the added manifests uid
 */
export type v1ClusterProfilesUidPacksNameManifestsAddResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterProfilesUidPacksNameManifestsAddResponseComposite =
  v1ClusterProfilesUidPacksNameManifestsAddResponse201;

export type v1ClusterProfilesUidPacksNameManifestsAddResponse =
  v1ClusterProfilesUidPacksNameManifestsAddResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsAddUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests`;
};

export const v1ClusterProfilesUidPacksNameManifestsAdd = async (
  uid: string,
  packName: string,
  v1ManifestInputEntity?: V1ManifestInputEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameManifestsAddResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsAddUrl(uid, packName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestInputEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksNameManifestsAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksNameManifestsAddResponse;
};

/**
 * @summary Deletes the specified cluster profile pack manifest
 */
export type v1ClusterProfilesUidPacksNameManifestsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidPacksNameManifestsUidDeleteResponseComposite =
  v1ClusterProfilesUidPacksNameManifestsUidDeleteResponseDefault;

export type v1ClusterProfilesUidPacksNameManifestsUidDeleteResponse =
  v1ClusterProfilesUidPacksNameManifestsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsUidDeleteUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const v1ClusterProfilesUidPacksNameManifestsUidDelete = async (
  uid: string,
  packName: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameManifestsUidDeleteResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsUidDeleteUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksNameManifestsUidDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksNameManifestsUidDeleteResponse;
};

/**
 * @summary Returns the specified cluster profile pack manifest
 */
export type v1ClusterProfilesUidPacksNameManifestsUidGetResponse200 = {
  data: V1ManifestEntity;
  status: 200;
};

export type v1ClusterProfilesUidPacksNameManifestsUidGetResponseComposite =
  v1ClusterProfilesUidPacksNameManifestsUidGetResponse200;

export type v1ClusterProfilesUidPacksNameManifestsUidGetResponse =
  v1ClusterProfilesUidPacksNameManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsUidGetUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const v1ClusterProfilesUidPacksNameManifestsUidGet = async (
  uid: string,
  packName: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameManifestsUidGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsUidGetUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksNameManifestsUidGetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksNameManifestsUidGetResponse;
};

/**
 * @summary Updates the specified manifest of the profile's pack
 */
export type v1ClusterProfilesUidPacksNameManifestsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidPacksNameManifestsUidUpdateResponseComposite =
  v1ClusterProfilesUidPacksNameManifestsUidUpdateResponseDefault;

export type v1ClusterProfilesUidPacksNameManifestsUidUpdateResponse =
  v1ClusterProfilesUidPacksNameManifestsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsUidUpdateUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const v1ClusterProfilesUidPacksNameManifestsUidUpdate = async (
  uid: string,
  packName: string,
  manifestUid: string,
  v1ManifestInputEntity?: V1ManifestInputEntity,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameManifestsUidUpdateResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsUidUpdateUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestInputEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidPacksNameManifestsUidUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidPacksNameManifestsUidUpdateResponse;
};

/**
 * Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published
and the draft cluster profile will be set to null in the cluster profile template.

 * @summary Publishes the specified cluster profile
 */
export type v1ClusterProfilesPublishResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesPublishResponseComposite =
  v1ClusterProfilesPublishResponseDefault;

export type v1ClusterProfilesPublishResponse =
  v1ClusterProfilesPublishResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesPublishUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/publish`;
};

export const v1ClusterProfilesPublish = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesPublishResponse> => {
  const res = await fetch(getV1ClusterProfilesPublishUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesPublishResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesPublishResponse;
};

/**
 * @summary Downloads the specified cluster profile
 */
export type v1ClusterProfilesUidSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type v1ClusterProfilesUidSpcDownloadResponseComposite =
  v1ClusterProfilesUidSpcDownloadResponse200;

export type v1ClusterProfilesUidSpcDownloadResponse =
  v1ClusterProfilesUidSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidSpcDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/spc/download`;
};

export const v1ClusterProfilesUidSpcDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidSpcDownloadResponse> => {
  const res = await fetch(getV1ClusterProfilesUidSpcDownloadUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidSpcDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidSpcDownloadResponse;
};

/**
 * @summary Validates specified cluster profile packs
 */
export type v1ClusterProfilesUidValidatePacksResponse200 = {
  data: V1ClusterProfileValidatorResponse;
  status: 200;
};

export type v1ClusterProfilesUidValidatePacksResponseComposite =
  v1ClusterProfilesUidValidatePacksResponse200;

export type v1ClusterProfilesUidValidatePacksResponse =
  v1ClusterProfilesUidValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidValidatePacksUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/validate/packs`;
};

export const v1ClusterProfilesUidValidatePacks = async (
  uid: string,
  v1ClusterProfileTemplateDraft?: V1ClusterProfileTemplateDraft,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidValidatePacksResponse> => {
  const res = await fetch(getV1ClusterProfilesUidValidatePacksUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfileTemplateDraft),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidValidatePacksResponse;
};

/**
 * @summary Deletes the specified cluster profile variables
 */
export type v1ClusterProfilesUidVariablesDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidVariablesDeleteResponseComposite =
  v1ClusterProfilesUidVariablesDeleteResponseDefault;

export type v1ClusterProfilesUidVariablesDeleteResponse =
  v1ClusterProfilesUidVariablesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesDelete = async (
  uid: string,
  v1VariableNames?: V1VariableNames,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesDeleteResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesDeleteUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VariableNames),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidVariablesDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidVariablesDeleteResponse;
};

/**
 * @summary Retrieve a list of variables defined for the cluster profile
 */
export type v1ClusterProfilesUidVariablesGetResponse200 = {
  data: V1Variables;
  status: 200;
};

export type v1ClusterProfilesUidVariablesGetResponseComposite =
  v1ClusterProfilesUidVariablesGetResponse200;

export type v1ClusterProfilesUidVariablesGetResponse =
  v1ClusterProfilesUidVariablesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesGetResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidVariablesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidVariablesGetResponse;
};

/**
 * @summary Update specific variables defined for a cluster profile
 */
export type v1ClusterProfilesUidVariablesPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidVariablesPatchResponseComposite =
  v1ClusterProfilesUidVariablesPatchResponseDefault;

export type v1ClusterProfilesUidVariablesPatchResponse =
  v1ClusterProfilesUidVariablesPatchResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesPatch = async (
  uid: string,
  v1Variables?: V1Variables,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesPatchResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Variables),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidVariablesPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidVariablesPatchResponse;
};

/**
 * @summary Update the variables defined for a cluster profile
 */
export type v1ClusterProfilesUidVariablesPutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterProfilesUidVariablesPutResponseComposite =
  v1ClusterProfilesUidVariablesPutResponseDefault;

export type v1ClusterProfilesUidVariablesPutResponse =
  v1ClusterProfilesUidVariablesPutResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesPut = async (
  uid: string,
  v1Variables?: V1Variables,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesPutResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Variables),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidVariablesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidVariablesPutResponse;
};

/**
 * @summary Retrieves a list of application deployments filter summary Supported filter fields - ["appDeploymentName", "clusterUid", "tags"] Supported sort fields - ["appDeploymentName", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type v1DashboardAppDeploymentsResponse200 = {
  data: V1AppDeploymentsSummary;
  status: 200;
};

export type v1DashboardAppDeploymentsResponseComposite =
  v1DashboardAppDeploymentsResponse200;

export type v1DashboardAppDeploymentsResponse =
  v1DashboardAppDeploymentsResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardAppDeploymentsUrl = (
  params?: V1DashboardAppDeploymentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/appDeployments?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/appDeployments`;
};

export const v1DashboardAppDeployments = async (
  v1AppDeploymentsFilterSpec?: V1AppDeploymentsFilterSpec,
  params?: V1DashboardAppDeploymentsParams,
  options?: RequestInit,
): Promise<v1DashboardAppDeploymentsResponse> => {
  const res = await fetch(getV1DashboardAppDeploymentsUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppDeploymentsFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardAppDeploymentsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardAppDeploymentsResponse;
};

/**
 * @summary Retrieves a list of application profiles filter summary Supported filter fields - ["profileName", "tags"] Supported sort fields - ["profileName", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type v1DashboardAppProfilesResponse200 = {
  data: V1AppProfilesSummary;
  status: 200;
};

export type v1DashboardAppProfilesResponseComposite =
  v1DashboardAppProfilesResponse200;

export type v1DashboardAppProfilesResponse =
  v1DashboardAppProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardAppProfilesUrl = (
  params?: V1DashboardAppProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/appProfiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/appProfiles`;
};

export const v1DashboardAppProfiles = async (
  v1AppProfilesFilterSpec?: V1AppProfilesFilterSpec,
  params?: V1DashboardAppProfilesParams,
  options?: RequestInit,
): Promise<v1DashboardAppProfilesResponse> => {
  const res = await fetch(getV1DashboardAppProfilesUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfilesFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardAppProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardAppProfilesResponse;
};

/**
 * @summary Retrieves a list of application profile metadata
 */
export type v1DashboardAppProfilesMetadataResponse200 = {
  data: V1AppProfilesMetadata;
  status: 200;
};

export type v1DashboardAppProfilesMetadataResponseComposite =
  v1DashboardAppProfilesMetadataResponse200;

export type v1DashboardAppProfilesMetadataResponse =
  v1DashboardAppProfilesMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardAppProfilesMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/appProfiles/metadata`;
};

export const v1DashboardAppProfilesMetadata = async (
  options?: RequestInit,
): Promise<v1DashboardAppProfilesMetadataResponse> => {
  const res = await fetch(getV1DashboardAppProfilesMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardAppProfilesMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardAppProfilesMetadataResponse;
};

/**
 * @summary Retrieves a list of edgehosts summary
 */
export type v1EdgeHostsMetadataResponse200 = {
  data: V1EdgeHostsMetadataSummary;
  status: 200;
};

export type v1EdgeHostsMetadataResponseComposite =
  v1EdgeHostsMetadataResponse200;

export type v1EdgeHostsMetadataResponse =
  v1EdgeHostsMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostsMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/appliances/metadata`;
};

export const v1EdgeHostsMetadata = async (
  v1EdgeHostsMetadataFilter?: V1EdgeHostsMetadataFilter,
  options?: RequestInit,
): Promise<v1EdgeHostsMetadataResponse> => {
  const res = await fetch(getV1EdgeHostsMetadataUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostsMetadataFilter),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostsMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostsMetadataResponse;
};

/**
 * @summary Retrieves a list of cloud accounts metadata
 */
export type v1DashboardCloudAccountsMetadataResponse200 = {
  data: V1CloudAccountsMetadata;
  status: 200;
};

export type v1DashboardCloudAccountsMetadataResponseComposite =
  v1DashboardCloudAccountsMetadataResponse200;

export type v1DashboardCloudAccountsMetadataResponse =
  v1DashboardCloudAccountsMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardCloudAccountsMetadataUrl = (
  params?: V1DashboardCloudAccountsMetadataParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/cloudaccounts/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/cloudaccounts/metadata`;
};

export const v1DashboardCloudAccountsMetadata = async (
  params?: V1DashboardCloudAccountsMetadataParams,
  options?: RequestInit,
): Promise<v1DashboardCloudAccountsMetadataResponse> => {
  const res = await fetch(getV1DashboardCloudAccountsMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardCloudAccountsMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardCloudAccountsMetadataResponse;
};

/**
 * @summary Retrieves a list of cluster summary for a given cluster group
 */
export type v1ClusterGroupUidHostClustersSummaryResponse200 = {
  data: V1SpectroClustersSummary;
  status: 200;
};

export type v1ClusterGroupUidHostClustersSummaryResponseComposite =
  v1ClusterGroupUidHostClustersSummaryResponse200;

export type v1ClusterGroupUidHostClustersSummaryResponse =
  v1ClusterGroupUidHostClustersSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupUidHostClustersSummaryUrl = (
  uid: string,
  params?: V1ClusterGroupUidHostClustersSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/hostClusters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/hostClusters`;
};

export const v1ClusterGroupUidHostClustersSummary = async (
  uid: string,
  v1SearchFilterSummarySpec?: V1SearchFilterSummarySpec,
  params?: V1ClusterGroupUidHostClustersSummaryParams,
  options?: RequestInit,
): Promise<v1ClusterGroupUidHostClustersSummaryResponse> => {
  const res = await fetch(
    getV1ClusterGroupUidHostClustersSummaryUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SearchFilterSummarySpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupUidHostClustersSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupUidHostClustersSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster summary for a given cluster group
 */
export type v1ClusterGroupUidVirtualClustersSummaryResponse200 = {
  data: V1SpectroClustersSummary;
  status: 200;
};

export type v1ClusterGroupUidVirtualClustersSummaryResponseComposite =
  v1ClusterGroupUidVirtualClustersSummaryResponse200;

export type v1ClusterGroupUidVirtualClustersSummaryResponse =
  v1ClusterGroupUidVirtualClustersSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupUidVirtualClustersSummaryUrl = (
  uid: string,
  params?: V1ClusterGroupUidVirtualClustersSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/virtualClusters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clustergroups/${uid}/virtualClusters`;
};

export const v1ClusterGroupUidVirtualClustersSummary = async (
  uid: string,
  v1SearchFilterSummarySpec?: V1SearchFilterSummarySpec,
  params?: V1ClusterGroupUidVirtualClustersSummaryParams,
  options?: RequestInit,
): Promise<v1ClusterGroupUidVirtualClustersSummaryResponse> => {
  const res = await fetch(
    getV1ClusterGroupUidVirtualClustersSummaryUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SearchFilterSummarySpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterGroupUidVirtualClustersSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterGroupUidVirtualClustersSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster profiles filter summary Supported filter fields - ["profileName", "tags", "profileType", "environment"] Supported sort fields - ["profileName", "environment", "profileType", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type v1ClusterProfilesFilterSummaryResponse200 = {
  data: V1ClusterProfilesSummary;
  status: 200;
};

export type v1ClusterProfilesFilterSummaryResponseComposite =
  v1ClusterProfilesFilterSummaryResponse200;

export type v1ClusterProfilesFilterSummaryResponse =
  v1ClusterProfilesFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesFilterSummaryUrl = (
  params?: V1ClusterProfilesFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/clusterprofiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/clusterprofiles`;
};

export const v1ClusterProfilesFilterSummary = async (
  v1ClusterProfilesFilterSpec?: V1ClusterProfilesFilterSpec,
  params?: V1ClusterProfilesFilterSummaryParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesFilterSummaryResponse> => {
  const res = await fetch(getV1ClusterProfilesFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterProfilesFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesFilterSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster profiles metadata
 */
export type v1ClusterProfilesMetadataResponse200 = {
  data: V1ClusterProfilesMetadata;
  status: 200;
};

export type v1ClusterProfilesMetadataResponseComposite =
  v1ClusterProfilesMetadataResponse200;

export type v1ClusterProfilesMetadataResponse =
  v1ClusterProfilesMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/clusterprofiles/metadata`;
};

export const v1ClusterProfilesMetadata = async (
  options?: RequestInit,
): Promise<v1ClusterProfilesMetadataResponse> => {
  const res = await fetch(getV1ClusterProfilesMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesMetadataResponse;
};

/**
 * @summary Retrieves a specified cluster profile summary
 */
export type v1ClusterProfilesUidSummaryResponse200 = {
  data: V1ClusterProfileSummary;
  status: 200;
};

export type v1ClusterProfilesUidSummaryResponseComposite =
  v1ClusterProfilesUidSummaryResponse200;

export type v1ClusterProfilesUidSummaryResponse =
  v1ClusterProfilesUidSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidSummaryUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/clusterprofiles/${uid}`;
};

export const v1ClusterProfilesUidSummary = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidSummaryResponse> => {
  const res = await fetch(getV1ClusterProfilesUidSummaryUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterProfilesUidSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterProfilesUidSummaryResponse;
};

/**
 * @summary Retrieves a list of Edgehosts summary with provided search filter. Supported fields as per schema /v1/dashboard/edgehosts/search/schema
 */
export type v1DashboardEdgehostsSearchResponse200 = {
  data: V1EdgeHostsSearchSummary;
  status: 200;
};

export type v1DashboardEdgehostsSearchResponseComposite =
  v1DashboardEdgehostsSearchResponse200;

export type v1DashboardEdgehostsSearchResponse =
  v1DashboardEdgehostsSearchResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardEdgehostsSearchUrl = (
  params?: V1DashboardEdgehostsSearchParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/edgehosts/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/edgehosts/search`;
};

export const v1DashboardEdgehostsSearch = async (
  v1SearchFilterSummarySpec?: V1SearchFilterSummarySpec,
  params?: V1DashboardEdgehostsSearchParams,
  options?: RequestInit,
): Promise<v1DashboardEdgehostsSearchResponse> => {
  const res = await fetch(getV1DashboardEdgehostsSearchUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardEdgehostsSearchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardEdgehostsSearchResponse;
};

/**
 * @summary Retrieves a schema for the Edgehost search filter
 */
export type v1DashboardEdgehostsSearchSchemaGetResponse200 = {
  data: V1SearchFilterSchemaSpec;
  status: 200;
};

export type v1DashboardEdgehostsSearchSchemaGetResponseComposite =
  v1DashboardEdgehostsSearchSchemaGetResponse200;

export type v1DashboardEdgehostsSearchSchemaGetResponse =
  v1DashboardEdgehostsSearchSchemaGetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardEdgehostsSearchSchemaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/edgehosts/search/schema`;
};

export const v1DashboardEdgehostsSearchSchemaGet = async (
  options?: RequestInit,
): Promise<v1DashboardEdgehostsSearchSchemaGetResponse> => {
  const res = await fetch(getV1DashboardEdgehostsSearchSchemaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardEdgehostsSearchSchemaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardEdgehostsSearchSchemaGetResponse;
};

/**
 * @summary Retrieves a list of PCG summary with provided search filter. Supported fields as per schema /v1/dashboard/pcgs/search/schema
 */
export type v1DashboardPcgsSearchSummaryResponse200 = {
  data: V1PcgsSummary;
  status: 200;
};

export type v1DashboardPcgsSearchSummaryResponseComposite =
  v1DashboardPcgsSearchSummaryResponse200;

export type v1DashboardPcgsSearchSummaryResponse =
  v1DashboardPcgsSearchSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardPcgsSearchSummaryUrl = (
  params?: V1DashboardPcgsSearchSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/pcgs/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/pcgs/search`;
};

export const v1DashboardPcgsSearchSummary = async (
  v1SearchFilterSummarySpec?: V1SearchFilterSummarySpec,
  params?: V1DashboardPcgsSearchSummaryParams,
  options?: RequestInit,
): Promise<v1DashboardPcgsSearchSummaryResponse> => {
  const res = await fetch(getV1DashboardPcgsSearchSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardPcgsSearchSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardPcgsSearchSummaryResponse;
};

/**
 * @summary Retrieves a schema for the PCG search filter
 */
export type v1DashboardPcgSearchSchemaGetResponse200 = {
  data: V1SearchFilterSchemaSpec;
  status: 200;
};

export type v1DashboardPcgSearchSchemaGetResponseComposite =
  v1DashboardPcgSearchSchemaGetResponse200;

export type v1DashboardPcgSearchSchemaGetResponse =
  v1DashboardPcgSearchSchemaGetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardPcgSearchSchemaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/pcgs/search/schema`;
};

export const v1DashboardPcgSearchSchemaGet = async (
  options?: RequestInit,
): Promise<v1DashboardPcgSearchSchemaGetResponse> => {
  const res = await fetch(getV1DashboardPcgSearchSchemaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardPcgSearchSchemaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardPcgSearchSchemaGetResponse;
};

export type v1ProjectsFilterSummaryResponse200 = {
  data: V1ProjectsSummary;
  status: 200;
};

export type v1ProjectsFilterSummaryResponseComposite =
  v1ProjectsFilterSummaryResponse200;

export type v1ProjectsFilterSummaryResponse =
  v1ProjectsFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsFilterSummaryUrl = (
  params?: V1ProjectsFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/projects`;
};

export const v1ProjectsFilterSummary = async (
  v1ProjectsFilterSpec?: V1ProjectsFilterSpec,
  params?: V1ProjectsFilterSummaryParams,
  options?: RequestInit,
): Promise<v1ProjectsFilterSummaryResponse> => {
  const res = await fetch(getV1ProjectsFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectsFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsFilterSummaryResponse;
};

/**
 * @summary Retrieves a list of projects metadata
 */
export type v1ProjectsMetadataResponse200 = {
  data: V1ProjectsMetadata;
  status: 200;
};

export type v1ProjectsMetadataResponseComposite = v1ProjectsMetadataResponse200;

export type v1ProjectsMetadataResponse = v1ProjectsMetadataResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsMetadataUrl = (params?: V1ProjectsMetadataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/projects/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/projects/metadata`;
};

export const v1ProjectsMetadata = async (
  params?: V1ProjectsMetadataParams,
  options?: RequestInit,
): Promise<v1ProjectsMetadataResponse> => {
  const res = await fetch(getV1ProjectsMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsMetadataResponse;
};

/**
 * @summary Retrieves spectro clusters cloud cost summary information
 */
export type v1DashboardSpectroClustersCostSummaryResponse200 = {
  data: V1ResourcesCloudCostSummary;
  status: 200;
};

export type v1DashboardSpectroClustersCostSummaryResponseComposite =
  v1DashboardSpectroClustersCostSummaryResponse200;

export type v1DashboardSpectroClustersCostSummaryResponse =
  v1DashboardSpectroClustersCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersCostSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/cost`;
};

export const v1DashboardSpectroClustersCostSummary = async (
  v1SpectroClusterCloudCostSummarySpec?: V1SpectroClusterCloudCostSummarySpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersCostSummaryResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersCostSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterCloudCostSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersCostSummaryResponse;
};

/**
 * @summary Retrieves a list of running, non rbac configured clusters in a workspace
 */
export type v1SpectroClustersFiltersWorkspaceResponse200 = {
  data: V1SpectroClustersSummary;
  status: 200;
};

export type v1SpectroClustersFiltersWorkspaceResponseComposite =
  v1SpectroClustersFiltersWorkspaceResponse200;

export type v1SpectroClustersFiltersWorkspaceResponse =
  v1SpectroClustersFiltersWorkspaceResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersFiltersWorkspaceUrl = (
  params?: V1SpectroClustersFiltersWorkspaceParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/filters/workspace?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/filters/workspace`;
};

export const v1SpectroClustersFiltersWorkspace = async (
  params?: V1SpectroClustersFiltersWorkspaceParams,
  options?: RequestInit,
): Promise<v1SpectroClustersFiltersWorkspaceResponse> => {
  const res = await fetch(getV1SpectroClustersFiltersWorkspaceUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersFiltersWorkspaceResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersFiltersWorkspaceResponse;
};

/**
 * Returns metadata information for all clusters
 * @summary Get all clusters metadata
 */
export type v1SpectroClustersMetaGetResponse200 = {
  data: V1SpectroClustersMeta;
  status: 200;
};

export type v1SpectroClustersMetaGetResponseComposite =
  v1SpectroClustersMetaGetResponse200;

export type v1SpectroClustersMetaGetResponse =
  v1SpectroClustersMetaGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/meta`;
};

export const v1SpectroClustersMetaGet = async (
  options?: RequestInit,
): Promise<v1SpectroClustersMetaGetResponse> => {
  const res = await fetch(getV1SpectroClustersMetaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMetaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMetaGetResponse;
};

/**
 * @summary Retrieves a list of cluster summary metadata
 */
export type v1SpectroClustersMetadataGetResponse200 = {
  data: V1SpectroClustersMetadata;
  status: 200;
};

export type v1SpectroClustersMetadataGetResponseComposite =
  v1SpectroClustersMetadataGetResponse200;

export type v1SpectroClustersMetadataGetResponse =
  v1SpectroClustersMetadataGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataGetUrl = (
  params?: V1SpectroClustersMetadataGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata`;
};

export const v1SpectroClustersMetadataGet = async (
  params?: V1SpectroClustersMetadataGetParams,
  options?: RequestInit,
): Promise<v1SpectroClustersMetadataGetResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMetadataGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMetadataGetResponse;
};

/**
 * @summary Retrieves a list of cluster summary
 */
export type v1SpectroClustersMetadataResponse200 = {
  data: V1SpectroClustersMetadata;
  status: 200;
};

export type v1SpectroClustersMetadataResponseComposite =
  v1SpectroClustersMetadataResponse200;

export type v1SpectroClustersMetadataResponse =
  v1SpectroClustersMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata`;
};

export const v1SpectroClustersMetadata = async (
  v1SpectroClusterMetadataSpec?: V1SpectroClusterMetadataSpec,
  options?: RequestInit,
): Promise<v1SpectroClustersMetadataResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterMetadataSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMetadataResponse;
};

/**
 * @summary Retrieves a list of cluster metadata with provided search filter spec Supported sort fields - ["environment", "clusterName", "clusterState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type v1SpectroClustersMetadataSearchResponse200 = {
  data: V1SpectroClustersMetadataSearch;
  status: 200;
};

export type v1SpectroClustersMetadataSearchResponseComposite =
  v1SpectroClustersMetadataSearchResponse200;

export type v1SpectroClustersMetadataSearchResponse =
  v1SpectroClustersMetadataSearchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataSearchUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata/search`;
};

export const v1SpectroClustersMetadataSearch = async (
  v1SearchFilterSummarySpec?: V1SearchFilterSummarySpec,
  options?: RequestInit,
): Promise<v1SpectroClustersMetadataSearchResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataSearchUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMetadataSearchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMetadataSearchResponse;
};

/**
 * @summary Retrieves a schema for the cluster metadata search filter
 */
export type v1SpectroClustersMetadataSearchSchemaResponse200 = {
  data: V1SearchFilterSchemaSpec;
  status: 200;
};

export type v1SpectroClustersMetadataSearchSchemaResponseComposite =
  v1SpectroClustersMetadataSearchSchemaResponse200;

export type v1SpectroClustersMetadataSearchSchemaResponse =
  v1SpectroClustersMetadataSearchSchemaResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMetadataSearchSchemaUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/metadata/search/schema`;
};

export const v1SpectroClustersMetadataSearchSchema = async (
  options?: RequestInit,
): Promise<v1SpectroClustersMetadataSearchSchemaResponse> => {
  const res = await fetch(getV1SpectroClustersMetadataSearchSchemaUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMetadataSearchSchemaResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMetadataSearchSchemaResponse;
};

/**
 * @summary Retrieves a list of clusters with the desired repave state
 */
export type v1DashboardSpectroClustersRepaveListResponse200 = {
  data: V1SpectroClustersSummary;
  status: 200;
};

export type v1DashboardSpectroClustersRepaveListResponseComposite =
  v1DashboardSpectroClustersRepaveListResponse200;

export type v1DashboardSpectroClustersRepaveListResponse =
  v1DashboardSpectroClustersRepaveListResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersRepaveListUrl = (
  params?: V1DashboardSpectroClustersRepaveListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/repaveStatus?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/repaveStatus`;
};

export const v1DashboardSpectroClustersRepaveList = async (
  params?: V1DashboardSpectroClustersRepaveListParams,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersRepaveListResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersRepaveListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersRepaveListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersRepaveListResponse;
};

/**
 * @summary Retrieves spectro clusters resource consumption
 */
export type v1SpectroClustersResourcesConsumptionResponse200 = {
  data: V1ResourcesConsumption;
  status: 200;
};

export type v1SpectroClustersResourcesConsumptionResponseComposite =
  v1SpectroClustersResourcesConsumptionResponse200;

export type v1SpectroClustersResourcesConsumptionResponse =
  v1SpectroClustersResourcesConsumptionResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersResourcesConsumptionUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/consumption`;
};

export const v1SpectroClustersResourcesConsumption = async (
  v1ResourceConsumptionSpec?: V1ResourceConsumptionSpec,
  options?: RequestInit,
): Promise<v1SpectroClustersResourcesConsumptionResponse> => {
  const res = await fetch(getV1SpectroClustersResourcesConsumptionUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceConsumptionSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersResourcesConsumptionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersResourcesConsumptionResponse;
};

/**
 * @summary Retrieves spectro clusters resources cost summary information
 */
export type v1SpectroClustersResourcesCostSummaryResponse200 = {
  data: V1ResourcesCostSummary;
  status: 200;
};

export type v1SpectroClustersResourcesCostSummaryResponseComposite =
  v1SpectroClustersResourcesCostSummaryResponse200;

export type v1SpectroClustersResourcesCostSummaryResponse =
  v1SpectroClustersResourcesCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersResourcesCostSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/cost`;
};

export const v1SpectroClustersResourcesCostSummary = async (
  v1ResourceCostSummarySpec?: V1ResourceCostSummarySpec,
  options?: RequestInit,
): Promise<v1SpectroClustersResourcesCostSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersResourcesCostSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceCostSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersResourcesCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersResourcesCostSummaryResponse;
};

/**
 * @summary Retrieves spectro clusters resources usage summary information
 */
export type v1SpectroClustersResourcesUsageSummaryResponse200 = {
  data: V1ResourcesUsageSummary;
  status: 200;
};

export type v1SpectroClustersResourcesUsageSummaryResponseComposite =
  v1SpectroClustersResourcesUsageSummaryResponse200;

export type v1SpectroClustersResourcesUsageSummaryResponse =
  v1SpectroClustersResourcesUsageSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersResourcesUsageSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/resources/usage`;
};

export const v1SpectroClustersResourcesUsageSummary = async (
  v1ResourceUsageSummarySpec?: V1ResourceUsageSummarySpec,
  options?: RequestInit,
): Promise<v1SpectroClustersResourcesUsageSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersResourcesUsageSummaryUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceUsageSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersResourcesUsageSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersResourcesUsageSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster summary with provided search filter spec Supported sort fields - ["environment", "clusterName", "memoryUsage", "healthState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type v1SpectroClustersSearchFilterSummaryResponse200 = {
  data: V1SpectroClustersSummary;
  status: 200;
};

export type v1SpectroClustersSearchFilterSummaryResponseComposite =
  v1SpectroClustersSearchFilterSummaryResponse200;

export type v1SpectroClustersSearchFilterSummaryResponse =
  v1SpectroClustersSearchFilterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSearchFilterSummaryUrl = (
  params?: V1SpectroClustersSearchFilterSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search`;
};

export const v1SpectroClustersSearchFilterSummary = async (
  v1SearchFilterSummarySpec?: V1SearchFilterSummarySpec,
  params?: V1SpectroClustersSearchFilterSummaryParams,
  options?: RequestInit,
): Promise<v1SpectroClustersSearchFilterSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersSearchFilterSummaryUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SearchFilterSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersSearchFilterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersSearchFilterSummaryResponse;
};

/**
 * @summary Export and download the list of cluster summary with matching search filter and download as a file(csv)
 */
export type v1DashboardClustersSearchSummaryExportGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1DashboardClustersSearchSummaryExportGetResponseComposite =
  v1DashboardClustersSearchSummaryExportGetResponse200;

export type v1DashboardClustersSearchSummaryExportGetResponse =
  v1DashboardClustersSearchSummaryExportGetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardClustersSearchSummaryExportGetUrl = (
  params?: V1DashboardClustersSearchSummaryExportGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export`;
};

export const v1DashboardClustersSearchSummaryExportGet = async (
  params?: V1DashboardClustersSearchSummaryExportGetParams,
  options?: RequestInit,
): Promise<v1DashboardClustersSearchSummaryExportGetResponse> => {
  const res = await fetch(
    getV1DashboardClustersSearchSummaryExportGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardClustersSearchSummaryExportGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardClustersSearchSummaryExportGetResponse;
};

/**
 * @summary Export the list of cluster summary with matching search filter and download as a file(csv) Supported sort fields - ["environment", "clusterName", "healthState", "creationTimestamp", "lastModifiedTimestamp"]
 */
export type v1DashboardClustersSearchSummaryExportResponse200 = {
  data: Blob;
  status: 200;
};

export type v1DashboardClustersSearchSummaryExportResponseComposite =
  v1DashboardClustersSearchSummaryExportResponse200;

export type v1DashboardClustersSearchSummaryExportResponse =
  v1DashboardClustersSearchSummaryExportResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardClustersSearchSummaryExportUrl = (
  params?: V1DashboardClustersSearchSummaryExportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/export`;
};

export const v1DashboardClustersSearchSummaryExport = async (
  v1SearchFilterSummarySpec?: V1SearchFilterSummarySpec,
  params?: V1DashboardClustersSearchSummaryExportParams,
  options?: RequestInit,
): Promise<v1DashboardClustersSearchSummaryExportResponse> => {
  const res = await fetch(
    getV1DashboardClustersSearchSummaryExportUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SearchFilterSummarySpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardClustersSearchSummaryExportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardClustersSearchSummaryExportResponse;
};

/**
 * @summary Retrieves a supported input values for the cluster search filter
 */
export type v1DashboardSpectroClustersSearchInputResponse200 = {
  data: V1ClusterSearchInputSpec;
  status: 200;
};

export type v1DashboardSpectroClustersSearchInputResponseComposite =
  v1DashboardSpectroClustersSearchInputResponse200;

export type v1DashboardSpectroClustersSearchInputResponse =
  v1DashboardSpectroClustersSearchInputResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersSearchInputUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/input`;
};

export const v1DashboardSpectroClustersSearchInput = async (
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersSearchInputResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersSearchInputUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersSearchInputResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersSearchInputResponse;
};

/**
 * @summary Retrieves a schema for the cluster search filter
 */
export type v1SpectroClustersSearchSchemaResponse200 = {
  data: V1SearchFilterSchemaSpec;
  status: 200;
};

export type v1SpectroClustersSearchSchemaResponseComposite =
  v1SpectroClustersSearchSchemaResponse200;

export type v1SpectroClustersSearchSchemaResponse =
  v1SpectroClustersSearchSchemaResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSearchSchemaUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/search/schema`;
};

export const v1SpectroClustersSearchSchema = async (
  options?: RequestInit,
): Promise<v1SpectroClustersSearchSchemaResponse> => {
  const res = await fetch(getV1SpectroClustersSearchSchemaUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersSearchSchemaResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersSearchSchemaResponse;
};

/**
 * @summary Retrieves a list of Virtual machine enabled clusters
 */
export type v1DashboardVMEnabledClustersListResponse200 = {
  data: V1VMClusters;
  status: 200;
};

export type v1DashboardVMEnabledClustersListResponseComposite =
  v1DashboardVMEnabledClustersListResponse200;

export type v1DashboardVMEnabledClustersListResponse =
  v1DashboardVMEnabledClustersListResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardVMEnabledClustersListUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/vms`;
};

export const v1DashboardVMEnabledClustersList = async (
  options?: RequestInit,
): Promise<v1DashboardVMEnabledClustersListResponse> => {
  const res = await fetch(getV1DashboardVMEnabledClustersListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardVMEnabledClustersListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardVMEnabledClustersListResponse;
};

/**
 * @summary Returns the specified cluster summary
 */
export type v1SpectroClustersSummaryUidResponse200 = {
  data: V1SpectroClusterUidSummary;
  status: 200;
};

export type v1SpectroClustersSummaryUidResponseComposite =
  v1SpectroClustersSummaryUidResponse200;

export type v1SpectroClustersSummaryUidResponse =
  v1SpectroClustersSummaryUidResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSummaryUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}`;
};

export const v1SpectroClustersSummaryUid = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersSummaryUidResponse> => {
  const res = await fetch(getV1SpectroClustersSummaryUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersSummaryUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersSummaryUidResponse;
};

/**
 * @summary Retrieves the specified cluster cost summary
 */
export type v1SpectroClustersUidCostSummaryResponse200 = {
  data: V1SpectroClusterCostSummary;
  status: 200;
};

export type v1SpectroClustersUidCostSummaryResponseComposite =
  v1SpectroClustersUidCostSummaryResponse200;

export type v1SpectroClustersUidCostSummaryResponse =
  v1SpectroClustersUidCostSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidCostSummaryUrl = (
  uid: string,
  params?: V1SpectroClustersUidCostSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/cost?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/cost`;
};

export const v1SpectroClustersUidCostSummary = async (
  uid: string,
  params?: V1SpectroClustersUidCostSummaryParams,
  options?: RequestInit,
): Promise<v1SpectroClustersUidCostSummaryResponse> => {
  const res = await fetch(getV1SpectroClustersUidCostSummaryUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidCostSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidCostSummaryResponse;
};

/**
 * @summary Returns the specified cluster summary overview
 */
export type v1SpectroClustersSummaryUidOverviewResponse200 = {
  data: V1SpectroClusterUidSummary;
  status: 200;
};

export type v1SpectroClustersSummaryUidOverviewResponseComposite =
  v1SpectroClustersSummaryUidOverviewResponse200;

export type v1SpectroClustersSummaryUidOverviewResponse =
  v1SpectroClustersSummaryUidOverviewResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSummaryUidOverviewUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/overview`;
};

export const v1SpectroClustersSummaryUidOverview = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersSummaryUidOverviewResponse> => {
  const res = await fetch(getV1SpectroClustersSummaryUidOverviewUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersSummaryUidOverviewResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersSummaryUidOverviewResponse;
};

/**
 * @summary Retrieves specified spectro cluster resource consumption
 */
export type v1SpectroClustersUidResourcesConsumptionResponse200 = {
  data: V1ResourcesConsumption;
  status: 200;
};

export type v1SpectroClustersUidResourcesConsumptionResponseComposite =
  v1SpectroClustersUidResourcesConsumptionResponse200;

export type v1SpectroClustersUidResourcesConsumptionResponse =
  v1SpectroClustersUidResourcesConsumptionResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidResourcesConsumptionUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/resources/consumption`;
};

export const v1SpectroClustersUidResourcesConsumption = async (
  uid: string,
  v1ResourceConsumptionSpec?: V1ResourceConsumptionSpec,
  options?: RequestInit,
): Promise<v1SpectroClustersUidResourcesConsumptionResponse> => {
  const res = await fetch(getV1SpectroClustersUidResourcesConsumptionUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceConsumptionSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidResourcesConsumptionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidResourcesConsumptionResponse;
};

/**
 * @summary Retrieves specified cluster workloads
 */
export type v1DashboardSpectroClustersUidWorkloadsResponse200 = {
  data: V1ClusterWorkload;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsResponse200;

export type v1DashboardSpectroClustersUidWorkloadsResponse =
  v1DashboardSpectroClustersUidWorkloadsResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads`;
};

export const v1DashboardSpectroClustersUidWorkloads = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsResponse> => {
  const res = await fetch(getV1DashboardSpectroClustersUidWorkloadsUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterWorkloadsSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsResponse;
};

/**
 * @summary Retrieves specified cluster workload clusterrolebindings
 */
export type v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse200 =
  {
    data: V1ClusterWorkloadRoleBindings;
    status: 200;
  };

export type v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse200;

export type v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse =
  v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsClusterRoleBindingUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/clusterrolebinding`;
};

export const v1DashboardSpectroClustersUidWorkloadsClusterRoleBinding = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsClusterRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsClusterRoleBindingResponse;
};

/**
 * @summary Retrieves specified cluster workload cronjobs
 */
export type v1DashboardSpectroClustersUidWorkloadsCronJobResponse200 = {
  data: V1ClusterWorkloadCronJobs;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsCronJobResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsCronJobResponse200;

export type v1DashboardSpectroClustersUidWorkloadsCronJobResponse =
  v1DashboardSpectroClustersUidWorkloadsCronJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsCronJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/cronjob`;
};

export const v1DashboardSpectroClustersUidWorkloadsCronJob = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsCronJobResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsCronJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsCronJobResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsCronJobResponse;
};

/**
 * @summary Retrieves specified cluster workload daemonsets
 */
export type v1DashboardSpectroClustersUidWorkloadsDaemonSetResponse200 = {
  data: V1ClusterWorkloadDaemonSets;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsDaemonSetResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsDaemonSetResponse200;

export type v1DashboardSpectroClustersUidWorkloadsDaemonSetResponse =
  v1DashboardSpectroClustersUidWorkloadsDaemonSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsDaemonSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/daemonset`;
};

export const v1DashboardSpectroClustersUidWorkloadsDaemonSet = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsDaemonSetResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsDaemonSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsDaemonSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsDaemonSetResponse;
};

/**
 * @summary Retrieves specified cluster workload deployments
 */
export type v1DashboardSpectroClustersUidWorkloadsDeploymentResponse200 = {
  data: V1ClusterWorkloadDeployments;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsDeploymentResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsDeploymentResponse200;

export type v1DashboardSpectroClustersUidWorkloadsDeploymentResponse =
  v1DashboardSpectroClustersUidWorkloadsDeploymentResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsDeploymentUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/deployment`;
};

export const v1DashboardSpectroClustersUidWorkloadsDeployment = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsDeploymentResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsDeploymentUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsDeploymentResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsDeploymentResponse;
};

/**
 * @summary Retrieves specified cluster workload jobs
 */
export type v1DashboardSpectroClustersUidWorkloadsJobResponse200 = {
  data: V1ClusterWorkloadJobs;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsJobResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsJobResponse200;

export type v1DashboardSpectroClustersUidWorkloadsJobResponse =
  v1DashboardSpectroClustersUidWorkloadsJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/job`;
};

export const v1DashboardSpectroClustersUidWorkloadsJob = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsJobResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsJobResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsJobResponse;
};

/**
 * @summary Retrieves specified cluster workload namespaces
 */
export type v1DashboardSpectroClustersUidWorkloadsNamespaceResponse200 = {
  data: V1ClusterWorkloadNamespaces;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsNamespaceResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsNamespaceResponse200;

export type v1DashboardSpectroClustersUidWorkloadsNamespaceResponse =
  v1DashboardSpectroClustersUidWorkloadsNamespaceResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsNamespaceUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/namespace`;
};

export const v1DashboardSpectroClustersUidWorkloadsNamespace = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsNamespaceResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsNamespaceUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsNamespaceResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsNamespaceResponse;
};

/**
 * @summary Retrieves specified cluster workload pods
 */
export type v1DashboardSpectroClustersUidWorkloadsPodResponse200 = {
  data: V1ClusterWorkloadPods;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsPodResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsPodResponse200;

export type v1DashboardSpectroClustersUidWorkloadsPodResponse =
  v1DashboardSpectroClustersUidWorkloadsPodResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsPodUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/pod`;
};

export const v1DashboardSpectroClustersUidWorkloadsPod = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsPodResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsPodUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsPodResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsPodResponse;
};

/**
 * @summary Retrieves specified cluster workload rolebindings
 */
export type v1DashboardSpectroClustersUidWorkloadsRoleBindingResponse200 = {
  data: V1ClusterWorkloadRoleBindings;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsRoleBindingResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsRoleBindingResponse200;

export type v1DashboardSpectroClustersUidWorkloadsRoleBindingResponse =
  v1DashboardSpectroClustersUidWorkloadsRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsRoleBindingUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/rolebinding`;
};

export const v1DashboardSpectroClustersUidWorkloadsRoleBinding = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsRoleBindingResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsRoleBindingUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsRoleBindingResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsRoleBindingResponse;
};

/**
 * @summary Retrieves specified cluster workload statefulsets
 */
export type v1DashboardSpectroClustersUidWorkloadsStatefulSetResponse200 = {
  data: V1ClusterWorkloadStatefulSets;
  status: 200;
};

export type v1DashboardSpectroClustersUidWorkloadsStatefulSetResponseComposite =
  v1DashboardSpectroClustersUidWorkloadsStatefulSetResponse200;

export type v1DashboardSpectroClustersUidWorkloadsStatefulSetResponse =
  v1DashboardSpectroClustersUidWorkloadsStatefulSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardSpectroClustersUidWorkloadsStatefulSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/spectroclusters/${uid}/workloads/statefulset`;
};

export const v1DashboardSpectroClustersUidWorkloadsStatefulSet = async (
  uid: string,
  v1ClusterWorkloadsSpec?: V1ClusterWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardSpectroClustersUidWorkloadsStatefulSetResponse> => {
  const res = await fetch(
    getV1DashboardSpectroClustersUidWorkloadsStatefulSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardSpectroClustersUidWorkloadsStatefulSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardSpectroClustersUidWorkloadsStatefulSetResponse;
};

/**
 * @summary Retrieves a list of workspace
 */
export type v1DashboardWorkspacesListResponse200 = {
  data: V1DashboardWorkspaces;
  status: 200;
};

export type v1DashboardWorkspacesListResponseComposite =
  v1DashboardWorkspacesListResponse200;

export type v1DashboardWorkspacesListResponse =
  v1DashboardWorkspacesListResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesListUrl = () => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces`;
};

export const v1DashboardWorkspacesList = async (
  options?: RequestInit,
): Promise<v1DashboardWorkspacesListResponse> => {
  const res = await fetch(getV1DashboardWorkspacesListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardWorkspacesListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardWorkspacesListResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload clusterrolebindings
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse200 =
  {
    data: V1WorkspaceClustersWorkloadRoleBindings;
    status: 200;
  };

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/clusterrolebinding`;
  };

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding =
  async (
    uid: string,
    v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
    options?: RequestInit,
  ): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse> => {
    const res = await fetch(
      getV1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingUrl(
        uid,
      ),
      {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(v1WorkspaceWorkloadsSpec),
      },
    );

    const body = [204, 205, 304].includes(res.status) ? null : await res.text();
    const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse["data"] =
      body ? JSON.parse(body) : {};

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBindingResponse;
  };

/**
 * @summary Retrieves specified workspace clusters workload cronjobs
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse200 =
  {
    data: V1WorkspaceClustersWorkloadCronJobs;
    status: 200;
  };

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/cronjob`;
};

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJob = async (
  uid: string,
  v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJobResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload daemonsets
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse200 =
  {
    data: V1WorkspaceClustersWorkloadDaemonSets;
    status: 200;
  };

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/daemonset`;
};

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet = async (
  uid: string,
  v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSetResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload deployments
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse200 =
  {
    data: V1WorkspaceClustersWorkloadDeployments;
    status: 200;
  };

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/deployment`;
  };

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsDeployment =
  async (
    uid: string,
    v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
    options?: RequestInit,
  ): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse> => {
    const res = await fetch(
      getV1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentUrl(uid),
      {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(v1WorkspaceWorkloadsSpec),
      },
    );

    const body = [204, 205, 304].includes(res.status) ? null : await res.text();
    const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse["data"] =
      body ? JSON.parse(body) : {};

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as v1DashboardWorkspacesUidSpectroClustersWorkloadsDeploymentResponse;
  };

/**
 * @summary Retrieves specified workspace clusters workload jobs
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse200 = {
  data: V1WorkspaceClustersWorkloadJobs;
  status: 200;
};

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsJobUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/job`;
};

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsJob = async (
  uid: string,
  v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsJobUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardWorkspacesUidSpectroClustersWorkloadsJobResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload namespaces
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse200 =
  {
    data: V1WorkspaceClustersWorkloadNamespaces;
    status: 200;
  };

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/namespace`;
};

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespace = async (
  uid: string,
  v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespaceResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload pods
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse200 = {
  data: V1WorkspaceClustersWorkloadPods;
  status: 200;
};

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsPodUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/pod`;
};

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsPod = async (
  uid: string,
  v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
  options?: RequestInit,
): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse> => {
  const res = await fetch(
    getV1DashboardWorkspacesUidSpectroClustersWorkloadsPodUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1WorkspaceWorkloadsSpec),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DashboardWorkspacesUidSpectroClustersWorkloadsPodResponse;
};

/**
 * @summary Retrieves specified workspace clusters workload rolebindings
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse200 =
  {
    data: V1WorkspaceClustersWorkloadRoleBindings;
    status: 200;
  };

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/rolebinding`;
  };

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding =
  async (
    uid: string,
    v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
    options?: RequestInit,
  ): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse> => {
    const res = await fetch(
      getV1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingUrl(uid),
      {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(v1WorkspaceWorkloadsSpec),
      },
    );

    const body = [204, 205, 304].includes(res.status) ? null : await res.text();
    const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse["data"] =
      body ? JSON.parse(body) : {};

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBindingResponse;
  };

/**
 * @summary Retrieves specified workspace clusters workload statefulsets
 */
export type v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse200 =
  {
    data: V1WorkspaceClustersWorkloadStatefulSets;
    status: 200;
  };

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponseComposite =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse200;

export type v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse =
  v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponseComposite & {
    headers: Headers;
  };

export const getV1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetUrl =
  (uid: string) => {
    return `https://api.spectrocloud.com/v1/dashboard/workspaces/${uid}/spectroclusters/workloads/statefulset`;
  };

export const v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet =
  async (
    uid: string,
    v1WorkspaceWorkloadsSpec?: V1WorkspaceWorkloadsSpec,
    options?: RequestInit,
  ): Promise<v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse> => {
    const res = await fetch(
      getV1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetUrl(uid),
      {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(v1WorkspaceWorkloadsSpec),
      },
    );

    const body = [204, 205, 304].includes(res.status) ? null : await res.text();
    const data: v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse["data"] =
      body ? JSON.parse(body) : {};

    return {
      data,
      status: res.status,
      headers: res.headers,
    } as v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSetResponse;
  };

/**
 * Sync data to cloud watch
 * @summary sync data to cloud watch
 */
export type v1DataSinksCloudWatchSinkResponseDefault = {
  data: unknown;
  status: number;
};

export type v1DataSinksCloudWatchSinkResponseComposite =
  v1DataSinksCloudWatchSinkResponseDefault;

export type v1DataSinksCloudWatchSinkResponse =
  v1DataSinksCloudWatchSinkResponseComposite & {
    headers: Headers;
  };

export const getV1DataSinksCloudWatchSinkUrl = () => {
  return `https://api.spectrocloud.com/v1/datasinks/cloudwatch`;
};

export const v1DataSinksCloudWatchSink = async (
  v1DataSinkCloudWatchConfig: V1DataSinkCloudWatchConfig,
  options?: RequestInit,
): Promise<v1DataSinksCloudWatchSinkResponse> => {
  const res = await fetch(getV1DataSinksCloudWatchSinkUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1DataSinkCloudWatchConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1DataSinksCloudWatchSinkResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1DataSinksCloudWatchSinkResponse;
};

/**
 * @summary Create the edge host device
 */
export type v1EdgeHostDevicesCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1EdgeHostDevicesCreateResponseComposite =
  v1EdgeHostDevicesCreateResponse201;

export type v1EdgeHostDevicesCreateResponse =
  v1EdgeHostDevicesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts`;
};

export const v1EdgeHostDevicesCreate = async (
  v1EdgeHostDeviceEntity?: V1EdgeHostDeviceEntity,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesCreateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDeviceEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesCreateResponse;
};

/**
 * @summary Retrieves a list of edge hosts metadata matching the filter condition
 */
export type v1EdgeHostsMetadataQuickFilterGetResponse200 = {
  data: V1EdgeHostsMeta;
  status: 200;
};

export type v1EdgeHostsMetadataQuickFilterGetResponseComposite =
  v1EdgeHostsMetadataQuickFilterGetResponse200;

export type v1EdgeHostsMetadataQuickFilterGetResponse =
  v1EdgeHostsMetadataQuickFilterGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostsMetadataQuickFilterGetUrl = (
  params?: V1EdgeHostsMetadataQuickFilterGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/metadata`;
};

export const v1EdgeHostsMetadataQuickFilterGet = async (
  params?: V1EdgeHostsMetadataQuickFilterGetParams,
  options?: RequestInit,
): Promise<v1EdgeHostsMetadataQuickFilterGetResponse> => {
  const res = await fetch(getV1EdgeHostsMetadataQuickFilterGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostsMetadataQuickFilterGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostsMetadataQuickFilterGetResponse;
};

/**
 * @summary Registers the edge host device
 */
export type v1EdgeHostDevicesRegisterResponse200 = {
  data: V1EdgeHostDevice;
  status: 200;
};

export type v1EdgeHostDevicesRegisterResponseComposite =
  v1EdgeHostDevicesRegisterResponse200;

export type v1EdgeHostDevicesRegisterResponse =
  v1EdgeHostDevicesRegisterResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesRegisterUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/register`;
};

export const v1EdgeHostDevicesRegister = async (
  v1EdgeHostDevice?: V1EdgeHostDevice,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesRegisterResponse> => {
  const res = await fetch(getV1EdgeHostDevicesRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDevice),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesRegisterResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesRegisterResponse;
};

/**
 * @summary Retrieves a list of edge hosts tags
 */
export type v1EdgeHostsTagsGetResponse200 = {
  data: V1EdgeHostsTags;
  status: 200;
};

export type v1EdgeHostsTagsGetResponseComposite = v1EdgeHostsTagsGetResponse200;

export type v1EdgeHostsTagsGetResponse = v1EdgeHostsTagsGetResponseComposite & {
  headers: Headers;
};

export const getV1EdgeHostsTagsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tags`;
};

export const v1EdgeHostsTagsGet = async (
  options?: RequestInit,
): Promise<v1EdgeHostsTagsGetResponse> => {
  const res = await fetch(getV1EdgeHostsTagsGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostsTagsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostsTagsGetResponse;
};

/**
 * @summary Retrieves a list of edge tokens
 */
export type v1EdgeTokensListResponse200 = {
  data: V1EdgeTokens;
  status: 200;
};

export type v1EdgeTokensListResponseComposite = v1EdgeTokensListResponse200;

export type v1EdgeTokensListResponse = v1EdgeTokensListResponseComposite & {
  headers: Headers;
};

export const getV1EdgeTokensListUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens`;
};

export const v1EdgeTokensList = async (
  options?: RequestInit,
): Promise<v1EdgeTokensListResponse> => {
  const res = await fetch(getV1EdgeTokensListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeTokensListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeTokensListResponse;
};

/**
 * @summary Create the edge token
 */
export type v1EdgeTokensCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1EdgeTokensCreateResponseComposite = v1EdgeTokensCreateResponse201;

export type v1EdgeTokensCreateResponse = v1EdgeTokensCreateResponseComposite & {
  headers: Headers;
};

export const getV1EdgeTokensCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens`;
};

export const v1EdgeTokensCreate = async (
  v1EdgeTokenEntity?: V1EdgeTokenEntity,
  options?: RequestInit,
): Promise<v1EdgeTokensCreateResponse> => {
  const res = await fetch(getV1EdgeTokensCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeTokenEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeTokensCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeTokensCreateResponse;
};

/**
 * @summary Deletes the specified edge token
 */
export type v1EdgeTokensUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeTokensUidDeleteResponseComposite =
  v1EdgeTokensUidDeleteResponseDefault;

export type v1EdgeTokensUidDeleteResponse =
  v1EdgeTokensUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeTokensUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const v1EdgeTokensUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeTokensUidDeleteResponse> => {
  const res = await fetch(getV1EdgeTokensUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeTokensUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeTokensUidDeleteResponse;
};

/**
 * @summary Returns the specified edge token
 */
export type v1EdgeTokensUidGetResponse200 = {
  data: V1EdgeToken;
  status: 200;
};

export type v1EdgeTokensUidGetResponseComposite = v1EdgeTokensUidGetResponse200;

export type v1EdgeTokensUidGetResponse = v1EdgeTokensUidGetResponseComposite & {
  headers: Headers;
};

export const getV1EdgeTokensUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const v1EdgeTokensUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeTokensUidGetResponse> => {
  const res = await fetch(getV1EdgeTokensUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeTokensUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeTokensUidGetResponse;
};

/**
 * @summary Updates the specified edge token
 */
export type v1EdgeTokensUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeTokensUidUpdateResponseComposite =
  v1EdgeTokensUidUpdateResponseDefault;

export type v1EdgeTokensUidUpdateResponse =
  v1EdgeTokensUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeTokensUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}`;
};

export const v1EdgeTokensUidUpdate = async (
  uid: string,
  v1EdgeTokenUpdate?: V1EdgeTokenUpdate,
  options?: RequestInit,
): Promise<v1EdgeTokensUidUpdateResponse> => {
  const res = await fetch(getV1EdgeTokensUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeTokenUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeTokensUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeTokensUidUpdateResponse;
};

/**
 * @summary Revoke or re-activate the edge token access
 */
export type v1EdgeTokensUidStateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeTokensUidStateResponseComposite =
  v1EdgeTokensUidStateResponseDefault;

export type v1EdgeTokensUidStateResponse =
  v1EdgeTokensUidStateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeTokensUidStateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/tokens/${uid}/state`;
};

export const v1EdgeTokensUidState = async (
  uid: string,
  v1EdgeTokenActiveState?: V1EdgeTokenActiveState,
  options?: RequestInit,
): Promise<v1EdgeTokensUidStateResponse> => {
  const res = await fetch(getV1EdgeTokensUidStateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeTokenActiveState),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeTokensUidStateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeTokensUidStateResponse;
};

/**
 * @summary Deletes the specified edge host device
 */
export type v1EdgeHostDevicesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidDeleteResponseComposite =
  v1EdgeHostDevicesUidDeleteResponseDefault;

export type v1EdgeHostDevicesUidDeleteResponse =
  v1EdgeHostDevicesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const v1EdgeHostDevicesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidDeleteResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidDeleteResponse;
};

/**
 * @summary Returns the specified edge host device
 */
export type v1EdgeHostDevicesUidGetResponse200 = {
  data: V1EdgeHostDevice;
  status: 200;
};

export type v1EdgeHostDevicesUidGetResponseComposite =
  v1EdgeHostDevicesUidGetResponse200;

export type v1EdgeHostDevicesUidGetResponse =
  v1EdgeHostDevicesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidGetUrl = (
  uid: string,
  params?: V1EdgeHostDevicesUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const v1EdgeHostDevicesUidGet = async (
  uid: string,
  params?: V1EdgeHostDevicesUidGetParams,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidGetResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidGetResponse;
};

/**
 * @summary Updates the specified edge host device
 */
export type v1EdgeHostDevicesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidUpdateResponseComposite =
  v1EdgeHostDevicesUidUpdateResponseDefault;

export type v1EdgeHostDevicesUidUpdateResponse =
  v1EdgeHostDevicesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}`;
};

export const v1EdgeHostDevicesUidUpdate = async (
  uid: string,
  v1EdgeHostDevice?: V1EdgeHostDevice,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDevice),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidUpdateResponse;
};

/**
 * @summary Deassociate the clusters to the edge host
 */
export type v1EdgeHostDevicesUidClusterDeassociateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidClusterDeassociateResponseComposite =
  v1EdgeHostDevicesUidClusterDeassociateResponseDefault;

export type v1EdgeHostDevicesUidClusterDeassociateResponse =
  v1EdgeHostDevicesUidClusterDeassociateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidClusterDeassociateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/cluster/associate`;
};

export const v1EdgeHostDevicesUidClusterDeassociate = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidClusterDeassociateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidClusterDeassociateUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidClusterDeassociateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidClusterDeassociateResponse;
};

/**
 * @summary Associate the clusters to the edge host
 */
export type v1EdgeHostDevicesUidClusterAssociateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidClusterAssociateResponseComposite =
  v1EdgeHostDevicesUidClusterAssociateResponseDefault;

export type v1EdgeHostDevicesUidClusterAssociateResponse =
  v1EdgeHostDevicesUidClusterAssociateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidClusterAssociateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/cluster/associate`;
};

export const v1EdgeHostDevicesUidClusterAssociate = async (
  uid: string,
  v1EdgeHostClusterEntity?: V1EdgeHostClusterEntity,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidClusterAssociateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidClusterAssociateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidClusterAssociateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidClusterAssociateResponse;
};

/**
 * @summary Get the specified edge host device configuration
 */
export type v1EdgeHostDevicesUidConfigGetResponse200 = {
  data: V1EdgeHostConfig;
  status: 200;
};

export type v1EdgeHostDevicesUidConfigGetResponseComposite =
  v1EdgeHostDevicesUidConfigGetResponse200;

export type v1EdgeHostDevicesUidConfigGetResponse =
  v1EdgeHostDevicesUidConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/config`;
};

export const v1EdgeHostDevicesUidConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidConfigGetResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidConfigGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidConfigGetResponse;
};

/**
 * @summary Updates the edge host health
 */
export type v1EdgeHostDevicesHealthUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesHealthUpdateResponseComposite =
  v1EdgeHostDevicesHealthUpdateResponseDefault;

export type v1EdgeHostDevicesHealthUpdateResponse =
  v1EdgeHostDevicesHealthUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesHealthUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/health`;
};

export const v1EdgeHostDevicesHealthUpdate = async (
  uid: string,
  v1EdgeHostHealth?: V1EdgeHostHealth,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesHealthUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesHealthUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostHealth),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesHealthUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesHealthUpdateResponse;
};

/**
 * @summary Update the specified edge host device host check sum
 */
export type v1EdgeHostDeviceHostCheckSumUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDeviceHostCheckSumUpdateResponseComposite =
  v1EdgeHostDeviceHostCheckSumUpdateResponseDefault;

export type v1EdgeHostDeviceHostCheckSumUpdateResponse =
  v1EdgeHostDeviceHostCheckSumUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDeviceHostCheckSumUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/hostCheckSum`;
};

export const v1EdgeHostDeviceHostCheckSumUpdate = async (
  uid: string,
  v1EdgeHostDeviceHostCheckSum?: V1EdgeHostDeviceHostCheckSum,
  options?: RequestInit,
): Promise<v1EdgeHostDeviceHostCheckSumUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDeviceHostCheckSumUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDeviceHostCheckSum),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDeviceHostCheckSumUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDeviceHostCheckSumUpdateResponse;
};

/**
 * @summary Update the specified edge host device host pairing key
 */
export type v1EdgeHostDeviceHostPairingKeyUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDeviceHostPairingKeyUpdateResponseComposite =
  v1EdgeHostDeviceHostPairingKeyUpdateResponseDefault;

export type v1EdgeHostDeviceHostPairingKeyUpdateResponse =
  v1EdgeHostDeviceHostPairingKeyUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDeviceHostPairingKeyUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/hostPairingKey`;
};

export const v1EdgeHostDeviceHostPairingKeyUpdate = async (
  uid: string,
  v1EdgeHostDeviceHostPairingKey?: V1EdgeHostDeviceHostPairingKey,
  options?: RequestInit,
): Promise<v1EdgeHostDeviceHostPairingKeyUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDeviceHostPairingKeyUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDeviceHostPairingKey),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDeviceHostPairingKeyUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDeviceHostPairingKeyUpdateResponse;
};

/**
 * @summary Updates the specified edge host device meta
 */
export type v1EdgeHostDevicesUidMetaUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidMetaUpdateResponseComposite =
  v1EdgeHostDevicesUidMetaUpdateResponseDefault;

export type v1EdgeHostDevicesUidMetaUpdateResponse =
  v1EdgeHostDevicesUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/meta`;
};

export const v1EdgeHostDevicesUidMetaUpdate = async (
  uid: string,
  v1EdgeHostDeviceMetaUpdateEntity?: V1EdgeHostDeviceMetaUpdateEntity,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidMetaUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EdgeHostDeviceMetaUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidMetaUpdateResponse;
};

/**
 * @summary Returns the specified edge host's manifest
 */
export type v1EdgeHostDevicesUidPackManifestsUidGetResponse200 = {
  data: V1Manifest;
  status: 200;
};

export type v1EdgeHostDevicesUidPackManifestsUidGetResponseComposite =
  v1EdgeHostDevicesUidPackManifestsUidGetResponse200;

export type v1EdgeHostDevicesUidPackManifestsUidGetResponse =
  v1EdgeHostDevicesUidPackManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidPackManifestsUidGetUrl = (
  uid: string,
  manifestUid: string,
  params?: V1EdgeHostDevicesUidPackManifestsUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}/pack/manifests/${manifestUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}/pack/manifests/${manifestUid}`;
};

export const v1EdgeHostDevicesUidPackManifestsUidGet = async (
  uid: string,
  manifestUid: string,
  params?: V1EdgeHostDevicesUidPackManifestsUidGetParams,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidPackManifestsUidGetResponse> => {
  const res = await fetch(
    getV1EdgeHostDevicesUidPackManifestsUidGetUrl(uid, manifestUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidPackManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidPackManifestsUidGetResponse;
};

/**
 * @summary Patch update specified edge host's packs status
 */
export type v1EdgeHostDevicesUidPacksStatusPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidPacksStatusPatchResponseComposite =
  v1EdgeHostDevicesUidPacksStatusPatchResponseDefault;

export type v1EdgeHostDevicesUidPacksStatusPatchResponse =
  v1EdgeHostDevicesUidPacksStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidPacksStatusPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/packs/status`;
};

export const v1EdgeHostDevicesUidPacksStatusPatch = async (
  uid: string,
  v1SpectroClusterPacksStatusEntity?: V1SpectroClusterPacksStatusEntity,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidPacksStatusPatchResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidPacksStatusPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterPacksStatusEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidPacksStatusPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidPacksStatusPatchResponse;
};

/**
 * @summary Returns the associated profiles of a specified edge host device
 */
export type v1EdgeHostDevicesUidProfilesGetResponse200 = {
  data: V1SpectroClusterProfileList;
  status: 200;
};

export type v1EdgeHostDevicesUidProfilesGetResponseComposite =
  v1EdgeHostDevicesUidProfilesGetResponse200;

export type v1EdgeHostDevicesUidProfilesGetResponse =
  v1EdgeHostDevicesUidProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidProfilesGetUrl = (
  uid: string,
  params?: V1EdgeHostDevicesUidProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles`;
};

export const v1EdgeHostDevicesUidProfilesGet = async (
  uid: string,
  params?: V1EdgeHostDevicesUidProfilesGetParams,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidProfilesGetResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidProfilesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidProfilesGetResponse;
};

/**
 * @summary Associate cluster profiles to the specified edge host device
 */
export type v1EdgeHostDevicesUidProfilesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidProfilesUpdateResponseComposite =
  v1EdgeHostDevicesUidProfilesUpdateResponseDefault;

export type v1EdgeHostDevicesUidProfilesUpdateResponse =
  v1EdgeHostDevicesUidProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidProfilesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/profiles`;
};

export const v1EdgeHostDevicesUidProfilesUpdate = async (
  uid: string,
  v1SpectroClusterProfiles?: V1SpectroClusterProfiles,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidProfilesUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidProfilesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfiles),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidProfilesUpdateResponse;
};

/**
 * @summary Reset the cluster through edge host
 */
export type v1EdgeHostsUidResetResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostsUidResetResponseComposite =
  v1EdgeHostsUidResetResponseDefault;

export type v1EdgeHostsUidResetResponse =
  v1EdgeHostsUidResetResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostsUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/reset`;
};

export const v1EdgeHostsUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeHostsUidResetResponse> => {
  const res = await fetch(getV1EdgeHostsUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostsUidResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostsUidResetResponse;
};

/**
 * @summary Download the specified edge host device spc
 */
export type v1EdgeHostDevicesUidSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type v1EdgeHostDevicesUidSpcDownloadResponseComposite =
  v1EdgeHostDevicesUidSpcDownloadResponse200;

export type v1EdgeHostDevicesUidSpcDownloadResponse =
  v1EdgeHostDevicesUidSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidSpcDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/spc/download`;
};

export const v1EdgeHostDevicesUidSpcDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidSpcDownloadResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidSpcDownloadUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidSpcDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidSpcDownloadResponse;
};

/**
 * @summary Updates the specified edge host device tunnel configuration
 */
export type v1EdgeHostDevicesUidTunnelConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidTunnelConfigUpdateResponseComposite =
  v1EdgeHostDevicesUidTunnelConfigUpdateResponseDefault;

export type v1EdgeHostDevicesUidTunnelConfigUpdateResponse =
  v1EdgeHostDevicesUidTunnelConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidTunnelConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/tunnelConfig`;
};

export const v1EdgeHostDevicesUidTunnelConfigUpdate = async (
  uid: string,
  v1SpectroTunnelConfig?: V1SpectroTunnelConfig,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidTunnelConfigUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidTunnelConfigUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroTunnelConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidTunnelConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidTunnelConfigUpdateResponse;
};

/**
 * @summary Updates the edge host tunnel status
 */
export type v1EdgeHostDevicesUidTunnelStatusUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidTunnelStatusUpdateResponseComposite =
  v1EdgeHostDevicesUidTunnelStatusUpdateResponseDefault;

export type v1EdgeHostDevicesUidTunnelStatusUpdateResponse =
  v1EdgeHostDevicesUidTunnelStatusUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidTunnelStatusUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/tunnelStatus`;
};

export const v1EdgeHostDevicesUidTunnelStatusUpdate = async (
  uid: string,
  v1SpectroTunnelStatus?: V1SpectroTunnelStatus,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidTunnelStatusUpdateResponse> => {
  const res = await fetch(getV1EdgeHostDevicesUidTunnelStatusUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroTunnelStatus),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidTunnelStatusUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidTunnelStatusUpdateResponse;
};

/**
 * @summary Updates the specified edge host device vsphere properties
 */
export type v1EdgeHostDevicesUidVspherePropertiesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EdgeHostDevicesUidVspherePropertiesUpdateResponseComposite =
  v1EdgeHostDevicesUidVspherePropertiesUpdateResponseDefault;

export type v1EdgeHostDevicesUidVspherePropertiesUpdateResponse =
  v1EdgeHostDevicesUidVspherePropertiesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeHostDevicesUidVspherePropertiesUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/edgehosts/${uid}/vsphere/properties`;
};

export const v1EdgeHostDevicesUidVspherePropertiesUpdate = async (
  uid: string,
  v1EdgeHostVsphereCloudProperties?: V1EdgeHostVsphereCloudProperties,
  options?: RequestInit,
): Promise<v1EdgeHostDevicesUidVspherePropertiesUpdateResponse> => {
  const res = await fetch(
    getV1EdgeHostDevicesUidVspherePropertiesUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1EdgeHostVsphereCloudProperties),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeHostDevicesUidVspherePropertiesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeHostDevicesUidVspherePropertiesUpdateResponse;
};

/**
 * Returns a paginated list of component events based on request parameters
 * @summary Returns a paginated list of component events based on request parameters
 */
export type v1EventsComponentsListResponse200 = {
  data: V1Events;
  status: 200;
};

export type v1EventsComponentsListResponseComposite =
  v1EventsComponentsListResponse200;

export type v1EventsComponentsListResponse =
  v1EventsComponentsListResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsListUrl = (
  params?: V1EventsComponentsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/events/components?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/events/components`;
};

export const v1EventsComponentsList = async (
  params?: V1EventsComponentsListParams,
  options?: RequestInit,
): Promise<v1EventsComponentsListResponse> => {
  const res = await fetch(getV1EventsComponentsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EventsComponentsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EventsComponentsListResponse;
};

/**
 * Creates a component event
 * @summary Creates a component event
 */
export type v1EventsComponentsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1EventsComponentsCreateResponseComposite =
  v1EventsComponentsCreateResponse201;

export type v1EventsComponentsCreateResponse =
  v1EventsComponentsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/events/components`;
};

export const v1EventsComponentsCreate = async (
  v1Event?: V1Event,
  options?: RequestInit,
): Promise<v1EventsComponentsCreateResponse> => {
  const res = await fetch(getV1EventsComponentsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Event),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EventsComponentsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EventsComponentsCreateResponse;
};

/**
 * Creates the component events in bulk
 * @summary Creates the component events in bulk
 */
export type v1EventsComponentsCreateBulkResponse201 = {
  data: V1Uids;
  status: 201;
};

export type v1EventsComponentsCreateBulkResponseComposite =
  v1EventsComponentsCreateBulkResponse201;

export type v1EventsComponentsCreateBulkResponse =
  v1EventsComponentsCreateBulkResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsCreateBulkUrl = () => {
  return `https://api.spectrocloud.com/v1/events/components/bulk`;
};

export const v1EventsComponentsCreateBulk = async (
  v1BulkEvents?: V1BulkEvents,
  options?: RequestInit,
): Promise<v1EventsComponentsCreateBulkResponse> => {
  const res = await fetch(getV1EventsComponentsCreateBulkUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1BulkEvents),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EventsComponentsCreateBulkResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EventsComponentsCreateBulkResponse;
};

/**
 * @summary Delete all the components events for the specified related object
 */
export type v1EventsComponentsObjTypeUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EventsComponentsObjTypeUidDeleteResponseComposite =
  v1EventsComponentsObjTypeUidDeleteResponseDefault;

export type v1EventsComponentsObjTypeUidDeleteResponse =
  v1EventsComponentsObjTypeUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsObjTypeUidDeleteUrl = (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
) => {
  return `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}`;
};

export const v1EventsComponentsObjTypeUidDelete = async (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  options?: RequestInit,
): Promise<v1EventsComponentsObjTypeUidDeleteResponse> => {
  const res = await fetch(
    getV1EventsComponentsObjTypeUidDeleteUrl(objectKind, objectUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EventsComponentsObjTypeUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EventsComponentsObjTypeUidDeleteResponse;
};

/**
 * Returns a list of components events for the specified related object
 * @summary Returns a list of components events for the specified related object
 */
export type v1EventsComponentsObjTypeUidListResponse200 = {
  data: V1Events;
  status: 200;
};

export type v1EventsComponentsObjTypeUidListResponseComposite =
  v1EventsComponentsObjTypeUidListResponse200;

export type v1EventsComponentsObjTypeUidListResponse =
  v1EventsComponentsObjTypeUidListResponseComposite & {
    headers: Headers;
  };

export const getV1EventsComponentsObjTypeUidListUrl = (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  params?: V1EventsComponentsObjTypeUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/events/components/${objectKind}/${objectUid}`;
};

export const v1EventsComponentsObjTypeUidList = async (
  objectKind: "spectrocluster" | "edgehost",
  objectUid: string,
  params?: V1EventsComponentsObjTypeUidListParams,
  options?: RequestInit,
): Promise<v1EventsComponentsObjTypeUidListResponse> => {
  const res = await fetch(
    getV1EventsComponentsObjTypeUidListUrl(objectKind, objectUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EventsComponentsObjTypeUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EventsComponentsObjTypeUidListResponse;
};

/**
 * @summary Retrieves the list of features
 */
export type v1FeaturesListResponse200 = {
  data: V1Features;
  status: 200;
};

export type v1FeaturesListResponseComposite = v1FeaturesListResponse200;

export type v1FeaturesListResponse = v1FeaturesListResponseComposite & {
  headers: Headers;
};

export const getV1FeaturesListUrl = () => {
  return `https://api.spectrocloud.com/v1/features`;
};

export const v1FeaturesList = async (
  options?: RequestInit,
): Promise<v1FeaturesListResponse> => {
  const res = await fetch(getV1FeaturesListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1FeaturesListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1FeaturesListResponse;
};

/**
 * @summary Update a feature
 */
export type v1FeaturesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1FeaturesUpdateResponseComposite = v1FeaturesUpdateResponseDefault;

export type v1FeaturesUpdateResponse = v1FeaturesUpdateResponseComposite & {
  headers: Headers;
};

export const getV1FeaturesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/features/${uid}`;
};

export const v1FeaturesUpdate = async (
  uid: string,
  v1FeatureUpdate?: V1FeatureUpdate,
  options?: RequestInit,
): Promise<v1FeaturesUpdateResponse> => {
  const res = await fetch(getV1FeaturesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1FeatureUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1FeaturesUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1FeaturesUpdateResponse;
};

/**
 * @summary Returns a list of Filters
 */
export type v1FiltersListResponse200 = {
  data: V1FiltersSummary;
  status: 200;
};

export type v1FiltersListResponseComposite = v1FiltersListResponse200;

export type v1FiltersListResponse = v1FiltersListResponseComposite & {
  headers: Headers;
};

export const getV1FiltersListUrl = (params?: V1FiltersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/filters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/filters`;
};

export const v1FiltersList = async (
  params?: V1FiltersListParams,
  options?: RequestInit,
): Promise<v1FiltersListResponse> => {
  const res = await fetch(getV1FiltersListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1FiltersListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1FiltersListResponse;
};

/**
 * @summary Returns a list of Filters metadata
 */
export type v1FiltersMetadataResponse200 = {
  data: V1FiltersMetadata;
  status: 200;
};

export type v1FiltersMetadataResponseComposite = v1FiltersMetadataResponse200;

export type v1FiltersMetadataResponse = v1FiltersMetadataResponseComposite & {
  headers: Headers;
};

export const getV1FiltersMetadataUrl = (params?: V1FiltersMetadataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/filters/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/filters/metadata`;
};

export const v1FiltersMetadata = async (
  params?: V1FiltersMetadataParams,
  options?: RequestInit,
): Promise<v1FiltersMetadataResponse> => {
  const res = await fetch(getV1FiltersMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1FiltersMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1FiltersMetadataResponse;
};

/**
 * @summary Creates a Tag filter
 */
export type v1TagFiltersCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1TagFiltersCreateResponseComposite = v1TagFiltersCreateResponse201;

export type v1TagFiltersCreateResponse = v1TagFiltersCreateResponseComposite & {
  headers: Headers;
};

export const getV1TagFiltersCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/filters/tag`;
};

export const v1TagFiltersCreate = async (
  v1TagFilter?: V1TagFilter,
  options?: RequestInit,
): Promise<v1TagFiltersCreateResponse> => {
  const res = await fetch(getV1TagFiltersCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TagFilter),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TagFiltersCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TagFiltersCreateResponse;
};

/**
 * @summary Delete the specified Filter object
 */
export type v1TagFilterUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TagFilterUidDeleteResponseComposite =
  v1TagFilterUidDeleteResponseDefault;

export type v1TagFilterUidDeleteResponse =
  v1TagFilterUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TagFilterUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const v1TagFilterUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TagFilterUidDeleteResponse> => {
  const res = await fetch(getV1TagFilterUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TagFilterUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TagFilterUidDeleteResponse;
};

/**
 * @summary Returns the specified Filter object
 */
export type v1TagFilterUidGetResponse200 = {
  data: V1TagFilterSummary;
  status: 200;
};

export type v1TagFilterUidGetResponseComposite = v1TagFilterUidGetResponse200;

export type v1TagFilterUidGetResponse = v1TagFilterUidGetResponseComposite & {
  headers: Headers;
};

export const getV1TagFilterUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const v1TagFilterUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TagFilterUidGetResponse> => {
  const res = await fetch(getV1TagFilterUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TagFilterUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TagFilterUidGetResponse;
};

/**
 * @summary Updates a Tag filter
 */
export type v1TagFilterUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TagFilterUidUpdateResponseComposite =
  v1TagFilterUidUpdateResponseDefault;

export type v1TagFilterUidUpdateResponse =
  v1TagFilterUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TagFilterUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const v1TagFilterUidUpdate = async (
  uid: string,
  v1TagFilter?: V1TagFilter,
  options?: RequestInit,
): Promise<v1TagFilterUidUpdateResponse> => {
  const res = await fetch(getV1TagFilterUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TagFilter),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TagFilterUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TagFilterUidUpdateResponse;
};

/**
 * Returns all the metrics for a given resource kind
 * @summary Retrieves the list of metrics for a specified resource kind
 */
export type v1MetricsListResponse200 = {
  data: V1MetricTimeSeriesList;
  status: 200;
};

export type v1MetricsListResponseComposite = v1MetricsListResponse200;

export type v1MetricsListResponse = v1MetricsListResponseComposite & {
  headers: Headers;
};

export const getV1MetricsListUrl = (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  params?: V1MetricsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/metrics/${resourceKind}/values?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/metrics/${resourceKind}/values`;
};

export const v1MetricsList = async (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  params?: V1MetricsListParams,
  options?: RequestInit,
): Promise<v1MetricsListResponse> => {
  const res = await fetch(getV1MetricsListUrl(resourceKind, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MetricsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MetricsListResponse;
};

/**
 * @summary Deletes the metrics of the specified resource
 */
export type v1MetricsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1MetricsUidDeleteResponseComposite =
  v1MetricsUidDeleteResponseDefault;

export type v1MetricsUidDeleteResponse = v1MetricsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1MetricsUidDeleteUrl = (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/metrics/${resourceKind}/${resourceUid}/values`;
};

export const v1MetricsUidDelete = async (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
  options?: RequestInit,
): Promise<v1MetricsUidDeleteResponse> => {
  const res = await fetch(getV1MetricsUidDeleteUrl(resourceKind, resourceUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MetricsUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MetricsUidDeleteResponse;
};

/**
 * @summary Returns the metrics for a specified resource uid
 */
export type v1MetricsUidListResponse200 = {
  data: V1MetricTimeSeries;
  status: 200;
};

export type v1MetricsUidListResponseComposite = v1MetricsUidListResponse200;

export type v1MetricsUidListResponse = v1MetricsUidListResponseComposite & {
  headers: Headers;
};

export const getV1MetricsUidListUrl = (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
  params?: V1MetricsUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/metrics/${resourceKind}/${resourceUid}/values?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/metrics/${resourceKind}/${resourceUid}/values`;
};

export const v1MetricsUidList = async (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
  params?: V1MetricsUidListParams,
  options?: RequestInit,
): Promise<v1MetricsUidListResponse> => {
  const res = await fetch(
    getV1MetricsUidListUrl(resourceKind, resourceUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MetricsUidListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MetricsUidListResponse;
};

/**
 * Returns a paginated list of notifications based on request parameters
 * @summary Returns a paginated list of notifications based on request parameters
 */
export type v1NotificationsListResponse200 = {
  data: V1Notifications;
  status: 200;
};

export type v1NotificationsListResponseComposite =
  v1NotificationsListResponse200;

export type v1NotificationsListResponse =
  v1NotificationsListResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsListUrl = (
  params?: V1NotificationsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/notifications/?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/notifications/`;
};

export const v1NotificationsList = async (
  params?: V1NotificationsListParams,
  options?: RequestInit,
): Promise<v1NotificationsListResponse> => {
  const res = await fetch(getV1NotificationsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1NotificationsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1NotificationsListResponse;
};

/**
 * Creates a notification event
 * @summary Creates a notification event
 */
export type v1NotificationsEventCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1NotificationsEventCreateResponseComposite =
  v1NotificationsEventCreateResponse201;

export type v1NotificationsEventCreateResponse =
  v1NotificationsEventCreateResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsEventCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/notifications/events`;
};

export const v1NotificationsEventCreate = async (
  v1NotificationEvent?: V1NotificationEvent,
  options?: RequestInit,
): Promise<v1NotificationsEventCreateResponse> => {
  const res = await fetch(getV1NotificationsEventCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1NotificationEvent),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1NotificationsEventCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1NotificationsEventCreateResponse;
};

/**
 * Returns a list of notifications for the specified related object
 * @summary Returns a list of notifications for the specified related object
 */
export type v1NotificationsObjTypeUidListResponse200 = {
  data: V1Notifications;
  status: 200;
};

export type v1NotificationsObjTypeUidListResponseComposite =
  v1NotificationsObjTypeUidListResponse200;

export type v1NotificationsObjTypeUidListResponse =
  v1NotificationsObjTypeUidListResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsObjTypeUidListUrl = (
  objectKind: "spectrocluster" | "clusterprofile" | "appdeployment",
  objectUid: string,
  params?: V1NotificationsObjTypeUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/notifications/${objectKind}/${objectUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/notifications/${objectKind}/${objectUid}`;
};

export const v1NotificationsObjTypeUidList = async (
  objectKind: "spectrocluster" | "clusterprofile" | "appdeployment",
  objectUid: string,
  params?: V1NotificationsObjTypeUidListParams,
  options?: RequestInit,
): Promise<v1NotificationsObjTypeUidListResponse> => {
  const res = await fetch(
    getV1NotificationsObjTypeUidListUrl(objectKind, objectUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1NotificationsObjTypeUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1NotificationsObjTypeUidListResponse;
};

/**
 * Updates the specified notification for the acknowledgment
 * @summary Updates the specified notification for the acknowledgment
 */
export type v1NotificationsUidAckResponseDefault = {
  data: unknown;
  status: number;
};

export type v1NotificationsUidAckResponseComposite =
  v1NotificationsUidAckResponseDefault;

export type v1NotificationsUidAckResponse =
  v1NotificationsUidAckResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsUidAckUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/notifications/${uid}/ack`;
};

export const v1NotificationsUidAck = async (
  uid: string,
  options?: RequestInit,
): Promise<v1NotificationsUidAckResponse> => {
  const res = await fetch(getV1NotificationsUidAckUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1NotificationsUidAckResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1NotificationsUidAckResponse;
};

/**
 * Updates the specified notification action as done
 * @summary Updates the specified notification action as done
 */
export type v1NotificationsUidDoneResponseDefault = {
  data: unknown;
  status: number;
};

export type v1NotificationsUidDoneResponseComposite =
  v1NotificationsUidDoneResponseDefault;

export type v1NotificationsUidDoneResponse =
  v1NotificationsUidDoneResponseComposite & {
    headers: Headers;
  };

export const getV1NotificationsUidDoneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/notifications/${uid}/done`;
};

export const v1NotificationsUidDone = async (
  uid: string,
  options?: RequestInit,
): Promise<v1NotificationsUidDoneResponse> => {
  const res = await fetch(getV1NotificationsUidDoneUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1NotificationsUidDoneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1NotificationsUidDoneResponse;
};

/**
 * @summary Retrieves a list of overlords owned by the tenant
 */
export type v1OverlordsListResponse200 = {
  data: V1Overlords;
  status: 200;
};

export type v1OverlordsListResponseComposite = v1OverlordsListResponse200;

export type v1OverlordsListResponse = v1OverlordsListResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsListUrl = (params?: V1OverlordsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords`;
};

export const v1OverlordsList = async (
  params?: V1OverlordsListParams,
  options?: RequestInit,
): Promise<v1OverlordsListResponse> => {
  const res = await fetch(getV1OverlordsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsListResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type v1OverlordsMaasManifestResponse200 = {
  data: V1OverlordManifest;
  status: 200;
};

export type v1OverlordsMaasManifestResponseComposite =
  v1OverlordsMaasManifestResponse200;

export type v1OverlordsMaasManifestResponse =
  v1OverlordsMaasManifestResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsMaasManifestUrl = (
  params: V1OverlordsMaasManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/maas/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/maas/manifest`;
};

export const v1OverlordsMaasManifest = async (
  params: V1OverlordsMaasManifestParams,
  options?: RequestInit,
): Promise<v1OverlordsMaasManifestResponse> => {
  const res = await fetch(getV1OverlordsMaasManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsMaasManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsMaasManifestResponse;
};

/**
 * @summary create the maas cloudaccount for the private gateway
 */
export type v1OverlordsUidMaasAccountCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1OverlordsUidMaasAccountCreateResponseComposite =
  v1OverlordsUidMaasAccountCreateResponse201;

export type v1OverlordsUidMaasAccountCreateResponse =
  v1OverlordsUidMaasAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account`;
};

export const v1OverlordsUidMaasAccountCreate = async (
  uid: string,
  v1OverlordMaasAccountCreate?: V1OverlordMaasAccountCreate,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasAccountCreateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordMaasAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasAccountCreateResponse;
};

/**
 * @summary update the maas cloudaccount for the private gateway
 */
export type v1OverlordsUidMaasAccountUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidMaasAccountUpdateResponseComposite =
  v1OverlordsUidMaasAccountUpdateResponseDefault;

export type v1OverlordsUidMaasAccountUpdateResponse =
  v1OverlordsUidMaasAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account`;
};

export const v1OverlordsUidMaasAccountUpdate = async (
  uid: string,
  v1OverlordMaasAccountEntity?: V1OverlordMaasAccountEntity,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasAccountUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordMaasAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasAccountUpdateResponse;
};

/**
 * @summary validate the maas cloudaccount for the private gateway
 */
export type v1OverlordsUidMaasAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidMaasAccountValidateResponseComposite =
  v1OverlordsUidMaasAccountValidateResponseDefault;

export type v1OverlordsUidMaasAccountValidateResponse =
  v1OverlordsUidMaasAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/account/validate`;
};

export const v1OverlordsUidMaasAccountValidate = async (
  uid: string,
  v1OverlordsUidMaasAccountValidateRequest?: V1OverlordsUidMaasAccountValidateRequest,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasAccountValidateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordsUidMaasAccountValidateRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasAccountValidateResponse;
};

/**
 * @summary create the maas cloud config for the private gateway
 */
export type v1OverlordsUidMaasCloudConfigCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1OverlordsUidMaasCloudConfigCreateResponseComposite =
  v1OverlordsUidMaasCloudConfigCreateResponse201;

export type v1OverlordsUidMaasCloudConfigCreateResponse =
  v1OverlordsUidMaasCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/cloudconfig`;
};

export const v1OverlordsUidMaasCloudConfigCreate = async (
  uid: string,
  v1OverlordMaasCloudConfig?: V1OverlordMaasCloudConfig,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasCloudConfigCreateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordMaasCloudConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasCloudConfigCreateResponse;
};

/**
 * @summary update the maas cloud config for the private gateway
 */
export type v1OverlordsUidMaasCloudConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidMaasCloudConfigUpdateResponseComposite =
  v1OverlordsUidMaasCloudConfigUpdateResponseDefault;

export type v1OverlordsUidMaasCloudConfigUpdateResponse =
  v1OverlordsUidMaasCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/cloudconfig`;
};

export const v1OverlordsUidMaasCloudConfigUpdate = async (
  uid: string,
  v1OverlordMaasCloudConfig?: V1OverlordMaasCloudConfig,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasCloudConfigUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidMaasCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordMaasCloudConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified maas private gateway cluster profile
 */
export type v1OverlordsUidMaasClusterProfileResponse200 = {
  data: V1ClusterProfile;
  status: 200;
};

export type v1OverlordsUidMaasClusterProfileResponseComposite =
  v1OverlordsUidMaasClusterProfileResponse200;

export type v1OverlordsUidMaasClusterProfileResponse =
  v1OverlordsUidMaasClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMaasClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/maas/${uid}/clusterprofile`;
};

export const v1OverlordsUidMaasClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidMaasClusterProfileResponse> => {
  const res = await fetch(getV1OverlordsUidMaasClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMaasClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMaasClusterProfileResponse;
};

/**
 * @summary migrate all the clusters from source overlord to target overlord
 */
export type v1OverlordsMigrateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsMigrateResponseComposite =
  v1OverlordsMigrateResponseDefault;

export type v1OverlordsMigrateResponse = v1OverlordsMigrateResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsMigrateUrl = () => {
  return `https://api.spectrocloud.com/v1/overlords/migrate`;
};

export const v1OverlordsMigrate = async (
  v1OverlordMigrateEntity?: V1OverlordMigrateEntity,
  options?: RequestInit,
): Promise<v1OverlordsMigrateResponse> => {
  const res = await fetch(getV1OverlordsMigrateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordMigrateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsMigrateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsMigrateResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type v1OverlordsOpenStackManifestResponse200 = {
  data: V1OverlordManifest;
  status: 200;
};

export type v1OverlordsOpenStackManifestResponseComposite =
  v1OverlordsOpenStackManifestResponse200;

export type v1OverlordsOpenStackManifestResponse =
  v1OverlordsOpenStackManifestResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsOpenStackManifestUrl = (
  params: V1OverlordsOpenStackManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/openstack/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/openstack/manifest`;
};

export const v1OverlordsOpenStackManifest = async (
  params: V1OverlordsOpenStackManifestParams,
  options?: RequestInit,
): Promise<v1OverlordsOpenStackManifestResponse> => {
  const res = await fetch(getV1OverlordsOpenStackManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsOpenStackManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsOpenStackManifestResponse;
};

/**
 * @summary create the OpenStack cloudaccount for the private gateway
 */
export type v1OverlordsUidOpenStackAccountCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1OverlordsUidOpenStackAccountCreateResponseComposite =
  v1OverlordsUidOpenStackAccountCreateResponse201;

export type v1OverlordsUidOpenStackAccountCreateResponse =
  v1OverlordsUidOpenStackAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account`;
};

export const v1OverlordsUidOpenStackAccountCreate = async (
  uid: string,
  v1OverlordOpenStackAccountCreate?: V1OverlordOpenStackAccountCreate,
  options?: RequestInit,
): Promise<v1OverlordsUidOpenStackAccountCreateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordOpenStackAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidOpenStackAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidOpenStackAccountCreateResponse;
};

/**
 * @summary update the OpenStack cloudaccount for the private gateway
 */
export type v1OverlordsUidOpenStackAccountUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidOpenStackAccountUpdateResponseComposite =
  v1OverlordsUidOpenStackAccountUpdateResponseDefault;

export type v1OverlordsUidOpenStackAccountUpdateResponse =
  v1OverlordsUidOpenStackAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account`;
};

export const v1OverlordsUidOpenStackAccountUpdate = async (
  uid: string,
  v1OverlordOpenStackAccountEntity?: V1OverlordOpenStackAccountEntity,
  options?: RequestInit,
): Promise<v1OverlordsUidOpenStackAccountUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordOpenStackAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidOpenStackAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidOpenStackAccountUpdateResponse;
};

/**
 * @summary validate the OpenStack cloudaccount for the private gateway
 */
export type v1OverlordsUidOpenStackAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidOpenStackAccountValidateResponseComposite =
  v1OverlordsUidOpenStackAccountValidateResponseDefault;

export type v1OverlordsUidOpenStackAccountValidateResponse =
  v1OverlordsUidOpenStackAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/account/validate`;
};

export const v1OverlordsUidOpenStackAccountValidate = async (
  uid: string,
  v1OverlordsUidOpenStackAccountValidateRequest?: V1OverlordsUidOpenStackAccountValidateRequest,
  options?: RequestInit,
): Promise<v1OverlordsUidOpenStackAccountValidateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordsUidOpenStackAccountValidateRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidOpenStackAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidOpenStackAccountValidateResponse;
};

/**
 * @summary create the OpenStack cloud config for the private gateway
 */
export type v1OverlordsUidOpenStackCloudConfigCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1OverlordsUidOpenStackCloudConfigCreateResponseComposite =
  v1OverlordsUidOpenStackCloudConfigCreateResponse201;

export type v1OverlordsUidOpenStackCloudConfigCreateResponse =
  v1OverlordsUidOpenStackCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/cloudconfig`;
};

export const v1OverlordsUidOpenStackCloudConfigCreate = async (
  uid: string,
  v1OverlordOpenStackCloudConfig?: V1OverlordOpenStackCloudConfig,
  options?: RequestInit,
): Promise<v1OverlordsUidOpenStackCloudConfigCreateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordOpenStackCloudConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidOpenStackCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidOpenStackCloudConfigCreateResponse;
};

/**
 * @summary update the OpenStack cloud config for the private gateway
 */
export type v1OverlordsUidOpenStackCloudConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidOpenStackCloudConfigUpdateResponseComposite =
  v1OverlordsUidOpenStackCloudConfigUpdateResponseDefault;

export type v1OverlordsUidOpenStackCloudConfigUpdateResponse =
  v1OverlordsUidOpenStackCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/cloudconfig`;
};

export const v1OverlordsUidOpenStackCloudConfigUpdate = async (
  uid: string,
  v1OverlordOpenStackCloudConfig?: V1OverlordOpenStackCloudConfig,
  options?: RequestInit,
): Promise<v1OverlordsUidOpenStackCloudConfigUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordOpenStackCloudConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidOpenStackCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidOpenStackCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified OpenStack private gateway cluster profile
 */
export type v1OverlordsUidOpenStackClusterProfileResponse200 = {
  data: V1ClusterProfile;
  status: 200;
};

export type v1OverlordsUidOpenStackClusterProfileResponseComposite =
  v1OverlordsUidOpenStackClusterProfileResponse200;

export type v1OverlordsUidOpenStackClusterProfileResponse =
  v1OverlordsUidOpenStackClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidOpenStackClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/openstack/${uid}/clusterprofile`;
};

export const v1OverlordsUidOpenStackClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidOpenStackClusterProfileResponse> => {
  const res = await fetch(getV1OverlordsUidOpenStackClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidOpenStackClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidOpenStackClusterProfileResponse;
};

/**
 * @summary Returns the pairing code for the private gateway
 */
export type v1OverlordsPairingCodeResponse200 = {
  data: V1PairingCode;
  status: 200;
};

export type v1OverlordsPairingCodeResponseComposite =
  v1OverlordsPairingCodeResponse200;

export type v1OverlordsPairingCodeResponse =
  v1OverlordsPairingCodeResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsPairingCodeUrl = (
  params?: V1OverlordsPairingCodeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/pairing/code?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/pairing/code`;
};

export const v1OverlordsPairingCode = async (
  params?: V1OverlordsPairingCodeParams,
  options?: RequestInit,
): Promise<v1OverlordsPairingCodeResponse> => {
  const res = await fetch(getV1OverlordsPairingCodeUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsPairingCodeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsPairingCodeResponse;
};

/**
 * @summary Returns the manifests required for the private gateway installation
 */
export type v1OverlordsVsphereManifestResponse200 = {
  data: V1OverlordManifest;
  status: 200;
};

export type v1OverlordsVsphereManifestResponseComposite =
  v1OverlordsVsphereManifestResponse200;

export type v1OverlordsVsphereManifestResponse =
  v1OverlordsVsphereManifestResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsVsphereManifestUrl = (
  params: V1OverlordsVsphereManifestParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/vsphere/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/vsphere/manifest`;
};

export const v1OverlordsVsphereManifest = async (
  params: V1OverlordsVsphereManifestParams,
  options?: RequestInit,
): Promise<v1OverlordsVsphereManifestResponse> => {
  const res = await fetch(getV1OverlordsVsphereManifestUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsVsphereManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsVsphereManifestResponse;
};

/**
 * @summary Returns overlord's ova information
 */
export type v1OverlordsVsphereOvaGetResponse200 = {
  data: V1OverloadVsphereOva;
  status: 200;
};

export type v1OverlordsVsphereOvaGetResponseComposite =
  v1OverlordsVsphereOvaGetResponse200;

export type v1OverlordsVsphereOvaGetResponse =
  v1OverlordsVsphereOvaGetResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsVsphereOvaGetUrl = () => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/ova`;
};

export const v1OverlordsVsphereOvaGet = async (
  options?: RequestInit,
): Promise<v1OverlordsVsphereOvaGetResponse> => {
  const res = await fetch(getV1OverlordsVsphereOvaGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsVsphereOvaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsVsphereOvaGetResponse;
};

/**
 * @summary create the vSphere cloudaccount for the private gateway
 */
export type v1OverlordsUidVsphereAccountCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1OverlordsUidVsphereAccountCreateResponseComposite =
  v1OverlordsUidVsphereAccountCreateResponse201;

export type v1OverlordsUidVsphereAccountCreateResponse =
  v1OverlordsUidVsphereAccountCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereAccountCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account`;
};

export const v1OverlordsUidVsphereAccountCreate = async (
  uid: string,
  v1OverlordVsphereAccountCreate?: V1OverlordVsphereAccountCreate,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereAccountCreateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereAccountCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordVsphereAccountCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereAccountCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereAccountCreateResponse;
};

/**
 * @summary update the vSphere cloudaccount for the private gateway
 */
export type v1OverlordsUidVsphereAccountUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidVsphereAccountUpdateResponseComposite =
  v1OverlordsUidVsphereAccountUpdateResponseDefault;

export type v1OverlordsUidVsphereAccountUpdateResponse =
  v1OverlordsUidVsphereAccountUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereAccountUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account`;
};

export const v1OverlordsUidVsphereAccountUpdate = async (
  uid: string,
  v1OverlordVsphereAccountEntity?: V1OverlordVsphereAccountEntity,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereAccountUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereAccountUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordVsphereAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereAccountUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereAccountUpdateResponse;
};

/**
 * @summary validate the vSphere cloudaccount for the private gateway
 */
export type v1OverlordsUidVsphereAccountValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidVsphereAccountValidateResponseComposite =
  v1OverlordsUidVsphereAccountValidateResponseDefault;

export type v1OverlordsUidVsphereAccountValidateResponse =
  v1OverlordsUidVsphereAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereAccountValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/account/validate`;
};

export const v1OverlordsUidVsphereAccountValidate = async (
  uid: string,
  v1OverlordsUidVsphereAccountValidateRequest?: V1OverlordsUidVsphereAccountValidateRequest,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereAccountValidateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereAccountValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordsUidVsphereAccountValidateRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereAccountValidateResponse;
};

/**
 * @summary create the vSphere cloud config for the private gateway
 */
export type v1OverlordsUidVsphereCloudConfigCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1OverlordsUidVsphereCloudConfigCreateResponseComposite =
  v1OverlordsUidVsphereCloudConfigCreateResponse201;

export type v1OverlordsUidVsphereCloudConfigCreateResponse =
  v1OverlordsUidVsphereCloudConfigCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereCloudConfigCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/cloudconfig`;
};

export const v1OverlordsUidVsphereCloudConfigCreate = async (
  uid: string,
  v1OverlordVsphereCloudConfig?: V1OverlordVsphereCloudConfig,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereCloudConfigCreateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereCloudConfigCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordVsphereCloudConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereCloudConfigCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereCloudConfigCreateResponse;
};

/**
 * @summary update the vSphere cloud config for the private gateway
 */
export type v1OverlordsUidVsphereCloudConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidVsphereCloudConfigUpdateResponseComposite =
  v1OverlordsUidVsphereCloudConfigUpdateResponseDefault;

export type v1OverlordsUidVsphereCloudConfigUpdateResponse =
  v1OverlordsUidVsphereCloudConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereCloudConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/cloudconfig`;
};

export const v1OverlordsUidVsphereCloudConfigUpdate = async (
  uid: string,
  v1OverlordVsphereCloudConfig?: V1OverlordVsphereCloudConfig,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereCloudConfigUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereCloudConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OverlordVsphereCloudConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereCloudConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereCloudConfigUpdateResponse;
};

/**
 * @summary Returns the specified vsphere private gateway cluster profile
 */
export type v1OverlordsUidVsphereClusterProfileResponse200 = {
  data: V1ClusterProfile;
  status: 200;
};

export type v1OverlordsUidVsphereClusterProfileResponseComposite =
  v1OverlordsUidVsphereClusterProfileResponse200;

export type v1OverlordsUidVsphereClusterProfileResponse =
  v1OverlordsUidVsphereClusterProfileResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereClusterProfileUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/clusterprofile`;
};

export const v1OverlordsUidVsphereClusterProfile = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereClusterProfileResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereClusterProfileUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereClusterProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereClusterProfileResponse;
};

/**
 * @summary Retrieves a list of IP Pools for the specified private gateway
 */
export type v1OverlordsUidPoolsListResponse200 = {
  data: V1IpPools;
  status: 200;
};

export type v1OverlordsUidPoolsListResponseComposite =
  v1OverlordsUidPoolsListResponse200;

export type v1OverlordsUidPoolsListResponse =
  v1OverlordsUidPoolsListResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolsListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools`;
};

export const v1OverlordsUidPoolsList = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidPoolsListResponse> => {
  const res = await fetch(getV1OverlordsUidPoolsListUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidPoolsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidPoolsListResponse;
};

/**
 * @summary Creates an IP pool defintion for the sepcified private gateway
 */
export type v1OverlordsUidPoolCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1OverlordsUidPoolCreateResponseComposite =
  v1OverlordsUidPoolCreateResponse201;

export type v1OverlordsUidPoolCreateResponse =
  v1OverlordsUidPoolCreateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools`;
};

export const v1OverlordsUidPoolCreate = async (
  uid: string,
  v1IpPoolInputEntity?: V1IpPoolInputEntity,
  options?: RequestInit,
): Promise<v1OverlordsUidPoolCreateResponse> => {
  const res = await fetch(getV1OverlordsUidPoolCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1IpPoolInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidPoolCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidPoolCreateResponse;
};

/**
 * @summary Deletes the private gateways's specified IP Pool data
 */
export type v1OverlordsUidPoolDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidPoolDeleteResponseComposite =
  v1OverlordsUidPoolDeleteResponseDefault;

export type v1OverlordsUidPoolDeleteResponse =
  v1OverlordsUidPoolDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolDeleteUrl = (
  uid: string,
  poolUid: string,
) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools/${poolUid}`;
};

export const v1OverlordsUidPoolDelete = async (
  uid: string,
  poolUid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidPoolDeleteResponse> => {
  const res = await fetch(getV1OverlordsUidPoolDeleteUrl(uid, poolUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidPoolDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidPoolDeleteResponse;
};

/**
 * @summary Updates the private gateways's specified IP Pool data
 */
export type v1OverlordsUidPoolUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidPoolUpdateResponseComposite =
  v1OverlordsUidPoolUpdateResponseDefault;

export type v1OverlordsUidPoolUpdateResponse =
  v1OverlordsUidPoolUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidPoolUpdateUrl = (
  uid: string,
  poolUid: string,
) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/pools/${poolUid}`;
};

export const v1OverlordsUidPoolUpdate = async (
  uid: string,
  poolUid: string,
  v1IpPoolInputEntity?: V1IpPoolInputEntity,
  options?: RequestInit,
): Promise<v1OverlordsUidPoolUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidPoolUpdateUrl(uid, poolUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1IpPoolInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidPoolUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidPoolUpdateResponse;
};

/**
 * @summary Retrieves the vSphere computecluster resources for the specified private gateway's account
 */
export type v1OverlordsUidVsphereComputeclusterResResponse200 = {
  data: V1VsphereComputeClusterResources;
  status: 200;
};

export type v1OverlordsUidVsphereComputeclusterResResponseComposite =
  v1OverlordsUidVsphereComputeclusterResResponse200;

export type v1OverlordsUidVsphereComputeclusterResResponse =
  v1OverlordsUidVsphereComputeclusterResResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereComputeclusterResUrl = (
  uid: string,
  params: V1OverlordsUidVsphereComputeclusterResParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/computecluster/resources?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/computecluster/resources`;
};

export const v1OverlordsUidVsphereComputeclusterRes = async (
  uid: string,
  params: V1OverlordsUidVsphereComputeclusterResParams,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereComputeclusterResResponse> => {
  const res = await fetch(
    getV1OverlordsUidVsphereComputeclusterResUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereComputeclusterResResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereComputeclusterResResponse;
};

/**
 * @summary Retrieves the vSphere datacenters & datacluster for the specified private gateway's account
 */
export type v1OverlordsUidVsphereDatacentersResponse200 = {
  data: V1VsphereDatacenters;
  status: 200;
};

export type v1OverlordsUidVsphereDatacentersResponseComposite =
  v1OverlordsUidVsphereDatacentersResponse200;

export type v1OverlordsUidVsphereDatacentersResponse =
  v1OverlordsUidVsphereDatacentersResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidVsphereDatacentersUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/vsphere/${uid}/properties/datacenters`;
};

export const v1OverlordsUidVsphereDatacenters = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidVsphereDatacentersResponse> => {
  const res = await fetch(getV1OverlordsUidVsphereDatacentersUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidVsphereDatacentersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidVsphereDatacentersResponse;
};

/**
 * @summary delete the private gateway
 */
export type v1OverlordsUidDeleteResponse200 = {
  data: V1DeletedMsg;
  status: 200;
};

export type v1OverlordsUidDeleteResponseComposite =
  v1OverlordsUidDeleteResponse200;

export type v1OverlordsUidDeleteResponse =
  v1OverlordsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}`;
};

export const v1OverlordsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidDeleteResponse> => {
  const res = await fetch(getV1OverlordsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidDeleteResponse;
};

/**
 * @summary Returns the specified private gateway's for the given uid
 */
export type v1OverlordsUidGetResponse200 = {
  data: V1Overlord;
  status: 200;
};

export type v1OverlordsUidGetResponseComposite = v1OverlordsUidGetResponse200;

export type v1OverlordsUidGetResponse = v1OverlordsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1OverlordsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}`;
};

export const v1OverlordsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidGetResponse> => {
  const res = await fetch(getV1OverlordsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidGetResponse;
};

/**
 * @summary update the private gateway's metadata
 */
export type v1OverlordsUidMetadataUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1OverlordsUidMetadataUpdateResponseComposite =
  v1OverlordsUidMetadataUpdateResponseDefault;

export type v1OverlordsUidMetadataUpdateResponse =
  v1OverlordsUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}/metadata`;
};

export const v1OverlordsUidMetadataUpdate = async (
  uid: string,
  v1ObjectMetaInputEntitySchema?: V1ObjectMetaInputEntitySchema,
  options?: RequestInit,
): Promise<v1OverlordsUidMetadataUpdateResponse> => {
  const res = await fetch(getV1OverlordsUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMetaInputEntitySchema),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidMetadataUpdateResponse;
};

/**
 * @summary reset the private gateway by disaaociating the private gateway's resources
 */
export type v1OverlordsUidResetResponse200 = {
  data: V1UpdatedMsg;
  status: 200;
};

export type v1OverlordsUidResetResponseComposite =
  v1OverlordsUidResetResponse200;

export type v1OverlordsUidResetResponse =
  v1OverlordsUidResetResponseComposite & {
    headers: Headers;
  };

export const getV1OverlordsUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/overlords/${uid}/reset`;
};

export const v1OverlordsUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1OverlordsUidResetResponse> => {
  const res = await fetch(getV1OverlordsUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OverlordsUidResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OverlordsUidResetResponse;
};

/**
 * @summary Retrieves a list of packs
 */
export type v1PacksSummaryListResponse200 = {
  data: V1PackSummaries;
  status: 200;
};

export type v1PacksSummaryListResponseComposite = v1PacksSummaryListResponse200;

export type v1PacksSummaryListResponse = v1PacksSummaryListResponseComposite & {
  headers: Headers;
};

export const getV1PacksSummaryListUrl = (params?: V1PacksSummaryListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs`;
};

export const v1PacksSummaryList = async (
  params?: V1PacksSummaryListParams,
  options?: RequestInit,
): Promise<v1PacksSummaryListResponse> => {
  const res = await fetch(getV1PacksSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PacksSummaryListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PacksSummaryListResponse;
};

/**
 * @summary Retrieves a list of packs based on filter
 */
export type v1PacksSearchResponse200 = {
  data: V1PackMetadataList;
  status: 200;
};

export type v1PacksSearchResponseComposite = v1PacksSearchResponse200;

export type v1PacksSearchResponse = v1PacksSearchResponseComposite & {
  headers: Headers;
};

export const getV1PacksSearchUrl = (params?: V1PacksSearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs/search`;
};

export const v1PacksSearch = async (
  v1PacksFilterSpec?: V1PacksFilterSpec,
  params?: V1PacksSearchParams,
  options?: RequestInit,
): Promise<v1PacksSearchResponse> => {
  const res = await fetch(getV1PacksSearchUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PacksFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PacksSearchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PacksSearchResponse;
};

/**
 * @summary Retrieves a list of packs
 */
export type v1PacksNameRegistryUidListResponse200 = {
  data: V1PackTagEntity;
  status: 200;
};

export type v1PacksNameRegistryUidListResponseComposite =
  v1PacksNameRegistryUidListResponse200;

export type v1PacksNameRegistryUidListResponse =
  v1PacksNameRegistryUidListResponseComposite & {
    headers: Headers;
  };

export const getV1PacksNameRegistryUidListUrl = (
  packName: string,
  registryUid: string,
  params?: V1PacksNameRegistryUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs/${packName}/registries/${registryUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs/${packName}/registries/${registryUid}`;
};

export const v1PacksNameRegistryUidList = async (
  packName: string,
  registryUid: string,
  params?: V1PacksNameRegistryUidListParams,
  options?: RequestInit,
): Promise<v1PacksNameRegistryUidListResponse> => {
  const res = await fetch(
    getV1PacksNameRegistryUidListUrl(packName, registryUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PacksNameRegistryUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PacksNameRegistryUidListResponse;
};

/**
 * @summary Returns the logo for a specified pack
 */
export type v1PacksPackUidLogoResponse200 = {
  data: Blob;
  status: 200;
};

export type v1PacksPackUidLogoResponseComposite = v1PacksPackUidLogoResponse200;

export type v1PacksPackUidLogoResponse = v1PacksPackUidLogoResponseComposite & {
  headers: Headers;
};

export const getV1PacksPackUidLogoUrl = (packUid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${packUid}/logo`;
};

export const v1PacksPackUidLogo = async (
  packUid: string,
  options?: RequestInit,
): Promise<v1PacksPackUidLogoResponse> => {
  const res = await fetch(getV1PacksPackUidLogoUrl(packUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PacksPackUidLogoResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PacksPackUidLogoResponse;
};

/**
 * @summary Returns the specified pack
 */
export type v1PacksUidResponse200 = {
  data: V1PackTagEntity;
  status: 200;
};

export type v1PacksUidResponseComposite = v1PacksUidResponse200;

export type v1PacksUidResponse = v1PacksUidResponseComposite & {
  headers: Headers;
};

export const getV1PacksUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${uid}`;
};

export const v1PacksUid = async (
  uid: string,
  options?: RequestInit,
): Promise<v1PacksUidResponse> => {
  const res = await fetch(getV1PacksUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PacksUidResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PacksUidResponse;
};

/**
 * @summary Returns the readme of a specified pack
 */
export type v1PacksUidReadmeResponse200 = {
  data: V1PackReadme;
  status: 200;
};

export type v1PacksUidReadmeResponseComposite = v1PacksUidReadmeResponse200;

export type v1PacksUidReadmeResponse = v1PacksUidReadmeResponseComposite & {
  headers: Headers;
};

export const getV1PacksUidReadmeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${uid}/readme`;
};

export const v1PacksUidReadme = async (
  uid: string,
  options?: RequestInit,
): Promise<v1PacksUidReadmeResponse> => {
  const res = await fetch(getV1PacksUidReadmeUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PacksUidReadmeResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PacksUidReadmeResponse;
};

/**
 * @summary Returns the private gateway manifest link
 */
export type v1PcgSelfHostedResponse200 = {
  data: V1PcgServiceKubectlCommands;
  status: 200;
};

export type v1PcgSelfHostedResponseComposite = v1PcgSelfHostedResponse200;

export type v1PcgSelfHostedResponse = v1PcgSelfHostedResponseComposite & {
  headers: Headers;
};

export const getV1PcgSelfHostedUrl = () => {
  return `https://api.spectrocloud.com/v1/pcg/selfHosted`;
};

export const v1PcgSelfHosted = async (
  v1PcgSelfHostedParams?: V1PcgSelfHostedParams,
  options?: RequestInit,
): Promise<v1PcgSelfHostedResponse> => {
  const res = await fetch(getV1PcgSelfHostedUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PcgSelfHostedParams),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PcgSelfHostedResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PcgSelfHostedResponse;
};

/**
 * @summary Registers the pcg
 */
export type v1PcgUidRegisterResponseDefault = {
  data: unknown;
  status: number;
};

export type v1PcgUidRegisterResponseComposite = v1PcgUidRegisterResponseDefault;

export type v1PcgUidRegisterResponse = v1PcgUidRegisterResponseComposite & {
  headers: Headers;
};

export const getV1PcgUidRegisterUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/register`;
};

export const v1PcgUidRegister = async (
  uid: string,
  v1PairingCode?: V1PairingCode,
  options?: RequestInit,
): Promise<v1PcgUidRegisterResponse> => {
  const res = await fetch(getV1PcgUidRegisterUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PairingCode),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PcgUidRegisterResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PcgUidRegisterResponse;
};

/**
 * @summary Returns the pcg ally manifest
 */
export type v1PcgUidAllyManifestGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1PcgUidAllyManifestGetResponseComposite =
  v1PcgUidAllyManifestGetResponse200;

export type v1PcgUidAllyManifestGetResponse =
  v1PcgUidAllyManifestGetResponseComposite & {
    headers: Headers;
  };

export const getV1PcgUidAllyManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/services/ally/manifest`;
};

export const v1PcgUidAllyManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1PcgUidAllyManifestGetResponse> => {
  const res = await fetch(getV1PcgUidAllyManifestGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PcgUidAllyManifestGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PcgUidAllyManifestGetResponse;
};

/**
 * @summary Returns the pcg jet manifest
 */
export type v1PcgUidJetManifestGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1PcgUidJetManifestGetResponseComposite =
  v1PcgUidJetManifestGetResponse200;

export type v1PcgUidJetManifestGetResponse =
  v1PcgUidJetManifestGetResponseComposite & {
    headers: Headers;
  };

export const getV1PcgUidJetManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/services/jet/manifest`;
};

export const v1PcgUidJetManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1PcgUidJetManifestGetResponse> => {
  const res = await fetch(getV1PcgUidJetManifestGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PcgUidJetManifestGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PcgUidJetManifestGetResponse;
};

/**
 * @summary Retrieves a list of permissions
 */
export type v1PermissionsListResponse200 = {
  data: V1Permissions;
  status: 200;
};

export type v1PermissionsListResponseComposite = v1PermissionsListResponse200;

export type v1PermissionsListResponse = v1PermissionsListResponseComposite & {
  headers: Headers;
};

export const getV1PermissionsListUrl = (params?: V1PermissionsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/permissions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/permissions`;
};

export const v1PermissionsList = async (
  params?: V1PermissionsListParams,
  options?: RequestInit,
): Promise<v1PermissionsListResponse> => {
  const res = await fetch(getV1PermissionsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PermissionsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PermissionsListResponse;
};

/**
 * @summary Creates a project
 */
export type v1ProjectsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ProjectsCreateResponseComposite = v1ProjectsCreateResponse201;

export type v1ProjectsCreateResponse = v1ProjectsCreateResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/projects`;
};

export const v1ProjectsCreate = async (
  v1ProjectEntity?: V1ProjectEntity,
  options?: RequestInit,
): Promise<v1ProjectsCreateResponse> => {
  const res = await fetch(getV1ProjectsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsCreateResponse;
};

/**
 * @summary Retrieves a list of supported alerts for a project
 */
export type v1ProjectsAlertsResponse200 = {
  data: V1ProjectAlertComponents;
  status: 200;
};

export type v1ProjectsAlertsResponseComposite = v1ProjectsAlertsResponse200;

export type v1ProjectsAlertsResponse = v1ProjectsAlertsResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsAlertsUrl = () => {
  return `https://api.spectrocloud.com/v1/projects/alerts`;
};

export const v1ProjectsAlerts = async (
  options?: RequestInit,
): Promise<v1ProjectsAlertsResponse> => {
  const res = await fetch(getV1ProjectsAlertsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsAlertsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsAlertsResponse;
};

/**
 * @summary Deletes the specified project
 */
export type v1ProjectsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidDeleteResponseComposite =
  v1ProjectsUidDeleteResponseDefault;

export type v1ProjectsUidDeleteResponse =
  v1ProjectsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidDeleteUrl = (
  uid: string,
  params?: V1ProjectsUidDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/projects/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const v1ProjectsUidDelete = async (
  uid: string,
  v1ProjectCleanup?: V1ProjectCleanup,
  params?: V1ProjectsUidDeleteParams,
  options?: RequestInit,
): Promise<v1ProjectsUidDeleteResponse> => {
  const res = await fetch(getV1ProjectsUidDeleteUrl(uid, params), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectCleanup),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidDeleteResponse;
};

/**
 * @summary Returns the specified project
 */
export type v1ProjectsUidGetResponse200 = {
  data: V1Project;
  status: 200;
};

export type v1ProjectsUidGetResponseComposite = v1ProjectsUidGetResponse200;

export type v1ProjectsUidGetResponse = v1ProjectsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1ProjectsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const v1ProjectsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ProjectsUidGetResponse> => {
  const res = await fetch(getV1ProjectsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidGetResponse;
};

/**
 * @summary Updates the specified project
 */
export type v1ProjectsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidUpdateResponseComposite =
  v1ProjectsUidUpdateResponseDefault;

export type v1ProjectsUidUpdateResponse =
  v1ProjectsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}`;
};

export const v1ProjectsUidUpdate = async (
  uid: string,
  v1ProjectEntity?: V1ProjectEntity,
  options?: RequestInit,
): Promise<v1ProjectsUidUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidUpdateResponse;
};

/**
 * @summary Deletes the specified alert to the specified project
 */
export type v1ProjectsUidAlertDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidAlertDeleteResponseComposite =
  v1ProjectsUidAlertDeleteResponseDefault;

export type v1ProjectsUidAlertDeleteResponse =
  v1ProjectsUidAlertDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertDeleteUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const v1ProjectsUidAlertDelete = async (
  uid: string,
  component: string,
  options?: RequestInit,
): Promise<v1ProjectsUidAlertDeleteResponse> => {
  const res = await fetch(getV1ProjectsUidAlertDeleteUrl(uid, component), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidAlertDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidAlertDeleteResponse;
};

/**
 * @summary Create the specified alert to the specified project
 */
export type v1ProjectsUidAlertCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ProjectsUidAlertCreateResponseComposite =
  v1ProjectsUidAlertCreateResponse201;

export type v1ProjectsUidAlertCreateResponse =
  v1ProjectsUidAlertCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertCreateUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const v1ProjectsUidAlertCreate = async (
  uid: string,
  component: string,
  v1Channel?: V1Channel,
  options?: RequestInit,
): Promise<v1ProjectsUidAlertCreateResponse> => {
  const res = await fetch(getV1ProjectsUidAlertCreateUrl(uid, component), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Channel),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidAlertCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidAlertCreateResponse;
};

/**
 * @summary Upsert the specified alert to the specified project
 */
export type v1ProjectsUidAlertUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidAlertUpdateResponseComposite =
  v1ProjectsUidAlertUpdateResponseDefault;

export type v1ProjectsUidAlertUpdateResponse =
  v1ProjectsUidAlertUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertUpdateUrl = (
  uid: string,
  component: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}`;
};

export const v1ProjectsUidAlertUpdate = async (
  uid: string,
  component: string,
  v1AlertEntity?: V1AlertEntity,
  options?: RequestInit,
): Promise<v1ProjectsUidAlertUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidAlertUpdateUrl(uid, component), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AlertEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidAlertUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidAlertUpdateResponse;
};

/**
 * @summary Deletes the specified alert of the specified project
 */
export type v1ProjectsUidAlertsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidAlertsUidDeleteResponseComposite =
  v1ProjectsUidAlertsUidDeleteResponseDefault;

export type v1ProjectsUidAlertsUidDeleteResponse =
  v1ProjectsUidAlertsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertsUidDeleteUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const v1ProjectsUidAlertsUidDelete = async (
  uid: string,
  component: string,
  alertUid: string,
  options?: RequestInit,
): Promise<v1ProjectsUidAlertsUidDeleteResponse> => {
  const res = await fetch(
    getV1ProjectsUidAlertsUidDeleteUrl(uid, component, alertUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidAlertsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidAlertsUidDeleteResponse;
};

/**
 * @summary Get the specified alert of the specified project
 */
export type v1ProjectsUidAlertsUidGetResponse200 = {
  data: V1Channel;
  status: 200;
};

export type v1ProjectsUidAlertsUidGetResponseComposite =
  v1ProjectsUidAlertsUidGetResponse200;

export type v1ProjectsUidAlertsUidGetResponse =
  v1ProjectsUidAlertsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertsUidGetUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const v1ProjectsUidAlertsUidGet = async (
  uid: string,
  component: string,
  alertUid: string,
  options?: RequestInit,
): Promise<v1ProjectsUidAlertsUidGetResponse> => {
  const res = await fetch(
    getV1ProjectsUidAlertsUidGetUrl(uid, component, alertUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidAlertsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidAlertsUidGetResponse;
};

/**
 * @summary Update the specified alert of the specified project
 */
export type v1ProjectsUidAlertsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidAlertsUidUpdateResponseComposite =
  v1ProjectsUidAlertsUidUpdateResponseDefault;

export type v1ProjectsUidAlertsUidUpdateResponse =
  v1ProjectsUidAlertsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidAlertsUidUpdateUrl = (
  uid: string,
  component: string,
  alertUid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/alerts/${component}/${alertUid}`;
};

export const v1ProjectsUidAlertsUidUpdate = async (
  uid: string,
  component: string,
  alertUid: string,
  v1Channel?: V1Channel,
  options?: RequestInit,
): Promise<v1ProjectsUidAlertsUidUpdateResponse> => {
  const res = await fetch(
    getV1ProjectsUidAlertsUidUpdateUrl(uid, component, alertUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1Channel),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidAlertsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidAlertsUidUpdateResponse;
};

/**
 * @summary Delete the macros for the specified project by macro name
 */
export type v1ProjectsUidMacrosDeleteByMacroNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidMacrosDeleteByMacroNameResponseComposite =
  v1ProjectsUidMacrosDeleteByMacroNameResponseDefault;

export type v1ProjectsUidMacrosDeleteByMacroNameResponse =
  v1ProjectsUidMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosDeleteByMacroNameUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const v1ProjectsUidMacrosDeleteByMacroName = async (
  uid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1ProjectsUidMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosDeleteByMacroNameUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the specified project
 */
export type v1ProjectsUidMacrosListResponse200 = {
  data: V1Macros;
  status: 200;
};

export type v1ProjectsUidMacrosListResponseComposite =
  v1ProjectsUidMacrosListResponse200;

export type v1ProjectsUidMacrosListResponse =
  v1ProjectsUidMacrosListResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const v1ProjectsUidMacrosList = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ProjectsUidMacrosListResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosListUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidMacrosListResponse;
};

/**
 * @summary Update the macros for the specified project by macro name
 */
export type v1ProjectsUidMacrosUpdateByMacroNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidMacrosUpdateByMacroNameResponseComposite =
  v1ProjectsUidMacrosUpdateByMacroNameResponseDefault;

export type v1ProjectsUidMacrosUpdateByMacroNameResponse =
  v1ProjectsUidMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosUpdateByMacroNameUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const v1ProjectsUidMacrosUpdateByMacroName = async (
  uid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1ProjectsUidMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosUpdateByMacroNameUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the specified project
 */
export type v1ProjectsUidMacrosCreateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidMacrosCreateResponseComposite =
  v1ProjectsUidMacrosCreateResponseDefault;

export type v1ProjectsUidMacrosCreateResponse =
  v1ProjectsUidMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const v1ProjectsUidMacrosCreate = async (
  uid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1ProjectsUidMacrosCreateResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidMacrosCreateResponse;
};

/**
 * @summary Update the macros of the specified project
 */
export type v1ProjectsUidMacrosUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidMacrosUpdateResponseComposite =
  v1ProjectsUidMacrosUpdateResponseDefault;

export type v1ProjectsUidMacrosUpdateResponse =
  v1ProjectsUidMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMacrosUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/macros`;
};

export const v1ProjectsUidMacrosUpdate = async (
  uid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1ProjectsUidMacrosUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidMacrosUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidMacrosUpdateResponse;
};

/**
 * @summary Update the metadata of the specified project
 */
export type v1ProjectsUidMetaUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidMetaUpdateResponseComposite =
  v1ProjectsUidMetaUpdateResponseDefault;

export type v1ProjectsUidMetaUpdateResponse =
  v1ProjectsUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/meta`;
};

export const v1ProjectsUidMetaUpdate = async (
  uid: string,
  v1ObjectMeta?: V1ObjectMeta,
  options?: RequestInit,
): Promise<v1ProjectsUidMetaUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMeta),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidMetaUpdateResponse;
};

/**
 * @summary Get project cluster settings
 */
export type v1ProjectClusterSettingsGetResponse200 = {
  data: V1ProjectClusterSettings;
  status: 200;
};

export type v1ProjectClusterSettingsGetResponseComposite =
  v1ProjectClusterSettingsGetResponse200;

export type v1ProjectClusterSettingsGetResponse =
  v1ProjectClusterSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectClusterSettingsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/preferences/clusterSettings`;
};

export const v1ProjectClusterSettingsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ProjectClusterSettingsGetResponse> => {
  const res = await fetch(getV1ProjectClusterSettingsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectClusterSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectClusterSettingsGetResponse;
};

/**
 * @summary Update project clusters nodes auto remediation setting
 */
export type v1ProjectClustersNodesAutoRemediationSettingUpdateResponseDefault =
  {
    data: unknown;
    status: number;
  };

export type v1ProjectClustersNodesAutoRemediationSettingUpdateResponseComposite =
  v1ProjectClustersNodesAutoRemediationSettingUpdateResponseDefault;

export type v1ProjectClustersNodesAutoRemediationSettingUpdateResponse =
  v1ProjectClustersNodesAutoRemediationSettingUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectClustersNodesAutoRemediationSettingUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/preferences/clusterSettings/nodesAutoRemediationSetting`;
};

export const v1ProjectClustersNodesAutoRemediationSettingUpdate = async (
  uid: string,
  v1NodesAutoRemediationSettings?: V1NodesAutoRemediationSettings,
  options?: RequestInit,
): Promise<v1ProjectClustersNodesAutoRemediationSettingUpdateResponse> => {
  const res = await fetch(
    getV1ProjectClustersNodesAutoRemediationSettingUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1NodesAutoRemediationSettings),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectClustersNodesAutoRemediationSettingUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectClustersNodesAutoRemediationSettingUpdateResponse;
};

/**
 * @summary Update the teams association to the specified project
 */
export type v1ProjectsUidTeamsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidTeamsUpdateResponseComposite =
  v1ProjectsUidTeamsUpdateResponseDefault;

export type v1ProjectsUidTeamsUpdateResponse =
  v1ProjectsUidTeamsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidTeamsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/teams`;
};

export const v1ProjectsUidTeamsUpdate = async (
  uid: string,
  v1ProjectTeamsEntity?: V1ProjectTeamsEntity,
  options?: RequestInit,
): Promise<v1ProjectsUidTeamsUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidTeamsUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectTeamsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidTeamsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidTeamsUpdateResponse;
};

/**
 * @summary Update the users association to the specified project
 */
export type v1ProjectsUidUsersUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ProjectsUidUsersUpdateResponseComposite =
  v1ProjectsUidUsersUpdateResponseDefault;

export type v1ProjectsUidUsersUpdateResponse =
  v1ProjectsUidUsersUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidUsersUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/users`;
};

export const v1ProjectsUidUsersUpdate = async (
  uid: string,
  v1ProjectUsersEntity?: V1ProjectUsersEntity,
  options?: RequestInit,
): Promise<v1ProjectsUidUsersUpdateResponse> => {
  const res = await fetch(getV1ProjectsUidUsersUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectUsersEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidUsersUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidUsersUpdateResponse;
};

/**
 * @summary Validate and returns active resource of project before delete
 */
export type v1ProjectsUidValidateResponse200 = {
  data: V1ProjectActiveResources;
  status: 200;
};

export type v1ProjectsUidValidateResponseComposite =
  v1ProjectsUidValidateResponse200;

export type v1ProjectsUidValidateResponse =
  v1ProjectsUidValidateResponseComposite & {
    headers: Headers;
  };

export const getV1ProjectsUidValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/projects/${uid}/validate`;
};

export const v1ProjectsUidValidate = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ProjectsUidValidateResponse> => {
  const res = await fetch(getV1ProjectsUidValidateUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ProjectsUidValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ProjectsUidValidateResponse;
};

/**
 * @summary Retrieves a list of Helm registries
 */
export type v1RegistriesHelmListResponse200 = {
  data: V1HelmRegistries;
  status: 200;
};

export type v1RegistriesHelmListResponseComposite =
  v1RegistriesHelmListResponse200;

export type v1RegistriesHelmListResponse =
  v1RegistriesHelmListResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmListUrl = (
  params?: V1RegistriesHelmListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm`;
};

export const v1RegistriesHelmList = async (
  params?: V1RegistriesHelmListParams,
  options?: RequestInit,
): Promise<v1RegistriesHelmListResponse> => {
  const res = await fetch(getV1RegistriesHelmListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmListResponse;
};

/**
 * @summary Creates a helm registry
 */
export type v1RegistriesHelmCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1RegistriesHelmCreateResponseComposite =
  v1RegistriesHelmCreateResponse201;

export type v1RegistriesHelmCreateResponse =
  v1RegistriesHelmCreateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmCreateUrl = (
  params?: V1RegistriesHelmCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm`;
};

export const v1RegistriesHelmCreate = async (
  v1HelmRegistryEntity?: V1HelmRegistryEntity,
  params?: V1RegistriesHelmCreateParams,
  options?: RequestInit,
): Promise<v1RegistriesHelmCreateResponse> => {
  const res = await fetch(getV1RegistriesHelmCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1HelmRegistryEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmCreateResponse;
};

/**
 * @summary Retrieves a list of helm registries as summary
 */
export type v1RegistriesHelmSummaryListResponse200 = {
  data: V1HelmRegistriesSummary;
  status: 200;
};

export type v1RegistriesHelmSummaryListResponseComposite =
  v1RegistriesHelmSummaryListResponse200;

export type v1RegistriesHelmSummaryListResponse =
  v1RegistriesHelmSummaryListResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmSummaryListUrl = (
  params?: V1RegistriesHelmSummaryListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm/summary`;
};

export const v1RegistriesHelmSummaryList = async (
  params?: V1RegistriesHelmSummaryListParams,
  options?: RequestInit,
): Promise<v1RegistriesHelmSummaryListResponse> => {
  const res = await fetch(getV1RegistriesHelmSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmSummaryListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmSummaryListResponse;
};

/**
 * Returns no contents if helm registry is valid else error.
 * @summary Check if helm registry is valid
 */
export type v1RegistriesHelmValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesHelmValidateResponseComposite =
  v1RegistriesHelmValidateResponseDefault;

export type v1RegistriesHelmValidateResponse =
  v1RegistriesHelmValidateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/helm/validate`;
};

export const v1RegistriesHelmValidate = async (
  v1HelmRegistrySpec: V1HelmRegistrySpec,
  options?: RequestInit,
): Promise<v1RegistriesHelmValidateResponse> => {
  const res = await fetch(getV1RegistriesHelmValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1HelmRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmValidateResponse;
};

/**
 * @summary Deletes the specified helm registry
 */
export type v1RegistriesHelmUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesHelmUidDeleteResponseComposite =
  v1RegistriesHelmUidDeleteResponseDefault;

export type v1RegistriesHelmUidDeleteResponse =
  v1RegistriesHelmUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const v1RegistriesHelmUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RegistriesHelmUidDeleteResponse> => {
  const res = await fetch(getV1RegistriesHelmUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmUidDeleteResponse;
};

/**
 * @summary Returns the specified Helm registry
 */
export type v1RegistriesHelmUidGetResponse200 = {
  data: V1HelmRegistry;
  status: 200;
};

export type v1RegistriesHelmUidGetResponseComposite =
  v1RegistriesHelmUidGetResponse200;

export type v1RegistriesHelmUidGetResponse =
  v1RegistriesHelmUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const v1RegistriesHelmUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RegistriesHelmUidGetResponse> => {
  const res = await fetch(getV1RegistriesHelmUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmUidGetResponse;
};

/**
 * @summary Updates the specified helm registry
 */
export type v1RegistriesHelmUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesHelmUidUpdateResponseComposite =
  v1RegistriesHelmUidUpdateResponseDefault;

export type v1RegistriesHelmUidUpdateResponse =
  v1RegistriesHelmUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const v1RegistriesHelmUidUpdate = async (
  uid: string,
  v1HelmRegistry?: V1HelmRegistry,
  options?: RequestInit,
): Promise<v1RegistriesHelmUidUpdateResponse> => {
  const res = await fetch(getV1RegistriesHelmUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1HelmRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmUidUpdateResponse;
};

/**
 * Sync all the helm charts from the registry
 * @summary Sync Helm registry
 */
export type v1RegistriesHelmUidSyncResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesHelmUidSyncResponseComposite =
  v1RegistriesHelmUidSyncResponseDefault;

export type v1RegistriesHelmUidSyncResponse =
  v1RegistriesHelmUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidSyncUrl = (
  uid: string,
  params?: V1RegistriesHelmUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync`;
};

export const v1RegistriesHelmUidSync = async (
  uid: string,
  params?: V1RegistriesHelmUidSyncParams,
  options?: RequestInit,
): Promise<v1RegistriesHelmUidSyncResponse> => {
  const res = await fetch(getV1RegistriesHelmUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmUidSyncResponse;
};

/**
 * Get the sync status for the specified helm registry
 * @summary Get helm registry sync status
 */
export type v1RegistriesHelmUidSyncStatusResponse200 = {
  data: V1RegistrySyncStatus;
  status: 200;
};

export type v1RegistriesHelmUidSyncStatusResponseComposite =
  v1RegistriesHelmUidSyncStatusResponse200;

export type v1RegistriesHelmUidSyncStatusResponse =
  v1RegistriesHelmUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync/status`;
};

export const v1RegistriesHelmUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RegistriesHelmUidSyncStatusResponse> => {
  const res = await fetch(getV1RegistriesHelmUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmUidSyncStatusResponse;
};

/**
 * @summary Retrieves a list of registries metadata
 */
export type v1RegistriesMetadataResponse200 = {
  data: V1RegistriesMetadata;
  status: 200;
};

export type v1RegistriesMetadataResponseComposite =
  v1RegistriesMetadataResponse200;

export type v1RegistriesMetadataResponse =
  v1RegistriesMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesMetadataUrl = (
  params?: V1RegistriesMetadataParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/metadata`;
};

export const v1RegistriesMetadata = async (
  params?: V1RegistriesMetadataParams,
  options?: RequestInit,
): Promise<v1RegistriesMetadataResponse> => {
  const res = await fetch(getV1RegistriesMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesMetadataResponse;
};

/**
 * @summary Creates a basic oci registry
 */
export type v1BasicOciRegistriesCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1BasicOciRegistriesCreateResponseComposite =
  v1BasicOciRegistriesCreateResponse201;

export type v1BasicOciRegistriesCreateResponse =
  v1BasicOciRegistriesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesCreateUrl = (
  params?: V1BasicOciRegistriesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/basic?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/basic`;
};

export const v1BasicOciRegistriesCreate = async (
  v1BasicOciRegistry?: V1BasicOciRegistry,
  params?: V1BasicOciRegistriesCreateParams,
  options?: RequestInit,
): Promise<v1BasicOciRegistriesCreateResponse> => {
  const res = await fetch(getV1BasicOciRegistriesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1BasicOciRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1BasicOciRegistriesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1BasicOciRegistriesCreateResponse;
};

/**
 * Returns no contents if oci registry is valid else error.
 * @summary Check if oci registry is valid
 */
export type v1BasicOciRegistriesValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1BasicOciRegistriesValidateResponseComposite =
  v1BasicOciRegistriesValidateResponseDefault;

export type v1BasicOciRegistriesValidateResponse =
  v1BasicOciRegistriesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/basic/validate`;
};

export const v1BasicOciRegistriesValidate = async (
  v1BasicOciRegistrySpec: V1BasicOciRegistrySpec,
  options?: RequestInit,
): Promise<v1BasicOciRegistriesValidateResponse> => {
  const res = await fetch(getV1BasicOciRegistriesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1BasicOciRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1BasicOciRegistriesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1BasicOciRegistriesValidateResponse;
};

/**
 * @summary Creates a ecr registry
 */
export type v1EcrRegistriesCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1EcrRegistriesCreateResponseComposite =
  v1EcrRegistriesCreateResponse201;

export type v1EcrRegistriesCreateResponse =
  v1EcrRegistriesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesCreateUrl = (
  params?: V1EcrRegistriesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/ecr?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/ecr`;
};

export const v1EcrRegistriesCreate = async (
  v1EcrRegistry?: V1EcrRegistry,
  params?: V1EcrRegistriesCreateParams,
  options?: RequestInit,
): Promise<v1EcrRegistriesCreateResponse> => {
  const res = await fetch(getV1EcrRegistriesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EcrRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EcrRegistriesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EcrRegistriesCreateResponse;
};

/**
 * Returns no contents if ecr registry is valid else error.
 * @summary Check if ecr registry is valid
 */
export type v1EcrRegistriesValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EcrRegistriesValidateResponseComposite =
  v1EcrRegistriesValidateResponseDefault;

export type v1EcrRegistriesValidateResponse =
  v1EcrRegistriesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/ecr/validate`;
};

export const v1EcrRegistriesValidate = async (
  v1EcrRegistrySpec: V1EcrRegistrySpec,
  options?: RequestInit,
): Promise<v1EcrRegistriesValidateResponse> => {
  const res = await fetch(getV1EcrRegistriesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EcrRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EcrRegistriesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EcrRegistriesValidateResponse;
};

/**
 * @summary Creates a image registry
 */
export type v1OciImageRegistryGetResponse200 = {
  data: V1OciImageRegistry;
  status: 200;
};

export type v1OciImageRegistryGetResponseComposite =
  v1OciImageRegistryGetResponse200;

export type v1OciImageRegistryGetResponse =
  v1OciImageRegistryGetResponseComposite & {
    headers: Headers;
  };

export const getV1OciImageRegistryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/image`;
};

export const v1OciImageRegistryGet = async (
  options?: RequestInit,
): Promise<v1OciImageRegistryGetResponse> => {
  const res = await fetch(getV1OciImageRegistryGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OciImageRegistryGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OciImageRegistryGetResponse;
};

/**
 * @summary Retrieves a oci registries summary
 */
export type v1OciRegistriesSummaryResponse200 = {
  data: V1OciRegistries;
  status: 200;
};

export type v1OciRegistriesSummaryResponseComposite =
  v1OciRegistriesSummaryResponse200;

export type v1OciRegistriesSummaryResponse =
  v1OciRegistriesSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1OciRegistriesSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/summary`;
};

export const v1OciRegistriesSummary = async (
  options?: RequestInit,
): Promise<v1OciRegistriesSummaryResponse> => {
  const res = await fetch(getV1OciRegistriesSummaryUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OciRegistriesSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OciRegistriesSummaryResponse;
};

/**
 * @summary Returns the information of specified oci registry
 */
export type v1OciRegistriesGetResponse200 = {
  data: V1OciRegistryEntity;
  status: 200;
};

export type v1OciRegistriesGetResponseComposite = v1OciRegistriesGetResponse200;

export type v1OciRegistriesGetResponse = v1OciRegistriesGetResponseComposite & {
  headers: Headers;
};

export const getV1OciRegistriesGetUrl = (
  uid: string,
  params?: V1OciRegistriesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}`;
};

export const v1OciRegistriesGet = async (
  uid: string,
  params?: V1OciRegistriesGetParams,
  options?: RequestInit,
): Promise<v1OciRegistriesGetResponse> => {
  const res = await fetch(getV1OciRegistriesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OciRegistriesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OciRegistriesGetResponse;
};

/**
 * @summary Deletes the specified basic oci registry
 */
export type v1BasicOciRegistriesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1BasicOciRegistriesUidDeleteResponseComposite =
  v1BasicOciRegistriesUidDeleteResponseDefault;

export type v1BasicOciRegistriesUidDeleteResponse =
  v1BasicOciRegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const v1BasicOciRegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1BasicOciRegistriesUidDeleteResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1BasicOciRegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1BasicOciRegistriesUidDeleteResponse;
};

/**
 * @summary Returns the basic oci registry
 */
export type v1BasicOciRegistriesUidGetResponse200 = {
  data: V1BasicOciRegistry;
  status: 200;
};

export type v1BasicOciRegistriesUidGetResponseComposite =
  v1BasicOciRegistriesUidGetResponse200;

export type v1BasicOciRegistriesUidGetResponse =
  v1BasicOciRegistriesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const v1BasicOciRegistriesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1BasicOciRegistriesUidGetResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1BasicOciRegistriesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1BasicOciRegistriesUidGetResponse;
};

/**
 * @summary Updates the specified basic oci registry
 */
export type v1BasicOciRegistriesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1BasicOciRegistriesUidUpdateResponseComposite =
  v1BasicOciRegistriesUidUpdateResponseDefault;

export type v1BasicOciRegistriesUidUpdateResponse =
  v1BasicOciRegistriesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const v1BasicOciRegistriesUidUpdate = async (
  uid: string,
  v1BasicOciRegistry?: V1BasicOciRegistry,
  options?: RequestInit,
): Promise<v1BasicOciRegistriesUidUpdateResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1BasicOciRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1BasicOciRegistriesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1BasicOciRegistriesUidUpdateResponse;
};

/**
 * Sync all the content from the oci registry
 * @summary Sync oci registry
 */
export type v1BasicOciRegistriesUidSyncResponseDefault = {
  data: unknown;
  status: number;
};

export type v1BasicOciRegistriesUidSyncResponseComposite =
  v1BasicOciRegistriesUidSyncResponseDefault;

export type v1BasicOciRegistriesUidSyncResponse =
  v1BasicOciRegistriesUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidSyncUrl = (
  uid: string,
  params?: V1BasicOciRegistriesUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync`;
};

export const v1BasicOciRegistriesUidSync = async (
  uid: string,
  params?: V1BasicOciRegistriesUidSyncParams,
  options?: RequestInit,
): Promise<v1BasicOciRegistriesUidSyncResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1BasicOciRegistriesUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1BasicOciRegistriesUidSyncResponse;
};

/**
 * Get sync status for the oci specified registry
 * @summary Get oci registry sync status
 */
export type v1BasicOciRegistriesUidSyncStatusResponse200 = {
  data: V1RegistrySyncStatus;
  status: 200;
};

export type v1BasicOciRegistriesUidSyncStatusResponseComposite =
  v1BasicOciRegistriesUidSyncStatusResponse200;

export type v1BasicOciRegistriesUidSyncStatusResponse =
  v1BasicOciRegistriesUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync/status`;
};

export const v1BasicOciRegistriesUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<v1BasicOciRegistriesUidSyncStatusResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1BasicOciRegistriesUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1BasicOciRegistriesUidSyncStatusResponse;
};

/**
 * @summary Deletes the specified ecr registry
 */
export type v1EcrRegistriesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EcrRegistriesUidDeleteResponseComposite =
  v1EcrRegistriesUidDeleteResponseDefault;

export type v1EcrRegistriesUidDeleteResponse =
  v1EcrRegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const v1EcrRegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EcrRegistriesUidDeleteResponse> => {
  const res = await fetch(getV1EcrRegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EcrRegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EcrRegistriesUidDeleteResponse;
};

/**
 * @summary Returns the specified ecr registry
 */
export type v1EcrRegistriesUidGetResponse200 = {
  data: V1EcrRegistry;
  status: 200;
};

export type v1EcrRegistriesUidGetResponseComposite =
  v1EcrRegistriesUidGetResponse200;

export type v1EcrRegistriesUidGetResponse =
  v1EcrRegistriesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const v1EcrRegistriesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EcrRegistriesUidGetResponse> => {
  const res = await fetch(getV1EcrRegistriesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EcrRegistriesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EcrRegistriesUidGetResponse;
};

/**
 * @summary Updates the specified ecr registry
 */
export type v1EcrRegistriesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EcrRegistriesUidUpdateResponseComposite =
  v1EcrRegistriesUidUpdateResponseDefault;

export type v1EcrRegistriesUidUpdateResponse =
  v1EcrRegistriesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const v1EcrRegistriesUidUpdate = async (
  uid: string,
  v1EcrRegistry?: V1EcrRegistry,
  options?: RequestInit,
): Promise<v1EcrRegistriesUidUpdateResponse> => {
  const res = await fetch(getV1EcrRegistriesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EcrRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EcrRegistriesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EcrRegistriesUidUpdateResponse;
};

/**
 * Sync all the content from the ecr registry
 * @summary Sync ecr registry
 */
export type v1EcrRegistriesUidSyncResponseDefault = {
  data: unknown;
  status: number;
};

export type v1EcrRegistriesUidSyncResponseComposite =
  v1EcrRegistriesUidSyncResponseDefault;

export type v1EcrRegistriesUidSyncResponse =
  v1EcrRegistriesUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidSyncUrl = (
  uid: string,
  params?: V1EcrRegistriesUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync`;
};

export const v1EcrRegistriesUidSync = async (
  uid: string,
  params?: V1EcrRegistriesUidSyncParams,
  options?: RequestInit,
): Promise<v1EcrRegistriesUidSyncResponse> => {
  const res = await fetch(getV1EcrRegistriesUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EcrRegistriesUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EcrRegistriesUidSyncResponse;
};

/**
 * Get sync status for the ecr specified registry
 * @summary Get ecr registry sync status
 */
export type v1EcrRegistriesUidSyncStatusResponse200 = {
  data: V1RegistrySyncStatus;
  status: 200;
};

export type v1EcrRegistriesUidSyncStatusResponseComposite =
  v1EcrRegistriesUidSyncStatusResponse200;

export type v1EcrRegistriesUidSyncStatusResponse =
  v1EcrRegistriesUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync/status`;
};

export const v1EcrRegistriesUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EcrRegistriesUidSyncStatusResponse> => {
  const res = await fetch(getV1EcrRegistriesUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EcrRegistriesUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EcrRegistriesUidSyncStatusResponse;
};

/**
 * @summary Retrieves a list of Pack registries
 */
export type v1RegistriesPackListResponse200 = {
  data: V1PackRegistries;
  status: 200;
};

export type v1RegistriesPackListResponseComposite =
  v1RegistriesPackListResponse200;

export type v1RegistriesPackListResponse =
  v1RegistriesPackListResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackListUrl = (
  params?: V1RegistriesPackListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack`;
};

export const v1RegistriesPackList = async (
  params?: V1RegistriesPackListParams,
  options?: RequestInit,
): Promise<v1RegistriesPackListResponse> => {
  const res = await fetch(getV1RegistriesPackListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackListResponse;
};

/**
 * @summary Creates a pack registry
 */
export type v1RegistriesPackCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1RegistriesPackCreateResponseComposite =
  v1RegistriesPackCreateResponse201;

export type v1RegistriesPackCreateResponse =
  v1RegistriesPackCreateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackCreateUrl = (
  params?: V1RegistriesPackCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack`;
};

export const v1RegistriesPackCreate = async (
  v1PackRegistry?: V1PackRegistry,
  params?: V1RegistriesPackCreateParams,
  options?: RequestInit,
): Promise<v1RegistriesPackCreateResponse> => {
  const res = await fetch(getV1RegistriesPackCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PackRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackCreateResponse;
};

/**
 * @summary Retrieves a list of pack registries as summary
 */
export type v1RegistriesPackSummaryListResponse200 = {
  data: V1PackRegistriesSummary;
  status: 200;
};

export type v1RegistriesPackSummaryListResponseComposite =
  v1RegistriesPackSummaryListResponse200;

export type v1RegistriesPackSummaryListResponse =
  v1RegistriesPackSummaryListResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackSummaryListUrl = (
  params?: V1RegistriesPackSummaryListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack/summary`;
};

export const v1RegistriesPackSummaryList = async (
  params?: V1RegistriesPackSummaryListParams,
  options?: RequestInit,
): Promise<v1RegistriesPackSummaryListResponse> => {
  const res = await fetch(getV1RegistriesPackSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackSummaryListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackSummaryListResponse;
};

/**
 * Returns no contents if pack registry is valid else error.
 * @summary Check if pack registry is valid
 */
export type v1RegistriesPackValidateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesPackValidateResponseComposite =
  v1RegistriesPackValidateResponseDefault;

export type v1RegistriesPackValidateResponse =
  v1RegistriesPackValidateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/pack/validate`;
};

export const v1RegistriesPackValidate = async (
  v1PackRegistrySpec: V1PackRegistrySpec,
  options?: RequestInit,
): Promise<v1RegistriesPackValidateResponse> => {
  const res = await fetch(getV1RegistriesPackValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PackRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackValidateResponse;
};

/**
 * @summary Deletes the specified pack registry
 */
export type v1RegistriesPackUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesPackUidDeleteResponseComposite =
  v1RegistriesPackUidDeleteResponseDefault;

export type v1RegistriesPackUidDeleteResponse =
  v1RegistriesPackUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const v1RegistriesPackUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RegistriesPackUidDeleteResponse> => {
  const res = await fetch(getV1RegistriesPackUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackUidDeleteResponse;
};

/**
 * @summary Returns the specified Pack registry
 */
export type v1RegistriesPackUidGetResponse200 = {
  data: V1PackRegistry;
  status: 200;
};

export type v1RegistriesPackUidGetResponseComposite =
  v1RegistriesPackUidGetResponse200;

export type v1RegistriesPackUidGetResponse =
  v1RegistriesPackUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const v1RegistriesPackUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RegistriesPackUidGetResponse> => {
  const res = await fetch(getV1RegistriesPackUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackUidGetResponse;
};

/**
 * @summary Updates the specified pack registry
 */
export type v1RegistriesPackUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesPackUidUpdateResponseComposite =
  v1RegistriesPackUidUpdateResponseDefault;

export type v1RegistriesPackUidUpdateResponse =
  v1RegistriesPackUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const v1RegistriesPackUidUpdate = async (
  uid: string,
  v1PackRegistry?: V1PackRegistry,
  options?: RequestInit,
): Promise<v1RegistriesPackUidUpdateResponse> => {
  const res = await fetch(getV1RegistriesPackUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PackRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackUidUpdateResponse;
};

/**
 * Sync all the packs from the registry
 * @summary Sync Pack registry
 */
export type v1RegistriesPackUidSyncResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesPackUidSyncResponseComposite =
  v1RegistriesPackUidSyncResponseDefault;

export type v1RegistriesPackUidSyncResponse =
  v1RegistriesPackUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidSyncUrl = (
  uid: string,
  params?: V1RegistriesPackUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync`;
};

export const v1RegistriesPackUidSync = async (
  uid: string,
  params?: V1RegistriesPackUidSyncParams,
  options?: RequestInit,
): Promise<v1RegistriesPackUidSyncResponse> => {
  const res = await fetch(getV1RegistriesPackUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackUidSyncResponse;
};

/**
 * Get sync status for the pack specified registry
 * @summary Get pack registry sync status
 */
export type v1RegistriesPackUidSyncStatusResponse200 = {
  data: V1RegistrySyncStatus;
  status: 200;
};

export type v1RegistriesPackUidSyncStatusResponseComposite =
  v1RegistriesPackUidSyncStatusResponse200;

export type v1RegistriesPackUidSyncStatusResponse =
  v1RegistriesPackUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync/status`;
};

export const v1RegistriesPackUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RegistriesPackUidSyncStatusResponse> => {
  const res = await fetch(getV1RegistriesPackUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackUidSyncStatusResponse;
};

/**
 * @summary Returns the specified system scope registry configuration
 */
export type v1RegistriesNameConfigGetResponse200 = {
  data: V1RegistryConfigEntity;
  status: 200;
};

export type v1RegistriesNameConfigGetResponseComposite =
  v1RegistriesNameConfigGetResponse200;

export type v1RegistriesNameConfigGetResponse =
  v1RegistriesNameConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesNameConfigGetUrl = (registryName: string) => {
  return `https://api.spectrocloud.com/v1/registries/${registryName}/config`;
};

export const v1RegistriesNameConfigGet = async (
  registryName: string,
  options?: RequestInit,
): Promise<v1RegistriesNameConfigGetResponse> => {
  const res = await fetch(getV1RegistriesNameConfigGetUrl(registryName), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesNameConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesNameConfigGetResponse;
};

/**
 * @summary Deletes the specified registry
 */
export type v1RegistriesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RegistriesUidDeleteResponseComposite =
  v1RegistriesUidDeleteResponseDefault;

export type v1RegistriesUidDeleteResponse =
  v1RegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/${uid}`;
};

export const v1RegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RegistriesUidDeleteResponse> => {
  const res = await fetch(getV1RegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesUidDeleteResponse;
};

/**
 * @summary Retrieves a list of roles
 */
export type v1RolesListResponse200 = {
  data: V1Roles;
  status: 200;
};

export type v1RolesListResponseComposite = v1RolesListResponse200;

export type v1RolesListResponse = v1RolesListResponseComposite & {
  headers: Headers;
};

export const getV1RolesListUrl = (params?: V1RolesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/roles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/roles`;
};

export const v1RolesList = async (
  params?: V1RolesListParams,
  options?: RequestInit,
): Promise<v1RolesListResponse> => {
  const res = await fetch(getV1RolesListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RolesListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RolesListResponse;
};

/**
 * @summary Creates a role with specified permissions
 */
export type v1RolesCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1RolesCreateResponseComposite = v1RolesCreateResponse201;

export type v1RolesCreateResponse = v1RolesCreateResponseComposite & {
  headers: Headers;
};

export const getV1RolesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/roles`;
};

export const v1RolesCreate = async (
  v1Role?: V1Role,
  options?: RequestInit,
): Promise<v1RolesCreateResponse> => {
  const res = await fetch(getV1RolesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Role),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RolesCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RolesCreateResponse;
};

/**
 * @summary Deletes the specified role
 */
export type v1RolesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RolesUidDeleteResponseComposite = v1RolesUidDeleteResponseDefault;

export type v1RolesUidDeleteResponse = v1RolesUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1RolesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const v1RolesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RolesUidDeleteResponse> => {
  const res = await fetch(getV1RolesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RolesUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RolesUidDeleteResponse;
};

/**
 * @summary Returns the specified role
 */
export type v1RolesUidGetResponse200 = {
  data: V1Role;
  status: 200;
};

export type v1RolesUidGetResponseComposite = v1RolesUidGetResponse200;

export type v1RolesUidGetResponse = v1RolesUidGetResponseComposite & {
  headers: Headers;
};

export const getV1RolesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const v1RolesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1RolesUidGetResponse> => {
  const res = await fetch(getV1RolesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RolesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RolesUidGetResponse;
};

/**
 * @summary Updates the specified role
 */
export type v1RolesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RolesUidUpdateResponseComposite = v1RolesUidUpdateResponseDefault;

export type v1RolesUidUpdateResponse = v1RolesUidUpdateResponseComposite & {
  headers: Headers;
};

export const getV1RolesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}`;
};

export const v1RolesUidUpdate = async (
  uid: string,
  v1Role?: V1Role,
  options?: RequestInit,
): Promise<v1RolesUidUpdateResponse> => {
  const res = await fetch(getV1RolesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Role),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RolesUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RolesUidUpdateResponse;
};

/**
 * @summary Clone the role
 */
export type v1RolesCloneResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1RolesCloneResponseComposite = v1RolesCloneResponse201;

export type v1RolesCloneResponse = v1RolesCloneResponseComposite & {
  headers: Headers;
};

export const getV1RolesCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/roles/${uid}/clone`;
};

export const v1RolesClone = async (
  uid: string,
  v1RoleClone?: V1RoleClone,
  options?: RequestInit,
): Promise<v1RolesCloneResponse> => {
  const res = await fetch(getV1RolesCloneUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1RoleClone),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RolesCloneResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RolesCloneResponse;
};

/**
 * @summary Returns a latest version for a given service name
 */
export type v1ServiceVersionGetResponse200 = {
  data: V1ServiceVersion;
  status: 200;
};

export type v1ServiceVersionGetResponseComposite =
  v1ServiceVersionGetResponse200;

export type v1ServiceVersionGetResponse =
  v1ServiceVersionGetResponseComposite & {
    headers: Headers;
  };

export const getV1ServiceVersionGetUrl = (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  params?: V1ServiceVersionGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/services/${serviceName}/version?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/services/${serviceName}/version`;
};

export const v1ServiceVersionGet = async (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  params?: V1ServiceVersionGetParams,
  options?: RequestInit,
): Promise<v1ServiceVersionGetResponse> => {
  const res = await fetch(getV1ServiceVersionGetUrl(serviceName, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ServiceVersionGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ServiceVersionGetResponse;
};

/**
 * @summary Returns a service manifest for a given service name and version
 */
export type v1ServiceManifestGetResponse200 = {
  data: V1ServiceManifest;
  status: 200;
};

export type v1ServiceManifestGetResponseComposite =
  v1ServiceManifestGetResponse200;

export type v1ServiceManifestGetResponse =
  v1ServiceManifestGetResponseComposite & {
    headers: Headers;
  };

export const getV1ServiceManifestGetUrl = (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  version: string,
  params: V1ServiceManifestGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/services/${serviceName}/versions/${version}/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/services/${serviceName}/versions/${version}/manifest`;
};

export const v1ServiceManifestGet = async (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  version: string,
  params: V1ServiceManifestGetParams,
  options?: RequestInit,
): Promise<v1ServiceManifestGetResponse> => {
  const res = await fetch(
    getV1ServiceManifestGetUrl(serviceName, version, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ServiceManifestGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ServiceManifestGetResponse;
};

/**
 * @summary Creates an AKS cluster
 */
export type v1SpectroClustersAksCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersAksCreateResponseComposite =
  v1SpectroClustersAksCreateResponse201;

export type v1SpectroClustersAksCreateResponse =
  v1SpectroClustersAksCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAksCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aks`;
};

export const v1SpectroClustersAksCreate = async (
  v1SpectroAzureClusterEntity?: V1SpectroAzureClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAksCreateResponse> => {
  const res = await fetch(getV1SpectroClustersAksCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAzureClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAksCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAksCreateResponse;
};

/**
 * @summary Get AKS cluster estimated rate information
 */
export type v1SpectroClustersAksRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersAksRateResponseComposite =
  v1SpectroClustersAksRateResponse200;

export type v1SpectroClustersAksRateResponse =
  v1SpectroClustersAksRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAksRateUrl = (
  params?: V1SpectroClustersAksRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/aks/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/aks/rate`;
};

export const v1SpectroClustersAksRate = async (
  v1SpectroAzureClusterRateEntity?: V1SpectroAzureClusterRateEntity,
  params?: V1SpectroClustersAksRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersAksRateResponse> => {
  const res = await fetch(getV1SpectroClustersAksRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAzureClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAksRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAksRateResponse;
};

/**
 * @summary Validates AKS cluster create operation
 */
export type v1SpectroClustersAksValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersAksValidateResponseComposite =
  v1SpectroClustersAksValidateResponse200;

export type v1SpectroClustersAksValidateResponse =
  v1SpectroClustersAksValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAksValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aks/validate`;
};

export const v1SpectroClustersAksValidate = async (
  v1SpectroAzureClusterEntity?: V1SpectroAzureClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAksValidateResponse> => {
  const res = await fetch(getV1SpectroClustersAksValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAzureClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAksValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAksValidateResponse;
};

/**
 * @summary Creates an AWS cluster
 */
export type v1SpectroClustersAwsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersAwsCreateResponseComposite =
  v1SpectroClustersAwsCreateResponse201;

export type v1SpectroClustersAwsCreateResponse =
  v1SpectroClustersAwsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws`;
};

export const v1SpectroClustersAwsCreate = async (
  v1SpectroAwsClusterEntity?: V1SpectroAwsClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAwsCreateResponse> => {
  const res = await fetch(getV1SpectroClustersAwsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAwsClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAwsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAwsCreateResponse;
};

/**
 * @summary Imports an AWS cluster
 */
export type v1SpectroClustersAwsImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersAwsImportResponseComposite =
  v1SpectroClustersAwsImportResponse201;

export type v1SpectroClustersAwsImportResponse =
  v1SpectroClustersAwsImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws/import`;
};

export const v1SpectroClustersAwsImport = async (
  v1SpectroAwsClusterImportEntity?: V1SpectroAwsClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAwsImportResponse> => {
  const res = await fetch(getV1SpectroClustersAwsImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAwsClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAwsImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAwsImportResponse;
};

/**
 * @summary Get AWS cluster estimated rate information
 */
export type v1SpectroClustersAwsRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersAwsRateResponseComposite =
  v1SpectroClustersAwsRateResponse200;

export type v1SpectroClustersAwsRateResponse =
  v1SpectroClustersAwsRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsRateUrl = (
  params?: V1SpectroClustersAwsRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/aws/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/aws/rate`;
};

export const v1SpectroClustersAwsRate = async (
  v1SpectroAwsClusterRateEntity?: V1SpectroAwsClusterRateEntity,
  params?: V1SpectroClustersAwsRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersAwsRateResponse> => {
  const res = await fetch(getV1SpectroClustersAwsRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAwsClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAwsRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAwsRateResponse;
};

/**
 * @summary Validates AWS cluster create operation
 */
export type v1SpectroClustersAwsValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersAwsValidateResponseComposite =
  v1SpectroClustersAwsValidateResponse200;

export type v1SpectroClustersAwsValidateResponse =
  v1SpectroClustersAwsValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAwsValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/aws/validate`;
};

export const v1SpectroClustersAwsValidate = async (
  v1SpectroAwsClusterEntity?: V1SpectroAwsClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAwsValidateResponse> => {
  const res = await fetch(getV1SpectroClustersAwsValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAwsClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAwsValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAwsValidateResponse;
};

/**
 * @summary Creates an Azure cluster
 */
export type v1SpectroClustersAzureCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersAzureCreateResponseComposite =
  v1SpectroClustersAzureCreateResponse201;

export type v1SpectroClustersAzureCreateResponse =
  v1SpectroClustersAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure`;
};

export const v1SpectroClustersAzureCreate = async (
  v1SpectroAzureClusterEntity?: V1SpectroAzureClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAzureCreateResponse> => {
  const res = await fetch(getV1SpectroClustersAzureCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAzureClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAzureCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAzureCreateResponse;
};

/**
 * @summary Imports an Azure cluster
 */
export type v1SpectroClustersAzureImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersAzureImportResponseComposite =
  v1SpectroClustersAzureImportResponse201;

export type v1SpectroClustersAzureImportResponse =
  v1SpectroClustersAzureImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure/import`;
};

export const v1SpectroClustersAzureImport = async (
  v1SpectroAzureClusterImportEntity?: V1SpectroAzureClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAzureImportResponse> => {
  const res = await fetch(getV1SpectroClustersAzureImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAzureClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAzureImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAzureImportResponse;
};

/**
 * @summary Get Azure cluster estimated rate information
 */
export type v1SpectroClustersAzureRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersAzureRateResponseComposite =
  v1SpectroClustersAzureRateResponse200;

export type v1SpectroClustersAzureRateResponse =
  v1SpectroClustersAzureRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureRateUrl = (
  params?: V1SpectroClustersAzureRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/azure/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/azure/rate`;
};

export const v1SpectroClustersAzureRate = async (
  v1SpectroAzureClusterRateEntity?: V1SpectroAzureClusterRateEntity,
  params?: V1SpectroClustersAzureRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersAzureRateResponse> => {
  const res = await fetch(getV1SpectroClustersAzureRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAzureClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAzureRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAzureRateResponse;
};

/**
 * @summary Validates Azure cluster create operation
 */
export type v1SpectroClustersAzureValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersAzureValidateResponseComposite =
  v1SpectroClustersAzureValidateResponse200;

export type v1SpectroClustersAzureValidateResponse =
  v1SpectroClustersAzureValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersAzureValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/azure/validate`;
};

export const v1SpectroClustersAzureValidate = async (
  v1SpectroAzureClusterEntity?: V1SpectroAzureClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersAzureValidateResponse> => {
  const res = await fetch(getV1SpectroClustersAzureValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroAzureClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersAzureValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersAzureValidateResponse;
};

/**
 * @summary Creates a Custom cluster
 */
export type v1SpectroClustersCustomCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersCustomCreateResponseComposite =
  v1SpectroClustersCustomCreateResponse201;

export type v1SpectroClustersCustomCreateResponse =
  v1SpectroClustersCustomCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersCustomCreateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/cloudTypes/${cloudType}`;
};

export const v1SpectroClustersCustomCreate = async (
  cloudType: string,
  v1SpectroCustomClusterEntity?: V1SpectroCustomClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersCustomCreateResponse> => {
  const res = await fetch(getV1SpectroClustersCustomCreateUrl(cloudType), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroCustomClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersCustomCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersCustomCreateResponse;
};

/**
 * @summary Validates Custom cluster create operation
 */
export type v1SpectroClustersCustomValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersCustomValidateResponseComposite =
  v1SpectroClustersCustomValidateResponse200;

export type v1SpectroClustersCustomValidateResponse =
  v1SpectroClustersCustomValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersCustomValidateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/cloudTypes/${cloudType}/validate`;
};

export const v1SpectroClustersCustomValidate = async (
  cloudType: string,
  v1SpectroCustomClusterEntity?: V1SpectroCustomClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersCustomValidateResponse> => {
  const res = await fetch(getV1SpectroClustersCustomValidateUrl(cloudType), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroCustomClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersCustomValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersCustomValidateResponse;
};

/**
 * @summary Cluster configuration for the edge installer
 */
export type v1SpectroClustersConfigEdgeInstallerResponse200 = {
  data: V1ClusterEdgeInstallerConfig;
  status: 200;
};

export type v1SpectroClustersConfigEdgeInstallerResponseComposite =
  v1SpectroClustersConfigEdgeInstallerResponse200;

export type v1SpectroClustersConfigEdgeInstallerResponse =
  v1SpectroClustersConfigEdgeInstallerResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersConfigEdgeInstallerUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/config/edgeInstaller`;
};

export const v1SpectroClustersConfigEdgeInstaller = async (
  options?: RequestInit,
): Promise<v1SpectroClustersConfigEdgeInstallerResponse> => {
  const res = await fetch(getV1SpectroClustersConfigEdgeInstallerUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersConfigEdgeInstallerResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersConfigEdgeInstallerResponse;
};

/**
 * @summary Creates an EdgeNative cluster
 */
export type v1SpectroClustersEdgeNativeCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersEdgeNativeCreateResponseComposite =
  v1SpectroClustersEdgeNativeCreateResponse201;

export type v1SpectroClustersEdgeNativeCreateResponse =
  v1SpectroClustersEdgeNativeCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native`;
};

export const v1SpectroClustersEdgeNativeCreate = async (
  v1SpectroEdgeNativeClusterEntity?: V1SpectroEdgeNativeClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersEdgeNativeCreateResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroEdgeNativeClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersEdgeNativeCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersEdgeNativeCreateResponse;
};

/**
 * @summary Imports an EdgeNative cluster
 */
export type v1SpectroClustersEdgeNativeImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersEdgeNativeImportResponseComposite =
  v1SpectroClustersEdgeNativeImportResponse201;

export type v1SpectroClustersEdgeNativeImportResponse =
  v1SpectroClustersEdgeNativeImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native/import`;
};

export const v1SpectroClustersEdgeNativeImport = async (
  v1SpectroEdgeNativeClusterImportEntity?: V1SpectroEdgeNativeClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersEdgeNativeImportResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroEdgeNativeClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersEdgeNativeImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersEdgeNativeImportResponse;
};

/**
 * @summary Get edge-native cluster estimated rate information
 */
export type v1SpectroClustersEdgeNativeRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersEdgeNativeRateResponseComposite =
  v1SpectroClustersEdgeNativeRateResponse200;

export type v1SpectroClustersEdgeNativeRateResponse =
  v1SpectroClustersEdgeNativeRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeRateUrl = (
  params?: V1SpectroClustersEdgeNativeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/edge-native/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/edge-native/rate`;
};

export const v1SpectroClustersEdgeNativeRate = async (
  v1SpectroEdgeNativeClusterRateEntity?: V1SpectroEdgeNativeClusterRateEntity,
  params?: V1SpectroClustersEdgeNativeRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersEdgeNativeRateResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroEdgeNativeClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersEdgeNativeRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersEdgeNativeRateResponse;
};

/**
 * @summary Validates edge-native cluster create operation
 */
export type v1SpectroClustersEdgeNativeValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersEdgeNativeValidateResponseComposite =
  v1SpectroClustersEdgeNativeValidateResponse200;

export type v1SpectroClustersEdgeNativeValidateResponse =
  v1SpectroClustersEdgeNativeValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEdgeNativeValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/edge-native/validate`;
};

export const v1SpectroClustersEdgeNativeValidate = async (
  v1SpectroEdgeNativeClusterEntity?: V1SpectroEdgeNativeClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersEdgeNativeValidateResponse> => {
  const res = await fetch(getV1SpectroClustersEdgeNativeValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroEdgeNativeClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersEdgeNativeValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersEdgeNativeValidateResponse;
};

/**
 * @summary Creates an EKS cluster
 */
export type v1SpectroClustersEksCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersEksCreateResponseComposite =
  v1SpectroClustersEksCreateResponse201;

export type v1SpectroClustersEksCreateResponse =
  v1SpectroClustersEksCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEksCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/eks`;
};

export const v1SpectroClustersEksCreate = async (
  v1SpectroEksClusterEntity?: V1SpectroEksClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersEksCreateResponse> => {
  const res = await fetch(getV1SpectroClustersEksCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroEksClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersEksCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersEksCreateResponse;
};

/**
 * @summary Get EKS cluster estimated rate information
 */
export type v1SpectroClustersEksRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersEksRateResponseComposite =
  v1SpectroClustersEksRateResponse200;

export type v1SpectroClustersEksRateResponse =
  v1SpectroClustersEksRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEksRateUrl = (
  params?: V1SpectroClustersEksRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/eks/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/eks/rate`;
};

export const v1SpectroClustersEksRate = async (
  v1SpectroEksClusterRateEntity?: V1SpectroEksClusterRateEntity,
  params?: V1SpectroClustersEksRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersEksRateResponse> => {
  const res = await fetch(getV1SpectroClustersEksRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroEksClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersEksRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersEksRateResponse;
};

/**
 * @summary Validates EKS cluster create operation
 */
export type v1SpectroClustersEksValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersEksValidateResponseComposite =
  v1SpectroClustersEksValidateResponse200;

export type v1SpectroClustersEksValidateResponse =
  v1SpectroClustersEksValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersEksValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/eks/validate`;
};

export const v1SpectroClustersEksValidate = async (
  v1SpectroEksClusterEntity?: V1SpectroEksClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersEksValidateResponse> => {
  const res = await fetch(getV1SpectroClustersEksValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroEksClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersEksValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersEksValidateResponse;
};

/**
 * @summary Returns the cluster object references based on locationUid
 */
export type v1ClusterFeatureBackupLocationUidGetResponse200 = {
  data: V1ClusterRefs;
  status: 200;
};

export type v1ClusterFeatureBackupLocationUidGetResponseComposite =
  v1ClusterFeatureBackupLocationUidGetResponse200;

export type v1ClusterFeatureBackupLocationUidGetResponse =
  v1ClusterFeatureBackupLocationUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupLocationUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/features/backup/locations/${uid}`;
};

export const v1ClusterFeatureBackupLocationUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupLocationUidGetResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupLocationUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupLocationUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupLocationUidGetResponse;
};

/**
 * @summary Change cluster backup location
 */
export type v1ClusterFeatureBackupLocationUidChangeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureBackupLocationUidChangeResponseComposite =
  v1ClusterFeatureBackupLocationUidChangeResponseDefault;

export type v1ClusterFeatureBackupLocationUidChangeResponse =
  v1ClusterFeatureBackupLocationUidChangeResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupLocationUidChangeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/features/backup/locations/${uid}`;
};

export const v1ClusterFeatureBackupLocationUidChange = async (
  uid: string,
  v1ClusterBackupLocationType?: V1ClusterBackupLocationType,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupLocationUidChangeResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupLocationUidChangeUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterBackupLocationType),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupLocationUidChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupLocationUidChangeResponse;
};

/**
 * @summary Download log fetcher logs for cluster by log fetcher uid
 */
export type v1ClusterFeatureLogFetcherLogDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type v1ClusterFeatureLogFetcherLogDownloadResponseComposite =
  v1ClusterFeatureLogFetcherLogDownloadResponse200;

export type v1ClusterFeatureLogFetcherLogDownloadResponse =
  v1ClusterFeatureLogFetcherLogDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherLogDownloadUrl = (
  uid: string,
  params?: V1ClusterFeatureLogFetcherLogDownloadParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/download?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/download`;
};

export const v1ClusterFeatureLogFetcherLogDownload = async (
  uid: string,
  params?: V1ClusterFeatureLogFetcherLogDownloadParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureLogFetcherLogDownloadResponse> => {
  const res = await fetch(
    getV1ClusterFeatureLogFetcherLogDownloadUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureLogFetcherLogDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureLogFetcherLogDownloadResponse;
};

/**
 * @summary Update log fetcher logs by log fetcher uid
 */
export type v1ClusterFeatureLogFetcherLogUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureLogFetcherLogUpdateResponseComposite =
  v1ClusterFeatureLogFetcherLogUpdateResponseDefault;

export type v1ClusterFeatureLogFetcherLogUpdateResponse =
  v1ClusterFeatureLogFetcherLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherLogUpdateUrl = (
  uid: string,
  params?: V1ClusterFeatureLogFetcherLogUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/log?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/features/logFetcher/${uid}/log`;
};

export const v1ClusterFeatureLogFetcherLogUpdate = async (
  uid: string,
  v1ClusterFeatureLogFetcherLogUpdateRequest: V1ClusterFeatureLogFetcherLogUpdateRequest,
  params?: V1ClusterFeatureLogFetcherLogUpdateParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureLogFetcherLogUpdateResponse> => {
  const formData = new FormData();
  if (v1ClusterFeatureLogFetcherLogUpdateRequest.fileName !== undefined) {
    formData.append(
      `fileName`,
      v1ClusterFeatureLogFetcherLogUpdateRequest.fileName,
    );
  }

  const res = await fetch(
    getV1ClusterFeatureLogFetcherLogUpdateUrl(uid, params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureLogFetcherLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureLogFetcherLogUpdateResponse;
};

/**
 * @summary Creates a GCP cluster
 */
export type v1SpectroClustersGcpCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersGcpCreateResponseComposite =
  v1SpectroClustersGcpCreateResponse201;

export type v1SpectroClustersGcpCreateResponse =
  v1SpectroClustersGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp`;
};

export const v1SpectroClustersGcpCreate = async (
  v1SpectroGcpClusterEntity?: V1SpectroGcpClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersGcpCreateResponse> => {
  const res = await fetch(getV1SpectroClustersGcpCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGcpClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGcpCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGcpCreateResponse;
};

/**
 * @summary Imports a GCP cluster
 */
export type v1SpectroClustersGcpImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersGcpImportResponseComposite =
  v1SpectroClustersGcpImportResponse201;

export type v1SpectroClustersGcpImportResponse =
  v1SpectroClustersGcpImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp/import`;
};

export const v1SpectroClustersGcpImport = async (
  v1SpectroGcpClusterImportEntity?: V1SpectroGcpClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersGcpImportResponse> => {
  const res = await fetch(getV1SpectroClustersGcpImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGcpClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGcpImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGcpImportResponse;
};

/**
 * @summary Get GCP cluster estimated rate information
 */
export type v1SpectroClustersGcpRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersGcpRateResponseComposite =
  v1SpectroClustersGcpRateResponse200;

export type v1SpectroClustersGcpRateResponse =
  v1SpectroClustersGcpRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpRateUrl = (
  params?: V1SpectroClustersGcpRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/gcp/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/gcp/rate`;
};

export const v1SpectroClustersGcpRate = async (
  v1SpectroGcpClusterRateEntity?: V1SpectroGcpClusterRateEntity,
  params?: V1SpectroClustersGcpRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersGcpRateResponse> => {
  const res = await fetch(getV1SpectroClustersGcpRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGcpClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGcpRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGcpRateResponse;
};

/**
 * @summary Validates GCP cluster create operation
 */
export type v1SpectroClustersGcpValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersGcpValidateResponseComposite =
  v1SpectroClustersGcpValidateResponse200;

export type v1SpectroClustersGcpValidateResponse =
  v1SpectroClustersGcpValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGcpValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gcp/validate`;
};

export const v1SpectroClustersGcpValidate = async (
  v1SpectroGcpClusterEntity?: V1SpectroGcpClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersGcpValidateResponse> => {
  const res = await fetch(getV1SpectroClustersGcpValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGcpClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGcpValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGcpValidateResponse;
};

/**
 * The machines information will be captured, whereas the cloud specific configuration info will not be retrieved
 * @summary Imports a cluster of any cloud type in generic way
 */
export type v1SpectroClustersGenericImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersGenericImportResponseComposite =
  v1SpectroClustersGenericImportResponse201;

export type v1SpectroClustersGenericImportResponse =
  v1SpectroClustersGenericImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGenericImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/generic/import`;
};

export const v1SpectroClustersGenericImport = async (
  v1SpectroGenericClusterImportEntity?: V1SpectroGenericClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersGenericImportResponse> => {
  const res = await fetch(getV1SpectroClustersGenericImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGenericClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGenericImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGenericImportResponse;
};

/**
 * @summary Get generic cluster estimated rate information
 */
export type v1SpectroClustersGenericRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersGenericRateResponseComposite =
  v1SpectroClustersGenericRateResponse200;

export type v1SpectroClustersGenericRateResponse =
  v1SpectroClustersGenericRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGenericRateUrl = (
  params?: V1SpectroClustersGenericRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/generic/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/generic/rate`;
};

export const v1SpectroClustersGenericRate = async (
  v1SpectroGenericClusterRateEntity?: V1SpectroGenericClusterRateEntity,
  params?: V1SpectroClustersGenericRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersGenericRateResponse> => {
  const res = await fetch(getV1SpectroClustersGenericRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGenericClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGenericRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGenericRateResponse;
};

/**
 * @summary Creates an GKE cluster
 */
export type v1SpectroClustersGkeCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersGkeCreateResponseComposite =
  v1SpectroClustersGkeCreateResponse201;

export type v1SpectroClustersGkeCreateResponse =
  v1SpectroClustersGkeCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGkeCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gke`;
};

export const v1SpectroClustersGkeCreate = async (
  v1SpectroGcpClusterEntity?: V1SpectroGcpClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersGkeCreateResponse> => {
  const res = await fetch(getV1SpectroClustersGkeCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGcpClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGkeCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGkeCreateResponse;
};

/**
 * @summary Get GKE cluster estimated rate information
 */
export type v1SpectroClustersGkeRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersGkeRateResponseComposite =
  v1SpectroClustersGkeRateResponse200;

export type v1SpectroClustersGkeRateResponse =
  v1SpectroClustersGkeRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGkeRateUrl = (
  params?: V1SpectroClustersGkeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/gke/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/gke/rate`;
};

export const v1SpectroClustersGkeRate = async (
  v1SpectroGcpClusterRateEntity?: V1SpectroGcpClusterRateEntity,
  params?: V1SpectroClustersGkeRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersGkeRateResponse> => {
  const res = await fetch(getV1SpectroClustersGkeRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGcpClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGkeRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGkeRateResponse;
};

/**
 * @summary Validates GKE cluster create operation
 */
export type v1SpectroClustersGkeValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersGkeValidateResponseComposite =
  v1SpectroClustersGkeValidateResponse200;

export type v1SpectroClustersGkeValidateResponse =
  v1SpectroClustersGkeValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGkeValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/gke/validate`;
};

export const v1SpectroClustersGkeValidate = async (
  v1SpectroGcpClusterEntity?: V1SpectroGcpClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersGkeValidateResponse> => {
  const res = await fetch(getV1SpectroClustersGkeValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroGcpClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGkeValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGkeValidateResponse;
};

/**
 * @summary Creates a MAAS cluster
 */
export type v1SpectroClustersMaasCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersMaasCreateResponseComposite =
  v1SpectroClustersMaasCreateResponse201;

export type v1SpectroClustersMaasCreateResponse =
  v1SpectroClustersMaasCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas`;
};

export const v1SpectroClustersMaasCreate = async (
  v1SpectroMaasClusterEntity?: V1SpectroMaasClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersMaasCreateResponse> => {
  const res = await fetch(getV1SpectroClustersMaasCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroMaasClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMaasCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMaasCreateResponse;
};

/**
 * @summary Imports a Maas cluster
 */
export type v1SpectroClustersMaasImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersMaasImportResponseComposite =
  v1SpectroClustersMaasImportResponse201;

export type v1SpectroClustersMaasImportResponse =
  v1SpectroClustersMaasImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas/import`;
};

export const v1SpectroClustersMaasImport = async (
  v1SpectroMaasClusterImportEntity?: V1SpectroMaasClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersMaasImportResponse> => {
  const res = await fetch(getV1SpectroClustersMaasImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroMaasClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMaasImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMaasImportResponse;
};

/**
 * @summary Get maas cluster estimated rate information
 */
export type v1SpectroClustersMaasRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersMaasRateResponseComposite =
  v1SpectroClustersMaasRateResponse200;

export type v1SpectroClustersMaasRateResponse =
  v1SpectroClustersMaasRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasRateUrl = (
  params?: V1SpectroClustersMaasRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/maas/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/maas/rate`;
};

export const v1SpectroClustersMaasRate = async (
  v1SpectroMaasClusterRateEntity?: V1SpectroMaasClusterRateEntity,
  params?: V1SpectroClustersMaasRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersMaasRateResponse> => {
  const res = await fetch(getV1SpectroClustersMaasRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroMaasClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMaasRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMaasRateResponse;
};

/**
 * @summary Validates MAAS cluster create operation
 */
export type v1SpectroClustersMaasValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersMaasValidateResponseComposite =
  v1SpectroClustersMaasValidateResponse200;

export type v1SpectroClustersMaasValidateResponse =
  v1SpectroClustersMaasValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersMaasValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/maas/validate`;
};

export const v1SpectroClustersMaasValidate = async (
  v1SpectroMaasClusterEntity?: V1SpectroMaasClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersMaasValidateResponse> => {
  const res = await fetch(getV1SpectroClustersMaasValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroMaasClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersMaasValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersMaasValidateResponse;
};

/**
 * @summary Creates a OpenStack cluster
 */
export type v1SpectroClustersOpenStackCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersOpenStackCreateResponseComposite =
  v1SpectroClustersOpenStackCreateResponse201;

export type v1SpectroClustersOpenStackCreateResponse =
  v1SpectroClustersOpenStackCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack`;
};

export const v1SpectroClustersOpenStackCreate = async (
  v1SpectroOpenStackClusterEntity?: V1SpectroOpenStackClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersOpenStackCreateResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroOpenStackClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersOpenStackCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersOpenStackCreateResponse;
};

/**
 * @summary Imports an OpenStack cluster
 */
export type v1SpectroClustersOpenStackImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersOpenStackImportResponseComposite =
  v1SpectroClustersOpenStackImportResponse201;

export type v1SpectroClustersOpenStackImportResponse =
  v1SpectroClustersOpenStackImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack/import`;
};

export const v1SpectroClustersOpenStackImport = async (
  v1SpectroOpenStackClusterImportEntity?: V1SpectroOpenStackClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersOpenStackImportResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroOpenStackClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersOpenStackImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersOpenStackImportResponse;
};

/**
 * @summary Get openstack cluster estimated rate information
 */
export type v1SpectroClustersOpenStackRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersOpenStackRateResponseComposite =
  v1SpectroClustersOpenStackRateResponse200;

export type v1SpectroClustersOpenStackRateResponse =
  v1SpectroClustersOpenStackRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackRateUrl = (
  params?: V1SpectroClustersOpenStackRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/openstack/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/openstack/rate`;
};

export const v1SpectroClustersOpenStackRate = async (
  v1SpectroOpenStackClusterRateEntity?: V1SpectroOpenStackClusterRateEntity,
  params?: V1SpectroClustersOpenStackRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersOpenStackRateResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroOpenStackClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersOpenStackRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersOpenStackRateResponse;
};

/**
 * @summary Validates OpenStack cluster create operation
 */
export type v1SpectroClustersOpenStackValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersOpenStackValidateResponseComposite =
  v1SpectroClustersOpenStackValidateResponse200;

export type v1SpectroClustersOpenStackValidateResponse =
  v1SpectroClustersOpenStackValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersOpenStackValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/openstack/validate`;
};

export const v1SpectroClustersOpenStackValidate = async (
  v1SpectroOpenStackClusterEntity?: V1SpectroOpenStackClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersOpenStackValidateResponse> => {
  const res = await fetch(getV1SpectroClustersOpenStackValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroOpenStackClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersOpenStackValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersOpenStackValidateResponse;
};

/**
 * @summary Downloads the cluster definition archive file
 */
export type v1SpectroClustersSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersSpcDownloadResponseComposite =
  v1SpectroClustersSpcDownloadResponse200;

export type v1SpectroClustersSpcDownloadResponse =
  v1SpectroClustersSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersSpcDownloadUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/spc/download`;
};

export const v1SpectroClustersSpcDownload = async (
  v1ClusterDefinitionEntity?: V1ClusterDefinitionEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersSpcDownloadResponse> => {
  const res = await fetch(getV1SpectroClustersSpcDownloadUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterDefinitionEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersSpcDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersSpcDownloadResponse;
};

/**
 * @summary Retrieves a list of spectrocluster tags
 */
export type v1SpectroClustersTagsGetResponse200 = {
  data: V1SpectroClusterTags;
  status: 200;
};

export type v1SpectroClustersTagsGetResponseComposite =
  v1SpectroClustersTagsGetResponse200;

export type v1SpectroClustersTagsGetResponse =
  v1SpectroClustersTagsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersTagsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/tags`;
};

export const v1SpectroClustersTagsGet = async (
  options?: RequestInit,
): Promise<v1SpectroClustersTagsGetResponse> => {
  const res = await fetch(getV1SpectroClustersTagsGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersTagsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersTagsGetResponse;
};

/**
 * @summary Get cluster settings by context
 */
export type v1SpectroClustersUpgradeSettingsGetResponse200 = {
  data: V1ClusterUpgradeSettingsEntity;
  status: 200;
};

export type v1SpectroClustersUpgradeSettingsGetResponseComposite =
  v1SpectroClustersUpgradeSettingsGetResponse200;

export type v1SpectroClustersUpgradeSettingsGetResponse =
  v1SpectroClustersUpgradeSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpgradeSettingsGetUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/upgrade/settings`;
};

export const v1SpectroClustersUpgradeSettingsGet = async (
  options?: RequestInit,
): Promise<v1SpectroClustersUpgradeSettingsGetResponse> => {
  const res = await fetch(getV1SpectroClustersUpgradeSettingsGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpgradeSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpgradeSettingsGetResponse;
};

/**
 * @summary Update all clusters upgrade settings
 */
export type v1SpectroClustersUpgradeSettingsResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUpgradeSettingsResponseComposite =
  v1SpectroClustersUpgradeSettingsResponseDefault;

export type v1SpectroClustersUpgradeSettingsResponse =
  v1SpectroClustersUpgradeSettingsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpgradeSettingsUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/upgrade/settings`;
};

export const v1SpectroClustersUpgradeSettings = async (
  v1ClusterUpgradeSettingsEntity?: V1ClusterUpgradeSettingsEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUpgradeSettingsResponse> => {
  const res = await fetch(getV1SpectroClustersUpgradeSettingsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterUpgradeSettingsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpgradeSettingsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpgradeSettingsResponse;
};

/**
 * @summary Validates the cluster name
 */
export type v1SpectroClustersValidateNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersValidateNameResponseComposite =
  v1SpectroClustersValidateNameResponseDefault;

export type v1SpectroClustersValidateNameResponse =
  v1SpectroClustersValidateNameResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersValidateNameUrl = (
  params?: V1SpectroClustersValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/validate/name`;
};

export const v1SpectroClustersValidateName = async (
  params?: V1SpectroClustersValidateNameParams,
  options?: RequestInit,
): Promise<v1SpectroClustersValidateNameResponse> => {
  const res = await fetch(getV1SpectroClustersValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersValidateNameResponse;
};

/**
 * @summary Validates spectro cluster packs
 */
export type v1SpectroClustersValidatePacksResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersValidatePacksResponseComposite =
  v1SpectroClustersValidatePacksResponse200;

export type v1SpectroClustersValidatePacksResponse =
  v1SpectroClustersValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersValidatePacksUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/validate/packs`;
};

export const v1SpectroClustersValidatePacks = async (
  v1SpectroClusterPacksEntity?: V1SpectroClusterPacksEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersValidatePacksResponse> => {
  const res = await fetch(getV1SpectroClustersValidatePacksUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterPacksEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersValidatePacksResponse;
};

/**
 * @summary Creates a virtual cluster
 */
export type v1SpectroClustersVirtualCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersVirtualCreateResponseComposite =
  v1SpectroClustersVirtualCreateResponse201;

export type v1SpectroClustersVirtualCreateResponse =
  v1SpectroClustersVirtualCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVirtualCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/virtual`;
};

export const v1SpectroClustersVirtualCreate = async (
  v1SpectroVirtualClusterEntity?: V1SpectroVirtualClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVirtualCreateResponse> => {
  const res = await fetch(getV1SpectroClustersVirtualCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroVirtualClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVirtualCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVirtualCreateResponse;
};

/**
 * @summary Get the cluster pack values yaml
 */
export type v1VirtualClustersPacksValuesResponse200 = {
  data: V1ClusterVirtualPacksValues;
  status: 200;
};

export type v1VirtualClustersPacksValuesResponseComposite =
  v1VirtualClustersPacksValuesResponse200;

export type v1VirtualClustersPacksValuesResponse =
  v1VirtualClustersPacksValuesResponseComposite & {
    headers: Headers;
  };

export const getV1VirtualClustersPacksValuesUrl = (
  params?: V1VirtualClustersPacksValuesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/virtual/packs/values?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/virtual/packs/values`;
};

export const v1VirtualClustersPacksValues = async (
  params?: V1VirtualClustersPacksValuesParams,
  options?: RequestInit,
): Promise<v1VirtualClustersPacksValuesResponse> => {
  const res = await fetch(getV1VirtualClustersPacksValuesUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VirtualClustersPacksValuesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VirtualClustersPacksValuesResponse;
};

/**
 * @summary Validates virtual cluster create operation
 */
export type v1SpectroClustersVirtualValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersVirtualValidateResponseComposite =
  v1SpectroClustersVirtualValidateResponse200;

export type v1SpectroClustersVirtualValidateResponse =
  v1SpectroClustersVirtualValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVirtualValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/virtual/validate`;
};

export const v1SpectroClustersVirtualValidate = async (
  v1SpectroVirtualClusterEntity?: V1SpectroVirtualClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVirtualValidateResponse> => {
  const res = await fetch(getV1SpectroClustersVirtualValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroVirtualClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVirtualValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVirtualValidateResponse;
};

/**
 * @summary Creates a vSphere cluster
 */
export type v1SpectroClustersVsphereCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersVsphereCreateResponseComposite =
  v1SpectroClustersVsphereCreateResponse201;

export type v1SpectroClustersVsphereCreateResponse =
  v1SpectroClustersVsphereCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere`;
};

export const v1SpectroClustersVsphereCreate = async (
  v1SpectroVsphereClusterEntity?: V1SpectroVsphereClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVsphereCreateResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroVsphereClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVsphereCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVsphereCreateResponse;
};

/**
 * @summary Imports a vSphere cluster
 */
export type v1SpectroClustersVsphereImportResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1SpectroClustersVsphereImportResponseComposite =
  v1SpectroClustersVsphereImportResponse201;

export type v1SpectroClustersVsphereImportResponse =
  v1SpectroClustersVsphereImportResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereImportUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere/import`;
};

export const v1SpectroClustersVsphereImport = async (
  v1SpectroVsphereClusterImportEntity?: V1SpectroVsphereClusterImportEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVsphereImportResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereImportUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroVsphereClusterImportEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVsphereImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVsphereImportResponse;
};

/**
 * @summary Get vSphere cluster estimated rate information
 */
export type v1SpectroClustersVsphereRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersVsphereRateResponseComposite =
  v1SpectroClustersVsphereRateResponse200;

export type v1SpectroClustersVsphereRateResponse =
  v1SpectroClustersVsphereRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereRateUrl = (
  params?: V1SpectroClustersVsphereRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/vsphere/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/vsphere/rate`;
};

export const v1SpectroClustersVsphereRate = async (
  v1SpectroVsphereClusterRateEntity?: V1SpectroVsphereClusterRateEntity,
  params?: V1SpectroClustersVsphereRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVsphereRateResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereRateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroVsphereClusterRateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVsphereRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVsphereRateResponse;
};

/**
 * @summary Validates vSphere cluster create operation
 */
export type v1SpectroClustersVsphereValidateResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersVsphereValidateResponseComposite =
  v1SpectroClustersVsphereValidateResponse200;

export type v1SpectroClustersVsphereValidateResponse =
  v1SpectroClustersVsphereValidateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVsphereValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/spectroclusters/vsphere/validate`;
};

export const v1SpectroClustersVsphereValidate = async (
  v1SpectroVsphereClusterEntity?: V1SpectroVsphereClusterEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVsphereValidateResponse> => {
  const res = await fetch(getV1SpectroClustersVsphereValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroVsphereClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVsphereValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVsphereValidateResponse;
};

/**
 * @summary Deletes the specified cluster
 */
export type v1SpectroClustersDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersDeleteResponseComposite =
  v1SpectroClustersDeleteResponseDefault;

export type v1SpectroClustersDeleteResponse =
  v1SpectroClustersDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersDeleteUrl = (
  uid: string,
  params?: V1SpectroClustersDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}`;
};

export const v1SpectroClustersDelete = async (
  uid: string,
  params?: V1SpectroClustersDeleteParams,
  options?: RequestInit,
): Promise<v1SpectroClustersDeleteResponse> => {
  const res = await fetch(getV1SpectroClustersDeleteUrl(uid, params), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersDeleteResponse;
};

/**
 * @summary Returns the specified cluster
 */
export type v1SpectroClustersGetResponse200 = {
  data: V1SpectroCluster;
  status: 200;
};

export type v1SpectroClustersGetResponseComposite =
  v1SpectroClustersGetResponse200;

export type v1SpectroClustersGetResponse =
  v1SpectroClustersGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetUrl = (
  uid: string,
  params?: V1SpectroClustersGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}`;
};

export const v1SpectroClustersGet = async (
  uid: string,
  params?: V1SpectroClustersGetParams,
  options?: RequestInit,
): Promise<v1SpectroClustersGetResponse> => {
  const res = await fetch(getV1SpectroClustersGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGetResponse;
};

/**
 * @summary Get the cluster asset doc
 */
export type v1SpectroClustersUidAssetsGetResponse200 = {
  data: V1SpectroClusterAssetEntity;
  status: 200;
};

export type v1SpectroClustersUidAssetsGetResponseComposite =
  v1SpectroClustersUidAssetsGetResponse200;

export type v1SpectroClustersUidAssetsGetResponse =
  v1SpectroClustersUidAssetsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidAssetsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets`;
};

export const v1SpectroClustersUidAssetsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidAssetsGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidAssetsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidAssetsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidAssetsGetResponse;
};

/**
 * @summary Associate the assets for the cluster
 */
export type v1SpectroClustersUidAssetsResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidAssetsResponseComposite =
  v1SpectroClustersUidAssetsResponseDefault;

export type v1SpectroClustersUidAssetsResponse =
  v1SpectroClustersUidAssetsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidAssetsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets`;
};

export const v1SpectroClustersUidAssets = async (
  uid: string,
  v1SpectroClusterAssetEntity?: V1SpectroClusterAssetEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidAssetsResponse> => {
  const res = await fetch(getV1SpectroClustersUidAssetsUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterAssetEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidAssetsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidAssetsResponse;
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type v1SpectroClustersUidAdminKubeConfigResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersUidAdminKubeConfigResponseComposite =
  v1SpectroClustersUidAdminKubeConfigResponse200;

export type v1SpectroClustersUidAdminKubeConfigResponse =
  v1SpectroClustersUidAdminKubeConfigResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidAdminKubeConfigUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminKubeconfig`;
};

export const v1SpectroClustersUidAdminKubeConfig = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidAdminKubeConfigResponse> => {
  const res = await fetch(getV1SpectroClustersUidAdminKubeConfigUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidAdminKubeConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidAdminKubeConfigResponse;
};

/**
 * @summary Deletes the cluster's token kube config data
 */
export type v1SpectroClustersUidTokenKubeConfigDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidTokenKubeConfigDeleteResponseComposite =
  v1SpectroClustersUidTokenKubeConfigDeleteResponseDefault;

export type v1SpectroClustersUidTokenKubeConfigDeleteResponse =
  v1SpectroClustersUidTokenKubeConfigDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidTokenKubeConfigDeleteUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const v1SpectroClustersUidTokenKubeConfigDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidTokenKubeConfigDeleteResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidTokenKubeConfigDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidTokenKubeConfigDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidTokenKubeConfigDeleteResponse;
};

/**
 * @summary Returns the specified cluster's token kube config file
 */
export type v1SpectroClustersUidTokenKubeConfigGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersUidTokenKubeConfigGetResponseComposite =
  v1SpectroClustersUidTokenKubeConfigGetResponse200;

export type v1SpectroClustersUidTokenKubeConfigGetResponse =
  v1SpectroClustersUidTokenKubeConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidTokenKubeConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const v1SpectroClustersUidTokenKubeConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidTokenKubeConfigGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidTokenKubeConfigGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidTokenKubeConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidTokenKubeConfigGetResponse;
};

/**
 * @summary Updates the cluster's token kube config data
 */
export type v1SpectroClustersUidTokenKubeConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidTokenKubeConfigUpdateResponseComposite =
  v1SpectroClustersUidTokenKubeConfigUpdateResponseDefault;

export type v1SpectroClustersUidTokenKubeConfigUpdateResponse =
  v1SpectroClustersUidTokenKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidTokenKubeConfigUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/adminTokenKubeconfig`;
};

export const v1SpectroClustersUidTokenKubeConfigUpdate = async (
  uid: string,
  v1SpectroClusterAssetTokenKubeConfig?: V1SpectroClusterAssetTokenKubeConfig,
  options?: RequestInit,
): Promise<v1SpectroClustersUidTokenKubeConfigUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidTokenKubeConfigUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterAssetTokenKubeConfig),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidTokenKubeConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidTokenKubeConfigUpdateResponse;
};

/**
 * @summary Deletes the cluster's frp kube config client data
 */
export type v1SpectroClustersUidFrpKubeConfigDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidFrpKubeConfigDeleteResponseComposite =
  v1SpectroClustersUidFrpKubeConfigDeleteResponseDefault;

export type v1SpectroClustersUidFrpKubeConfigDeleteResponse =
  v1SpectroClustersUidFrpKubeConfigDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidFrpKubeConfigDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const v1SpectroClustersUidFrpKubeConfigDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidFrpKubeConfigDeleteResponse> => {
  const res = await fetch(getV1SpectroClustersUidFrpKubeConfigDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidFrpKubeConfigDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidFrpKubeConfigDeleteResponse;
};

/**
 * @summary Returns the specified cluster's frp kube config file
 */
export type v1SpectroClustersUidFrpKubeConfigGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersUidFrpKubeConfigGetResponseComposite =
  v1SpectroClustersUidFrpKubeConfigGetResponse200;

export type v1SpectroClustersUidFrpKubeConfigGetResponse =
  v1SpectroClustersUidFrpKubeConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidFrpKubeConfigGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const v1SpectroClustersUidFrpKubeConfigGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidFrpKubeConfigGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidFrpKubeConfigGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidFrpKubeConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidFrpKubeConfigGetResponse;
};

/**
 * @summary Updates the cluster's frp kube config data
 */
export type v1SpectroClustersUidFrpKubeConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidFrpKubeConfigUpdateResponseComposite =
  v1SpectroClustersUidFrpKubeConfigUpdateResponseDefault;

export type v1SpectroClustersUidFrpKubeConfigUpdateResponse =
  v1SpectroClustersUidFrpKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidFrpKubeConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/frpKubeconfig`;
};

export const v1SpectroClustersUidFrpKubeConfigUpdate = async (
  uid: string,
  v1SpectroClusterAssetFrpKubeConfig?: V1SpectroClusterAssetFrpKubeConfig,
  options?: RequestInit,
): Promise<v1SpectroClustersUidFrpKubeConfigUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidFrpKubeConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterAssetFrpKubeConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidFrpKubeConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidFrpKubeConfigUpdateResponse;
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type v1SpectroClustersUidKubeConfigResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersUidKubeConfigResponseComposite =
  v1SpectroClustersUidKubeConfigResponse200;

export type v1SpectroClustersUidKubeConfigResponse =
  v1SpectroClustersUidKubeConfigResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigUrl = (
  uid: string,
  params?: V1SpectroClustersUidKubeConfigParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig`;
};

export const v1SpectroClustersUidKubeConfig = async (
  uid: string,
  params?: V1SpectroClustersUidKubeConfigParams,
  options?: RequestInit,
): Promise<v1SpectroClustersUidKubeConfigResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeConfigUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidKubeConfigResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidKubeConfigResponse;
};

/**
 * @summary Updates the cluster's manifest data
 */
export type v1SpectroClustersUidKubeConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidKubeConfigUpdateResponseComposite =
  v1SpectroClustersUidKubeConfigUpdateResponseDefault;

export type v1SpectroClustersUidKubeConfigUpdateResponse =
  v1SpectroClustersUidKubeConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfig`;
};

export const v1SpectroClustersUidKubeConfigUpdate = async (
  uid: string,
  v1SpectroClusterAssetKubeConfig?: V1SpectroClusterAssetKubeConfig,
  options?: RequestInit,
): Promise<v1SpectroClustersUidKubeConfigUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeConfigUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterAssetKubeConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidKubeConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidKubeConfigUpdateResponse;
};

/**
 * @summary Deletes the cluster's kube config client data
 */
export type v1SpectroClustersUidKubeConfigClientDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidKubeConfigClientDeleteResponseComposite =
  v1SpectroClustersUidKubeConfigClientDeleteResponseDefault;

export type v1SpectroClustersUidKubeConfigClientDeleteResponse =
  v1SpectroClustersUidKubeConfigClientDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigClientDeleteUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const v1SpectroClustersUidKubeConfigClientDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidKubeConfigClientDeleteResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidKubeConfigClientDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidKubeConfigClientDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidKubeConfigClientDeleteResponse;
};

/**
 * @summary Returns the specified cluster's kube config client file
 */
export type v1SpectroClustersUidKubeConfigClientGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersUidKubeConfigClientGetResponseComposite =
  v1SpectroClustersUidKubeConfigClientGetResponse200;

export type v1SpectroClustersUidKubeConfigClientGetResponse =
  v1SpectroClustersUidKubeConfigClientGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigClientGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const v1SpectroClustersUidKubeConfigClientGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidKubeConfigClientGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeConfigClientGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidKubeConfigClientGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidKubeConfigClientGetResponse;
};

/**
 * @summary Updates the cluster's kube config client data
 */
export type v1SpectroClustersUidKubeConfigClientUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidKubeConfigClientUpdateResponseComposite =
  v1SpectroClustersUidKubeConfigClientUpdateResponseDefault;

export type v1SpectroClustersUidKubeConfigClientUpdateResponse =
  v1SpectroClustersUidKubeConfigClientUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeConfigClientUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/kubeconfigclient`;
};

export const v1SpectroClustersUidKubeConfigClientUpdate = async (
  uid: string,
  v1SpectroClusterAssetKubeConfigClient?: V1SpectroClusterAssetKubeConfigClient,
  options?: RequestInit,
): Promise<v1SpectroClustersUidKubeConfigClientUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidKubeConfigClientUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterAssetKubeConfigClient),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidKubeConfigClientUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidKubeConfigClientUpdateResponse;
};

/**
 * @summary Returns the specified cluster's manifest data
 */
export type v1SpectroClustersUidManifestGetResponse200 = {
  data: string;
  status: 200;
};

export type v1SpectroClustersUidManifestGetResponseComposite =
  v1SpectroClustersUidManifestGetResponse200;

export type v1SpectroClustersUidManifestGetResponse =
  v1SpectroClustersUidManifestGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/manifest`;
};

export const v1SpectroClustersUidManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidManifestGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidManifestGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidManifestGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidManifestGetResponse;
};

/**
 * @summary Updates the specified cluster's manifest data
 */
export type v1SpectroClustersUidManifestUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidManifestUpdateResponseComposite =
  v1SpectroClustersUidManifestUpdateResponseDefault;

export type v1SpectroClustersUidManifestUpdateResponse =
  v1SpectroClustersUidManifestUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidManifestUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/assets/manifest`;
};

export const v1SpectroClustersUidManifestUpdate = async (
  uid: string,
  v1SpectroClusterAssetManifest?: V1SpectroClusterAssetManifest,
  options?: RequestInit,
): Promise<v1SpectroClustersUidManifestUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidManifestUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterAssetManifest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidManifestUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidManifestUpdateResponse;
};

/**
 * @summary Updates the specified cluster meta attribute
 */
export type v1SpectroClustersUidClusterMetaAttributeUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidClusterMetaAttributeUpdateResponseComposite =
  v1SpectroClustersUidClusterMetaAttributeUpdateResponseDefault;

export type v1SpectroClustersUidClusterMetaAttributeUpdateResponse =
  v1SpectroClustersUidClusterMetaAttributeUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidClusterMetaAttributeUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/clusterMetaAttribute`;
};

export const v1SpectroClustersUidClusterMetaAttributeUpdate = async (
  uid: string,
  v1ClusterMetaAttributeEntity?: V1ClusterMetaAttributeEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidClusterMetaAttributeUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidClusterMetaAttributeUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterMetaAttributeEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidClusterMetaAttributeUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidClusterMetaAttributeUpdateResponse;
};

/**
 * @summary Updates the specified cluster controlPlane health check timeout
 */
export type v1ControlPlaneHealthCheckTimeoutUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ControlPlaneHealthCheckTimeoutUpdateResponseComposite =
  v1ControlPlaneHealthCheckTimeoutUpdateResponseDefault;

export type v1ControlPlaneHealthCheckTimeoutUpdateResponse =
  v1ControlPlaneHealthCheckTimeoutUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ControlPlaneHealthCheckTimeoutUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/controlPlaneHealthCheckTimeout`;
};

export const v1ControlPlaneHealthCheckTimeoutUpdate = async (
  uid: string,
  v1ControlPlaneHealthCheckTimeoutEntity?: V1ControlPlaneHealthCheckTimeoutEntity,
  options?: RequestInit,
): Promise<v1ControlPlaneHealthCheckTimeoutUpdateResponse> => {
  const res = await fetch(getV1ControlPlaneHealthCheckTimeoutUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ControlPlaneHealthCheckTimeoutEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ControlPlaneHealthCheckTimeoutUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ControlPlaneHealthCheckTimeoutUpdateResponse;
};

/**
 * @summary Updates the specified cluster host config
 */
export type v1HostClusterConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1HostClusterConfigUpdateResponseComposite =
  v1HostClusterConfigUpdateResponseDefault;

export type v1HostClusterConfigUpdateResponse =
  v1HostClusterConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1HostClusterConfigUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/hostCluster`;
};

export const v1HostClusterConfigUpdate = async (
  uid: string,
  v1HostClusterConfigEntity?: V1HostClusterConfigEntity,
  options?: RequestInit,
): Promise<v1HostClusterConfigUpdateResponse> => {
  const res = await fetch(getV1HostClusterConfigUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1HostClusterConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1HostClusterConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1HostClusterConfigUpdateResponse;
};

/**
 * @summary Updates the specified cluster Life cycle configuration
 */
export type v1SpectroClustersUidLifecycleConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidLifecycleConfigUpdateResponseComposite =
  v1SpectroClustersUidLifecycleConfigUpdateResponseDefault;

export type v1SpectroClustersUidLifecycleConfigUpdateResponse =
  v1SpectroClustersUidLifecycleConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidLifecycleConfigUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/lifecycleConfig`;
};

export const v1SpectroClustersUidLifecycleConfigUpdate = async (
  uid: string,
  v1LifecycleConfigEntity?: V1LifecycleConfigEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidLifecycleConfigUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidLifecycleConfigUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1LifecycleConfigEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidLifecycleConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidLifecycleConfigUpdateResponse;
};

/**
 * @summary Updates the specified cluster OS patch configuration
 */
export type v1SpectroClustersUidOsPatchUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidOsPatchUpdateResponseComposite =
  v1SpectroClustersUidOsPatchUpdateResponseDefault;

export type v1SpectroClustersUidOsPatchUpdateResponse =
  v1SpectroClustersUidOsPatchUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOsPatchUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/clusterConfig/osPatch`;
};

export const v1SpectroClustersUidOsPatchUpdate = async (
  uid: string,
  v1OsPatchEntity?: V1OsPatchEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidOsPatchUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidOsPatchUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1OsPatchEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidOsPatchUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidOsPatchUpdateResponse;
};

/**
 * @summary Retrieves namespaces for the specified cluster
 */
export type v1SpectroClustersUidConfigNamespacesGetResponse200 = {
  data: V1ClusterNamespaceResources;
  status: 200;
};

export type v1SpectroClustersUidConfigNamespacesGetResponseComposite =
  v1SpectroClustersUidConfigNamespacesGetResponse200;

export type v1SpectroClustersUidConfigNamespacesGetResponse =
  v1SpectroClustersUidConfigNamespacesGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces`;
};

export const v1SpectroClustersUidConfigNamespacesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigNamespacesGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidConfigNamespacesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigNamespacesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigNamespacesGetResponse;
};

/**
 * @summary Updates namespaces for the specified cluster
 */
export type v1SpectroClustersUidConfigNamespacesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidConfigNamespacesUpdateResponseComposite =
  v1SpectroClustersUidConfigNamespacesUpdateResponseDefault;

export type v1SpectroClustersUidConfigNamespacesUpdateResponse =
  v1SpectroClustersUidConfigNamespacesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesUpdateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces`;
};

export const v1SpectroClustersUidConfigNamespacesUpdate = async (
  uid: string,
  v1ClusterNamespaceResourcesUpdateEntity?: V1ClusterNamespaceResourcesUpdateEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigNamespacesUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigNamespacesUpdateUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterNamespaceResourcesUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigNamespacesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigNamespacesUpdateResponse;
};

/**
 * @summary Retrieves the specified namespace of the cluster
 */
export type v1SpectroClustersUidConfigNamespacesUidGetResponse200 = {
  data: V1ClusterNamespaceResource;
  status: 200;
};

export type v1SpectroClustersUidConfigNamespacesUidGetResponseComposite =
  v1SpectroClustersUidConfigNamespacesUidGetResponse200;

export type v1SpectroClustersUidConfigNamespacesUidGetResponse =
  v1SpectroClustersUidConfigNamespacesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesUidGetUrl = (
  uid: string,
  namespaceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces/${namespaceUid}`;
};

export const v1SpectroClustersUidConfigNamespacesUidGet = async (
  uid: string,
  namespaceUid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigNamespacesUidGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigNamespacesUidGetUrl(uid, namespaceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigNamespacesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigNamespacesUidGetResponse;
};

/**
 * @summary Updates the specified namespace of the cluster
 */
export type v1SpectroClustersUidConfigNamespacesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidConfigNamespacesUidUpdateResponseComposite =
  v1SpectroClustersUidConfigNamespacesUidUpdateResponseDefault;

export type v1SpectroClustersUidConfigNamespacesUidUpdateResponse =
  v1SpectroClustersUidConfigNamespacesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigNamespacesUidUpdateUrl = (
  uid: string,
  namespaceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/namespaces/${namespaceUid}`;
};

export const v1SpectroClustersUidConfigNamespacesUidUpdate = async (
  uid: string,
  namespaceUid: string,
  v1ClusterNamespaceResourceInputEntity?: V1ClusterNamespaceResourceInputEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigNamespacesUidUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigNamespacesUidUpdateUrl(uid, namespaceUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterNamespaceResourceInputEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigNamespacesUidUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigNamespacesUidUpdateResponse;
};

/**
 * @summary Retrieves RBAC information for the specified cluster
 */
export type v1SpectroClustersUidConfigRbacsGetResponse200 = {
  data: V1ClusterRbacs;
  status: 200;
};

export type v1SpectroClustersUidConfigRbacsGetResponseComposite =
  v1SpectroClustersUidConfigRbacsGetResponse200;

export type v1SpectroClustersUidConfigRbacsGetResponse =
  v1SpectroClustersUidConfigRbacsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs`;
};

export const v1SpectroClustersUidConfigRbacsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigRbacsGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidConfigRbacsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigRbacsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigRbacsGetResponse;
};

/**
 * @summary Updates RBAC information for the specified cluster
 */
export type v1SpectroClustersUidConfigRbacsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidConfigRbacsUpdateResponseComposite =
  v1SpectroClustersUidConfigRbacsUpdateResponseDefault;

export type v1SpectroClustersUidConfigRbacsUpdateResponse =
  v1SpectroClustersUidConfigRbacsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs`;
};

export const v1SpectroClustersUidConfigRbacsUpdate = async (
  uid: string,
  v1ClusterRbacResourcesUpdateEntity?: V1ClusterRbacResourcesUpdateEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigRbacsUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidConfigRbacsUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterRbacResourcesUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigRbacsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigRbacsUpdateResponse;
};

/**
 * @summary Retrieves the specified RBAC of the cluster
 */
export type v1SpectroClustersUidConfigRbacsUidGetResponse200 = {
  data: V1ClusterRbac;
  status: 200;
};

export type v1SpectroClustersUidConfigRbacsUidGetResponseComposite =
  v1SpectroClustersUidConfigRbacsUidGetResponse200;

export type v1SpectroClustersUidConfigRbacsUidGetResponse =
  v1SpectroClustersUidConfigRbacsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsUidGetUrl = (
  uid: string,
  rbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs/${rbacUid}`;
};

export const v1SpectroClustersUidConfigRbacsUidGet = async (
  uid: string,
  rbacUid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigRbacsUidGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigRbacsUidGetUrl(uid, rbacUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigRbacsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigRbacsUidGetResponse;
};

/**
 * @summary Updates the specified RBAC of the cluster
 */
export type v1SpectroClustersUidConfigRbacsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidConfigRbacsUidUpdateResponseComposite =
  v1SpectroClustersUidConfigRbacsUidUpdateResponseDefault;

export type v1SpectroClustersUidConfigRbacsUidUpdateResponse =
  v1SpectroClustersUidConfigRbacsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidConfigRbacsUidUpdateUrl = (
  uid: string,
  rbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/config/rbacs/${rbacUid}`;
};

export const v1SpectroClustersUidConfigRbacsUidUpdate = async (
  uid: string,
  rbacUid: string,
  v1ClusterRbacInputEntity?: V1ClusterRbacInputEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidConfigRbacsUidUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidConfigRbacsUidUpdateUrl(uid, rbacUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterRbacInputEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidConfigRbacsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidConfigRbacsUidUpdateResponse;
};

/**
 * @summary Download the specified cluster
 */
export type v1SpectroClustersUidDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersUidDownloadResponseComposite =
  v1SpectroClustersUidDownloadResponse200;

export type v1SpectroClustersUidDownloadResponse =
  v1SpectroClustersUidDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/download`;
};

export const v1SpectroClustersUidDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidDownloadResponse> => {
  const res = await fetch(getV1SpectroClustersUidDownloadUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidDownloadResponse;
};

/**
 * @summary Retrieves a list of edge host of edge-native cluster
 */
export type v1EdgeNativeClustersHostsListResponse200 = {
  data: V1EdgeHostDevices;
  status: 200;
};

export type v1EdgeNativeClustersHostsListResponseComposite =
  v1EdgeNativeClustersHostsListResponse200;

export type v1EdgeNativeClustersHostsListResponse =
  v1EdgeNativeClustersHostsListResponseComposite & {
    headers: Headers;
  };

export const getV1EdgeNativeClustersHostsListUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/edge-native/edgeHosts`;
};

export const v1EdgeNativeClustersHostsList = async (
  uid: string,
  options?: RequestInit,
): Promise<v1EdgeNativeClustersHostsListResponse> => {
  const res = await fetch(getV1EdgeNativeClustersHostsListUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EdgeNativeClustersHostsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EdgeNativeClustersHostsListResponse;
};

/**
 * @summary reset the edge clusters by deleting machine pools and conditions
 */
export type v1SpectroClustersUidEdgeResetResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidEdgeResetResponseComposite =
  v1SpectroClustersUidEdgeResetResponseDefault;

export type v1SpectroClustersUidEdgeResetResponse =
  v1SpectroClustersUidEdgeResetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidEdgeResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/edge/reset`;
};

export const v1SpectroClustersUidEdgeReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidEdgeResetResponse> => {
  const res = await fetch(getV1SpectroClustersUidEdgeResetUrl(uid), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidEdgeResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidEdgeResetResponse;
};

/**
 * @summary Reset cluster backup schedule settings
 */
export type v1ClusterFeatureBackupScheduleResetResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureBackupScheduleResetResponseComposite =
  v1ClusterFeatureBackupScheduleResetResponseDefault;

export type v1ClusterFeatureBackupScheduleResetResponse =
  v1ClusterFeatureBackupScheduleResetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupScheduleResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const v1ClusterFeatureBackupScheduleReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupScheduleResetResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupScheduleResetUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupScheduleResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupScheduleResetResponse;
};

/**
 * @summary Returns the cluster backup result
 */
export type v1ClusterFeatureBackupGetResponse200 = {
  data: V1ClusterBackup;
  status: 200;
};

export type v1ClusterFeatureBackupGetResponseComposite =
  v1ClusterFeatureBackupGetResponse200;

export type v1ClusterFeatureBackupGetResponse =
  v1ClusterFeatureBackupGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupGetUrl = (
  uid: string,
  params?: V1ClusterFeatureBackupGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const v1ClusterFeatureBackupGet = async (
  uid: string,
  params?: V1ClusterFeatureBackupGetParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupGetResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupGetResponse;
};

/**
 * @summary Create cluster backup settings
 */
export type v1ClusterFeatureBackupCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterFeatureBackupCreateResponseComposite =
  v1ClusterFeatureBackupCreateResponse201;

export type v1ClusterFeatureBackupCreateResponse =
  v1ClusterFeatureBackupCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const v1ClusterFeatureBackupCreate = async (
  uid: string,
  v1ClusterBackupConfig?: V1ClusterBackupConfig,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterBackupConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupCreateResponse;
};

/**
 * @summary Update cluster backup settings
 */
export type v1ClusterFeatureBackupUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureBackupUpdateResponseComposite =
  v1ClusterFeatureBackupUpdateResponseDefault;

export type v1ClusterFeatureBackupUpdateResponse =
  v1ClusterFeatureBackupUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup`;
};

export const v1ClusterFeatureBackupUpdate = async (
  uid: string,
  v1ClusterBackupConfig?: V1ClusterBackupConfig,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterBackupConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupUpdateResponse;
};

/**
 * @summary Create on demand cluster backup
 */
export type v1ClusterFeatureBackupOnDemandCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterFeatureBackupOnDemandCreateResponseComposite =
  v1ClusterFeatureBackupOnDemandCreateResponse201;

export type v1ClusterFeatureBackupOnDemandCreateResponse =
  v1ClusterFeatureBackupOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup/onDemand`;
};

export const v1ClusterFeatureBackupOnDemandCreate = async (
  uid: string,
  v1ClusterBackupConfig?: V1ClusterBackupConfig,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupOnDemandCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureBackupOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterBackupConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupOnDemandCreateResponse;
};

/**
 * @summary Delete cluster backup
 */
export type v1ClusterFeatureBackupDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureBackupDeleteResponseComposite =
  v1ClusterFeatureBackupDeleteResponseDefault;

export type v1ClusterFeatureBackupDeleteResponse =
  v1ClusterFeatureBackupDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureBackupDeleteUrl = (
  uid: string,
  backupName: string,
  requestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/backup/${backupName}/request/${requestUid}`;
};

export const v1ClusterFeatureBackupDelete = async (
  uid: string,
  backupName: string,
  requestUid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureBackupDeleteResponse> => {
  const res = await fetch(
    getV1ClusterFeatureBackupDeleteUrl(uid, backupName, requestUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureBackupDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureBackupDeleteResponse;
};

/**
 * @summary Returns the compliance scan of cluster, if driverType is provided then specific status of driverType will be returned
 */
export type v1ClusterFeatureComplianceScanGetResponse200 = {
  data: V1ClusterComplianceScan;
  status: 200;
};

export type v1ClusterFeatureComplianceScanGetResponseComposite =
  v1ClusterFeatureComplianceScanGetResponse200;

export type v1ClusterFeatureComplianceScanGetResponse =
  v1ClusterFeatureComplianceScanGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const v1ClusterFeatureComplianceScanGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureComplianceScanGetResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureComplianceScanGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureComplianceScanGetResponse;
};

/**
 * @summary Create cluster compliance scan
 */
export type v1ClusterFeatureComplianceScanCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterFeatureComplianceScanCreateResponseComposite =
  v1ClusterFeatureComplianceScanCreateResponse201;

export type v1ClusterFeatureComplianceScanCreateResponse =
  v1ClusterFeatureComplianceScanCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const v1ClusterFeatureComplianceScanCreate = async (
  uid: string,
  v1ClusterComplianceScheduleConfig?: V1ClusterComplianceScheduleConfig,
  options?: RequestInit,
): Promise<v1ClusterFeatureComplianceScanCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterComplianceScheduleConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureComplianceScanCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureComplianceScanCreateResponse;
};

/**
 * @summary Update cluster compliance scan settings
 */
export type v1ClusterFeatureComplianceScanUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureComplianceScanUpdateResponseComposite =
  v1ClusterFeatureComplianceScanUpdateResponseDefault;

export type v1ClusterFeatureComplianceScanUpdateResponse =
  v1ClusterFeatureComplianceScanUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan`;
};

export const v1ClusterFeatureComplianceScanUpdate = async (
  uid: string,
  v1ClusterComplianceScheduleConfig?: V1ClusterComplianceScheduleConfig,
  options?: RequestInit,
): Promise<v1ClusterFeatureComplianceScanUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterComplianceScheduleConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureComplianceScanUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureComplianceScanUpdateResponse;
};

/**
 * @summary Returns the compliance scan log by cluster uid and driver type
 */
export type v1ClusterFeatureComplianceScanLogsGetResponse200 = {
  data: V1ClusterComplianceScanLogs;
  status: 200;
};

export type v1ClusterFeatureComplianceScanLogsGetResponseComposite =
  v1ClusterFeatureComplianceScanLogsGetResponse200;

export type v1ClusterFeatureComplianceScanLogsGetResponse =
  v1ClusterFeatureComplianceScanLogsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanLogsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers`;
};

export const v1ClusterFeatureComplianceScanLogsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureComplianceScanLogsGetResponse> => {
  const res = await fetch(getV1ClusterFeatureComplianceScanLogsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureComplianceScanLogsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureComplianceScanLogsGetResponse;
};

/**
 * @summary Update the KubeBench compliance scan log by uid
 */
export type v1ClusterFeatureScanKubeBenchLogUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureScanKubeBenchLogUpdateResponseComposite =
  v1ClusterFeatureScanKubeBenchLogUpdateResponseDefault;

export type v1ClusterFeatureScanKubeBenchLogUpdateResponse =
  v1ClusterFeatureScanKubeBenchLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanKubeBenchLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/kubeBench`;
};

export const v1ClusterFeatureScanKubeBenchLogUpdate = async (
  uid: string,
  v1KubeBenchEntity?: V1KubeBenchEntity,
  options?: RequestInit,
): Promise<v1ClusterFeatureScanKubeBenchLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanKubeBenchLogUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1KubeBenchEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureScanKubeBenchLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureScanKubeBenchLogUpdateResponse;
};

/**
 * @summary Update the KubeHunter compliance scan log by uid
 */
export type v1ClusterFeatureScanKubeHunterLogUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureScanKubeHunterLogUpdateResponseComposite =
  v1ClusterFeatureScanKubeHunterLogUpdateResponseDefault;

export type v1ClusterFeatureScanKubeHunterLogUpdateResponse =
  v1ClusterFeatureScanKubeHunterLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanKubeHunterLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/kubeHunter`;
};

export const v1ClusterFeatureScanKubeHunterLogUpdate = async (
  uid: string,
  v1KubeHunterEntity?: V1KubeHunterEntity,
  options?: RequestInit,
): Promise<v1ClusterFeatureScanKubeHunterLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanKubeHunterLogUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1KubeHunterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureScanKubeHunterLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureScanKubeHunterLogUpdateResponse;
};

/**
 * @summary Update the Sonobuoy compliance scan log by uid
 */
export type v1ClusterFeatureScanSonobuoyLogUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureScanSonobuoyLogUpdateResponseComposite =
  v1ClusterFeatureScanSonobuoyLogUpdateResponseDefault;

export type v1ClusterFeatureScanSonobuoyLogUpdateResponse =
  v1ClusterFeatureScanSonobuoyLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanSonobuoyLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/sonobuoy`;
};

export const v1ClusterFeatureScanSonobuoyLogUpdate = async (
  uid: string,
  v1SonobuoyEntity?: V1SonobuoyEntity,
  options?: RequestInit,
): Promise<v1ClusterFeatureScanSonobuoyLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanSonobuoyLogUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SonobuoyEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureScanSonobuoyLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureScanSonobuoyLogUpdateResponse;
};

/**
 * @summary Update the Syft compliance scan log by uid
 */
export type v1ClusterFeatureScanSyftLogUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureScanSyftLogUpdateResponseComposite =
  v1ClusterFeatureScanSyftLogUpdateResponseDefault;

export type v1ClusterFeatureScanSyftLogUpdateResponse =
  v1ClusterFeatureScanSyftLogUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureScanSyftLogUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/drivers/syft`;
};

export const v1ClusterFeatureScanSyftLogUpdate = async (
  uid: string,
  v1SyftEntity?: V1SyftEntity,
  options?: RequestInit,
): Promise<v1ClusterFeatureScanSyftLogUpdateResponse> => {
  const res = await fetch(getV1ClusterFeatureScanSyftLogUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SyftEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureScanSyftLogUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureScanSyftLogUpdateResponse;
};

/**
 * @summary Delete the compliance scan log by uid
 */
export type v1ClusterFeatureComplianceScanLogDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1ClusterFeatureComplianceScanLogDeleteResponseComposite =
  v1ClusterFeatureComplianceScanLogDeleteResponseDefault;

export type v1ClusterFeatureComplianceScanLogDeleteResponse =
  v1ClusterFeatureComplianceScanLogDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanLogDeleteUrl = (
  uid: string,
  logUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}`;
};

export const v1ClusterFeatureComplianceScanLogDelete = async (
  uid: string,
  logUid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureComplianceScanLogDeleteResponse> => {
  const res = await fetch(
    getV1ClusterFeatureComplianceScanLogDeleteUrl(uid, logUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureComplianceScanLogDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureComplianceScanLogDeleteResponse;
};

/**
 * @summary Returns the KubeBench compliance scan log by uid
 */
export type v1ClusterFeatureKubeBenchLogGetResponse200 = {
  data: V1ClusterScanLogKubeBench;
  status: 200;
};

export type v1ClusterFeatureKubeBenchLogGetResponseComposite =
  v1ClusterFeatureKubeBenchLogGetResponse200;

export type v1ClusterFeatureKubeBenchLogGetResponse =
  v1ClusterFeatureKubeBenchLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureKubeBenchLogGetUrl = (
  uid: string,
  logUid: string,
  params?: V1ClusterFeatureKubeBenchLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeBench?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeBench`;
};

export const v1ClusterFeatureKubeBenchLogGet = async (
  uid: string,
  logUid: string,
  params?: V1ClusterFeatureKubeBenchLogGetParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureKubeBenchLogGetResponse> => {
  const res = await fetch(
    getV1ClusterFeatureKubeBenchLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureKubeBenchLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureKubeBenchLogGetResponse;
};

/**
 * @summary Returns the KubeHunter compliance scan log by uid
 */
export type v1ClusterFeatureKubeHunterLogGetResponse200 = {
  data: V1ClusterScanLogKubeHunter;
  status: 200;
};

export type v1ClusterFeatureKubeHunterLogGetResponseComposite =
  v1ClusterFeatureKubeHunterLogGetResponse200;

export type v1ClusterFeatureKubeHunterLogGetResponse =
  v1ClusterFeatureKubeHunterLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureKubeHunterLogGetUrl = (
  uid: string,
  logUid: string,
  params?: V1ClusterFeatureKubeHunterLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeHunter?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/kubeHunter`;
};

export const v1ClusterFeatureKubeHunterLogGet = async (
  uid: string,
  logUid: string,
  params?: V1ClusterFeatureKubeHunterLogGetParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureKubeHunterLogGetResponse> => {
  const res = await fetch(
    getV1ClusterFeatureKubeHunterLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureKubeHunterLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureKubeHunterLogGetResponse;
};

/**
 * @summary Returns the Sonobuoy compliance scan log by uid
 */
export type v1ClusterFeatureSonobuoyLogGetResponse200 = {
  data: V1ClusterScanLogSonobuoy;
  status: 200;
};

export type v1ClusterFeatureSonobuoyLogGetResponseComposite =
  v1ClusterFeatureSonobuoyLogGetResponse200;

export type v1ClusterFeatureSonobuoyLogGetResponse =
  v1ClusterFeatureSonobuoyLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureSonobuoyLogGetUrl = (
  uid: string,
  logUid: string,
  params?: V1ClusterFeatureSonobuoyLogGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/sonobuoy?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/sonobuoy`;
};

export const v1ClusterFeatureSonobuoyLogGet = async (
  uid: string,
  logUid: string,
  params?: V1ClusterFeatureSonobuoyLogGetParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureSonobuoyLogGetResponse> => {
  const res = await fetch(
    getV1ClusterFeatureSonobuoyLogGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureSonobuoyLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureSonobuoyLogGetResponse;
};

/**
 * @summary Returns the Syft compliance scan log by uid
 */
export type v1ClusterFeatureSyftLogGetResponse200 = {
  data: V1ClusterScanLogSyft;
  status: 200;
};

export type v1ClusterFeatureSyftLogGetResponseComposite =
  v1ClusterFeatureSyftLogGetResponse200;

export type v1ClusterFeatureSyftLogGetResponse =
  v1ClusterFeatureSyftLogGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureSyftLogGetUrl = (
  uid: string,
  logUid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft`;
};

export const v1ClusterFeatureSyftLogGet = async (
  uid: string,
  logUid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureSyftLogGetResponse> => {
  const res = await fetch(getV1ClusterFeatureSyftLogGetUrl(uid, logUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureSyftLogGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureSyftLogGetResponse;
};

/**
 * @summary Returns the image sbom of syft scan log of cluster
 */
export type v1SyftScanLogImageSBOMGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SyftScanLogImageSBOMGetResponseComposite =
  v1SyftScanLogImageSBOMGetResponse200;

export type v1SyftScanLogImageSBOMGetResponse =
  v1SyftScanLogImageSBOMGetResponseComposite & {
    headers: Headers;
  };

export const getV1SyftScanLogImageSBOMGetUrl = (
  uid: string,
  logUid: string,
  params: V1SyftScanLogImageSBOMGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft/sbom?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/syft/sbom`;
};

export const v1SyftScanLogImageSBOMGet = async (
  uid: string,
  logUid: string,
  params: V1SyftScanLogImageSBOMGetParams,
  options?: RequestInit,
): Promise<v1SyftScanLogImageSBOMGetResponse> => {
  const res = await fetch(
    getV1SyftScanLogImageSBOMGetUrl(uid, logUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SyftScanLogImageSBOMGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SyftScanLogImageSBOMGetResponse;
};

/**
 * @summary Downloads the driver cluster logs
 */
export type v1ClusterFeatureDriverLogDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type v1ClusterFeatureDriverLogDownloadResponseComposite =
  v1ClusterFeatureDriverLogDownloadResponse200;

export type v1ClusterFeatureDriverLogDownloadResponse =
  v1ClusterFeatureDriverLogDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureDriverLogDownloadUrl = (
  uid: string,
  logUid: string,
  driver: "kubeBench" | "kubeHunter" | "sonobuoy" | "syft",
  params?: V1ClusterFeatureDriverLogDownloadParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/${driver}/download?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/logs/${logUid}/drivers/${driver}/download`;
};

export const v1ClusterFeatureDriverLogDownload = async (
  uid: string,
  logUid: string,
  driver: "kubeBench" | "kubeHunter" | "sonobuoy" | "syft",
  params?: V1ClusterFeatureDriverLogDownloadParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureDriverLogDownloadResponse> => {
  const res = await fetch(
    getV1ClusterFeatureDriverLogDownloadUrl(uid, logUid, driver, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureDriverLogDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureDriverLogDownloadResponse;
};

/**
 * @summary Create on demand cluster compliance scan
 */
export type v1ClusterFeatureComplianceScanOnDemandCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterFeatureComplianceScanOnDemandCreateResponseComposite =
  v1ClusterFeatureComplianceScanOnDemandCreateResponse201;

export type v1ClusterFeatureComplianceScanOnDemandCreateResponse =
  v1ClusterFeatureComplianceScanOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureComplianceScanOnDemandCreateUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/complianceScan/onDemand`;
};

export const v1ClusterFeatureComplianceScanOnDemandCreate = async (
  uid: string,
  v1ClusterComplianceOnDemandConfig?: V1ClusterComplianceOnDemandConfig,
  options?: RequestInit,
): Promise<v1ClusterFeatureComplianceScanOnDemandCreateResponse> => {
  const res = await fetch(
    getV1ClusterFeatureComplianceScanOnDemandCreateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterComplianceOnDemandConfig),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureComplianceScanOnDemandCreateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureComplianceScanOnDemandCreateResponse;
};

/**
 * @summary Get the installed helm charts of a specified cluster
 */
export type v1ClusterFeatureHelmChartsGetResponse200 = {
  data: V1ClusterHelmCharts;
  status: 200;
};

export type v1ClusterFeatureHelmChartsGetResponseComposite =
  v1ClusterFeatureHelmChartsGetResponse200;

export type v1ClusterFeatureHelmChartsGetResponse =
  v1ClusterFeatureHelmChartsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureHelmChartsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/helmCharts`;
};

export const v1ClusterFeatureHelmChartsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureHelmChartsGetResponse> => {
  const res = await fetch(getV1ClusterFeatureHelmChartsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureHelmChartsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureHelmChartsGetResponse;
};

/**
 * @summary Get the log fetcher for cluster
 */
export type v1ClusterFeatureLogFetcherGetResponse200 = {
  data: V1ClusterLogFetcher;
  status: 200;
};

export type v1ClusterFeatureLogFetcherGetResponseComposite =
  v1ClusterFeatureLogFetcherGetResponse200;

export type v1ClusterFeatureLogFetcherGetResponse =
  v1ClusterFeatureLogFetcherGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherGetUrl = (
  uid: string,
  params?: V1ClusterFeatureLogFetcherGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher`;
};

export const v1ClusterFeatureLogFetcherGet = async (
  uid: string,
  params?: V1ClusterFeatureLogFetcherGetParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureLogFetcherGetResponse> => {
  const res = await fetch(getV1ClusterFeatureLogFetcherGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureLogFetcherGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureLogFetcherGetResponse;
};

/**
 * @summary Create the log fetcher for cluster
 */
export type v1ClusterFeatureLogFetcherCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterFeatureLogFetcherCreateResponseComposite =
  v1ClusterFeatureLogFetcherCreateResponse201;

export type v1ClusterFeatureLogFetcherCreateResponse =
  v1ClusterFeatureLogFetcherCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureLogFetcherCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/logFetcher`;
};

export const v1ClusterFeatureLogFetcherCreate = async (
  uid: string,
  v1ClusterLogFetcherRequest?: V1ClusterLogFetcherRequest,
  options?: RequestInit,
): Promise<v1ClusterFeatureLogFetcherCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureLogFetcherCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterLogFetcherRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureLogFetcherCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureLogFetcherCreateResponse;
};

/**
 * @summary Get the installed manifests of a specified cluster
 */
export type v1ClusterFeatureManifestsGetResponse200 = {
  data: V1ClusterManifests;
  status: 200;
};

export type v1ClusterFeatureManifestsGetResponseComposite =
  v1ClusterFeatureManifestsGetResponse200;

export type v1ClusterFeatureManifestsGetResponse =
  v1ClusterFeatureManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureManifestsGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/manifests`;
};

export const v1ClusterFeatureManifestsGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterFeatureManifestsGetResponse> => {
  const res = await fetch(getV1ClusterFeatureManifestsGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureManifestsGetResponse;
};

/**
 * @summary Returns the cluster restore of cluster
 */
export type v1ClusterFeatureRestoreGetResponse200 = {
  data: V1ClusterRestore;
  status: 200;
};

export type v1ClusterFeatureRestoreGetResponseComposite =
  v1ClusterFeatureRestoreGetResponse200;

export type v1ClusterFeatureRestoreGetResponse =
  v1ClusterFeatureRestoreGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureRestoreGetUrl = (
  uid: string,
  params?: V1ClusterFeatureRestoreGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore`;
};

export const v1ClusterFeatureRestoreGet = async (
  uid: string,
  params?: V1ClusterFeatureRestoreGetParams,
  options?: RequestInit,
): Promise<v1ClusterFeatureRestoreGetResponse> => {
  const res = await fetch(getV1ClusterFeatureRestoreGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureRestoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureRestoreGetResponse;
};

/**
 * @summary Create on demand cluster restore
 */
export type v1ClusterFeatureRestoreOnDemandCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1ClusterFeatureRestoreOnDemandCreateResponseComposite =
  v1ClusterFeatureRestoreOnDemandCreateResponse201;

export type v1ClusterFeatureRestoreOnDemandCreateResponse =
  v1ClusterFeatureRestoreOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterFeatureRestoreOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/features/restore/onDemand`;
};

export const v1ClusterFeatureRestoreOnDemandCreate = async (
  uid: string,
  v1ClusterRestoreConfig?: V1ClusterRestoreConfig,
  options?: RequestInit,
): Promise<v1ClusterFeatureRestoreOnDemandCreateResponse> => {
  const res = await fetch(getV1ClusterFeatureRestoreOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterRestoreConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterFeatureRestoreOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterFeatureRestoreOnDemandCreateResponse;
};

/**
 * @summary Update specific cluster heartbeat
 */
export type v1SpectroClustersUidHeartbeatUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidHeartbeatUpdateResponseComposite =
  v1SpectroClustersUidHeartbeatUpdateResponseDefault;

export type v1SpectroClustersUidHeartbeatUpdateResponse =
  v1SpectroClustersUidHeartbeatUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidHeartbeatUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/heartbeat`;
};

export const v1SpectroClustersUidHeartbeatUpdate = async (
  uid: string,
  v1SpectroClusterHeartbeat?: V1SpectroClusterHeartbeat,
  options?: RequestInit,
): Promise<v1SpectroClustersUidHeartbeatUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidHeartbeatUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterHeartbeat),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidHeartbeatUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidHeartbeatUpdateResponse;
};

/**
 * @summary Returns the metadata of all hybrid pools associated with the specified cluster
 */
export type v1SpectroClustersGetHybridPoolsMetadataResponse200 = {
  data: V1SpectroClusterHybridPoolsMetadata;
  status: 200;
};

export type v1SpectroClustersGetHybridPoolsMetadataResponseComposite =
  v1SpectroClustersGetHybridPoolsMetadataResponse200;

export type v1SpectroClustersGetHybridPoolsMetadataResponse =
  v1SpectroClustersGetHybridPoolsMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetHybridPoolsMetadataUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/hybridPools/metadata`;
};

export const v1SpectroClustersGetHybridPoolsMetadata = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersGetHybridPoolsMetadataResponse> => {
  const res = await fetch(getV1SpectroClustersGetHybridPoolsMetadataUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGetHybridPoolsMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGetHybridPoolsMetadataResponse;
};

/**
 * @summary Update specific cluster hybrid settings
 */
export type v1SpectroClustersUidHybridSettingsResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidHybridSettingsResponseComposite =
  v1SpectroClustersUidHybridSettingsResponseDefault;

export type v1SpectroClustersUidHybridSettingsResponse =
  v1SpectroClustersUidHybridSettingsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidHybridSettingsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/hybridSettings`;
};

export const v1SpectroClustersUidHybridSettings = async (
  uid: string,
  v1ClusterHybridSettingsEntity?: V1ClusterHybridSettingsEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidHybridSettingsResponse> => {
  const res = await fetch(getV1SpectroClustersUidHybridSettingsUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterHybridSettingsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidHybridSettingsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidHybridSettingsResponse;
};

/**
 * @summary Returns the specified cluster's import manifest file
 */
export type v1SpectroClustersUidImportManifestResponse200 = {
  data: Blob;
  status: 200;
};

export type v1SpectroClustersUidImportManifestResponseComposite =
  v1SpectroClustersUidImportManifestResponse200;

export type v1SpectroClustersUidImportManifestResponse =
  v1SpectroClustersUidImportManifestResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidImportManifestUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/import/manifest`;
};

export const v1SpectroClustersUidImportManifest = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidImportManifestResponse> => {
  const res = await fetch(getV1SpectroClustersUidImportManifestUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidImportManifestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidImportManifestResponse;
};

/**
 * @summary Upgrade the specified imported read only cluster with full permissions
 */
export type v1SpectroClustersUidImportUpgradePatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidImportUpgradePatchResponseComposite =
  v1SpectroClustersUidImportUpgradePatchResponseDefault;

export type v1SpectroClustersUidImportUpgradePatchResponse =
  v1SpectroClustersUidImportUpgradePatchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidImportUpgradePatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/import/upgrade`;
};

export const v1SpectroClustersUidImportUpgradePatch = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidImportUpgradePatchResponse> => {
  const res = await fetch(getV1SpectroClustersUidImportUpgradePatchUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidImportUpgradePatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidImportUpgradePatchResponse;
};

/**
 * @summary Get K8Certificate for spectro cluster
 */
export type v1SpectroClustersK8CertificateResponse200 = {
  data: V1MachineCertificates;
  status: 200;
};

export type v1SpectroClustersK8CertificateResponseComposite =
  v1SpectroClustersK8CertificateResponse200;

export type v1SpectroClustersK8CertificateResponse =
  v1SpectroClustersK8CertificateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersK8CertificateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates`;
};

export const v1SpectroClustersK8Certificate = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersK8CertificateResponse> => {
  const res = await fetch(getV1SpectroClustersK8CertificateUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersK8CertificateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersK8CertificateResponse;
};

/**
 * @summary Update K8Certificate for spectro cluster
 */
export type v1SpectroClustersK8CertificateUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersK8CertificateUpdateResponseComposite =
  v1SpectroClustersK8CertificateUpdateResponseDefault;

export type v1SpectroClustersK8CertificateUpdateResponse =
  v1SpectroClustersK8CertificateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersK8CertificateUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates`;
};

export const v1SpectroClustersK8CertificateUpdate = async (
  uid: string,
  v1SpectroClusterK8sCertificate?: V1SpectroClusterK8sCertificate,
  options?: RequestInit,
): Promise<v1SpectroClustersK8CertificateUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersK8CertificateUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterK8sCertificate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersK8CertificateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersK8CertificateUpdateResponse;
};

/**
 * @summary Sets the cluster control plane nodes Kubernetes certificates for renewal
 */
export type v1SpectroClustersCertificatesRenewResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersCertificatesRenewResponseComposite =
  v1SpectroClustersCertificatesRenewResponseDefault;

export type v1SpectroClustersCertificatesRenewResponse =
  v1SpectroClustersCertificatesRenewResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersCertificatesRenewUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/k8certificates/renew`;
};

export const v1SpectroClustersCertificatesRenew = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersCertificatesRenewResponse> => {
  const res = await fetch(getV1SpectroClustersCertificatesRenewUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersCertificatesRenewResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersCertificatesRenewResponse;
};

/**
 * @summary Returns the specified cluster's kube config file
 */
export type v1SpectroClustersUidKubeCtlRedirectResponse200 = {
  data: V1SpectroClusterKubeCtlRedirect;
  status: 200;
};

export type v1SpectroClustersUidKubeCtlRedirectResponseComposite =
  v1SpectroClustersUidKubeCtlRedirectResponse200;

export type v1SpectroClustersUidKubeCtlRedirectResponse =
  v1SpectroClustersUidKubeCtlRedirectResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidKubeCtlRedirectUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/kubectl/redirect`;
};

export const v1SpectroClustersUidKubeCtlRedirect = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidKubeCtlRedirectResponse> => {
  const res = await fetch(getV1SpectroClustersUidKubeCtlRedirectUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidKubeCtlRedirectResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidKubeCtlRedirectResponse;
};

/**
 * @summary Associate the assets for the cluster
 */
export type v1SpectroClustersUidLocationPutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidLocationPutResponseComposite =
  v1SpectroClustersUidLocationPutResponseDefault;

export type v1SpectroClustersUidLocationPutResponse =
  v1SpectroClustersUidLocationPutResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidLocationPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/location`;
};

export const v1SpectroClustersUidLocationPut = async (
  uid: string,
  v1SpectroClusterLocationInputEntity?: V1SpectroClusterLocationInputEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidLocationPutResponse> => {
  const res = await fetch(getV1SpectroClustersUidLocationPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterLocationInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidLocationPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidLocationPutResponse;
};

/**
 * @summary Update the specified spectro cluster metadata
 */
export type v1SpectroClustersUidMetadataUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidMetadataUpdateResponseComposite =
  v1SpectroClustersUidMetadataUpdateResponseDefault;

export type v1SpectroClustersUidMetadataUpdateResponse =
  v1SpectroClustersUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/metadata`;
};

export const v1SpectroClustersUidMetadataUpdate = async (
  uid: string,
  v1ObjectMetaInputEntitySchema?: V1ObjectMetaInputEntitySchema,
  options?: RequestInit,
): Promise<v1SpectroClustersUidMetadataUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMetaInputEntitySchema),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidMetadataUpdateResponse;
};

/**
 * @summary Returns available namespaces for the cluster
 */
export type v1ClusterNamespacesGetResponse200 = {
  data: V1ClusterNamespaces;
  status: 200;
};

export type v1ClusterNamespacesGetResponseComposite =
  v1ClusterNamespacesGetResponse200;

export type v1ClusterNamespacesGetResponse =
  v1ClusterNamespacesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterNamespacesGetUrl = (
  uid: string,
  params?: V1ClusterNamespacesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/namespaces?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/namespaces`;
};

export const v1ClusterNamespacesGet = async (
  uid: string,
  params?: V1ClusterNamespacesGetParams,
  options?: RequestInit,
): Promise<v1ClusterNamespacesGetResponse> => {
  const res = await fetch(getV1ClusterNamespacesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterNamespacesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterNamespacesGetResponse;
};

/**
 * @summary Returns k8s spectrocluster oidc
 */
export type v1SpectroClustersUidOIDCResponse200 = {
  data: V1SpectroClusterOidcSpec;
  status: 200;
};

export type v1SpectroClustersUidOIDCResponseComposite =
  v1SpectroClustersUidOIDCResponse200;

export type v1SpectroClustersUidOIDCResponse =
  v1SpectroClustersUidOIDCResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOIDCUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/oidc`;
};

export const v1SpectroClustersUidOIDC = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidOIDCResponse> => {
  const res = await fetch(getV1SpectroClustersUidOIDCUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidOIDCResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidOIDCResponse;
};

/**
 * @summary Returns k8s dashboard url
 */
export type v1SpectroClustersUidOIDCDashboardUrlResponse200 = {
  data: V1SectroClusterK8sDashboardUrl;
  status: 200;
};

export type v1SpectroClustersUidOIDCDashboardUrlResponseComposite =
  v1SpectroClustersUidOIDCDashboardUrlResponse200;

export type v1SpectroClustersUidOIDCDashboardUrlResponse =
  v1SpectroClustersUidOIDCDashboardUrlResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidOIDCDashboardUrlUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/oidc/dashboard/url`;
};

export const v1SpectroClustersUidOIDCDashboardUrl = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidOIDCDashboardUrlResponse> => {
  const res = await fetch(getV1SpectroClustersUidOIDCDashboardUrlUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidOIDCDashboardUrlResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidOIDCDashboardUrlResponse;
};

/**
 * @summary Returns the specified cluster's manifest
 */
export type v1SpectroClustersUidPackManifestsUidGetResponse200 = {
  data: V1Manifest;
  status: 200;
};

export type v1SpectroClustersUidPackManifestsUidGetResponseComposite =
  v1SpectroClustersUidPackManifestsUidGetResponse200;

export type v1SpectroClustersUidPackManifestsUidGetResponse =
  v1SpectroClustersUidPackManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPackManifestsUidGetUrl = (
  uid: string,
  manifestUid: string,
  params?: V1SpectroClustersUidPackManifestsUidGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/manifests/${manifestUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/manifests/${manifestUid}`;
};

export const v1SpectroClustersUidPackManifestsUidGet = async (
  uid: string,
  manifestUid: string,
  params?: V1SpectroClustersUidPackManifestsUidGetParams,
  options?: RequestInit,
): Promise<v1SpectroClustersUidPackManifestsUidGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidPackManifestsUidGetUrl(uid, manifestUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidPackManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidPackManifestsUidGetResponse;
};

/**
 * @summary Get specified cluster pack properties
 */
export type v1SpectroClustersUidPackPropertiesResponse200 = {
  data: V1SpectroClusterPackProperties;
  status: 200;
};

export type v1SpectroClustersUidPackPropertiesResponseComposite =
  v1SpectroClustersUidPackPropertiesResponse200;

export type v1SpectroClustersUidPackPropertiesResponse =
  v1SpectroClustersUidPackPropertiesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPackPropertiesUrl = (
  uid: string,
  params: V1SpectroClustersUidPackPropertiesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/properties?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/pack/properties`;
};

export const v1SpectroClustersUidPackProperties = async (
  uid: string,
  params: V1SpectroClustersUidPackPropertiesParams,
  options?: RequestInit,
): Promise<v1SpectroClustersUidPackPropertiesResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidPackPropertiesUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidPackPropertiesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidPackPropertiesResponse;
};

/**
 * @summary Updates the cluster's pack references
 */
export type v1SpectroClustersPacksRefUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersPacksRefUpdateResponseComposite =
  v1SpectroClustersPacksRefUpdateResponseDefault;

export type v1SpectroClustersPacksRefUpdateResponse =
  v1SpectroClustersPacksRefUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersPacksRefUpdateUrl = (
  uid: string,
  params?: V1SpectroClustersPacksRefUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packRefs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packRefs`;
};

export const v1SpectroClustersPacksRefUpdate = async (
  uid: string,
  v1ClusterNotificationUpdateEntity?: V1ClusterNotificationUpdateEntity,
  params?: V1SpectroClustersPacksRefUpdateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersPacksRefUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersPacksRefUpdateUrl(uid, params), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterNotificationUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersPacksRefUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersPacksRefUpdateResponse;
};

/**
 * @summary Returns the specified cluster's packs resolved values
 */
export type v1SpectroClustersUidPacksResolvedValuesGetResponse200 = {
  data: V1SpectroClusterProfilesResolvedValues;
  status: 200;
};

export type v1SpectroClustersUidPacksResolvedValuesGetResponseComposite =
  v1SpectroClustersUidPacksResolvedValuesGetResponse200;

export type v1SpectroClustersUidPacksResolvedValuesGetResponse =
  v1SpectroClustersUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPacksResolvedValuesGetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packs/resolvedValues`;
};

export const v1SpectroClustersUidPacksResolvedValuesGet = async (
  uid: string,
  v1SpectroClusterProfilesParamReferenceEntity?: V1SpectroClusterProfilesParamReferenceEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidPacksResolvedValuesGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidPacksResolvedValuesGetUrl(uid),
    {
      ...options,
      method: "GET",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1SpectroClusterProfilesParamReferenceEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidPacksResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidPacksResolvedValuesGetResponse;
};

/**
 * @summary Patch update specified cluster's packs status
 */
export type v1SpectroClustersUidPacksStatusPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidPacksStatusPatchResponseComposite =
  v1SpectroClustersUidPacksStatusPatchResponseDefault;

export type v1SpectroClustersUidPacksStatusPatchResponse =
  v1SpectroClustersUidPacksStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidPacksStatusPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/packs/status`;
};

export const v1SpectroClustersUidPacksStatusPatch = async (
  uid: string,
  v1SpectroClusterPacksStatusEntity?: V1SpectroClusterPacksStatusEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidPacksStatusPatchResponse> => {
  const res = await fetch(getV1SpectroClustersUidPacksStatusPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterPacksStatusEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidPacksStatusPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidPacksStatusPatchResponse;
};

/**
 * @summary Returns the profile updates of a specified cluster
 */
export type v1SpectroClustersGetProfileUpdatesResponse200 = {
  data: V1SpectroClusterProfileUpdates;
  status: 200;
};

export type v1SpectroClustersGetProfileUpdatesResponseComposite =
  v1SpectroClustersGetProfileUpdatesResponse200;

export type v1SpectroClustersGetProfileUpdatesResponse =
  v1SpectroClustersGetProfileUpdatesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetProfileUpdatesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profileUpdates`;
};

export const v1SpectroClustersGetProfileUpdates = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersGetProfileUpdatesResponse> => {
  const res = await fetch(getV1SpectroClustersGetProfileUpdatesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGetProfileUpdatesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGetProfileUpdatesResponse;
};

/**
 * @summary Remove cluster profiles from the specified cluster
 */
export type v1SpectroClustersDeleteProfilesResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersDeleteProfilesResponseComposite =
  v1SpectroClustersDeleteProfilesResponseDefault;

export type v1SpectroClustersDeleteProfilesResponse =
  v1SpectroClustersDeleteProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersDeleteProfilesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const v1SpectroClustersDeleteProfiles = async (
  uid: string,
  v1SpectroClusterProfilesDeleteEntity?: V1SpectroClusterProfilesDeleteEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersDeleteProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersDeleteProfilesUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfilesDeleteEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersDeleteProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersDeleteProfilesResponse;
};

/**
 * @summary Returns the associated profiles of a specified cluster
 */
export type v1SpectroClustersGetProfilesResponse200 = {
  data: V1SpectroClusterProfileList;
  status: 200;
};

export type v1SpectroClustersGetProfilesResponseComposite =
  v1SpectroClustersGetProfilesResponse200;

export type v1SpectroClustersGetProfilesResponse =
  v1SpectroClustersGetProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetProfilesUrl = (
  uid: string,
  params?: V1SpectroClustersGetProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const v1SpectroClustersGetProfiles = async (
  uid: string,
  params?: V1SpectroClustersGetProfilesParams,
  options?: RequestInit,
): Promise<v1SpectroClustersGetProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersGetProfilesUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGetProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGetProfilesResponse;
};

/**
 * @summary Patch cluster profiles to the specified cluster
 */
export type v1SpectroClustersPatchProfilesResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersPatchProfilesResponseComposite =
  v1SpectroClustersPatchProfilesResponseDefault;

export type v1SpectroClustersPatchProfilesResponse =
  v1SpectroClustersPatchProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersPatchProfilesUrl = (
  uid: string,
  params?: V1SpectroClustersPatchProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const v1SpectroClustersPatchProfiles = async (
  uid: string,
  v1SpectroClusterProfiles?: V1SpectroClusterProfiles,
  params?: V1SpectroClustersPatchProfilesParams,
  options?: RequestInit,
): Promise<v1SpectroClustersPatchProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersPatchProfilesUrl(uid, params), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfiles),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersPatchProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersPatchProfilesResponse;
};

/**
 * @summary Associate cluster profiles to the specified cluster
 */
export type v1SpectroClustersUpdateProfilesResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUpdateProfilesResponseComposite =
  v1SpectroClustersUpdateProfilesResponseDefault;

export type v1SpectroClustersUpdateProfilesResponse =
  v1SpectroClustersUpdateProfilesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateProfilesUrl = (
  uid: string,
  params?: V1SpectroClustersUpdateProfilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles`;
};

export const v1SpectroClustersUpdateProfiles = async (
  uid: string,
  v1SpectroClusterProfiles?: V1SpectroClusterProfiles,
  params?: V1SpectroClustersUpdateProfilesParams,
  options?: RequestInit,
): Promise<v1SpectroClustersUpdateProfilesResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateProfilesUrl(uid, params), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfiles),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpdateProfilesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpdateProfilesResponse;
};

/**
 * @summary Returns the associated profile's pack manifests of a specified cluster
 */
export type v1SpectroClustersGetProfilesPacksManifestsResponse200 = {
  data: V1SpectroClusterProfilesPacksManifests;
  status: 200;
};

export type v1SpectroClustersGetProfilesPacksManifestsResponseComposite =
  v1SpectroClustersGetProfilesPacksManifestsResponse200;

export type v1SpectroClustersGetProfilesPacksManifestsResponse =
  v1SpectroClustersGetProfilesPacksManifestsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersGetProfilesPacksManifestsUrl = (
  uid: string,
  params?: V1SpectroClustersGetProfilesPacksManifestsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/packs/manifests?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/packs/manifests`;
};

export const v1SpectroClustersGetProfilesPacksManifests = async (
  uid: string,
  params?: V1SpectroClustersGetProfilesPacksManifestsParams,
  options?: RequestInit,
): Promise<v1SpectroClustersGetProfilesPacksManifestsResponse> => {
  const res = await fetch(
    getV1SpectroClustersGetProfilesPacksManifestsUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersGetProfilesPacksManifestsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersGetProfilesPacksManifestsResponse;
};

/**
 * @summary Returns the specified cluster's profile pack configuration
 */
export type v1SpectroClustersUidProfilesUidPacksConfigGetResponse200 = {
  data: V1SpectroClusterPackConfigList;
  status: 200;
};

export type v1SpectroClustersUidProfilesUidPacksConfigGetResponseComposite =
  v1SpectroClustersUidProfilesUidPacksConfigGetResponse200;

export type v1SpectroClustersUidProfilesUidPacksConfigGetResponse =
  v1SpectroClustersUidProfilesUidPacksConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidProfilesUidPacksConfigGetUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/config`;
};

export const v1SpectroClustersUidProfilesUidPacksConfigGet = async (
  uid: string,
  profileUid: string,
  packName: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidProfilesUidPacksConfigGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidProfilesUidPacksConfigGetUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidProfilesUidPacksConfigGetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidProfilesUidPacksConfigGetResponse;
};

/**
 * @summary Returns the associated profiles pack manifests of the specified cluster
 */
export type v1SpectroClustersProfilesUidPackManifestsGetResponse200 = {
  data: V1PackManifests;
  status: 200;
};

export type v1SpectroClustersProfilesUidPackManifestsGetResponseComposite =
  v1SpectroClustersProfilesUidPackManifestsGetResponse200;

export type v1SpectroClustersProfilesUidPackManifestsGetResponse =
  v1SpectroClustersProfilesUidPackManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersProfilesUidPackManifestsGetUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/manifests`;
};

export const v1SpectroClustersProfilesUidPackManifestsGet = async (
  uid: string,
  profileUid: string,
  packName: string,
  options?: RequestInit,
): Promise<v1SpectroClustersProfilesUidPackManifestsGetResponse> => {
  const res = await fetch(
    getV1SpectroClustersProfilesUidPackManifestsGetUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersProfilesUidPackManifestsGetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersProfilesUidPackManifestsGetResponse;
};

/**
 * @summary Updates cluster profiles pack manifests to the specified cluster
 */
export type v1SpectroClustersProfilesUidPackManifestsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersProfilesUidPackManifestsUpdateResponseComposite =
  v1SpectroClustersProfilesUidPackManifestsUpdateResponseDefault;

export type v1SpectroClustersProfilesUidPackManifestsUpdateResponse =
  v1SpectroClustersProfilesUidPackManifestsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersProfilesUidPackManifestsUpdateUrl = (
  uid: string,
  profileUid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/profiles/${profileUid}/packs/${packName}/manifests`;
};

export const v1SpectroClustersProfilesUidPackManifestsUpdate = async (
  uid: string,
  profileUid: string,
  packName: string,
  v1ManifestRefInputEntities?: V1ManifestRefInputEntities,
  options?: RequestInit,
): Promise<v1SpectroClustersProfilesUidPackManifestsUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersProfilesUidPackManifestsUpdateUrl(
      uid,
      profileUid,
      packName,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestRefInputEntities),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersProfilesUidPackManifestsUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersProfilesUidPackManifestsUpdateResponse;
};

/**
 * @summary Returns the estimated rate of the specified cluster
 */
export type v1SpectroClustersUidRateResponse200 = {
  data: V1SpectroClusterRate;
  status: 200;
};

export type v1SpectroClustersUidRateResponseComposite =
  v1SpectroClustersUidRateResponse200;

export type v1SpectroClustersUidRateResponse =
  v1SpectroClustersUidRateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidRateUrl = (
  uid: string,
  params?: V1SpectroClustersUidRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/rate`;
};

export const v1SpectroClustersUidRate = async (
  uid: string,
  params?: V1SpectroClustersUidRateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersUidRateResponse> => {
  const res = await fetch(getV1SpectroClustersUidRateUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidRateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidRateResponse;
};

/**
 * @summary Returns the spectrocluster repave approve update
 */
export type v1SpectroClustersUidRepaveApproveUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidRepaveApproveUpdateResponseComposite =
  v1SpectroClustersUidRepaveApproveUpdateResponseDefault;

export type v1SpectroClustersUidRepaveApproveUpdateResponse =
  v1SpectroClustersUidRepaveApproveUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidRepaveApproveUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/repave/approve`;
};

export const v1SpectroClustersUidRepaveApproveUpdate = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidRepaveApproveUpdateResponse> => {
  const res = await fetch(getV1SpectroClustersUidRepaveApproveUpdateUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidRepaveApproveUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidRepaveApproveUpdateResponse;
};

/**
 * @summary Returns the spectrocluster repave
 */
export type v1SpectroClustersUidRepaveGetResponse200 = {
  data: V1SpectroClusterRepave;
  status: 200;
};

export type v1SpectroClustersUidRepaveGetResponseComposite =
  v1SpectroClustersUidRepaveGetResponse200;

export type v1SpectroClustersUidRepaveGetResponse =
  v1SpectroClustersUidRepaveGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidRepaveGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/repave/status`;
};

export const v1SpectroClustersUidRepaveGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidRepaveGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidRepaveGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidRepaveGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidRepaveGetResponse;
};

/**
 * @summary reset the cluster s by deleting machine pools and condtions
 */
export type v1SpectroClustersUidResetResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidResetResponseComposite =
  v1SpectroClustersUidResetResponseDefault;

export type v1SpectroClustersUidResetResponse =
  v1SpectroClustersUidResetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/reset`;
};

export const v1SpectroClustersUidReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidResetResponse> => {
  const res = await fetch(getV1SpectroClustersUidResetUrl(uid), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidResetResponse;
};

/**
 * @summary Get the cluster's status
 */
export type v1SpectroClustersUidStatusResponse200 = {
  data: V1SpectroClusterStatusEntity;
  status: 200;
};

export type v1SpectroClustersUidStatusResponseComposite =
  v1SpectroClustersUidStatusResponse200;

export type v1SpectroClustersUidStatusResponse =
  v1SpectroClustersUidStatusResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status`;
};

export const v1SpectroClustersUidStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidStatusResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidStatusResponse;
};

/**
 * @summary Updates the specified cluster status condition
 */
export type v1SpectroClustersUpdateStatusConditionResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUpdateStatusConditionResponseComposite =
  v1SpectroClustersUpdateStatusConditionResponseDefault;

export type v1SpectroClustersUpdateStatusConditionResponse =
  v1SpectroClustersUpdateStatusConditionResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusConditionUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/condition`;
};

export const v1SpectroClustersUpdateStatusCondition = async (
  uid: string,
  v1ClusterCondition?: V1ClusterCondition,
  options?: RequestInit,
): Promise<v1SpectroClustersUpdateStatusConditionResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusConditionUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterCondition),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpdateStatusConditionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpdateStatusConditionResponse;
};

/**
 * @summary Updates the specified cluster status conditions
 */
export type v1SpectroClustersUpdateStatusConditionsResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUpdateStatusConditionsResponseComposite =
  v1SpectroClustersUpdateStatusConditionsResponseDefault;

export type v1SpectroClustersUpdateStatusConditionsResponse =
  v1SpectroClustersUpdateStatusConditionsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusConditionsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/conditions`;
};

export const v1SpectroClustersUpdateStatusConditions = async (
  uid: string,
  v1ClusterCondition?: V1ClusterCondition[],
  options?: RequestInit,
): Promise<v1SpectroClustersUpdateStatusConditionsResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusConditionsUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterCondition),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpdateStatusConditionsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpdateStatusConditionsResponse;
};

/**
 * @summary Updates the specified cluster's service endpoints information
 */
export type v1SpectroClustersUpdateStatusEndpointsResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUpdateStatusEndpointsResponseComposite =
  v1SpectroClustersUpdateStatusEndpointsResponseDefault;

export type v1SpectroClustersUpdateStatusEndpointsResponse =
  v1SpectroClustersUpdateStatusEndpointsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusEndpointsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/endpoints`;
};

export const v1SpectroClustersUpdateStatusEndpoints = async (
  uid: string,
  v1ApiEndpoint?: V1ApiEndpoint[],
  options?: RequestInit,
): Promise<v1SpectroClustersUpdateStatusEndpointsResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusEndpointsUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ApiEndpoint),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpdateStatusEndpointsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpdateStatusEndpointsResponse;
};

/**
 * @summary Updates the specified cluster status as imported
 */
export type v1SpectroClustersUpdateStatusImportedResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUpdateStatusImportedResponseComposite =
  v1SpectroClustersUpdateStatusImportedResponseDefault;

export type v1SpectroClustersUpdateStatusImportedResponse =
  v1SpectroClustersUpdateStatusImportedResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusImportedUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/imported`;
};

export const v1SpectroClustersUpdateStatusImported = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUpdateStatusImportedResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusImportedUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpdateStatusImportedResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpdateStatusImportedResponse;
};

/**
 * @summary Updates the specified cluster's services information
 */
export type v1SpectroClustersUpdateStatusServicesResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUpdateStatusServicesResponseComposite =
  v1SpectroClustersUpdateStatusServicesResponseDefault;

export type v1SpectroClustersUpdateStatusServicesResponse =
  v1SpectroClustersUpdateStatusServicesResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUpdateStatusServicesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/services`;
};

export const v1SpectroClustersUpdateStatusServices = async (
  uid: string,
  v1LoadBalancerService?: V1LoadBalancerService[],
  options?: RequestInit,
): Promise<v1SpectroClustersUpdateStatusServicesResponse> => {
  const res = await fetch(getV1SpectroClustersUpdateStatusServicesUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1LoadBalancerService),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUpdateStatusServicesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUpdateStatusServicesResponse;
};

/**
 * @summary Returns the SPC apply information for the agent
 */
export type v1SpectroClustersUidStatusSpcApplyGetResponse200 = {
  data: V1SpcApply;
  status: 200;
};

export type v1SpectroClustersUidStatusSpcApplyGetResponseComposite =
  v1SpectroClustersUidStatusSpcApplyGetResponse200;

export type v1SpectroClustersUidStatusSpcApplyGetResponse =
  v1SpectroClustersUidStatusSpcApplyGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusSpcApplyGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply`;
};

export const v1SpectroClustersUidStatusSpcApplyGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidStatusSpcApplyGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusSpcApplyGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidStatusSpcApplyGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidStatusSpcApplyGetResponse;
};

/**
 * @summary Set the CanBeApplied to true on the spcApply status. CanBeApplied indicates the agent to orchestrate the spc changes
 */
export type v1SpectroClustersUidStatusSpcApplyResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidStatusSpcApplyResponseComposite =
  v1SpectroClustersUidStatusSpcApplyResponseDefault;

export type v1SpectroClustersUidStatusSpcApplyResponse =
  v1SpectroClustersUidStatusSpcApplyResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusSpcApplyUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply`;
};

export const v1SpectroClustersUidStatusSpcApply = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidStatusSpcApplyResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusSpcApplyUrl(uid), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidStatusSpcApplyResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidStatusSpcApplyResponse;
};

/**
 * @summary Updates the agent patch time for the SPC changes
 */
export type v1SpectroClustersUidStatusSpcPatchTimeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidStatusSpcPatchTimeResponseComposite =
  v1SpectroClustersUidStatusSpcPatchTimeResponseDefault;

export type v1SpectroClustersUidStatusSpcPatchTimeResponse =
  v1SpectroClustersUidStatusSpcPatchTimeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidStatusSpcPatchTimeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/spcApply/patchTime`;
};

export const v1SpectroClustersUidStatusSpcPatchTime = async (
  uid: string,
  v1SpcPatchTimeEntity?: V1SpcPatchTimeEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidStatusSpcPatchTimeResponse> => {
  const res = await fetch(getV1SpectroClustersUidStatusSpcPatchTimeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpcPatchTimeEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidStatusSpcPatchTimeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidStatusSpcPatchTimeResponse;
};

/**
 * @summary Updates the cluster's upgrade status
 */
export type v1SpectroClustersUidUpgradesPutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidUpgradesPutResponseComposite =
  v1SpectroClustersUidUpgradesPutResponseDefault;

export type v1SpectroClustersUidUpgradesPutResponse =
  v1SpectroClustersUidUpgradesPutResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidUpgradesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/status/upgrades`;
};

export const v1SpectroClustersUidUpgradesPut = async (
  uid: string,
  v1SpectroClusterUidUpgrades?: V1SpectroClusterUidUpgrades,
  options?: RequestInit,
): Promise<v1SpectroClustersUidUpgradesPutResponse> => {
  const res = await fetch(getV1SpectroClustersUidUpgradesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterUidUpgrades),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidUpgradesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidUpgradesPutResponse;
};

/**
 * @summary Update specific cluster upgrade settings
 */
export type v1SpectroClustersUidUpgradeSettingsResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidUpgradeSettingsResponseComposite =
  v1SpectroClustersUidUpgradeSettingsResponseDefault;

export type v1SpectroClustersUidUpgradeSettingsResponse =
  v1SpectroClustersUidUpgradeSettingsResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidUpgradeSettingsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/upgrade/settings`;
};

export const v1SpectroClustersUidUpgradeSettings = async (
  uid: string,
  v1ClusterUpgradeSettingsEntity?: V1ClusterUpgradeSettingsEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidUpgradeSettingsResponse> => {
  const res = await fetch(getV1SpectroClustersUidUpgradeSettingsUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterUpgradeSettingsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidUpgradeSettingsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidUpgradeSettingsResponse;
};

/**
 * @summary Validates cluster packs
 */
export type v1SpectroClustersUidValidatePacksResponse200 = {
  data: V1SpectroClusterValidatorResponse;
  status: 200;
};

export type v1SpectroClustersUidValidatePacksResponseComposite =
  v1SpectroClustersUidValidatePacksResponse200;

export type v1SpectroClustersUidValidatePacksResponse =
  v1SpectroClustersUidValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidValidatePacksUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/validate/packs`;
};

export const v1SpectroClustersUidValidatePacks = async (
  uid: string,
  v1SpectroClusterPacksEntity?: V1SpectroClusterPacksEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidValidatePacksResponse> => {
  const res = await fetch(getV1SpectroClustersUidValidatePacksUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterPacksEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidValidatePacksResponse;
};

/**
 * @summary Validates if cluster gets repaved for the specified packs
 */
export type v1SpectroClustersUidValidateRepaveResponse200 = {
  data: V1SpectroClusterRepaveValidationResponse;
  status: 200;
};

export type v1SpectroClustersUidValidateRepaveResponseComposite =
  v1SpectroClustersUidValidateRepaveResponse200;

export type v1SpectroClustersUidValidateRepaveResponse =
  v1SpectroClustersUidValidateRepaveResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidValidateRepaveUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/validate/repave`;
};

export const v1SpectroClustersUidValidateRepave = async (
  uid: string,
  v1SpectroClusterPacksEntity?: V1SpectroClusterPacksEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersUidValidateRepaveResponse> => {
  const res = await fetch(getV1SpectroClustersUidValidateRepaveUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterPacksEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidValidateRepaveResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidValidateRepaveResponse;
};

/**
 * @summary Retrieve a list of variables associated with the cluster
 */
export type v1SpectroClustersUidVariablesGetResponse200 = {
  data: V1SpectroClusterVariables[];
  status: 200;
};

export type v1SpectroClustersUidVariablesGetResponseComposite =
  v1SpectroClustersUidVariablesGetResponse200;

export type v1SpectroClustersUidVariablesGetResponse =
  v1SpectroClustersUidVariablesGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidVariablesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/variables`;
};

export const v1SpectroClustersUidVariablesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidVariablesGetResponse> => {
  const res = await fetch(getV1SpectroClustersUidVariablesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidVariablesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidVariablesGetResponse;
};

/**
 * @summary Update cluster variable values for specified cluster
 */
export type v1SpectroClustersUidVariablesPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidVariablesPatchResponseComposite =
  v1SpectroClustersUidVariablesPatchResponseDefault;

export type v1SpectroClustersUidVariablesPatchResponse =
  v1SpectroClustersUidVariablesPatchResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidVariablesPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/variables`;
};

export const v1SpectroClustersUidVariablesPatch = async (
  uid: string,
  v1SpectroClusterVariableUpdateEntity?: V1SpectroClusterVariableUpdateEntity[],
  options?: RequestInit,
): Promise<v1SpectroClustersUidVariablesPatchResponse> => {
  const res = await fetch(getV1SpectroClustersUidVariablesPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterVariableUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidVariablesPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidVariablesPatchResponse;
};

/**
 * @summary Returns the list of virtual machines
 */
export type v1SpectroClustersVMListResponse200 = {
  data: V1ClusterVirtualMachineList;
  status: 200;
};

export type v1SpectroClustersVMListResponseComposite =
  v1SpectroClustersVMListResponse200;

export type v1SpectroClustersVMListResponse =
  v1SpectroClustersVMListResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMListUrl = (
  uid: string,
  params?: V1SpectroClustersVMListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms`;
};

export const v1SpectroClustersVMList = async (
  uid: string,
  params?: V1SpectroClustersVMListParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMListResponse> => {
  const res = await fetch(getV1SpectroClustersVMListUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMListResponse;
};

/**
 * @summary Create virtual machine
 */
export type v1SpectroClustersVMCreateResponse200 = {
  data: V1ClusterVirtualMachine;
  status: 200;
};

export type v1SpectroClustersVMCreateResponseComposite =
  v1SpectroClustersVMCreateResponse200;

export type v1SpectroClustersVMCreateResponse =
  v1SpectroClustersVMCreateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMCreateUrl = (
  uid: string,
  params: V1SpectroClustersVMCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms`;
};

export const v1SpectroClustersVMCreate = async (
  uid: string,
  params: V1SpectroClustersVMCreateParams,
  v1ClusterVirtualMachine?: V1ClusterVirtualMachine,
  options?: RequestInit,
): Promise<v1SpectroClustersVMCreateResponse> => {
  const res = await fetch(getV1SpectroClustersVMCreateUrl(uid, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterVirtualMachine),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMCreateResponse;
};

/**
 * @summary Returns the list of snapshots of given namespaces
 */
export type v1ClusterVMSnapshotsListResponse200 = {
  data: V1VirtualMachineSnapshotList;
  status: 200;
};

export type v1ClusterVMSnapshotsListResponseComposite =
  v1ClusterVMSnapshotsListResponse200;

export type v1ClusterVMSnapshotsListResponse =
  v1ClusterVMSnapshotsListResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterVMSnapshotsListUrl = (
  uid: string,
  params?: V1ClusterVMSnapshotsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/snapshot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/snapshot`;
};

export const v1ClusterVMSnapshotsList = async (
  uid: string,
  params?: V1ClusterVMSnapshotsListParams,
  options?: RequestInit,
): Promise<v1ClusterVMSnapshotsListResponse> => {
  const res = await fetch(getV1ClusterVMSnapshotsListUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1ClusterVMSnapshotsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1ClusterVMSnapshotsListResponse;
};

/**
 * @summary Deletes the virtual machine
 */
export type v1SpectroClustersVMDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMDeleteResponseComposite =
  v1SpectroClustersVMDeleteResponseDefault;

export type v1SpectroClustersVMDeleteResponse =
  v1SpectroClustersVMDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMDeleteUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const v1SpectroClustersVMDelete = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMDeleteParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMDeleteResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMDeleteUrl(uid, vmName, params),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMDeleteResponse;
};

/**
 * @summary Get virtual machine
 */
export type v1SpectroClustersVMGetResponse200 = {
  data: V1ClusterVirtualMachine;
  status: 200;
};

export type v1SpectroClustersVMGetResponseComposite =
  v1SpectroClustersVMGetResponse200;

export type v1SpectroClustersVMGetResponse =
  v1SpectroClustersVMGetResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMGetUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const v1SpectroClustersVMGet = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMGetParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMGetResponse> => {
  const res = await fetch(getV1SpectroClustersVMGetUrl(uid, vmName, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMGetResponse;
};

/**
 * @summary Updates the specified virtual machine of the cluster
 */
export type v1SpectroClustersVMUpdateResponse200 = {
  data: V1ClusterVirtualMachine;
  status: 200;
};

export type v1SpectroClustersVMUpdateResponseComposite =
  v1SpectroClustersVMUpdateResponse200;

export type v1SpectroClustersVMUpdateResponse =
  v1SpectroClustersVMUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMUpdateUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}`;
};

export const v1SpectroClustersVMUpdate = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMUpdateParams,
  v1ClusterVirtualMachine?: V1ClusterVirtualMachine,
  options?: RequestInit,
): Promise<v1SpectroClustersVMUpdateResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMUpdateUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterVirtualMachine),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMUpdateResponse;
};

/**
 * @summary Add volume to the virtual machine instance
 */
export type v1SpectroClustersVMAddVolumeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMAddVolumeResponseComposite =
  v1SpectroClustersVMAddVolumeResponseDefault;

export type v1SpectroClustersVMAddVolumeResponse =
  v1SpectroClustersVMAddVolumeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMAddVolumeUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMAddVolumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/addVolume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/addVolume`;
};

export const v1SpectroClustersVMAddVolume = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMAddVolumeParams,
  v1VMAddVolumeEntity?: V1VMAddVolumeEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVMAddVolumeResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMAddVolumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VMAddVolumeEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMAddVolumeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMAddVolumeResponse;
};

/**
 * @summary Clone virtual machine
 */
export type v1SpectroClustersVMCloneResponse200 = {
  data: V1ClusterVirtualMachine;
  status: 200;
};

export type v1SpectroClustersVMCloneResponseComposite =
  v1SpectroClustersVMCloneResponse200;

export type v1SpectroClustersVMCloneResponse =
  v1SpectroClustersVMCloneResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMCloneUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMCloneParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/clone?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/clone`;
};

export const v1SpectroClustersVMClone = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMCloneParams,
  v1SpectroClusterVMCloneEntity?: V1SpectroClusterVMCloneEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVMCloneResponse> => {
  const res = await fetch(getV1SpectroClustersVMCloneUrl(uid, vmName, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterVMCloneEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMCloneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMCloneResponse;
};

/**
 * @summary Migrate the virtual machine
 */
export type v1SpectroClustersVMMigrateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMMigrateResponseComposite =
  v1SpectroClustersVMMigrateResponseDefault;

export type v1SpectroClustersVMMigrateResponse =
  v1SpectroClustersVMMigrateResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMMigrateUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMMigrateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/migrate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/migrate`;
};

export const v1SpectroClustersVMMigrate = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMMigrateParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMMigrateResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMMigrateUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMMigrateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMMigrateResponse;
};

/**
 * @summary Pause the virtual machine instance
 */
export type v1SpectroClustersVMPauseResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMPauseResponseComposite =
  v1SpectroClustersVMPauseResponseDefault;

export type v1SpectroClustersVMPauseResponse =
  v1SpectroClustersVMPauseResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMPauseUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMPauseParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/pause?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/pause`;
};

export const v1SpectroClustersVMPause = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMPauseParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMPauseResponse> => {
  const res = await fetch(getV1SpectroClustersVMPauseUrl(uid, vmName, params), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMPauseResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMPauseResponse;
};

/**
 * @summary Remove volume from the virtual machine instance
 */
export type v1SpectroClustersVMRemoveVolumeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMRemoveVolumeResponseComposite =
  v1SpectroClustersVMRemoveVolumeResponseDefault;

export type v1SpectroClustersVMRemoveVolumeResponse =
  v1SpectroClustersVMRemoveVolumeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMRemoveVolumeUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMRemoveVolumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/removeVolume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/removeVolume`;
};

export const v1SpectroClustersVMRemoveVolume = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMRemoveVolumeParams,
  v1VMRemoveVolumeEntity?: V1VMRemoveVolumeEntity,
  options?: RequestInit,
): Promise<v1SpectroClustersVMRemoveVolumeResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMRemoveVolumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VMRemoveVolumeEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMRemoveVolumeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMRemoveVolumeResponse;
};

/**
 * @summary Restart the virtual machine
 */
export type v1SpectroClustersVMRestartResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMRestartResponseComposite =
  v1SpectroClustersVMRestartResponseDefault;

export type v1SpectroClustersVMRestartResponse =
  v1SpectroClustersVMRestartResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMRestartUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMRestartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/restart?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/restart`;
};

export const v1SpectroClustersVMRestart = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMRestartParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMRestartResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMRestartUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMRestartResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMRestartResponse;
};

/**
 * @summary Resume the virtual machine instance
 */
export type v1SpectroClustersVMResumeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMResumeResponseComposite =
  v1SpectroClustersVMResumeResponseDefault;

export type v1SpectroClustersVMResumeResponse =
  v1SpectroClustersVMResumeResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMResumeUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMResumeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/resume?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/resume`;
};

export const v1SpectroClustersVMResume = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMResumeParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMResumeResponse> => {
  const res = await fetch(
    getV1SpectroClustersVMResumeUrl(uid, vmName, params),
    {
      ...options,
      method: "PUT",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMResumeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMResumeResponse;
};

/**
 * @summary Create snapshot of virtual machine
 */
export type v1VMSnapshotCreateResponse200 = {
  data: V1VirtualMachineSnapshot;
  status: 200;
};

export type v1VMSnapshotCreateResponseComposite = v1VMSnapshotCreateResponse200;

export type v1VMSnapshotCreateResponse = v1VMSnapshotCreateResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotCreateUrl = (
  uid: string,
  vmName: string,
  params: V1VMSnapshotCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot`;
};

export const v1VMSnapshotCreate = async (
  uid: string,
  vmName: string,
  params: V1VMSnapshotCreateParams,
  v1VirtualMachineSnapshot?: V1VirtualMachineSnapshot,
  options?: RequestInit,
): Promise<v1VMSnapshotCreateResponse> => {
  const res = await fetch(getV1VMSnapshotCreateUrl(uid, vmName, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VirtualMachineSnapshot),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VMSnapshotCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VMSnapshotCreateResponse;
};

/**
 * @summary Delete the snapshot of virtual machine
 */
export type v1VMSnapshotDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1VMSnapshotDeleteResponseComposite =
  v1VMSnapshotDeleteResponseDefault;

export type v1VMSnapshotDeleteResponse = v1VMSnapshotDeleteResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotDeleteUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: V1VMSnapshotDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const v1VMSnapshotDelete = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: V1VMSnapshotDeleteParams,
  options?: RequestInit,
): Promise<v1VMSnapshotDeleteResponse> => {
  const res = await fetch(
    getV1VMSnapshotDeleteUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VMSnapshotDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VMSnapshotDeleteResponse;
};

/**
 * @summary Get virtual machine snapshot
 */
export type v1VMSnapshotGetResponse200 = {
  data: V1VirtualMachineSnapshot;
  status: 200;
};

export type v1VMSnapshotGetResponseComposite = v1VMSnapshotGetResponse200;

export type v1VMSnapshotGetResponse = v1VMSnapshotGetResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotGetUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: V1VMSnapshotGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const v1VMSnapshotGet = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: V1VMSnapshotGetParams,
  options?: RequestInit,
): Promise<v1VMSnapshotGetResponse> => {
  const res = await fetch(
    getV1VMSnapshotGetUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VMSnapshotGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VMSnapshotGetResponse;
};

/**
 * @summary Updates the specified snapshot of a virtual machine
 */
export type v1VMSnapshotUpdateResponse200 = {
  data: V1VirtualMachineSnapshot;
  status: 200;
};

export type v1VMSnapshotUpdateResponseComposite = v1VMSnapshotUpdateResponse200;

export type v1VMSnapshotUpdateResponse = v1VMSnapshotUpdateResponseComposite & {
  headers: Headers;
};

export const getV1VMSnapshotUpdateUrl = (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: V1VMSnapshotUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/snapshot/${snapshotName}`;
};

export const v1VMSnapshotUpdate = async (
  uid: string,
  vmName: string,
  snapshotName: string,
  params: V1VMSnapshotUpdateParams,
  v1VirtualMachineSnapshot?: V1VirtualMachineSnapshot,
  options?: RequestInit,
): Promise<v1VMSnapshotUpdateResponse> => {
  const res = await fetch(
    getV1VMSnapshotUpdateUrl(uid, vmName, snapshotName, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VirtualMachineSnapshot),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VMSnapshotUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VMSnapshotUpdateResponse;
};

/**
 * @summary Start the virtual machine
 */
export type v1SpectroClustersVMStartResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMStartResponseComposite =
  v1SpectroClustersVMStartResponseDefault;

export type v1SpectroClustersVMStartResponse =
  v1SpectroClustersVMStartResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMStartUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMStartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/start?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/start`;
};

export const v1SpectroClustersVMStart = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMStartParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMStartResponse> => {
  const res = await fetch(getV1SpectroClustersVMStartUrl(uid, vmName, params), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMStartResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMStartResponse;
};

/**
 * @summary Stop the virtual machine
 */
export type v1SpectroClustersVMStopResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersVMStopResponseComposite =
  v1SpectroClustersVMStopResponseDefault;

export type v1SpectroClustersVMStopResponse =
  v1SpectroClustersVMStopResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersVMStopUrl = (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMStopParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/stop?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/spectroclusters/${uid}/vms/${vmName}/stop`;
};

export const v1SpectroClustersVMStop = async (
  uid: string,
  vmName: string,
  params: V1SpectroClustersVMStopParams,
  options?: RequestInit,
): Promise<v1SpectroClustersVMStopResponse> => {
  const res = await fetch(getV1SpectroClustersVMStopUrl(uid, vmName, params), {
    ...options,
    method: "PUT",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersVMStopResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersVMStopResponse;
};

/**
 * Sync specified cluster workload
 * @summary Sync specified cluster workload
 */
export type v1SpectroClustersUidWorkloadsSyncResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidWorkloadsSyncResponseComposite =
  v1SpectroClustersUidWorkloadsSyncResponseDefault;

export type v1SpectroClustersUidWorkloadsSyncResponse =
  v1SpectroClustersUidWorkloadsSyncResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidWorkloadsSyncUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/workloads/sync`;
};

export const v1SpectroClustersUidWorkloadsSync = async (
  uid: string,
  options?: RequestInit,
): Promise<v1SpectroClustersUidWorkloadsSyncResponse> => {
  const res = await fetch(getV1SpectroClustersUidWorkloadsSyncUrl(uid), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidWorkloadsSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidWorkloadsSyncResponse;
};

/**
 * @summary Sync specified cluster workload
 */
export type v1SpectroClustersUidWorkloadsKindSyncResponseDefault = {
  data: unknown;
  status: number;
};

export type v1SpectroClustersUidWorkloadsKindSyncResponseComposite =
  v1SpectroClustersUidWorkloadsKindSyncResponseDefault;

export type v1SpectroClustersUidWorkloadsKindSyncResponse =
  v1SpectroClustersUidWorkloadsKindSyncResponseComposite & {
    headers: Headers;
  };

export const getV1SpectroClustersUidWorkloadsKindSyncUrl = (
  uid: string,
  workloadKind:
    | "namespace"
    | "pod"
    | "deployment"
    | "statefulset"
    | "daemonset"
    | "job"
    | "cronjob"
    | "rolebinding"
    | "clusterrolebinding",
) => {
  return `https://api.spectrocloud.com/v1/spectroclusters/${uid}/workloads/${workloadKind}/sync`;
};

export const v1SpectroClustersUidWorkloadsKindSync = async (
  uid: string,
  workloadKind:
    | "namespace"
    | "pod"
    | "deployment"
    | "statefulset"
    | "daemonset"
    | "job"
    | "cronjob"
    | "rolebinding"
    | "clusterrolebinding",
  options?: RequestInit,
): Promise<v1SpectroClustersUidWorkloadsKindSyncResponse> => {
  const res = await fetch(
    getV1SpectroClustersUidWorkloadsKindSyncUrl(uid, workloadKind),
    {
      ...options,
      method: "POST",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SpectroClustersUidWorkloadsKindSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SpectroClustersUidWorkloadsKindSyncResponse;
};

/**
 * @summary get the system config reverse proxy
 */
export type v1SystemConfigReverseProxyGetResponse200 = {
  data: V1SystemReverseProxy;
  status: 200;
};

export type v1SystemConfigReverseProxyGetResponseComposite =
  v1SystemConfigReverseProxyGetResponse200;

export type v1SystemConfigReverseProxyGetResponse =
  v1SystemConfigReverseProxyGetResponseComposite & {
    headers: Headers;
  };

export const getV1SystemConfigReverseProxyGetUrl = () => {
  return `https://api.spectrocloud.com/v1/system/config/reverseproxy`;
};

export const v1SystemConfigReverseProxyGet = async (
  options?: RequestInit,
): Promise<v1SystemConfigReverseProxyGetResponse> => {
  const res = await fetch(getV1SystemConfigReverseProxyGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SystemConfigReverseProxyGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SystemConfigReverseProxyGetResponse;
};

/**
 * @summary updates the system config reverse proxy
 */
export type v1SystemConfigReverseProxyUpdateResponse204 = {
  data: V1Updated;
  status: 204;
};

export type v1SystemConfigReverseProxyUpdateResponseComposite =
  v1SystemConfigReverseProxyUpdateResponse204;

export type v1SystemConfigReverseProxyUpdateResponse =
  v1SystemConfigReverseProxyUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1SystemConfigReverseProxyUpdateUrl = () => {
  return `https://api.spectrocloud.com/v1/system/config/reverseproxy`;
};

export const v1SystemConfigReverseProxyUpdate = async (
  v1SystemReverseProxy: V1SystemReverseProxy,
  options?: RequestInit,
): Promise<v1SystemConfigReverseProxyUpdateResponse> => {
  const res = await fetch(getV1SystemConfigReverseProxyUpdateUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SystemReverseProxy),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SystemConfigReverseProxyUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SystemConfigReverseProxyUpdateResponse;
};

/**
 * @summary Delete a list of block listed passwords
 */
export type v1PasswordsBlockListDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1PasswordsBlockListDeleteResponseComposite =
  v1PasswordsBlockListDeleteResponseDefault;

export type v1PasswordsBlockListDeleteResponse =
  v1PasswordsBlockListDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1PasswordsBlockListDeleteUrl = () => {
  return `https://api.spectrocloud.com/v1/system/passwords/blocklist`;
};

export const v1PasswordsBlockListDelete = async (
  v1PasswordsBlockList: V1PasswordsBlockList,
  options?: RequestInit,
): Promise<v1PasswordsBlockListDeleteResponse> => {
  const res = await fetch(getV1PasswordsBlockListDeleteUrl(), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PasswordsBlockList),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PasswordsBlockListDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PasswordsBlockListDeleteResponse;
};

/**
 * @summary List of block listed passwords
 */
export type v1PasswordsBlockListUpdateResponse204 = {
  data: V1Updated;
  status: 204;
};

export type v1PasswordsBlockListUpdateResponseComposite =
  v1PasswordsBlockListUpdateResponse204;

export type v1PasswordsBlockListUpdateResponse =
  v1PasswordsBlockListUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1PasswordsBlockListUpdateUrl = () => {
  return `https://api.spectrocloud.com/v1/system/passwords/blocklist`;
};

export const v1PasswordsBlockListUpdate = async (
  v1PasswordsBlockList: V1PasswordsBlockList,
  options?: RequestInit,
): Promise<v1PasswordsBlockListUpdateResponse> => {
  const res = await fetch(getV1PasswordsBlockListUpdateUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PasswordsBlockList),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PasswordsBlockListUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PasswordsBlockListUpdateResponse;
};

/**
 * @summary Retrieves a list of teams
 */
export type v1TeamsListResponse200 = {
  data: V1Teams;
  status: 200;
};

export type v1TeamsListResponseComposite = v1TeamsListResponse200;

export type v1TeamsListResponse = v1TeamsListResponseComposite & {
  headers: Headers;
};

export const getV1TeamsListUrl = (params?: V1TeamsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/teams?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/teams`;
};

export const v1TeamsList = async (
  params?: V1TeamsListParams,
  options?: RequestInit,
): Promise<v1TeamsListResponse> => {
  const res = await fetch(getV1TeamsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsListResponse;
};

/**
 * @summary Creates a team with the specified users and roles
 */
export type v1TeamsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1TeamsCreateResponseComposite = v1TeamsCreateResponse201;

export type v1TeamsCreateResponse = v1TeamsCreateResponseComposite & {
  headers: Headers;
};

export const getV1TeamsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/teams`;
};

export const v1TeamsCreate = async (
  v1Team?: V1Team,
  options?: RequestInit,
): Promise<v1TeamsCreateResponse> => {
  const res = await fetch(getV1TeamsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Team),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsCreateResponse;
};

/**
 * @summary Retrieves a list of teams summary with provided filter spec
 */
export type v1TeamsSummaryGetResponse200 = {
  data: V1TeamsSummaryList;
  status: 200;
};

export type v1TeamsSummaryGetResponseComposite = v1TeamsSummaryGetResponse200;

export type v1TeamsSummaryGetResponse = v1TeamsSummaryGetResponseComposite & {
  headers: Headers;
};

export const getV1TeamsSummaryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/teams/summary`;
};

export const v1TeamsSummaryGet = async (
  v1TeamsSummarySpec?: V1TeamsSummarySpec,
  options?: RequestInit,
): Promise<v1TeamsSummaryGetResponse> => {
  const res = await fetch(getV1TeamsSummaryGetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TeamsSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsSummaryGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsSummaryGetResponse;
};

/**
 * @summary Deletes the specified team
 */
export type v1TeamsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsUidDeleteResponseComposite = v1TeamsUidDeleteResponseDefault;

export type v1TeamsUidDeleteResponse = v1TeamsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const v1TeamsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TeamsUidDeleteResponse> => {
  const res = await fetch(getV1TeamsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidDeleteResponse;
};

/**
 * @summary Returns the sepcified team
 */
export type v1TeamsUidGetResponse200 = {
  data: V1Team;
  status: 200;
};

export type v1TeamsUidGetResponseComposite = v1TeamsUidGetResponse200;

export type v1TeamsUidGetResponse = v1TeamsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const v1TeamsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TeamsUidGetResponse> => {
  const res = await fetch(getV1TeamsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidGetResponse;
};

/**
 * @summary Patches the specified team
 */
export type v1TeamsUidPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsUidPatchResponseComposite = v1TeamsUidPatchResponseDefault;

export type v1TeamsUidPatchResponse = v1TeamsUidPatchResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const v1TeamsUidPatch = async (
  uid: string,
  v1TeamPatch: V1TeamPatch,
  options?: RequestInit,
): Promise<v1TeamsUidPatchResponse> => {
  const res = await fetch(getV1TeamsUidPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TeamPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidPatchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidPatchResponse;
};

/**
 * @summary Updates the sepcified team
 */
export type v1TeamsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsUidUpdateResponseComposite = v1TeamsUidUpdateResponseDefault;

export type v1TeamsUidUpdateResponse = v1TeamsUidUpdateResponseComposite & {
  headers: Headers;
};

export const getV1TeamsUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}`;
};

export const v1TeamsUidUpdate = async (
  uid: string,
  v1Team?: V1Team,
  options?: RequestInit,
): Promise<v1TeamsUidUpdateResponse> => {
  const res = await fetch(getV1TeamsUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Team),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidUpdateResponse;
};

/**
 * @summary Returns the specified team's project and roles data
 */
export type v1TeamsProjectRolesResponse200 = {
  data: V1ProjectRolesEntity;
  status: 200;
};

export type v1TeamsProjectRolesResponseComposite =
  v1TeamsProjectRolesResponse200;

export type v1TeamsProjectRolesResponse =
  v1TeamsProjectRolesResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsProjectRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/projects`;
};

export const v1TeamsProjectRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TeamsProjectRolesResponse> => {
  const res = await fetch(getV1TeamsProjectRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsProjectRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsProjectRolesResponse;
};

/**
 * @summary Updates the projects and roles for the specified team
 */
export type v1TeamsProjectRolesPutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsProjectRolesPutResponseComposite =
  v1TeamsProjectRolesPutResponseDefault;

export type v1TeamsProjectRolesPutResponse =
  v1TeamsProjectRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsProjectRolesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/projects`;
};

export const v1TeamsProjectRolesPut = async (
  uid: string,
  v1ProjectRolesPatch: V1ProjectRolesPatch,
  options?: RequestInit,
): Promise<v1TeamsProjectRolesPutResponse> => {
  const res = await fetch(getV1TeamsProjectRolesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectRolesPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsProjectRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsProjectRolesPutResponse;
};

/**
 * Returns resource roles for team
 * @summary Returns the specified individual and resource roles for a team
 */
export type v1TeamsUidResourceRolesResponse200 = {
  data: V1ResourceRoles;
  status: 200;
};

export type v1TeamsUidResourceRolesResponseComposite =
  v1TeamsUidResourceRolesResponse200;

export type v1TeamsUidResourceRolesResponse =
  v1TeamsUidResourceRolesResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidResourceRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles`;
};

export const v1TeamsUidResourceRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TeamsUidResourceRolesResponse> => {
  const res = await fetch(getV1TeamsUidResourceRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidResourceRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidResourceRolesResponse;
};

/**
 * Resource roles added to specific team
 * @summary Add resource roles for team
 */
export type v1TeamsUidResourceRolesCreateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsUidResourceRolesCreateResponseComposite =
  v1TeamsUidResourceRolesCreateResponseDefault;

export type v1TeamsUidResourceRolesCreateResponse =
  v1TeamsUidResourceRolesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidResourceRolesCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles`;
};

export const v1TeamsUidResourceRolesCreate = async (
  uid: string,
  v1ResourceRolesUpdateEntity: V1ResourceRolesUpdateEntity,
  options?: RequestInit,
): Promise<v1TeamsUidResourceRolesCreateResponse> => {
  const res = await fetch(getV1TeamsUidResourceRolesCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceRolesUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidResourceRolesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidResourceRolesCreateResponse;
};

/**
 * @summary Deleted the resource roles from team
 */
export type v1TeamsUidResourceRolesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsUidResourceRolesUidDeleteResponseComposite =
  v1TeamsUidResourceRolesUidDeleteResponseDefault;

export type v1TeamsUidResourceRolesUidDeleteResponse =
  v1TeamsUidResourceRolesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidResourceRolesUidDeleteUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const v1TeamsUidResourceRolesUidDelete = async (
  uid: string,
  resourceRoleUid: string,
  options?: RequestInit,
): Promise<v1TeamsUidResourceRolesUidDeleteResponse> => {
  const res = await fetch(
    getV1TeamsUidResourceRolesUidDeleteUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidResourceRolesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidResourceRolesUidDeleteResponse;
};

/**
 * Specific resource roles fo team is updated
 * @summary Updates the resource roles for team
 */
export type v1TeamsResourceRolesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsResourceRolesUidUpdateResponseComposite =
  v1TeamsResourceRolesUidUpdateResponseDefault;

export type v1TeamsResourceRolesUidUpdateResponse =
  v1TeamsResourceRolesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsResourceRolesUidUpdateUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const v1TeamsResourceRolesUidUpdate = async (
  uid: string,
  resourceRoleUid: string,
  v1ResourceRolesUpdateEntity: V1ResourceRolesUpdateEntity,
  options?: RequestInit,
): Promise<v1TeamsResourceRolesUidUpdateResponse> => {
  const res = await fetch(
    getV1TeamsResourceRolesUidUpdateUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ResourceRolesUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsResourceRolesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsResourceRolesUidUpdateResponse;
};

/**
 * @summary Returns the specified team's tenant roles
 */
export type v1TeamsUidTenantRolesGetResponse200 = {
  data: V1TeamTenantRolesEntity;
  status: 200;
};

export type v1TeamsUidTenantRolesGetResponseComposite =
  v1TeamsUidTenantRolesGetResponse200;

export type v1TeamsUidTenantRolesGetResponse =
  v1TeamsUidTenantRolesGetResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidTenantRolesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/roles`;
};

export const v1TeamsUidTenantRolesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1TeamsUidTenantRolesGetResponse> => {
  const res = await fetch(getV1TeamsUidTenantRolesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidTenantRolesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidTenantRolesGetResponse;
};

/**
 * @summary Updates the tenant roles of the specified team
 */
export type v1TeamsUidTenantRolesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsUidTenantRolesUpdateResponseComposite =
  v1TeamsUidTenantRolesUpdateResponseDefault;

export type v1TeamsUidTenantRolesUpdateResponse =
  v1TeamsUidTenantRolesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsUidTenantRolesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/teams/${uid}/roles`;
};

export const v1TeamsUidTenantRolesUpdate = async (
  uid: string,
  v1TeamTenantRolesUpdate: V1TeamTenantRolesUpdate,
  options?: RequestInit,
): Promise<v1TeamsUidTenantRolesUpdateResponse> => {
  const res = await fetch(getV1TeamsUidTenantRolesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TeamTenantRolesUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsUidTenantRolesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsUidTenantRolesUpdateResponse;
};

/**
 * @summary Update tenant address
 */
export type v1PatchTenantAddressResponseDefault = {
  data: unknown;
  status: number;
};

export type v1PatchTenantAddressResponseComposite =
  v1PatchTenantAddressResponseDefault;

export type v1PatchTenantAddressResponse =
  v1PatchTenantAddressResponseComposite & {
    headers: Headers;
  };

export const getV1PatchTenantAddressUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/address`;
};

export const v1PatchTenantAddress = async (
  tenantUid: string,
  v1TenantAddressPatch?: V1TenantAddressPatch,
  options?: RequestInit,
): Promise<v1PatchTenantAddressResponse> => {
  const res = await fetch(getV1PatchTenantAddressUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantAddressPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PatchTenantAddressResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PatchTenantAddressResponse;
};

/**
 * @summary lists the certificates for the tenant
 */
export type v1TenantUIdAssetsCertsListResponse200 = {
  data: V1TenantAssetCerts;
  status: 200;
};

export type v1TenantUIdAssetsCertsListResponseComposite =
  v1TenantUIdAssetsCertsListResponse200;

export type v1TenantUIdAssetsCertsListResponse =
  v1TenantUIdAssetsCertsListResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUIdAssetsCertsListUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs`;
};

export const v1TenantUIdAssetsCertsList = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUIdAssetsCertsListResponse> => {
  const res = await fetch(getV1TenantUIdAssetsCertsListUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUIdAssetsCertsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUIdAssetsCertsListResponse;
};

/**
 * @summary create the tenant certificate
 */
export type v1TenantUidAssetsCertsCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1TenantUidAssetsCertsCreateResponseComposite =
  v1TenantUidAssetsCertsCreateResponse201;

export type v1TenantUidAssetsCertsCreateResponse =
  v1TenantUidAssetsCertsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs`;
};

export const v1TenantUidAssetsCertsCreate = async (
  tenantUid: string,
  v1TenantAssetCert?: V1TenantAssetCert,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsCreateResponse> => {
  const res = await fetch(getV1TenantUidAssetsCertsCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantAssetCert),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsCreateResponse;
};

/**
 * @summary deletes the tenant certificate
 */
export type v1TenantUidAssetsCertsUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidAssetsCertsUidDeleteResponseComposite =
  v1TenantUidAssetsCertsUidDeleteResponseDefault;

export type v1TenantUidAssetsCertsUidDeleteResponse =
  v1TenantUidAssetsCertsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidDeleteUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const v1TenantUidAssetsCertsUidDelete = async (
  tenantUid: string,
  certificateUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsUidDeleteResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidDeleteUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsUidDeleteResponse;
};

/**
 * @summary Returns the ca certificate for the tenant
 */
export type v1TenantUidAssetsCertsUidGetResponse200 = {
  data: V1TenantAssetCert;
  status: 200;
};

export type v1TenantUidAssetsCertsUidGetResponseComposite =
  v1TenantUidAssetsCertsUidGetResponse200;

export type v1TenantUidAssetsCertsUidGetResponse =
  v1TenantUidAssetsCertsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidGetUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const v1TenantUidAssetsCertsUidGet = async (
  tenantUid: string,
  certificateUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsUidGetResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidGetUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsUidGetResponse;
};

/**
 * @summary updates the tenant certificate
 */
export type v1TenantUidAssetsCertsUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidAssetsCertsUidUpdateResponseComposite =
  v1TenantUidAssetsCertsUidUpdateResponseDefault;

export type v1TenantUidAssetsCertsUidUpdateResponse =
  v1TenantUidAssetsCertsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsCertsUidUpdateUrl = (
  tenantUid: string,
  certificateUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/certs/${certificateUid}`;
};

export const v1TenantUidAssetsCertsUidUpdate = async (
  tenantUid: string,
  certificateUid: string,
  v1TenantAssetCert?: V1TenantAssetCert,
  options?: RequestInit,
): Promise<v1TenantUidAssetsCertsUidUpdateResponse> => {
  const res = await fetch(
    getV1TenantUidAssetsCertsUidUpdateUrl(tenantUid, certificateUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1TenantAssetCert),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsCertsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsCertsUidUpdateResponse;
};

/**
 * @summary deletes the tenant data sink config
 */
export type v1TenantUidAssetsDataSinksDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidAssetsDataSinksDeleteResponseComposite =
  v1TenantUidAssetsDataSinksDeleteResponseDefault;

export type v1TenantUidAssetsDataSinksDeleteResponse =
  v1TenantUidAssetsDataSinksDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksDeleteUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksDelete = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksDeleteResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksDeleteUrl(tenantUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksDeleteResponse;
};

/**
 * @summary Returns data sink config of tenant
 */
export type v1TenantUidAssetsDataSinksGetResponse200 = {
  data: V1DataSinkConfig;
  status: 200;
};

export type v1TenantUidAssetsDataSinksGetResponseComposite =
  v1TenantUidAssetsDataSinksGetResponse200;

export type v1TenantUidAssetsDataSinksGetResponse =
  v1TenantUidAssetsDataSinksGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksGetResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksGetResponse;
};

/**
 * @summary create data sink config
 */
export type v1TenantUidAssetsDataSinksCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1TenantUidAssetsDataSinksCreateResponseComposite =
  v1TenantUidAssetsDataSinksCreateResponse201;

export type v1TenantUidAssetsDataSinksCreateResponse =
  v1TenantUidAssetsDataSinksCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksCreate = async (
  tenantUid: string,
  v1DataSinkConfig?: V1DataSinkConfig,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksCreateResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1DataSinkConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksCreateResponse;
};

/**
 * @summary updates the tenant data sink config
 */
export type v1TenantUidAssetsDataSinksUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidAssetsDataSinksUpdateResponseComposite =
  v1TenantUidAssetsDataSinksUpdateResponseDefault;

export type v1TenantUidAssetsDataSinksUpdateResponse =
  v1TenantUidAssetsDataSinksUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAssetsDataSinksUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/assets/dataSinks`;
};

export const v1TenantUidAssetsDataSinksUpdate = async (
  tenantUid: string,
  v1DataSinkConfig?: V1DataSinkConfig,
  options?: RequestInit,
): Promise<v1TenantUidAssetsDataSinksUpdateResponse> => {
  const res = await fetch(getV1TenantUidAssetsDataSinksUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1DataSinkConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAssetsDataSinksUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAssetsDataSinksUpdateResponse;
};

/**
 * @summary Get tenant auth token settings
 */
export type v1TenantUidAuthTokenSettingsGetResponse200 = {
  data: V1AuthTokenSettings;
  status: 200;
};

export type v1TenantUidAuthTokenSettingsGetResponseComposite =
  v1TenantUidAuthTokenSettingsGetResponse200;

export type v1TenantUidAuthTokenSettingsGetResponse =
  v1TenantUidAuthTokenSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAuthTokenSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/authTokenSettings`;
};

export const v1TenantUidAuthTokenSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidAuthTokenSettingsGetResponse> => {
  const res = await fetch(getV1TenantUidAuthTokenSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAuthTokenSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAuthTokenSettingsGetResponse;
};

/**
 * @summary Update tenant auth token settings
 */
export type v1TenantUidAuthTokenSettingsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidAuthTokenSettingsUpdateResponseComposite =
  v1TenantUidAuthTokenSettingsUpdateResponseDefault;

export type v1TenantUidAuthTokenSettingsUpdateResponse =
  v1TenantUidAuthTokenSettingsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidAuthTokenSettingsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/authTokenSettings`;
};

export const v1TenantUidAuthTokenSettingsUpdate = async (
  tenantUid: string,
  v1AuthTokenSettings?: V1AuthTokenSettings,
  options?: RequestInit,
): Promise<v1TenantUidAuthTokenSettingsUpdateResponse> => {
  const res = await fetch(getV1TenantUidAuthTokenSettingsUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AuthTokenSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidAuthTokenSettingsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidAuthTokenSettingsUpdateResponse;
};

/**
 * @summary Tenant to accept the contract agreement
 */
export type v1TenantsUidContractAcceptResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantsUidContractAcceptResponseComposite =
  v1TenantsUidContractAcceptResponseDefault;

export type v1TenantsUidContractAcceptResponse =
  v1TenantsUidContractAcceptResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidContractAcceptUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/contract/accept`;
};

export const v1TenantsUidContractAccept = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantsUidContractAcceptResponse> => {
  const res = await fetch(getV1TenantsUidContractAcceptUrl(tenantUid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsUidContractAcceptResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsUidContractAcceptResponse;
};

/**
 * @summary Deletes the aws credit account for tenants
 */
export type v1TenantsCreditAccountDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantsCreditAccountDeleteResponseComposite =
  v1TenantsCreditAccountDeleteResponseDefault;

export type v1TenantsCreditAccountDeleteResponse =
  v1TenantsCreditAccountDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsCreditAccountDeleteUrl = (
  tenantUid: string,
  params?: V1TenantsCreditAccountDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws`;
};

export const v1TenantsCreditAccountDelete = async (
  tenantUid: string,
  params?: V1TenantsCreditAccountDeleteParams,
  options?: RequestInit,
): Promise<v1TenantsCreditAccountDeleteResponse> => {
  const res = await fetch(
    getV1TenantsCreditAccountDeleteUrl(tenantUid, params),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsCreditAccountDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsCreditAccountDeleteResponse;
};

/**
 * @summary Get the credit accounts for the tenants with free tier access
 */
export type v1TenantsCreditAccountGetResponse200 = {
  data: V1AwsCreditAccountEntity;
  status: 200;
};

export type v1TenantsCreditAccountGetResponseComposite =
  v1TenantsCreditAccountGetResponse200;

export type v1TenantsCreditAccountGetResponse =
  v1TenantsCreditAccountGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsCreditAccountGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/creditAccount/aws`;
};

export const v1TenantsCreditAccountGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantsCreditAccountGetResponse> => {
  const res = await fetch(getV1TenantsCreditAccountGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsCreditAccountGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsCreditAccountGetResponse;
};

/**
 * @summary retrieves the domains for tenant
 */
export type v1TenantUidDomainsGetResponse200 = {
  data: V1TenantDomains;
  status: 200;
};

export type v1TenantUidDomainsGetResponseComposite =
  v1TenantUidDomainsGetResponse200;

export type v1TenantUidDomainsGetResponse =
  v1TenantUidDomainsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidDomainsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/domains`;
};

export const v1TenantUidDomainsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidDomainsGetResponse> => {
  const res = await fetch(getV1TenantUidDomainsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidDomainsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidDomainsGetResponse;
};

/**
 * @summary creates or updates domains for tenant
 */
export type v1TenantUidDomainsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidDomainsUpdateResponseComposite =
  v1TenantUidDomainsUpdateResponseDefault;

export type v1TenantUidDomainsUpdateResponse =
  v1TenantUidDomainsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidDomainsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/domains`;
};

export const v1TenantUidDomainsUpdate = async (
  tenantUid: string,
  v1TenantDomains?: V1TenantDomains,
  options?: RequestInit,
): Promise<v1TenantUidDomainsUpdateResponse> => {
  const res = await fetch(getV1TenantUidDomainsUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantDomains),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidDomainsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidDomainsUpdateResponse;
};

/**
 * @summary Update tenant emailId
 */
export type v1PatchTenantEmailIdResponseDefault = {
  data: unknown;
  status: number;
};

export type v1PatchTenantEmailIdResponseComposite =
  v1PatchTenantEmailIdResponseDefault;

export type v1PatchTenantEmailIdResponse =
  v1PatchTenantEmailIdResponseComposite & {
    headers: Headers;
  };

export const getV1PatchTenantEmailIdUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/emailId`;
};

export const v1PatchTenantEmailId = async (
  tenantUid: string,
  v1TenantEmailPatch?: V1TenantEmailPatch,
  options?: RequestInit,
): Promise<v1PatchTenantEmailIdResponse> => {
  const res = await fetch(getV1PatchTenantEmailIdUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantEmailPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1PatchTenantEmailIdResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1PatchTenantEmailIdResponse;
};

/**
 * @summary Get tenant level freemium configuration
 */
export type v1TenantFreemiumGetResponse200 = {
  data: V1TenantFreemium;
  status: 200;
};

export type v1TenantFreemiumGetResponseComposite =
  v1TenantFreemiumGetResponse200;

export type v1TenantFreemiumGetResponse =
  v1TenantFreemiumGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFreemiumGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemium`;
};

export const v1TenantFreemiumGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantFreemiumGetResponse> => {
  const res = await fetch(getV1TenantFreemiumGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantFreemiumGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantFreemiumGetResponse;
};

/**
 * @summary Update tenant freemium configuration
 */
export type v1TenantFreemiumUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantFreemiumUpdateResponseComposite =
  v1TenantFreemiumUpdateResponseDefault;

export type v1TenantFreemiumUpdateResponse =
  v1TenantFreemiumUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFreemiumUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemium`;
};

export const v1TenantFreemiumUpdate = async (
  tenantUid: string,
  v1TenantFreemium?: V1TenantFreemium,
  options?: RequestInit,
): Promise<v1TenantFreemiumUpdateResponse> => {
  const res = await fetch(getV1TenantFreemiumUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantFreemium),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantFreemiumUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantFreemiumUpdateResponse;
};

/**
 * @summary Get tenant freemium usage
 */
export type v1TenantFreemiumUsageGetResponse200 = {
  data: V1TenantFreemiumUsage;
  status: 200;
};

export type v1TenantFreemiumUsageGetResponseComposite =
  v1TenantFreemiumUsageGetResponse200;

export type v1TenantFreemiumUsageGetResponse =
  v1TenantFreemiumUsageGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFreemiumUsageGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/freemiumUsage`;
};

export const v1TenantFreemiumUsageGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantFreemiumUsageGetResponse> => {
  const res = await fetch(getV1TenantFreemiumUsageGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantFreemiumUsageGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantFreemiumUsageGetResponse;
};

/**
 * @summary Returns a specified invoice
 */
export type v1InvoicesUidGetResponse200 = {
  data: V1Invoice;
  status: 200;
};

export type v1InvoicesUidGetResponseComposite = v1InvoicesUidGetResponse200;

export type v1InvoicesUidGetResponse = v1InvoicesUidGetResponseComposite & {
  headers: Headers;
};

export const getV1InvoicesUidGetUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}`;
};

export const v1InvoicesUidGet = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<v1InvoicesUidGetResponse> => {
  const res = await fetch(getV1InvoicesUidGetUrl(tenantUid, invoiceUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1InvoicesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1InvoicesUidGetResponse;
};

/**
 * @summary Downloads the specified invoice report
 */
export type v1InvoiceUidReportInvoicePdfResponse200 = {
  data: Blob;
  status: 200;
};

export type v1InvoiceUidReportInvoicePdfResponseComposite =
  v1InvoiceUidReportInvoicePdfResponse200;

export type v1InvoiceUidReportInvoicePdfResponse =
  v1InvoiceUidReportInvoicePdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportInvoicePdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/invoice/pdf`;
};

export const v1InvoiceUidReportInvoicePdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<v1InvoiceUidReportInvoicePdfResponse> => {
  const res = await fetch(
    getV1InvoiceUidReportInvoicePdfUrl(tenantUid, invoiceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1InvoiceUidReportInvoicePdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1InvoiceUidReportInvoicePdfResponse;
};

/**
 * @summary Downloads the specified monthly invoice report
 */
export type v1InvoiceUidReportPdfResponse200 = {
  data: Blob;
  status: 200;
};

export type v1InvoiceUidReportPdfResponseComposite =
  v1InvoiceUidReportPdfResponse200;

export type v1InvoiceUidReportPdfResponse =
  v1InvoiceUidReportPdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportPdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/pdf`;
};

export const v1InvoiceUidReportPdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<v1InvoiceUidReportPdfResponse> => {
  const res = await fetch(getV1InvoiceUidReportPdfUrl(tenantUid, invoiceUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1InvoiceUidReportPdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1InvoiceUidReportPdfResponse;
};

/**
 * @summary Downloads the specified tenant usage
 */
export type v1InvoiceUidReportUsagePdfResponse200 = {
  data: Blob;
  status: 200;
};

export type v1InvoiceUidReportUsagePdfResponseComposite =
  v1InvoiceUidReportUsagePdfResponse200;

export type v1InvoiceUidReportUsagePdfResponse =
  v1InvoiceUidReportUsagePdfResponseComposite & {
    headers: Headers;
  };

export const getV1InvoiceUidReportUsagePdfUrl = (
  tenantUid: string,
  invoiceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/invoices/${invoiceUid}/report/usage/pdf`;
};

export const v1InvoiceUidReportUsagePdf = async (
  tenantUid: string,
  invoiceUid: string,
  options?: RequestInit,
): Promise<v1InvoiceUidReportUsagePdfResponse> => {
  const res = await fetch(
    getV1InvoiceUidReportUsagePdfUrl(tenantUid, invoiceUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1InvoiceUidReportUsagePdfResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1InvoiceUidReportUsagePdfResponse;
};

/**
 * @summary Get tenant login banner settings
 */
export type v1TenantUidLoginBannerGetResponse200 = {
  data: V1LoginBannerSettings;
  status: 200;
};

export type v1TenantUidLoginBannerGetResponseComposite =
  v1TenantUidLoginBannerGetResponse200;

export type v1TenantUidLoginBannerGetResponse =
  v1TenantUidLoginBannerGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidLoginBannerGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/loginBanner`;
};

export const v1TenantUidLoginBannerGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidLoginBannerGetResponse> => {
  const res = await fetch(getV1TenantUidLoginBannerGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidLoginBannerGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidLoginBannerGetResponse;
};

/**
 * @summary Update tenant login banner settings
 */
export type v1TenantUidLoginBannerUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidLoginBannerUpdateResponseComposite =
  v1TenantUidLoginBannerUpdateResponseDefault;

export type v1TenantUidLoginBannerUpdateResponse =
  v1TenantUidLoginBannerUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidLoginBannerUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/loginBanner`;
};

export const v1TenantUidLoginBannerUpdate = async (
  tenantUid: string,
  v1LoginBannerSettings?: V1LoginBannerSettings,
  options?: RequestInit,
): Promise<v1TenantUidLoginBannerUpdateResponse> => {
  const res = await fetch(getV1TenantUidLoginBannerUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1LoginBannerSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidLoginBannerUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidLoginBannerUpdateResponse;
};

/**
 * @summary Delete the macros for the specified tenant by given macro name
 */
export type v1TenantsUidMacrosDeleteByMacroNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantsUidMacrosDeleteByMacroNameResponseComposite =
  v1TenantsUidMacrosDeleteByMacroNameResponseDefault;

export type v1TenantsUidMacrosDeleteByMacroNameResponse =
  v1TenantsUidMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosDeleteByMacroNameUrl = (
  tenantUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const v1TenantsUidMacrosDeleteByMacroName = async (
  tenantUid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1TenantsUidMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(
    getV1TenantsUidMacrosDeleteByMacroNameUrl(tenantUid),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1Macros),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsUidMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsUidMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the specified tenant
 */
export type v1TenantsUidMacrosListResponse200 = {
  data: V1Macros;
  status: 200;
};

export type v1TenantsUidMacrosListResponseComposite =
  v1TenantsUidMacrosListResponse200;

export type v1TenantsUidMacrosListResponse =
  v1TenantsUidMacrosListResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosListUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const v1TenantsUidMacrosList = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantsUidMacrosListResponse> => {
  const res = await fetch(getV1TenantsUidMacrosListUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsUidMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsUidMacrosListResponse;
};

/**
 * @summary Update the macros for the specified tenant by given macro name
 */
export type v1TenantsUidMacrosUpdateByMacroNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantsUidMacrosUpdateByMacroNameResponseComposite =
  v1TenantsUidMacrosUpdateByMacroNameResponseDefault;

export type v1TenantsUidMacrosUpdateByMacroNameResponse =
  v1TenantsUidMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosUpdateByMacroNameUrl = (
  tenantUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const v1TenantsUidMacrosUpdateByMacroName = async (
  tenantUid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1TenantsUidMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(
    getV1TenantsUidMacrosUpdateByMacroNameUrl(tenantUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1Macros),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsUidMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsUidMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the specified tenant
 */
export type v1TenantsUidMacrosCreateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantsUidMacrosCreateResponseComposite =
  v1TenantsUidMacrosCreateResponseDefault;

export type v1TenantsUidMacrosCreateResponse =
  v1TenantsUidMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosCreateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const v1TenantsUidMacrosCreate = async (
  tenantUid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1TenantsUidMacrosCreateResponse> => {
  const res = await fetch(getV1TenantsUidMacrosCreateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsUidMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsUidMacrosCreateResponse;
};

/**
 * @summary Update the macros of the specified tenant
 */
export type v1TenantsUidMacrosUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantsUidMacrosUpdateResponseComposite =
  v1TenantsUidMacrosUpdateResponseDefault;

export type v1TenantsUidMacrosUpdateResponse =
  v1TenantsUidMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantsUidMacrosUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/macros`;
};

export const v1TenantsUidMacrosUpdate = async (
  tenantUid: string,
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1TenantsUidMacrosUpdateResponse> => {
  const res = await fetch(getV1TenantsUidMacrosUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantsUidMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantsUidMacrosUpdateResponse;
};

/**
 * @summary Returns the oidc Spec for tenant
 */
export type v1TenantUidOidcConfigGetResponse200 = {
  data: V1TenantOidcClientSpec;
  status: 200;
};

export type v1TenantUidOidcConfigGetResponseComposite =
  v1TenantUidOidcConfigGetResponse200;

export type v1TenantUidOidcConfigGetResponse =
  v1TenantUidOidcConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidOidcConfigGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/oidc/config`;
};

export const v1TenantUidOidcConfigGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidOidcConfigGetResponse> => {
  const res = await fetch(getV1TenantUidOidcConfigGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidOidcConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidOidcConfigGetResponse;
};

/**
 * @summary Associates the  oidc Spec for the tenant
 */
export type v1TenantUidOidcConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidOidcConfigUpdateResponseComposite =
  v1TenantUidOidcConfigUpdateResponseDefault;

export type v1TenantUidOidcConfigUpdateResponse =
  v1TenantUidOidcConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidOidcConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/oidc/config`;
};

export const v1TenantUidOidcConfigUpdate = async (
  tenantUid: string,
  v1TenantOidcClientSpec?: V1TenantOidcClientSpec,
  options?: RequestInit,
): Promise<v1TenantUidOidcConfigUpdateResponse> => {
  const res = await fetch(getV1TenantUidOidcConfigUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantOidcClientSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidOidcConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidOidcConfigUpdateResponse;
};

/**
 * @summary retrieves the password policy for tenant
 */
export type v1TenantUidPasswordPolicyGetResponse200 = {
  data: V1TenantPasswordPolicyEntity;
  status: 200;
};

export type v1TenantUidPasswordPolicyGetResponseComposite =
  v1TenantUidPasswordPolicyGetResponse200;

export type v1TenantUidPasswordPolicyGetResponse =
  v1TenantUidPasswordPolicyGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidPasswordPolicyGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/password/policy`;
};

export const v1TenantUidPasswordPolicyGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidPasswordPolicyGetResponse> => {
  const res = await fetch(getV1TenantUidPasswordPolicyGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidPasswordPolicyGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidPasswordPolicyGetResponse;
};

/**
 * @summary creates or updates a password policy for tenant
 */
export type v1TenantUidPasswordPolicyUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidPasswordPolicyUpdateResponseComposite =
  v1TenantUidPasswordPolicyUpdateResponseDefault;

export type v1TenantUidPasswordPolicyUpdateResponse =
  v1TenantUidPasswordPolicyUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidPasswordPolicyUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/password/policy`;
};

export const v1TenantUidPasswordPolicyUpdate = async (
  tenantUid: string,
  v1TenantPasswordPolicyEntity?: V1TenantPasswordPolicyEntity,
  options?: RequestInit,
): Promise<v1TenantUidPasswordPolicyUpdateResponse> => {
  const res = await fetch(getV1TenantUidPasswordPolicyUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantPasswordPolicyEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidPasswordPolicyUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidPasswordPolicyUpdateResponse;
};

/**
 * @summary Get is cluster group enabled for a specific tenant
 */
export type v1TenantPrefClusterGroupGetResponse200 = {
  data: V1TenantEnableClusterGroup;
  status: 200;
};

export type v1TenantPrefClusterGroupGetResponseComposite =
  v1TenantPrefClusterGroupGetResponse200;

export type v1TenantPrefClusterGroupGetResponse =
  v1TenantPrefClusterGroupGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantPrefClusterGroupGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterGroup`;
};

export const v1TenantPrefClusterGroupGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantPrefClusterGroupGetResponse> => {
  const res = await fetch(getV1TenantPrefClusterGroupGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantPrefClusterGroupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantPrefClusterGroupGetResponse;
};

/**
 * @summary Enable or Disable cluster group for a specific tenant
 */
export type v1TenantPrefClusterGroupUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantPrefClusterGroupUpdateResponseComposite =
  v1TenantPrefClusterGroupUpdateResponseDefault;

export type v1TenantPrefClusterGroupUpdateResponse =
  v1TenantPrefClusterGroupUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantPrefClusterGroupUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterGroup`;
};

export const v1TenantPrefClusterGroupUpdate = async (
  tenantUid: string,
  v1TenantEnableClusterGroup?: V1TenantEnableClusterGroup,
  options?: RequestInit,
): Promise<v1TenantPrefClusterGroupUpdateResponse> => {
  const res = await fetch(getV1TenantPrefClusterGroupUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantEnableClusterGroup),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantPrefClusterGroupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantPrefClusterGroupUpdateResponse;
};

/**
 * @summary Get tenant cluster settings
 */
export type v1TenantClusterSettingsGetResponse200 = {
  data: V1TenantClusterSettings;
  status: 200;
};

export type v1TenantClusterSettingsGetResponseComposite =
  v1TenantClusterSettingsGetResponse200;

export type v1TenantClusterSettingsGetResponse =
  v1TenantClusterSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantClusterSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterSettings`;
};

export const v1TenantClusterSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantClusterSettingsGetResponse> => {
  const res = await fetch(getV1TenantClusterSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantClusterSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantClusterSettingsGetResponse;
};

/**
 * @summary Update tenant clusters nodes auto remediation setting
 */
export type v1TenantClustersNodesAutoRemediationSettingUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantClustersNodesAutoRemediationSettingUpdateResponseComposite =
  v1TenantClustersNodesAutoRemediationSettingUpdateResponseDefault;

export type v1TenantClustersNodesAutoRemediationSettingUpdateResponse =
  v1TenantClustersNodesAutoRemediationSettingUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantClustersNodesAutoRemediationSettingUpdateUrl = (
  tenantUid: string,
) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/clusterSettings/nodesAutoRemediationSetting`;
};

export const v1TenantClustersNodesAutoRemediationSettingUpdate = async (
  tenantUid: string,
  v1NodesAutoRemediationSettings?: V1NodesAutoRemediationSettings,
  options?: RequestInit,
): Promise<v1TenantClustersNodesAutoRemediationSettingUpdateResponse> => {
  const res = await fetch(
    getV1TenantClustersNodesAutoRemediationSettingUpdateUrl(tenantUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1NodesAutoRemediationSettings),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantClustersNodesAutoRemediationSettingUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantClustersNodesAutoRemediationSettingUpdateResponse;
};

/**
 * @summary Get developer credit enabled for a specific tenant
 */
export type v1TenantDeveloperCreditGetResponse200 = {
  data: V1DeveloperCredit;
  status: 200;
};

export type v1TenantDeveloperCreditGetResponseComposite =
  v1TenantDeveloperCreditGetResponse200;

export type v1TenantDeveloperCreditGetResponse =
  v1TenantDeveloperCreditGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantDeveloperCreditGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/developerCredit`;
};

export const v1TenantDeveloperCreditGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantDeveloperCreditGetResponse> => {
  const res = await fetch(getV1TenantDeveloperCreditGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantDeveloperCreditGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantDeveloperCreditGetResponse;
};

/**
 * @summary update developer credit for a specific tenant
 */
export type v1TenantDeveloperCreditUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantDeveloperCreditUpdateResponseComposite =
  v1TenantDeveloperCreditUpdateResponseDefault;

export type v1TenantDeveloperCreditUpdateResponse =
  v1TenantDeveloperCreditUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantDeveloperCreditUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/developerCredit`;
};

export const v1TenantDeveloperCreditUpdate = async (
  tenantUid: string,
  v1DeveloperCredit?: V1DeveloperCredit,
  options?: RequestInit,
): Promise<v1TenantDeveloperCreditUpdateResponse> => {
  const res = await fetch(getV1TenantDeveloperCreditUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1DeveloperCredit),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantDeveloperCreditUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantDeveloperCreditUpdateResponse;
};

/**
 * @summary Get tenant fips settings
 */
export type v1TenantFipsSettingsGetResponse200 = {
  data: V1FipsSettings;
  status: 200;
};

export type v1TenantFipsSettingsGetResponseComposite =
  v1TenantFipsSettingsGetResponse200;

export type v1TenantFipsSettingsGetResponse =
  v1TenantFipsSettingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFipsSettingsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/fips`;
};

export const v1TenantFipsSettingsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantFipsSettingsGetResponse> => {
  const res = await fetch(getV1TenantFipsSettingsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantFipsSettingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantFipsSettingsGetResponse;
};

/**
 * @summary Update tenant fips setting
 */
export type v1TenantFipsSettingsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantFipsSettingsUpdateResponseComposite =
  v1TenantFipsSettingsUpdateResponseDefault;

export type v1TenantFipsSettingsUpdateResponse =
  v1TenantFipsSettingsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantFipsSettingsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/preferences/fips`;
};

export const v1TenantFipsSettingsUpdate = async (
  tenantUid: string,
  v1FipsSettings?: V1FipsSettings,
  options?: RequestInit,
): Promise<v1TenantFipsSettingsUpdateResponse> => {
  const res = await fetch(getV1TenantFipsSettingsUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1FipsSettings),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantFipsSettingsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantFipsSettingsUpdateResponse;
};

/**
 * @summary Get all rate config for public and private cloud
 */
export type v1RateConfigGetResponse200 = {
  data: V1RateConfig;
  status: 200;
};

export type v1RateConfigGetResponseComposite = v1RateConfigGetResponse200;

export type v1RateConfigGetResponse = v1RateConfigGetResponseComposite & {
  headers: Headers;
};

export const getV1RateConfigGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/rateConfig`;
};

export const v1RateConfigGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1RateConfigGetResponse> => {
  const res = await fetch(getV1RateConfigGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RateConfigGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RateConfigGetResponse;
};

/**
 * @summary updates the rate config for public and private cloud
 */
export type v1RateConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1RateConfigUpdateResponseComposite =
  v1RateConfigUpdateResponseDefault;

export type v1RateConfigUpdateResponse = v1RateConfigUpdateResponseComposite & {
  headers: Headers;
};

export const getV1RateConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/rateConfig`;
};

export const v1RateConfigUpdate = async (
  tenantUid: string,
  v1RateConfig?: V1RateConfig,
  options?: RequestInit,
): Promise<v1RateConfigUpdateResponse> => {
  const res = await fetch(getV1RateConfigUpdateUrl(tenantUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1RateConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RateConfigUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RateConfigUpdateResponse;
};

/**
 * @summary Get tenant level resource limits configuration
 */
export type v1TenantResourceLimitsGetResponse200 = {
  data: V1TenantResourceLimits;
  status: 200;
};

export type v1TenantResourceLimitsGetResponseComposite =
  v1TenantResourceLimitsGetResponse200;

export type v1TenantResourceLimitsGetResponse =
  v1TenantResourceLimitsGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantResourceLimitsGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/resourceLimits`;
};

export const v1TenantResourceLimitsGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantResourceLimitsGetResponse> => {
  const res = await fetch(getV1TenantResourceLimitsGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantResourceLimitsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantResourceLimitsGetResponse;
};

/**
 * @summary Update tenant resource limits configuration
 */
export type v1TenantResourceLimitsUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantResourceLimitsUpdateResponseComposite =
  v1TenantResourceLimitsUpdateResponseDefault;

export type v1TenantResourceLimitsUpdateResponse =
  v1TenantResourceLimitsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantResourceLimitsUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/resourceLimits`;
};

export const v1TenantResourceLimitsUpdate = async (
  tenantUid: string,
  v1TenantResourceLimitsEntity?: V1TenantResourceLimitsEntity,
  options?: RequestInit,
): Promise<v1TenantResourceLimitsUpdateResponse> => {
  const res = await fetch(getV1TenantResourceLimitsUpdateUrl(tenantUid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantResourceLimitsEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantResourceLimitsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantResourceLimitsUpdateResponse;
};

/**
 * @summary Returns the specified service provider metadata and Saml Spec for tenant
 */
export type v1TenantUidSamlConfigSpecGetResponse200 = {
  data: V1TenantSamlSpec;
  status: 200;
};

export type v1TenantUidSamlConfigSpecGetResponseComposite =
  v1TenantUidSamlConfigSpecGetResponse200;

export type v1TenantUidSamlConfigSpecGetResponse =
  v1TenantUidSamlConfigSpecGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSamlConfigSpecGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/saml/config`;
};

export const v1TenantUidSamlConfigSpecGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidSamlConfigSpecGetResponse> => {
  const res = await fetch(getV1TenantUidSamlConfigSpecGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSamlConfigSpecGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSamlConfigSpecGetResponse;
};

/**
 * @summary Associates the specified federation metadata for the tenant
 */
export type v1TenantUidSamlConfigUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidSamlConfigUpdateResponseComposite =
  v1TenantUidSamlConfigUpdateResponseDefault;

export type v1TenantUidSamlConfigUpdateResponse =
  v1TenantUidSamlConfigUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSamlConfigUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/saml/config`;
};

export const v1TenantUidSamlConfigUpdate = async (
  tenantUid: string,
  v1TenantSamlRequestSpec?: V1TenantSamlRequestSpec,
  options?: RequestInit,
): Promise<v1TenantUidSamlConfigUpdateResponse> => {
  const res = await fetch(getV1TenantUidSamlConfigUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantSamlRequestSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSamlConfigUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSamlConfigUpdateResponse;
};

/**
 * @summary get sso logins for the tenants
 */
export type v1TenantUidSsoAuthProvidersGetResponse200 = {
  data: V1TenantSsoAuthProvidersEntity;
  status: 200;
};

export type v1TenantUidSsoAuthProvidersGetResponseComposite =
  v1TenantUidSsoAuthProvidersGetResponse200;

export type v1TenantUidSsoAuthProvidersGetResponse =
  v1TenantUidSsoAuthProvidersGetResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSsoAuthProvidersGetUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/sso/auth/providers`;
};

export const v1TenantUidSsoAuthProvidersGet = async (
  tenantUid: string,
  options?: RequestInit,
): Promise<v1TenantUidSsoAuthProvidersGetResponse> => {
  const res = await fetch(getV1TenantUidSsoAuthProvidersGetUrl(tenantUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSsoAuthProvidersGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSsoAuthProvidersGetResponse;
};

/**
 * @summary enable sso logins for the tenants
 */
export type v1TenantUidSsoAuthProvidersUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TenantUidSsoAuthProvidersUpdateResponseComposite =
  v1TenantUidSsoAuthProvidersUpdateResponseDefault;

export type v1TenantUidSsoAuthProvidersUpdateResponse =
  v1TenantUidSsoAuthProvidersUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TenantUidSsoAuthProvidersUpdateUrl = (tenantUid: string) => {
  return `https://api.spectrocloud.com/v1/tenants/${tenantUid}/sso/auth/providers`;
};

export const v1TenantUidSsoAuthProvidersUpdate = async (
  tenantUid: string,
  v1TenantSsoAuthProvidersEntity?: V1TenantSsoAuthProvidersEntity,
  options?: RequestInit,
): Promise<v1TenantUidSsoAuthProvidersUpdateResponse> => {
  const res = await fetch(getV1TenantUidSsoAuthProvidersUpdateUrl(tenantUid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TenantSsoAuthProvidersEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TenantUidSsoAuthProvidersUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TenantUidSsoAuthProvidersUpdateResponse;
};

/**
 * Lists users the given user context
 * @summary Lists users
 */
export type v1UsersListResponse200 = {
  data: V1Users;
  status: 200;
};

export type v1UsersListResponseComposite = v1UsersListResponse200;

export type v1UsersListResponse = v1UsersListResponseComposite & {
  headers: Headers;
};

export const getV1UsersListUrl = (params?: V1UsersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users`;
};

export const v1UsersList = async (
  params?: V1UsersListParams,
  options?: RequestInit,
): Promise<v1UsersListResponse> => {
  const res = await fetch(getV1UsersListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersListResponse;
};

/**
 * A user is created for the given user context
 * @summary Create User
 */
export type v1UsersCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1UsersCreateResponseComposite = v1UsersCreateResponse201;

export type v1UsersCreateResponse = v1UsersCreateResponseComposite & {
  headers: Headers;
};

export const getV1UsersCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users`;
};

export const v1UsersCreate = async (
  v1UserEntity?: V1UserEntity,
  options?: RequestInit,
): Promise<v1UsersCreateResponse> => {
  const res = await fetch(getV1UsersCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersCreateResponse;
};

/**
 * @summary Returns the specified users location
 */
export type v1UsersAssetsLocationGetResponse200 = {
  data: V1UserAssetsLocations;
  status: 200;
};

export type v1UsersAssetsLocationGetResponseComposite =
  v1UsersAssetsLocationGetResponse200;

export type v1UsersAssetsLocationGetResponse =
  v1UsersAssetsLocationGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGetUrl = (
  params?: V1UsersAssetsLocationGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/locations?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/locations`;
};

export const v1UsersAssetsLocationGet = async (
  params?: V1UsersAssetsLocationGetParams,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationGetResponse;
};

/**
 * @summary Create a Azure location
 */
export type v1UsersAssetsLocationAzureCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1UsersAssetsLocationAzureCreateResponseComposite =
  v1UsersAssetsLocationAzureCreateResponse201;

export type v1UsersAssetsLocationAzureCreateResponse =
  v1UsersAssetsLocationAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure`;
};

export const v1UsersAssetsLocationAzureCreate = async (
  v1UserAssetsLocationAzure?: V1UserAssetsLocationAzure,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationAzureCreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationAzureCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationAzure),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationAzureCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationAzureCreateResponse;
};

/**
 * @summary Returns the specified Azure location
 */
export type v1UsersAssetsLocationAzureGetResponse200 = {
  data: V1UserAssetsLocationAzure;
  status: 200;
};

export type v1UsersAssetsLocationAzureGetResponseComposite =
  v1UsersAssetsLocationAzureGetResponse200;

export type v1UsersAssetsLocationAzureGetResponse =
  v1UsersAssetsLocationAzureGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationAzureGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure/${uid}`;
};

export const v1UsersAssetsLocationAzureGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationAzureGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationAzureGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationAzureGetResponse;
};

/**
 * @summary Updates the specified Azure location
 */
export type v1UsersAssetsLocationAzureUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetsLocationAzureUpdateResponseComposite =
  v1UsersAssetsLocationAzureUpdateResponseDefault;

export type v1UsersAssetsLocationAzureUpdateResponse =
  v1UsersAssetsLocationAzureUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationAzureUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure/${uid}`;
};

export const v1UsersAssetsLocationAzureUpdate = async (
  uid: string,
  v1UserAssetsLocationAzure?: V1UserAssetsLocationAzure,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationAzureUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationAzureUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationAzure),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationAzureUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationAzureUpdateResponse;
};

/**
 * @summary Create a GCP location
 */
export type v1UsersAssetsLocationGcpCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1UsersAssetsLocationGcpCreateResponseComposite =
  v1UsersAssetsLocationGcpCreateResponse201;

export type v1UsersAssetsLocationGcpCreateResponse =
  v1UsersAssetsLocationGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp`;
};

export const v1UsersAssetsLocationGcpCreate = async (
  v1UserAssetsLocationGcp?: V1UserAssetsLocationGcp,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationGcpCreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGcpCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationGcp),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationGcpCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationGcpCreateResponse;
};

/**
 * @summary Returns the specified GCP location
 */
export type v1UsersAssetsLocationGcpGetResponse200 = {
  data: V1UserAssetsLocationGcp;
  status: 200;
};

export type v1UsersAssetsLocationGcpGetResponseComposite =
  v1UsersAssetsLocationGcpGetResponse200;

export type v1UsersAssetsLocationGcpGetResponse =
  v1UsersAssetsLocationGcpGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGcpGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp/${uid}`;
};

export const v1UsersAssetsLocationGcpGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationGcpGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGcpGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationGcpGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationGcpGetResponse;
};

/**
 * @summary Updates the specified GCP location
 */
export type v1UsersAssetsLocationGcpUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetsLocationGcpUpdateResponseComposite =
  v1UsersAssetsLocationGcpUpdateResponseDefault;

export type v1UsersAssetsLocationGcpUpdateResponse =
  v1UsersAssetsLocationGcpUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGcpUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp/${uid}`;
};

export const v1UsersAssetsLocationGcpUpdate = async (
  uid: string,
  v1UserAssetsLocationGcp?: V1UserAssetsLocationGcp,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationGcpUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGcpUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationGcp),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationGcpUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationGcpUpdateResponse;
};

/**
 * @summary Create a MinIO location
 */
export type v1UsersAssetsLocationMinioCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1UsersAssetsLocationMinioCreateResponseComposite =
  v1UsersAssetsLocationMinioCreateResponse201;

export type v1UsersAssetsLocationMinioCreateResponse =
  v1UsersAssetsLocationMinioCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationMinioCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio`;
};

export const v1UsersAssetsLocationMinioCreate = async (
  v1UserAssetsLocationS3?: V1UserAssetsLocationS3,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationMinioCreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationMinioCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationMinioCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationMinioCreateResponse;
};

/**
 * @summary Returns the specified MinIO location
 */
export type v1UsersAssetsLocationMinioGetResponse200 = {
  data: V1UserAssetsLocationS3;
  status: 200;
};

export type v1UsersAssetsLocationMinioGetResponseComposite =
  v1UsersAssetsLocationMinioGetResponse200;

export type v1UsersAssetsLocationMinioGetResponse =
  v1UsersAssetsLocationMinioGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationMinioGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio/${uid}`;
};

export const v1UsersAssetsLocationMinioGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationMinioGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationMinioGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationMinioGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationMinioGetResponse;
};

/**
 * @summary Updates the specified MinIO location
 */
export type v1UsersAssetsLocationMinioUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetsLocationMinioUpdateResponseComposite =
  v1UsersAssetsLocationMinioUpdateResponseDefault;

export type v1UsersAssetsLocationMinioUpdateResponse =
  v1UsersAssetsLocationMinioUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationMinioUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio/${uid}`;
};

export const v1UsersAssetsLocationMinioUpdate = async (
  uid: string,
  v1UserAssetsLocationS3?: V1UserAssetsLocationS3,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationMinioUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationMinioUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationMinioUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationMinioUpdateResponse;
};

/**
 * @summary Create a S3 location
 */
export type v1UsersAssetsLocationS3CreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1UsersAssetsLocationS3CreateResponseComposite =
  v1UsersAssetsLocationS3CreateResponse201;

export type v1UsersAssetsLocationS3CreateResponse =
  v1UsersAssetsLocationS3CreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3CreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3`;
};

export const v1UsersAssetsLocationS3Create = async (
  v1UserAssetsLocationS3?: V1UserAssetsLocationS3,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationS3CreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3CreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationS3CreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationS3CreateResponse;
};

/**
 * @summary Returns the specified S3 location
 */
export type v1UsersAssetsLocationS3DeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetsLocationS3DeleteResponseComposite =
  v1UsersAssetsLocationS3DeleteResponseDefault;

export type v1UsersAssetsLocationS3DeleteResponse =
  v1UsersAssetsLocationS3DeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3DeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const v1UsersAssetsLocationS3Delete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationS3DeleteResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3DeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationS3DeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationS3DeleteResponse;
};

/**
 * @summary Returns the specified S3 location
 */
export type v1UsersAssetsLocationS3GetResponse200 = {
  data: V1UserAssetsLocationS3;
  status: 200;
};

export type v1UsersAssetsLocationS3GetResponseComposite =
  v1UsersAssetsLocationS3GetResponse200;

export type v1UsersAssetsLocationS3GetResponse =
  v1UsersAssetsLocationS3GetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3GetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const v1UsersAssetsLocationS3Get = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationS3GetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3GetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationS3GetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationS3GetResponse;
};

/**
 * @summary Updates the specified S3 location
 */
export type v1UsersAssetsLocationS3UpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetsLocationS3UpdateResponseComposite =
  v1UsersAssetsLocationS3UpdateResponseDefault;

export type v1UsersAssetsLocationS3UpdateResponse =
  v1UsersAssetsLocationS3UpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3UpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const v1UsersAssetsLocationS3Update = async (
  uid: string,
  v1UserAssetsLocationS3?: V1UserAssetsLocationS3,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationS3UpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3UpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationS3UpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationS3UpdateResponse;
};

/**
 * @summary Update the default backup location
 */
export type v1UsersAssetsLocationDefaultUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetsLocationDefaultUpdateResponseComposite =
  v1UsersAssetsLocationDefaultUpdateResponseDefault;

export type v1UsersAssetsLocationDefaultUpdateResponse =
  v1UsersAssetsLocationDefaultUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationDefaultUpdateUrl = (
  type: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/${type}/${uid}/default`;
};

export const v1UsersAssetsLocationDefaultUpdate = async (
  type: string,
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationDefaultUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationDefaultUpdateUrl(type, uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationDefaultUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationDefaultUpdateResponse;
};

/**
 * @summary Deletes the specified location
 */
export type v1UsersAssetsLocationDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetsLocationDeleteResponseComposite =
  v1UsersAssetsLocationDeleteResponseDefault;

export type v1UsersAssetsLocationDeleteResponse =
  v1UsersAssetsLocationDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/${uid}`;
};

export const v1UsersAssetsLocationDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetsLocationDeleteResponse> => {
  const res = await fetch(getV1UsersAssetsLocationDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsLocationDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsLocationDeleteResponse;
};

/**
 * @summary Returns the SSH keys
 */
export type v1UsersAssetsSshGetResponse200 = {
  data: V1UserAssetsSsh;
  status: 200;
};

export type v1UsersAssetsSshGetResponseComposite =
  v1UsersAssetsSshGetResponse200;

export type v1UsersAssetsSshGetResponse =
  v1UsersAssetsSshGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsSshGetUrl = (
  params?: V1UsersAssetsSshGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/sshkeys?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/sshkeys`;
};

export const v1UsersAssetsSshGet = async (
  params?: V1UsersAssetsSshGetParams,
  options?: RequestInit,
): Promise<v1UsersAssetsSshGetResponse> => {
  const res = await fetch(getV1UsersAssetsSshGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetsSshGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetsSshGetResponse;
};

/**
 * @summary Creates a SSH key
 */
export type v1UserAssetsSshCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1UserAssetsSshCreateResponseComposite =
  v1UserAssetsSshCreateResponse201;

export type v1UserAssetsSshCreateResponse =
  v1UserAssetsSshCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UserAssetsSshCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys`;
};

export const v1UserAssetsSshCreate = async (
  v1UserAssetSshEntity?: V1UserAssetSshEntity,
  options?: RequestInit,
): Promise<v1UserAssetsSshCreateResponse> => {
  const res = await fetch(getV1UserAssetsSshCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetSshEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UserAssetsSshCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UserAssetsSshCreateResponse;
};

/**
 * @summary Returns the specified user ssh key
 */
export type v1UsersAssetSshDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetSshDeleteResponseComposite =
  v1UsersAssetSshDeleteResponseDefault;

export type v1UsersAssetSshDeleteResponse =
  v1UsersAssetSshDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetSshDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const v1UsersAssetSshDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetSshDeleteResponse> => {
  const res = await fetch(getV1UsersAssetSshDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetSshDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetSshDeleteResponse;
};

/**
 * @summary Returns the specified user ssh key
 */
export type v1UsersAssetSshGetUidResponse200 = {
  data: V1UserAssetSsh;
  status: 200;
};

export type v1UsersAssetSshGetUidResponseComposite =
  v1UsersAssetSshGetUidResponse200;

export type v1UsersAssetSshGetUidResponse =
  v1UsersAssetSshGetUidResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetSshGetUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const v1UsersAssetSshGetUid = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersAssetSshGetUidResponse> => {
  const res = await fetch(getV1UsersAssetSshGetUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetSshGetUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetSshGetUidResponse;
};

/**
 * @summary Updates the specified user ssh key
 */
export type v1UsersAssetSshUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAssetSshUpdateResponseComposite =
  v1UsersAssetSshUpdateResponseDefault;

export type v1UsersAssetSshUpdateResponse =
  v1UsersAssetSshUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetSshUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const v1UsersAssetSshUpdate = async (
  uid: string,
  v1UserAssetSsh?: V1UserAssetSsh,
  options?: RequestInit,
): Promise<v1UsersAssetSshUpdateResponse> => {
  const res = await fetch(getV1UsersAssetSshUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetSsh),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAssetSshUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAssetSshUpdateResponse;
};

/**
 * @summary Returns the specified vSphere DNS mapping
 */
export type v1VsphereMappingGetResponse200 = {
  data: V1VsphereDnsMapping;
  status: 200;
};

export type v1VsphereMappingGetResponseComposite =
  v1VsphereMappingGetResponse200;

export type v1VsphereMappingGetResponse =
  v1VsphereMappingGetResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereMappingGetUrl = (
  params: V1VsphereMappingGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMapping?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMapping`;
};

export const v1VsphereMappingGet = async (
  params: V1VsphereMappingGetParams,
  options?: RequestInit,
): Promise<v1VsphereMappingGetResponse> => {
  const res = await fetch(getV1VsphereMappingGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereMappingGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereMappingGetResponse;
};

/**
 * @summary Returns the specified vSphere DNS mappings
 */
export type v1VsphereDnsMappingsGetResponse200 = {
  data: V1VsphereDnsMappings;
  status: 200;
};

export type v1VsphereDnsMappingsGetResponseComposite =
  v1VsphereDnsMappingsGetResponse200;

export type v1VsphereDnsMappingsGetResponse =
  v1VsphereDnsMappingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingsGetUrl = (
  params?: V1VsphereDnsMappingsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings`;
};

export const v1VsphereDnsMappingsGet = async (
  params?: V1VsphereDnsMappingsGetParams,
  options?: RequestInit,
): Promise<v1VsphereDnsMappingsGetResponse> => {
  const res = await fetch(getV1VsphereDnsMappingsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereDnsMappingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereDnsMappingsGetResponse;
};

/**
 * @summary Create a vSphere DNS mapping
 */
export type v1VsphereDnsMappingCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1VsphereDnsMappingCreateResponseComposite =
  v1VsphereDnsMappingCreateResponse201;

export type v1VsphereDnsMappingCreateResponse =
  v1VsphereDnsMappingCreateResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings`;
};

export const v1VsphereDnsMappingCreate = async (
  v1VsphereDnsMapping?: V1VsphereDnsMapping,
  options?: RequestInit,
): Promise<v1VsphereDnsMappingCreateResponse> => {
  const res = await fetch(getV1VsphereDnsMappingCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereDnsMapping),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereDnsMappingCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereDnsMappingCreateResponse;
};

/**
 * @summary Deletes the specified vSphere DNS mapping
 */
export type v1VsphereDnsMappingDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1VsphereDnsMappingDeleteResponseComposite =
  v1VsphereDnsMappingDeleteResponseDefault;

export type v1VsphereDnsMappingDeleteResponse =
  v1VsphereDnsMappingDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const v1VsphereDnsMappingDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1VsphereDnsMappingDeleteResponse> => {
  const res = await fetch(getV1VsphereDnsMappingDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereDnsMappingDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereDnsMappingDeleteResponse;
};

/**
 * @summary Returns the specified vSphere DNS mapping
 */
export type v1VsphereDnsMappingGetResponse200 = {
  data: V1VsphereDnsMapping;
  status: 200;
};

export type v1VsphereDnsMappingGetResponseComposite =
  v1VsphereDnsMappingGetResponse200;

export type v1VsphereDnsMappingGetResponse =
  v1VsphereDnsMappingGetResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const v1VsphereDnsMappingGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1VsphereDnsMappingGetResponse> => {
  const res = await fetch(getV1VsphereDnsMappingGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereDnsMappingGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereDnsMappingGetResponse;
};

/**
 * @summary Updates the specified vSphere DNS mapping
 */
export type v1VsphereDnsMappingUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1VsphereDnsMappingUpdateResponseComposite =
  v1VsphereDnsMappingUpdateResponseDefault;

export type v1VsphereDnsMappingUpdateResponse =
  v1VsphereDnsMappingUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const v1VsphereDnsMappingUpdate = async (
  uid: string,
  v1VsphereDnsMapping?: V1VsphereDnsMapping,
  options?: RequestInit,
): Promise<v1VsphereDnsMappingUpdateResponse> => {
  const res = await fetch(getV1VsphereDnsMappingUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereDnsMapping),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereDnsMappingUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereDnsMappingUpdateResponse;
};

/**
 * @summary Revoke access of specific token(s)
 */
export type v1UsersAuthTokensRevokeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersAuthTokensRevokeResponseComposite =
  v1UsersAuthTokensRevokeResponseDefault;

export type v1UsersAuthTokensRevokeResponse =
  v1UsersAuthTokensRevokeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAuthTokensRevokeUrl = () => {
  return `https://api.spectrocloud.com/v1/users/auth/tokens/revoke`;
};

export const v1UsersAuthTokensRevoke = async (
  v1AuthTokenRevoke?: V1AuthTokenRevoke,
  options?: RequestInit,
): Promise<v1UsersAuthTokensRevokeResponse> => {
  const res = await fetch(getV1UsersAuthTokensRevokeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AuthTokenRevoke),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersAuthTokensRevokeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersAuthTokensRevokeResponse;
};

/**
 * @summary Get the system Spectro repository. Restricted to edge services
 */
export type v1UsersConfigScarGetResponse200 = {
  data: V1SystemScarSpec;
  status: 200;
};

export type v1UsersConfigScarGetResponseComposite =
  v1UsersConfigScarGetResponse200;

export type v1UsersConfigScarGetResponse =
  v1UsersConfigScarGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersConfigScarGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/config/scar`;
};

export const v1UsersConfigScarGet = async (
  options?: RequestInit,
): Promise<v1UsersConfigScarGetResponse> => {
  const res = await fetch(getV1UsersConfigScarGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersConfigScarGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersConfigScarGetResponse;
};

/**
 * Returns a basic information of User for the specified uid.
 * @summary Returns the base information of specified User
 */
export type v1UsersInfoGetResponse200 = {
  data: V1UserInfo;
  status: 200;
};

export type v1UsersInfoGetResponseComposite = v1UsersInfoGetResponse200;

export type v1UsersInfoGetResponse = v1UsersInfoGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersInfoGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/info`;
};

export const v1UsersInfoGet = async (
  options?: RequestInit,
): Promise<v1UsersInfoGetResponse> => {
  const res = await fetch(getV1UsersInfoGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersInfoGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersInfoGetResponse;
};

/**
 * gets users kubectl session
 * @summary gets users kubectl session
 */
export type v1UsersKubectlSessionUidResponse200 = {
  data: V1UserKubectlSession;
  status: 200;
};

export type v1UsersKubectlSessionUidResponseComposite =
  v1UsersKubectlSessionUidResponse200;

export type v1UsersKubectlSessionUidResponse =
  v1UsersKubectlSessionUidResponseComposite & {
    headers: Headers;
  };

export const getV1UsersKubectlSessionUidUrl = (sessionUid: string) => {
  return `https://api.spectrocloud.com/v1/users/kubectl/session/${sessionUid}`;
};

export const v1UsersKubectlSessionUid = async (
  sessionUid: string,
  options?: RequestInit,
): Promise<v1UsersKubectlSessionUidResponse> => {
  const res = await fetch(getV1UsersKubectlSessionUidUrl(sessionUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersKubectlSessionUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersKubectlSessionUidResponse;
};

/**
 * @summary Retrieves a list of users metadata
 */
export type v1UsersMetadataResponse200 = {
  data: V1UsersMetadata;
  status: 200;
};

export type v1UsersMetadataResponseComposite = v1UsersMetadataResponse200;

export type v1UsersMetadataResponse = v1UsersMetadataResponseComposite & {
  headers: Headers;
};

export const getV1UsersMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/users/meta`;
};

export const v1UsersMetadata = async (
  options?: RequestInit,
): Promise<v1UsersMetadataResponse> => {
  const res = await fetch(getV1UsersMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersMetadataResponse;
};

/**
 * User password change request via current password and emailId
 * @summary User password change request using the user emailId
 */
export type v1UsersPasswordChangeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersPasswordChangeResponseComposite =
  v1UsersPasswordChangeResponseDefault;

export type v1UsersPasswordChangeResponse =
  v1UsersPasswordChangeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersPasswordChangeUrl = () => {
  return `https://api.spectrocloud.com/v1/users/password/change`;
};

export const v1UsersPasswordChange = async (
  v1UsersPasswordChangeRequest: V1UsersPasswordChangeRequest,
  options?: RequestInit,
): Promise<v1UsersPasswordChangeResponse> => {
  const res = await fetch(getV1UsersPasswordChangeUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UsersPasswordChangeRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersPasswordChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersPasswordChangeResponse;
};

/**
 * User password request will be sent to the supplied emailId
 * @summary User password reset request using the email id
 */
export type v1UsersEmailPasswordResetResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersEmailPasswordResetResponseComposite =
  v1UsersEmailPasswordResetResponseDefault;

export type v1UsersEmailPasswordResetResponse =
  v1UsersEmailPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersEmailPasswordResetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/password/reset`;
};

export const v1UsersEmailPasswordReset = async (
  v1UsersEmailPasswordResetRequest: V1UsersEmailPasswordResetRequest,
  options?: RequestInit,
): Promise<v1UsersEmailPasswordResetResponse> => {
  const res = await fetch(getV1UsersEmailPasswordResetUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UsersEmailPasswordResetRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersEmailPasswordResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersEmailPasswordResetResponse;
};

/**
 * @summary Retrieves a list of users summary with provided filter spec
 */
export type v1UsersSummaryGetResponse200 = {
  data: V1UsersSummaryList;
  status: 200;
};

export type v1UsersSummaryGetResponseComposite = v1UsersSummaryGetResponse200;

export type v1UsersSummaryGetResponse = v1UsersSummaryGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersSummaryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/summary`;
};

export const v1UsersSummaryGet = async (
  v1UsersSummarySpec?: V1UsersSummarySpec,
  options?: RequestInit,
): Promise<v1UsersSummaryGetResponse> => {
  const res = await fetch(getV1UsersSummaryGetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UsersSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersSummaryGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersSummaryGetResponse;
};

/**
 * Returns the users system feature
 * @summary Returns the users system feature
 */
export type v1UsersSystemFeatureResponse200 = {
  data: V1SystemFeatures;
  status: 200;
};

export type v1UsersSystemFeatureResponseComposite =
  v1UsersSystemFeatureResponse200;

export type v1UsersSystemFeatureResponse =
  v1UsersSystemFeatureResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemFeatureUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/features`;
};

export const v1UsersSystemFeature = async (
  options?: RequestInit,
): Promise<v1UsersSystemFeatureResponse> => {
  const res = await fetch(getV1UsersSystemFeatureUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersSystemFeatureResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersSystemFeatureResponse;
};

/**
 * @summary Delete the macros for the system user by macro name
 */
export type v1UsersSystemMacrosDeleteByMacroNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersSystemMacrosDeleteByMacroNameResponseComposite =
  v1UsersSystemMacrosDeleteByMacroNameResponseDefault;

export type v1UsersSystemMacrosDeleteByMacroNameResponse =
  v1UsersSystemMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosDeleteByMacroNameUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const v1UsersSystemMacrosDeleteByMacroName = async (
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1UsersSystemMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(getV1UsersSystemMacrosDeleteByMacroNameUrl(), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersSystemMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersSystemMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the system
 */
export type v1UsersSystemMacrosListResponse200 = {
  data: V1Macros;
  status: 200;
};

export type v1UsersSystemMacrosListResponseComposite =
  v1UsersSystemMacrosListResponse200;

export type v1UsersSystemMacrosListResponse =
  v1UsersSystemMacrosListResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const v1UsersSystemMacrosList = async (
  options?: RequestInit,
): Promise<v1UsersSystemMacrosListResponse> => {
  const res = await fetch(getV1UsersSystemMacrosListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersSystemMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersSystemMacrosListResponse;
};

/**
 * @summary Update the macros for the system user by macro name
 */
export type v1UsersSystemMacrosUpdateByMacroNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersSystemMacrosUpdateByMacroNameResponseComposite =
  v1UsersSystemMacrosUpdateByMacroNameResponseDefault;

export type v1UsersSystemMacrosUpdateByMacroNameResponse =
  v1UsersSystemMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosUpdateByMacroNameUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const v1UsersSystemMacrosUpdateByMacroName = async (
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1UsersSystemMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(getV1UsersSystemMacrosUpdateByMacroNameUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersSystemMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersSystemMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the system user
 */
export type v1UsersSystemMacrosCreateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersSystemMacrosCreateResponseComposite =
  v1UsersSystemMacrosCreateResponseDefault;

export type v1UsersSystemMacrosCreateResponse =
  v1UsersSystemMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const v1UsersSystemMacrosCreate = async (
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1UsersSystemMacrosCreateResponse> => {
  const res = await fetch(getV1UsersSystemMacrosCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersSystemMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersSystemMacrosCreateResponse;
};

/**
 * @summary Update the macros of the system
 */
export type v1UsersSystemMacrosUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersSystemMacrosUpdateResponseComposite =
  v1UsersSystemMacrosUpdateResponseDefault;

export type v1UsersSystemMacrosUpdateResponse =
  v1UsersSystemMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosUpdateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const v1UsersSystemMacrosUpdate = async (
  v1Macros?: V1Macros,
  options?: RequestInit,
): Promise<v1UsersSystemMacrosUpdateResponse> => {
  const res = await fetch(getV1UsersSystemMacrosUpdateUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1Macros),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersSystemMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersSystemMacrosUpdateResponse;
};

/**
 * Deletes the specified User for given uid
 * @summary Deletes the specified User
 */
export type v1UsersUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidDeleteResponseComposite = v1UsersUidDeleteResponseDefault;

export type v1UsersUidDeleteResponse = v1UsersUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const v1UsersUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersUidDeleteResponse> => {
  const res = await fetch(getV1UsersUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidDeleteResponse;
};

/**
 * Returns a User for the specified uid.
 * @summary Returns the specified User
 */
export type v1UsersUidGetResponse200 = {
  data: V1User;
  status: 200;
};

export type v1UsersUidGetResponseComposite = v1UsersUidGetResponse200;

export type v1UsersUidGetResponse = v1UsersUidGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const v1UsersUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersUidGetResponse> => {
  const res = await fetch(getV1UsersUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidGetResponse;
};

/**
 * User is patched for the specified information
 * @summary Patches the specified User
 */
export type v1UsersUidPatchResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidPatchResponseComposite = v1UsersUidPatchResponseDefault;

export type v1UsersUidPatchResponse = v1UsersUidPatchResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const v1UsersUidPatch = async (
  uid: string,
  v1UserPatch: V1UserPatch,
  options?: RequestInit,
): Promise<v1UsersUidPatchResponse> => {
  const res = await fetch(getV1UsersUidPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidPatchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidPatchResponse;
};

/**
 * A user is created for the given user context
 * @summary Update User
 */
export type v1UsersUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidUpdateResponseComposite = v1UsersUidUpdateResponseDefault;

export type v1UsersUidUpdateResponse = v1UsersUidUpdateResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const v1UsersUidUpdate = async (
  uid: string,
  v1UserUpdateEntity?: V1UserUpdateEntity,
  options?: RequestInit,
): Promise<v1UsersUidUpdateResponse> => {
  const res = await fetch(getV1UsersUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidUpdateResponse;
};

/**
 * User password change request via current password
 * @summary User password change request using the user uid
 */
export type v1UsersUidPasswordChangeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidPasswordChangeResponseComposite =
  v1UsersUidPasswordChangeResponseDefault;

export type v1UsersUidPasswordChangeResponse =
  v1UsersUidPasswordChangeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidPasswordChangeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/password/change`;
};

export const v1UsersUidPasswordChange = async (
  uid: string,
  v1UsersUidPasswordChangeRequest: V1UsersUidPasswordChangeRequest,
  options?: RequestInit,
): Promise<v1UsersUidPasswordChangeResponse> => {
  const res = await fetch(getV1UsersUidPasswordChangeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UsersUidPasswordChangeRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidPasswordChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidPasswordChangeResponse;
};

/**
 * User password reset request, will send the password reset option through the emailId
 * @summary User password reset request using the user uid
 */
export type v1UsersUidPasswordResetResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidPasswordResetResponseComposite =
  v1UsersUidPasswordResetResponseDefault;

export type v1UsersUidPasswordResetResponse =
  v1UsersUidPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidPasswordResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/password/reset`;
};

export const v1UsersUidPasswordReset = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersUidPasswordResetResponse> => {
  const res = await fetch(getV1UsersUidPasswordResetUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidPasswordResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidPasswordResetResponse;
};

/**
 * Returns a User with projects and roles
 * @summary Returns the specified User Projects and Roles information
 */
export type v1UsersProjectRolesResponse200 = {
  data: V1ProjectRolesEntity;
  status: 200;
};

export type v1UsersProjectRolesResponseComposite =
  v1UsersProjectRolesResponse200;

export type v1UsersProjectRolesResponse =
  v1UsersProjectRolesResponseComposite & {
    headers: Headers;
  };

export const getV1UsersProjectRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/projects`;
};

export const v1UsersProjectRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersProjectRolesResponse> => {
  const res = await fetch(getV1UsersProjectRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersProjectRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersProjectRolesResponse;
};

/**
 * User is updated with projects and roles
 * @summary Updates the projects and roles for user
 */
export type v1UsersProjectRolesPutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersProjectRolesPutResponseComposite =
  v1UsersProjectRolesPutResponseDefault;

export type v1UsersProjectRolesPutResponse =
  v1UsersProjectRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1UsersProjectRolesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/projects`;
};

export const v1UsersProjectRolesPut = async (
  uid: string,
  v1ProjectRolesPatch: V1ProjectRolesPatch,
  options?: RequestInit,
): Promise<v1UsersProjectRolesPutResponse> => {
  const res = await fetch(getV1UsersProjectRolesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectRolesPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersProjectRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersProjectRolesPutResponse;
};

/**
 * Returns resource roles for user
 * @summary Returns the specified individual and resource roles for a user
 */
export type v1UsersUidResourceRolesResponse200 = {
  data: V1ResourceRoles;
  status: 200;
};

export type v1UsersUidResourceRolesResponseComposite =
  v1UsersUidResourceRolesResponse200;

export type v1UsersUidResourceRolesResponse =
  v1UsersUidResourceRolesResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidResourceRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles`;
};

export const v1UsersUidResourceRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersUidResourceRolesResponse> => {
  const res = await fetch(getV1UsersUidResourceRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidResourceRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidResourceRolesResponse;
};

/**
 * Resource roles added to specific user
 * @summary Add resource roles for user
 */
export type v1UsersUidResourceRolesCreateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidResourceRolesCreateResponseComposite =
  v1UsersUidResourceRolesCreateResponseDefault;

export type v1UsersUidResourceRolesCreateResponse =
  v1UsersUidResourceRolesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidResourceRolesCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles`;
};

export const v1UsersUidResourceRolesCreate = async (
  uid: string,
  v1ResourceRolesUpdateEntity: V1ResourceRolesUpdateEntity,
  options?: RequestInit,
): Promise<v1UsersUidResourceRolesCreateResponse> => {
  const res = await fetch(getV1UsersUidResourceRolesCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceRolesUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidResourceRolesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidResourceRolesCreateResponse;
};

/**
 * @summary Deleted the resource roles from user
 */
export type v1UsersUidResourceRolesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidResourceRolesUidDeleteResponseComposite =
  v1UsersUidResourceRolesUidDeleteResponseDefault;

export type v1UsersUidResourceRolesUidDeleteResponse =
  v1UsersUidResourceRolesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidResourceRolesUidDeleteUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const v1UsersUidResourceRolesUidDelete = async (
  uid: string,
  resourceRoleUid: string,
  options?: RequestInit,
): Promise<v1UsersUidResourceRolesUidDeleteResponse> => {
  const res = await fetch(
    getV1UsersUidResourceRolesUidDeleteUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidResourceRolesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidResourceRolesUidDeleteResponse;
};

/**
 * Specific resource roles fo user is updated
 * @summary Updates the resource roles for user
 */
export type v1UsersResourceRolesUidUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersResourceRolesUidUpdateResponseComposite =
  v1UsersResourceRolesUidUpdateResponseDefault;

export type v1UsersResourceRolesUidUpdateResponse =
  v1UsersResourceRolesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersResourceRolesUidUpdateUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const v1UsersResourceRolesUidUpdate = async (
  uid: string,
  resourceRoleUid: string,
  v1ResourceRolesUpdateEntity: V1ResourceRolesUpdateEntity,
  options?: RequestInit,
): Promise<v1UsersResourceRolesUidUpdateResponse> => {
  const res = await fetch(
    getV1UsersResourceRolesUidUpdateUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ResourceRolesUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersResourceRolesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersResourceRolesUidUpdateResponse;
};

/**
 * Returns roles clubbed from team
 * @summary Returns the specified individual and team roles for a user
 */
export type v1UsersUidRolesResponse200 = {
  data: V1UserRolesEntity;
  status: 200;
};

export type v1UsersUidRolesResponseComposite = v1UsersUidRolesResponse200;

export type v1UsersUidRolesResponse = v1UsersUidRolesResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/roles`;
};

export const v1UsersUidRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<v1UsersUidRolesResponse> => {
  const res = await fetch(getV1UsersUidRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidRolesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidRolesResponse;
};

/**
 * User is updated with roles
 * @summary Updates the roles for user
 */
export type v1UsersUidRolesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersUidRolesUpdateResponseComposite =
  v1UsersUidRolesUpdateResponseDefault;

export type v1UsersUidRolesUpdateResponse =
  v1UsersUidRolesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidRolesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/roles`;
};

export const v1UsersUidRolesUpdate = async (
  uid: string,
  v1UserRoleUIDs: V1UserRoleUIDs,
  options?: RequestInit,
): Promise<v1UsersUidRolesUpdateResponse> => {
  const res = await fetch(getV1UsersUidRolesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserRoleUIDs),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersUidRolesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersUidRolesUpdateResponse;
};

/**
 * @summary Users status login mode
 */
export type v1UsersStatusLoginModeResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersStatusLoginModeResponseComposite =
  v1UsersStatusLoginModeResponseDefault;

export type v1UsersStatusLoginModeResponse =
  v1UsersStatusLoginModeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersStatusLoginModeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/status/loginMode`;
};

export const v1UsersStatusLoginMode = async (
  uid: string,
  v1UserStatusLoginMode?: V1UserStatusLoginMode,
  options?: RequestInit,
): Promise<v1UsersStatusLoginModeResponse> => {
  const res = await fetch(getV1UsersStatusLoginModeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserStatusLoginMode),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersStatusLoginModeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersStatusLoginModeResponse;
};

/**
 * @summary Create workspace
 */
export type v1WorkspacesCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1WorkspacesCreateResponseComposite = v1WorkspacesCreateResponse201;

export type v1WorkspacesCreateResponse = v1WorkspacesCreateResponseComposite & {
  headers: Headers;
};

export const getV1WorkspacesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/workspaces`;
};

export const v1WorkspacesCreate = async (
  v1WorkspaceEntity?: V1WorkspaceEntity,
  options?: RequestInit,
): Promise<v1WorkspacesCreateResponse> => {
  const res = await fetch(getV1WorkspacesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesCreateResponse;
};

/**
 * @summary Returns the specified team's workspaces and roles data
 */
export type v1TeamsWorkspaceGetRolesResponse200 = {
  data: V1WorkspaceScopeRoles;
  status: 200;
};

export type v1TeamsWorkspaceGetRolesResponseComposite =
  v1TeamsWorkspaceGetRolesResponse200;

export type v1TeamsWorkspaceGetRolesResponse =
  v1TeamsWorkspaceGetRolesResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsWorkspaceGetRolesUrl = (teamUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/teams/${teamUid}/roles`;
};

export const v1TeamsWorkspaceGetRoles = async (
  teamUid: string,
  options?: RequestInit,
): Promise<v1TeamsWorkspaceGetRolesResponse> => {
  const res = await fetch(getV1TeamsWorkspaceGetRolesUrl(teamUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsWorkspaceGetRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsWorkspaceGetRolesResponse;
};

/**
 * @summary Updates the workspace roles for the specified team
 */
export type v1TeamsWorkspaceRolesPutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1TeamsWorkspaceRolesPutResponseComposite =
  v1TeamsWorkspaceRolesPutResponseDefault;

export type v1TeamsWorkspaceRolesPutResponse =
  v1TeamsWorkspaceRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsWorkspaceRolesPutUrl = (teamUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/teams/${teamUid}/roles`;
};

export const v1TeamsWorkspaceRolesPut = async (
  teamUid: string,
  v1WorkspacesRolesPatch: V1WorkspacesRolesPatch,
  options?: RequestInit,
): Promise<v1TeamsWorkspaceRolesPutResponse> => {
  const res = await fetch(getV1TeamsWorkspaceRolesPutUrl(teamUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspacesRolesPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1TeamsWorkspaceRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1TeamsWorkspaceRolesPutResponse;
};

/**
 * Returns a User with workspaces and roles
 * @summary Returns the specified User workspaces and Roles information
 */
export type v1UsersWorkspaceGetRolesResponse200 = {
  data: V1WorkspaceScopeRoles;
  status: 200;
};

export type v1UsersWorkspaceGetRolesResponseComposite =
  v1UsersWorkspaceGetRolesResponse200;

export type v1UsersWorkspaceGetRolesResponse =
  v1UsersWorkspaceGetRolesResponseComposite & {
    headers: Headers;
  };

export const getV1UsersWorkspaceGetRolesUrl = (userUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/users/${userUid}/roles`;
};

export const v1UsersWorkspaceGetRoles = async (
  userUid: string,
  options?: RequestInit,
): Promise<v1UsersWorkspaceGetRolesResponse> => {
  const res = await fetch(getV1UsersWorkspaceGetRolesUrl(userUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersWorkspaceGetRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersWorkspaceGetRolesResponse;
};

/**
 * User is updated with workspace roles
 * @summary Updates the workspace roles for user
 */
export type v1UsersWorkspaceRolesPutResponseDefault = {
  data: unknown;
  status: number;
};

export type v1UsersWorkspaceRolesPutResponseComposite =
  v1UsersWorkspaceRolesPutResponseDefault;

export type v1UsersWorkspaceRolesPutResponse =
  v1UsersWorkspaceRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1UsersWorkspaceRolesPutUrl = (userUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/users/${userUid}/roles`;
};

export const v1UsersWorkspaceRolesPut = async (
  userUid: string,
  v1WorkspacesRolesPatch: V1WorkspacesRolesPatch,
  options?: RequestInit,
): Promise<v1UsersWorkspaceRolesPutResponse> => {
  const res = await fetch(getV1UsersWorkspaceRolesPutUrl(userUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspacesRolesPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersWorkspaceRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersWorkspaceRolesPutResponse;
};

/**
 * @summary Validates the workspace name
 */
export type v1WorkspacesValidateNameResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspacesValidateNameResponseComposite =
  v1WorkspacesValidateNameResponseDefault;

export type v1WorkspacesValidateNameResponse =
  v1WorkspacesValidateNameResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesValidateNameUrl = (
  params: V1WorkspacesValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/validate/name`;
};

export const v1WorkspacesValidateName = async (
  params: V1WorkspacesValidateNameParams,
  options?: RequestInit,
): Promise<v1WorkspacesValidateNameResponse> => {
  const res = await fetch(getV1WorkspacesValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesValidateNameResponse;
};

/**
 * @summary Deletes the specified workspace
 */
export type v1WorkspacesUidDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspacesUidDeleteResponseComposite =
  v1WorkspacesUidDeleteResponseDefault;

export type v1WorkspacesUidDeleteResponse =
  v1WorkspacesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}`;
};

export const v1WorkspacesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<v1WorkspacesUidDeleteResponse> => {
  const res = await fetch(getV1WorkspacesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesUidDeleteResponse;
};

/**
 * @summary Returns the specified workspace
 */
export type v1WorkspacesUidGetResponse200 = {
  data: V1Workspace;
  status: 200;
};

export type v1WorkspacesUidGetResponseComposite = v1WorkspacesUidGetResponse200;

export type v1WorkspacesUidGetResponse = v1WorkspacesUidGetResponseComposite & {
  headers: Headers;
};

export const getV1WorkspacesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}`;
};

export const v1WorkspacesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1WorkspacesUidGetResponse> => {
  const res = await fetch(getV1WorkspacesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesUidGetResponse;
};

/**
 * @summary Delete workspace backup
 */
export type v1WorkspaceOpsBackupDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspaceOpsBackupDeleteResponseComposite =
  v1WorkspaceOpsBackupDeleteResponseDefault;

export type v1WorkspaceOpsBackupDeleteResponse =
  v1WorkspaceOpsBackupDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const v1WorkspaceOpsBackupDelete = async (
  uid: string,
  v1WorkspaceBackupDeleteEntity?: V1WorkspaceBackupDeleteEntity,
  options?: RequestInit,
): Promise<v1WorkspaceOpsBackupDeleteResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupDeleteUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceBackupDeleteEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspaceOpsBackupDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspaceOpsBackupDeleteResponse;
};

/**
 * @summary Returns the  workspace backup result
 */
export type v1WorkspaceOpsBackupGetResponse200 = {
  data: V1WorkspaceBackup;
  status: 200;
};

export type v1WorkspaceOpsBackupGetResponseComposite =
  v1WorkspaceOpsBackupGetResponse200;

export type v1WorkspaceOpsBackupGetResponse =
  v1WorkspaceOpsBackupGetResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupGetUrl = (
  uid: string,
  params?: V1WorkspaceOpsBackupGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/${uid}/backup?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const v1WorkspaceOpsBackupGet = async (
  uid: string,
  params?: V1WorkspaceOpsBackupGetParams,
  options?: RequestInit,
): Promise<v1WorkspaceOpsBackupGetResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspaceOpsBackupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspaceOpsBackupGetResponse;
};

/**
 * @summary Create workspace backup settings
 */
export type v1WorkspaceOpsBackupCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1WorkspaceOpsBackupCreateResponseComposite =
  v1WorkspaceOpsBackupCreateResponse201;

export type v1WorkspaceOpsBackupCreateResponse =
  v1WorkspaceOpsBackupCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const v1WorkspaceOpsBackupCreate = async (
  uid: string,
  v1WorkspaceBackupConfigEntity?: V1WorkspaceBackupConfigEntity,
  options?: RequestInit,
): Promise<v1WorkspaceOpsBackupCreateResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceBackupConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspaceOpsBackupCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspaceOpsBackupCreateResponse;
};

/**
 * @summary Update workspace backup settings
 */
export type v1WorkspaceOpsBackupUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspaceOpsBackupUpdateResponseComposite =
  v1WorkspaceOpsBackupUpdateResponseDefault;

export type v1WorkspaceOpsBackupUpdateResponse =
  v1WorkspaceOpsBackupUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const v1WorkspaceOpsBackupUpdate = async (
  uid: string,
  v1WorkspaceBackupConfigEntity?: V1WorkspaceBackupConfigEntity,
  options?: RequestInit,
): Promise<v1WorkspaceOpsBackupUpdateResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceBackupConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspaceOpsBackupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspaceOpsBackupUpdateResponse;
};

/**
 * @summary Create On demand Workspace Backup
 */
export type v1WorkspaceOpsBackupOnDemandCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1WorkspaceOpsBackupOnDemandCreateResponseComposite =
  v1WorkspaceOpsBackupOnDemandCreateResponse201;

export type v1WorkspaceOpsBackupOnDemandCreateResponse =
  v1WorkspaceOpsBackupOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup/onDemand`;
};

export const v1WorkspaceOpsBackupOnDemandCreate = async (
  uid: string,
  v1WorkspaceBackupConfigEntity?: V1WorkspaceBackupConfigEntity,
  options?: RequestInit,
): Promise<v1WorkspaceOpsBackupOnDemandCreateResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceBackupConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspaceOpsBackupOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspaceOpsBackupOnDemandCreateResponse;
};

/**
 * @summary Updates the specified workspace namespaces
 */
export type v1WorkspacesUidClusterNamespacesUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspacesUidClusterNamespacesUpdateResponseComposite =
  v1WorkspacesUidClusterNamespacesUpdateResponseDefault;

export type v1WorkspacesUidClusterNamespacesUpdateResponse =
  v1WorkspacesUidClusterNamespacesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidClusterNamespacesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterNamespaces`;
};

export const v1WorkspacesUidClusterNamespacesUpdate = async (
  uid: string,
  v1WorkspaceClusterNamespacesEntity?: V1WorkspaceClusterNamespacesEntity,
  options?: RequestInit,
): Promise<v1WorkspacesUidClusterNamespacesUpdateResponse> => {
  const res = await fetch(getV1WorkspacesUidClusterNamespacesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceClusterNamespacesEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesUidClusterNamespacesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesUidClusterNamespacesUpdateResponse;
};

/**
 * @summary Create cluster rbac in workspace
 */
export type v1WorkspacesClusterRbacCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1WorkspacesClusterRbacCreateResponseComposite =
  v1WorkspacesClusterRbacCreateResponse201;

export type v1WorkspacesClusterRbacCreateResponse =
  v1WorkspacesClusterRbacCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesClusterRbacCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs`;
};

export const v1WorkspacesClusterRbacCreate = async (
  uid: string,
  v1ClusterRbac?: V1ClusterRbac,
  options?: RequestInit,
): Promise<v1WorkspacesClusterRbacCreateResponse> => {
  const res = await fetch(getV1WorkspacesClusterRbacCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterRbac),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesClusterRbacCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesClusterRbacCreateResponse;
};

/**
 * @summary Deletes the specified workspace cluster rbac
 */
export type v1WorkspacesUidClusterRbacDeleteResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspacesUidClusterRbacDeleteResponseComposite =
  v1WorkspacesUidClusterRbacDeleteResponseDefault;

export type v1WorkspacesUidClusterRbacDeleteResponse =
  v1WorkspacesUidClusterRbacDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidClusterRbacDeleteUrl = (
  uid: string,
  clusterRbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs/${clusterRbacUid}`;
};

export const v1WorkspacesUidClusterRbacDelete = async (
  uid: string,
  clusterRbacUid: string,
  options?: RequestInit,
): Promise<v1WorkspacesUidClusterRbacDeleteResponse> => {
  const res = await fetch(
    getV1WorkspacesUidClusterRbacDeleteUrl(uid, clusterRbacUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesUidClusterRbacDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesUidClusterRbacDeleteResponse;
};

/**
 * @summary Updates the specified workspace cluster rbac
 */
export type v1WorkspacesUidClusterRbacUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspacesUidClusterRbacUpdateResponseComposite =
  v1WorkspacesUidClusterRbacUpdateResponseDefault;

export type v1WorkspacesUidClusterRbacUpdateResponse =
  v1WorkspacesUidClusterRbacUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidClusterRbacUpdateUrl = (
  uid: string,
  clusterRbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs/${clusterRbacUid}`;
};

export const v1WorkspacesUidClusterRbacUpdate = async (
  uid: string,
  clusterRbacUid: string,
  v1ClusterRbac?: V1ClusterRbac,
  options?: RequestInit,
): Promise<v1WorkspacesUidClusterRbacUpdateResponse> => {
  const res = await fetch(
    getV1WorkspacesUidClusterRbacUpdateUrl(uid, clusterRbacUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterRbac),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesUidClusterRbacUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesUidClusterRbacUpdateResponse;
};

/**
 * @summary Updates the specified workspace meta
 */
export type v1WorkspacesUidMetaUpdateResponseDefault = {
  data: unknown;
  status: number;
};

export type v1WorkspacesUidMetaUpdateResponseComposite =
  v1WorkspacesUidMetaUpdateResponseDefault;

export type v1WorkspacesUidMetaUpdateResponse =
  v1WorkspacesUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/meta`;
};

export const v1WorkspacesUidMetaUpdate = async (
  uid: string,
  v1ObjectMeta?: V1ObjectMeta,
  options?: RequestInit,
): Promise<v1WorkspacesUidMetaUpdateResponse> => {
  const res = await fetch(getV1WorkspacesUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMeta),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspacesUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspacesUidMetaUpdateResponse;
};

/**
 * @summary Returns the  workspace restore result
 */
export type v1WorkspaceOpsRestoreGetResponse200 = {
  data: V1WorkspaceRestore;
  status: 200;
};

export type v1WorkspaceOpsRestoreGetResponseComposite =
  v1WorkspaceOpsRestoreGetResponse200;

export type v1WorkspaceOpsRestoreGetResponse =
  v1WorkspaceOpsRestoreGetResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsRestoreGetUrl = (
  uid: string,
  params?: V1WorkspaceOpsRestoreGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/${uid}/restore?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/${uid}/restore`;
};

export const v1WorkspaceOpsRestoreGet = async (
  uid: string,
  params?: V1WorkspaceOpsRestoreGetParams,
  options?: RequestInit,
): Promise<v1WorkspaceOpsRestoreGetResponse> => {
  const res = await fetch(getV1WorkspaceOpsRestoreGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspaceOpsRestoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspaceOpsRestoreGetResponse;
};

/**
 * @summary Create On demand Workspace Restore
 */
export type v1WorkspaceOpsRestoreOnDemandCreateResponse201 = {
  data: V1Uid;
  status: 201;
};

export type v1WorkspaceOpsRestoreOnDemandCreateResponseComposite =
  v1WorkspaceOpsRestoreOnDemandCreateResponse201;

export type v1WorkspaceOpsRestoreOnDemandCreateResponse =
  v1WorkspaceOpsRestoreOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsRestoreOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/restore/onDemand`;
};

export const v1WorkspaceOpsRestoreOnDemandCreate = async (
  uid: string,
  v1WorkspaceRestoreConfigEntity?: V1WorkspaceRestoreConfigEntity,
  options?: RequestInit,
): Promise<v1WorkspaceOpsRestoreOnDemandCreateResponse> => {
  const res = await fetch(getV1WorkspaceOpsRestoreOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceRestoreConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1WorkspaceOpsRestoreOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1WorkspaceOpsRestoreOnDemandCreateResponse;
};
