/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  MetricTimeSeries,
  MetricTimeSeriesList,
  MetricsListParams,
  MetricsUidListParams,
} from ".././schemas";

/**
 * Returns all the metrics for a given resource kind
 * @summary Retrieves the list of metrics for a specified resource kind
 */
export type metricsListResponse200 = {
  data: MetricTimeSeriesList;
  status: 200;
};

export type metricsListResponseComposite = metricsListResponse200;

export type metricsListResponse = metricsListResponseComposite & {
  headers: Headers;
};

export const getMetricsListUrl = (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  params?: MetricsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/metrics/${resourceKind}/values?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/metrics/${resourceKind}/values`;
};

export const metricsList = async (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  params?: MetricsListParams,
  options?: RequestInit,
): Promise<metricsListResponse> => {
  const res = await fetch(getMetricsListUrl(resourceKind, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: metricsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as metricsListResponse;
};

/**
 * @summary Deletes the metrics of the specified resource
 */
export type metricsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type metricsUidDeleteResponseComposite = metricsUidDeleteResponse204;

export type metricsUidDeleteResponse = metricsUidDeleteResponseComposite & {
  headers: Headers;
};

export const getMetricsUidDeleteUrl = (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
) => {
  return `https://api.spectrocloud.com/v1/metrics/${resourceKind}/${resourceUid}/values`;
};

export const metricsUidDelete = async (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
  options?: RequestInit,
): Promise<metricsUidDeleteResponse> => {
  const res = await fetch(getMetricsUidDeleteUrl(resourceKind, resourceUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: metricsUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as metricsUidDeleteResponse;
};

/**
 * @summary Returns the metrics for a specified resource uid
 */
export type metricsUidListResponse200 = {
  data: MetricTimeSeries;
  status: 200;
};

export type metricsUidListResponseComposite = metricsUidListResponse200;

export type metricsUidListResponse = metricsUidListResponseComposite & {
  headers: Headers;
};

export const getMetricsUidListUrl = (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
  params?: MetricsUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/metrics/${resourceKind}/${resourceUid}/values?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/metrics/${resourceKind}/${resourceUid}/values`;
};

export const metricsUidList = async (
  resourceKind: "pod" | "namespace" | "spectrocluster" | "machine" | "project",
  resourceUid: string,
  params?: MetricsUidListParams,
  options?: RequestInit,
): Promise<metricsUidListResponse> => {
  const res = await fetch(
    getMetricsUidListUrl(resourceKind, resourceUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: metricsUidListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as metricsUidListResponse;
};
