/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  BasicOciRegistriesCreateParams,
  BasicOciRegistriesUidSyncParams,
  BasicOciRegistry,
  BasicOciRegistrySpec,
  EcrRegistriesCreateParams,
  EcrRegistriesUidSyncParams,
  EcrRegistry,
  EcrRegistrySpec,
  HelmRegistries,
  HelmRegistriesSummary,
  HelmRegistry,
  HelmRegistryEntity,
  HelmRegistrySpec,
  OciImageRegistry,
  OciRegistries,
  OciRegistriesGetParams,
  OciRegistryEntity,
  PackRegistries,
  PackRegistriesSummary,
  PackRegistry,
  PackRegistrySpec,
  RegistriesHelmCreateParams,
  RegistriesHelmListParams,
  RegistriesHelmSummaryListParams,
  RegistriesHelmUidSyncParams,
  RegistriesMetadata,
  RegistriesMetadataParams,
  RegistriesPackCreateParams,
  RegistriesPackListParams,
  RegistriesPackSummaryListParams,
  RegistriesPackUidSyncParams,
  RegistryConfigEntity,
  RegistrySyncStatus,
  Uid,
  V1BasicOciRegistryBody,
  V1EcrRegistryBody,
  V1PackRegistryBody,
} from ".././schemas";

/**
 * @summary Retrieves a list of Helm registries
 */
export type registriesHelmListResponse200 = {
  data: HelmRegistries;
  status: 200;
};

export type registriesHelmListResponseComposite = registriesHelmListResponse200;

export type registriesHelmListResponse = registriesHelmListResponseComposite & {
  headers: Headers;
};

export const getRegistriesHelmListUrl = (params?: RegistriesHelmListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm`;
};

export const registriesHelmList = async (
  params?: RegistriesHelmListParams,
  options?: RequestInit,
): Promise<registriesHelmListResponse> => {
  const res = await fetch(getRegistriesHelmListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmListResponse;
};

/**
 * @summary Creates a helm registry
 */
export type registriesHelmCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type registriesHelmCreateResponseComposite =
  registriesHelmCreateResponse201;

export type registriesHelmCreateResponse =
  registriesHelmCreateResponseComposite & {
    headers: Headers;
  };

export const getRegistriesHelmCreateUrl = (
  params?: RegistriesHelmCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm`;
};

export const registriesHelmCreate = async (
  helmRegistryEntity: HelmRegistryEntity,
  params?: RegistriesHelmCreateParams,
  options?: RequestInit,
): Promise<registriesHelmCreateResponse> => {
  const res = await fetch(getRegistriesHelmCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(helmRegistryEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmCreateResponse;
};

/**
 * @summary Retrieves a list of helm registries as summary
 */
export type registriesHelmSummaryListResponse200 = {
  data: HelmRegistriesSummary;
  status: 200;
};

export type registriesHelmSummaryListResponseComposite =
  registriesHelmSummaryListResponse200;

export type registriesHelmSummaryListResponse =
  registriesHelmSummaryListResponseComposite & {
    headers: Headers;
  };

export const getRegistriesHelmSummaryListUrl = (
  params?: RegistriesHelmSummaryListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm/summary`;
};

export const registriesHelmSummaryList = async (
  params?: RegistriesHelmSummaryListParams,
  options?: RequestInit,
): Promise<registriesHelmSummaryListResponse> => {
  const res = await fetch(getRegistriesHelmSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmSummaryListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmSummaryListResponse;
};

/**
 * Returns no contents if helm registry is valid else error.
 * @summary Check if helm registry is valid
 */
export type v1RegistriesHelmValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1RegistriesHelmValidateResponseComposite =
  v1RegistriesHelmValidateResponse204;

export type v1RegistriesHelmValidateResponse =
  v1RegistriesHelmValidateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/helm/validate`;
};

export const v1RegistriesHelmValidate = async (
  helmRegistrySpec: HelmRegistrySpec,
  options?: RequestInit,
): Promise<v1RegistriesHelmValidateResponse> => {
  const res = await fetch(getV1RegistriesHelmValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(helmRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesHelmValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesHelmValidateResponse;
};

/**
 * @summary Deletes the specified helm registry
 */
export type registriesHelmUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type registriesHelmUidDeleteResponseComposite =
  registriesHelmUidDeleteResponse204;

export type registriesHelmUidDeleteResponse =
  registriesHelmUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getRegistriesHelmUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const registriesHelmUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<registriesHelmUidDeleteResponse> => {
  const res = await fetch(getRegistriesHelmUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmUidDeleteResponse;
};

/**
 * @summary Returns the specified Helm registry
 */
export type registriesHelmUidGetResponse200 = {
  data: HelmRegistry;
  status: 200;
};

export type registriesHelmUidGetResponseComposite =
  registriesHelmUidGetResponse200;

export type registriesHelmUidGetResponse =
  registriesHelmUidGetResponseComposite & {
    headers: Headers;
  };

export const getRegistriesHelmUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const registriesHelmUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<registriesHelmUidGetResponse> => {
  const res = await fetch(getRegistriesHelmUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmUidGetResponse;
};

/**
 * @summary Updates the specified helm registry
 */
export type registriesHelmUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type registriesHelmUidUpdateResponseComposite =
  registriesHelmUidUpdateResponse204;

export type registriesHelmUidUpdateResponse =
  registriesHelmUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getRegistriesHelmUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const registriesHelmUidUpdate = async (
  uid: string,
  helmRegistry: HelmRegistry,
  options?: RequestInit,
): Promise<registriesHelmUidUpdateResponse> => {
  const res = await fetch(getRegistriesHelmUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(helmRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmUidUpdateResponse;
};

/**
 * Sync all the helm charts from the registry
 * @summary Sync Helm registry
 */
export type registriesHelmUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type registriesHelmUidSyncResponseComposite =
  registriesHelmUidSyncResponse202;

export type registriesHelmUidSyncResponse =
  registriesHelmUidSyncResponseComposite & {
    headers: Headers;
  };

export const getRegistriesHelmUidSyncUrl = (
  uid: string,
  params?: RegistriesHelmUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync`;
};

export const registriesHelmUidSync = async (
  uid: string,
  params?: RegistriesHelmUidSyncParams,
  options?: RequestInit,
): Promise<registriesHelmUidSyncResponse> => {
  const res = await fetch(getRegistriesHelmUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmUidSyncResponse;
};

/**
 * Get the sync status for the specified helm registry
 * @summary Get helm registry sync status
 */
export type registriesHelmUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type registriesHelmUidSyncStatusResponseComposite =
  registriesHelmUidSyncStatusResponse200;

export type registriesHelmUidSyncStatusResponse =
  registriesHelmUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getRegistriesHelmUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync/status`;
};

export const registriesHelmUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<registriesHelmUidSyncStatusResponse> => {
  const res = await fetch(getRegistriesHelmUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesHelmUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesHelmUidSyncStatusResponse;
};

/**
 * @summary Retrieves a list of registries metadata
 */
export type registriesMetadataResponse200 = {
  data: RegistriesMetadata;
  status: 200;
};

export type registriesMetadataResponseComposite = registriesMetadataResponse200;

export type registriesMetadataResponse = registriesMetadataResponseComposite & {
  headers: Headers;
};

export const getRegistriesMetadataUrl = (params?: RegistriesMetadataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/metadata`;
};

export const registriesMetadata = async (
  params?: RegistriesMetadataParams,
  options?: RequestInit,
): Promise<registriesMetadataResponse> => {
  const res = await fetch(getRegistriesMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesMetadataResponse;
};

/**
 * @summary Creates a basic oci registry
 */
export type basicOciRegistriesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type basicOciRegistriesCreateResponseComposite =
  basicOciRegistriesCreateResponse201;

export type basicOciRegistriesCreateResponse =
  basicOciRegistriesCreateResponseComposite & {
    headers: Headers;
  };

export const getBasicOciRegistriesCreateUrl = (
  params?: BasicOciRegistriesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/basic?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/basic`;
};

export const basicOciRegistriesCreate = async (
  v1BasicOciRegistryBody: V1BasicOciRegistryBody,
  params?: BasicOciRegistriesCreateParams,
  options?: RequestInit,
): Promise<basicOciRegistriesCreateResponse> => {
  const res = await fetch(getBasicOciRegistriesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1BasicOciRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: basicOciRegistriesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as basicOciRegistriesCreateResponse;
};

/**
 * Returns no contents if oci registry is valid else error.
 * @summary Check if oci registry is valid
 */
export type basicOciRegistriesValidateResponse204 = {
  data: void;
  status: 204;
};

export type basicOciRegistriesValidateResponseComposite =
  basicOciRegistriesValidateResponse204;

export type basicOciRegistriesValidateResponse =
  basicOciRegistriesValidateResponseComposite & {
    headers: Headers;
  };

export const getBasicOciRegistriesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/basic/validate`;
};

export const basicOciRegistriesValidate = async (
  basicOciRegistrySpec: BasicOciRegistrySpec,
  options?: RequestInit,
): Promise<basicOciRegistriesValidateResponse> => {
  const res = await fetch(getBasicOciRegistriesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(basicOciRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: basicOciRegistriesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as basicOciRegistriesValidateResponse;
};

/**
 * @summary Creates a ecr registry
 */
export type ecrRegistriesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ecrRegistriesCreateResponseComposite =
  ecrRegistriesCreateResponse201;

export type ecrRegistriesCreateResponse =
  ecrRegistriesCreateResponseComposite & {
    headers: Headers;
  };

export const getEcrRegistriesCreateUrl = (
  params?: EcrRegistriesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/ecr?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/ecr`;
};

export const ecrRegistriesCreate = async (
  v1EcrRegistryBody: V1EcrRegistryBody,
  params?: EcrRegistriesCreateParams,
  options?: RequestInit,
): Promise<ecrRegistriesCreateResponse> => {
  const res = await fetch(getEcrRegistriesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EcrRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ecrRegistriesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ecrRegistriesCreateResponse;
};

/**
 * Returns no contents if ecr registry is valid else error.
 * @summary Check if ecr registry is valid
 */
export type ecrRegistriesValidateResponse204 = {
  data: void;
  status: 204;
};

export type ecrRegistriesValidateResponseComposite =
  ecrRegistriesValidateResponse204;

export type ecrRegistriesValidateResponse =
  ecrRegistriesValidateResponseComposite & {
    headers: Headers;
  };

export const getEcrRegistriesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/ecr/validate`;
};

export const ecrRegistriesValidate = async (
  ecrRegistrySpec: EcrRegistrySpec,
  options?: RequestInit,
): Promise<ecrRegistriesValidateResponse> => {
  const res = await fetch(getEcrRegistriesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ecrRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ecrRegistriesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ecrRegistriesValidateResponse;
};

/**
 * @summary Creates a image registry
 */
export type ociImageRegistryGetResponse200 = {
  data: OciImageRegistry;
  status: 200;
};

export type ociImageRegistryGetResponseComposite =
  ociImageRegistryGetResponse200;

export type ociImageRegistryGetResponse =
  ociImageRegistryGetResponseComposite & {
    headers: Headers;
  };

export const getOciImageRegistryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/image`;
};

export const ociImageRegistryGet = async (
  options?: RequestInit,
): Promise<ociImageRegistryGetResponse> => {
  const res = await fetch(getOciImageRegistryGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ociImageRegistryGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ociImageRegistryGetResponse;
};

/**
 * @summary Retrieves a oci registries summary
 */
export type ociRegistriesSummaryResponse200 = {
  data: OciRegistries;
  status: 200;
};

export type ociRegistriesSummaryResponseComposite =
  ociRegistriesSummaryResponse200;

export type ociRegistriesSummaryResponse =
  ociRegistriesSummaryResponseComposite & {
    headers: Headers;
  };

export const getOciRegistriesSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/summary`;
};

export const ociRegistriesSummary = async (
  options?: RequestInit,
): Promise<ociRegistriesSummaryResponse> => {
  const res = await fetch(getOciRegistriesSummaryUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ociRegistriesSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ociRegistriesSummaryResponse;
};

/**
 * @summary Returns the information of specified oci registry
 */
export type ociRegistriesGetResponse200 = {
  data: OciRegistryEntity;
  status: 200;
};

export type ociRegistriesGetResponseComposite = ociRegistriesGetResponse200;

export type ociRegistriesGetResponse = ociRegistriesGetResponseComposite & {
  headers: Headers;
};

export const getOciRegistriesGetUrl = (
  uid: string,
  params?: OciRegistriesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}`;
};

export const ociRegistriesGet = async (
  uid: string,
  params?: OciRegistriesGetParams,
  options?: RequestInit,
): Promise<ociRegistriesGetResponse> => {
  const res = await fetch(getOciRegistriesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ociRegistriesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ociRegistriesGetResponse;
};

/**
 * @summary Deletes the specified basic oci registry
 */
export type basicOciRegistriesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type basicOciRegistriesUidDeleteResponseComposite =
  basicOciRegistriesUidDeleteResponse204;

export type basicOciRegistriesUidDeleteResponse =
  basicOciRegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getBasicOciRegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const basicOciRegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<basicOciRegistriesUidDeleteResponse> => {
  const res = await fetch(getBasicOciRegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: basicOciRegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as basicOciRegistriesUidDeleteResponse;
};

/**
 * @summary Returns the basic oci registry
 */
export type basicOciRegistriesUidGetResponse200 = {
  data: BasicOciRegistry;
  status: 200;
};

export type basicOciRegistriesUidGetResponseComposite =
  basicOciRegistriesUidGetResponse200;

export type basicOciRegistriesUidGetResponse =
  basicOciRegistriesUidGetResponseComposite & {
    headers: Headers;
  };

export const getBasicOciRegistriesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const basicOciRegistriesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<basicOciRegistriesUidGetResponse> => {
  const res = await fetch(getBasicOciRegistriesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: basicOciRegistriesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as basicOciRegistriesUidGetResponse;
};

/**
 * @summary Updates the specified basic oci registry
 */
export type basicOciRegistriesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type basicOciRegistriesUidUpdateResponseComposite =
  basicOciRegistriesUidUpdateResponse204;

export type basicOciRegistriesUidUpdateResponse =
  basicOciRegistriesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getBasicOciRegistriesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const basicOciRegistriesUidUpdate = async (
  uid: string,
  v1BasicOciRegistryBody: V1BasicOciRegistryBody,
  options?: RequestInit,
): Promise<basicOciRegistriesUidUpdateResponse> => {
  const res = await fetch(getBasicOciRegistriesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1BasicOciRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: basicOciRegistriesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as basicOciRegistriesUidUpdateResponse;
};

/**
 * Sync all the content from the oci registry
 * @summary Sync oci registry
 */
export type basicOciRegistriesUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type basicOciRegistriesUidSyncResponseComposite =
  basicOciRegistriesUidSyncResponse202;

export type basicOciRegistriesUidSyncResponse =
  basicOciRegistriesUidSyncResponseComposite & {
    headers: Headers;
  };

export const getBasicOciRegistriesUidSyncUrl = (
  uid: string,
  params?: BasicOciRegistriesUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync`;
};

export const basicOciRegistriesUidSync = async (
  uid: string,
  params?: BasicOciRegistriesUidSyncParams,
  options?: RequestInit,
): Promise<basicOciRegistriesUidSyncResponse> => {
  const res = await fetch(getBasicOciRegistriesUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: basicOciRegistriesUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as basicOciRegistriesUidSyncResponse;
};

/**
 * Get sync status for the oci specified registry
 * @summary Get oci registry sync status
 */
export type basicOciRegistriesUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type basicOciRegistriesUidSyncStatusResponseComposite =
  basicOciRegistriesUidSyncStatusResponse200;

export type basicOciRegistriesUidSyncStatusResponse =
  basicOciRegistriesUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getBasicOciRegistriesUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync/status`;
};

export const basicOciRegistriesUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<basicOciRegistriesUidSyncStatusResponse> => {
  const res = await fetch(getBasicOciRegistriesUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: basicOciRegistriesUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as basicOciRegistriesUidSyncStatusResponse;
};

/**
 * @summary Deletes the specified ecr registry
 */
export type ecrRegistriesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ecrRegistriesUidDeleteResponseComposite =
  ecrRegistriesUidDeleteResponse204;

export type ecrRegistriesUidDeleteResponse =
  ecrRegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getEcrRegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const ecrRegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<ecrRegistriesUidDeleteResponse> => {
  const res = await fetch(getEcrRegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ecrRegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ecrRegistriesUidDeleteResponse;
};

/**
 * @summary Returns the specified ecr registry
 */
export type ecrRegistriesUidGetResponse200 = {
  data: EcrRegistry;
  status: 200;
};

export type ecrRegistriesUidGetResponseComposite =
  ecrRegistriesUidGetResponse200;

export type ecrRegistriesUidGetResponse =
  ecrRegistriesUidGetResponseComposite & {
    headers: Headers;
  };

export const getEcrRegistriesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const ecrRegistriesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ecrRegistriesUidGetResponse> => {
  const res = await fetch(getEcrRegistriesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ecrRegistriesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ecrRegistriesUidGetResponse;
};

/**
 * @summary Updates the specified ecr registry
 */
export type ecrRegistriesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ecrRegistriesUidUpdateResponseComposite =
  ecrRegistriesUidUpdateResponse204;

export type ecrRegistriesUidUpdateResponse =
  ecrRegistriesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getEcrRegistriesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const ecrRegistriesUidUpdate = async (
  uid: string,
  v1EcrRegistryBody: V1EcrRegistryBody,
  options?: RequestInit,
): Promise<ecrRegistriesUidUpdateResponse> => {
  const res = await fetch(getEcrRegistriesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1EcrRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ecrRegistriesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ecrRegistriesUidUpdateResponse;
};

/**
 * Sync all the content from the ecr registry
 * @summary Sync ecr registry
 */
export type ecrRegistriesUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type ecrRegistriesUidSyncResponseComposite =
  ecrRegistriesUidSyncResponse202;

export type ecrRegistriesUidSyncResponse =
  ecrRegistriesUidSyncResponseComposite & {
    headers: Headers;
  };

export const getEcrRegistriesUidSyncUrl = (
  uid: string,
  params?: EcrRegistriesUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync`;
};

export const ecrRegistriesUidSync = async (
  uid: string,
  params?: EcrRegistriesUidSyncParams,
  options?: RequestInit,
): Promise<ecrRegistriesUidSyncResponse> => {
  const res = await fetch(getEcrRegistriesUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ecrRegistriesUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ecrRegistriesUidSyncResponse;
};

/**
 * Get sync status for the ecr specified registry
 * @summary Get ecr registry sync status
 */
export type ecrRegistriesUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type ecrRegistriesUidSyncStatusResponseComposite =
  ecrRegistriesUidSyncStatusResponse200;

export type ecrRegistriesUidSyncStatusResponse =
  ecrRegistriesUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getEcrRegistriesUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync/status`;
};

export const ecrRegistriesUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<ecrRegistriesUidSyncStatusResponse> => {
  const res = await fetch(getEcrRegistriesUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ecrRegistriesUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ecrRegistriesUidSyncStatusResponse;
};

/**
 * @summary Retrieves a list of Pack registries
 */
export type registriesPackListResponse200 = {
  data: PackRegistries;
  status: 200;
};

export type registriesPackListResponseComposite = registriesPackListResponse200;

export type registriesPackListResponse = registriesPackListResponseComposite & {
  headers: Headers;
};

export const getRegistriesPackListUrl = (params?: RegistriesPackListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack`;
};

export const registriesPackList = async (
  params?: RegistriesPackListParams,
  options?: RequestInit,
): Promise<registriesPackListResponse> => {
  const res = await fetch(getRegistriesPackListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackListResponse;
};

/**
 * @summary Creates a pack registry
 */
export type registriesPackCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type registriesPackCreateResponseComposite =
  registriesPackCreateResponse201;

export type registriesPackCreateResponse =
  registriesPackCreateResponseComposite & {
    headers: Headers;
  };

export const getRegistriesPackCreateUrl = (
  params?: RegistriesPackCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack`;
};

export const registriesPackCreate = async (
  v1PackRegistryBody: V1PackRegistryBody,
  params?: RegistriesPackCreateParams,
  options?: RequestInit,
): Promise<registriesPackCreateResponse> => {
  const res = await fetch(getRegistriesPackCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PackRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackCreateResponse;
};

/**
 * @summary Retrieves a list of pack registries as summary
 */
export type registriesPackSummaryListResponse200 = {
  data: PackRegistriesSummary;
  status: 200;
};

export type registriesPackSummaryListResponseComposite =
  registriesPackSummaryListResponse200;

export type registriesPackSummaryListResponse =
  registriesPackSummaryListResponseComposite & {
    headers: Headers;
  };

export const getRegistriesPackSummaryListUrl = (
  params?: RegistriesPackSummaryListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack/summary`;
};

export const registriesPackSummaryList = async (
  params?: RegistriesPackSummaryListParams,
  options?: RequestInit,
): Promise<registriesPackSummaryListResponse> => {
  const res = await fetch(getRegistriesPackSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackSummaryListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackSummaryListResponse;
};

/**
 * Returns no contents if pack registry is valid else error.
 * @summary Check if pack registry is valid
 */
export type v1RegistriesPackValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1RegistriesPackValidateResponseComposite =
  v1RegistriesPackValidateResponse204;

export type v1RegistriesPackValidateResponse =
  v1RegistriesPackValidateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/pack/validate`;
};

export const v1RegistriesPackValidate = async (
  packRegistrySpec: PackRegistrySpec,
  options?: RequestInit,
): Promise<v1RegistriesPackValidateResponse> => {
  const res = await fetch(getV1RegistriesPackValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(packRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1RegistriesPackValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1RegistriesPackValidateResponse;
};

/**
 * @summary Deletes the specified pack registry
 */
export type registriesPackUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type registriesPackUidDeleteResponseComposite =
  registriesPackUidDeleteResponse204;

export type registriesPackUidDeleteResponse =
  registriesPackUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getRegistriesPackUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const registriesPackUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<registriesPackUidDeleteResponse> => {
  const res = await fetch(getRegistriesPackUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackUidDeleteResponse;
};

/**
 * @summary Returns the specified Pack registry
 */
export type registriesPackUidGetResponse200 = {
  data: PackRegistry;
  status: 200;
};

export type registriesPackUidGetResponseComposite =
  registriesPackUidGetResponse200;

export type registriesPackUidGetResponse =
  registriesPackUidGetResponseComposite & {
    headers: Headers;
  };

export const getRegistriesPackUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const registriesPackUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<registriesPackUidGetResponse> => {
  const res = await fetch(getRegistriesPackUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackUidGetResponse;
};

/**
 * @summary Updates the specified pack registry
 */
export type registriesPackUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type registriesPackUidUpdateResponseComposite =
  registriesPackUidUpdateResponse204;

export type registriesPackUidUpdateResponse =
  registriesPackUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getRegistriesPackUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const registriesPackUidUpdate = async (
  uid: string,
  v1PackRegistryBody: V1PackRegistryBody,
  options?: RequestInit,
): Promise<registriesPackUidUpdateResponse> => {
  const res = await fetch(getRegistriesPackUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PackRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackUidUpdateResponse;
};

/**
 * Sync all the packs from the registry
 * @summary Sync Pack registry
 */
export type registriesPackUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type registriesPackUidSyncResponseComposite =
  registriesPackUidSyncResponse202;

export type registriesPackUidSyncResponse =
  registriesPackUidSyncResponseComposite & {
    headers: Headers;
  };

export const getRegistriesPackUidSyncUrl = (
  uid: string,
  params?: RegistriesPackUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync`;
};

export const registriesPackUidSync = async (
  uid: string,
  params?: RegistriesPackUidSyncParams,
  options?: RequestInit,
): Promise<registriesPackUidSyncResponse> => {
  const res = await fetch(getRegistriesPackUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackUidSyncResponse;
};

/**
 * Get sync status for the pack specified registry
 * @summary Get pack registry sync status
 */
export type registriesPackUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type registriesPackUidSyncStatusResponseComposite =
  registriesPackUidSyncStatusResponse200;

export type registriesPackUidSyncStatusResponse =
  registriesPackUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getRegistriesPackUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync/status`;
};

export const registriesPackUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<registriesPackUidSyncStatusResponse> => {
  const res = await fetch(getRegistriesPackUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesPackUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesPackUidSyncStatusResponse;
};

/**
 * @summary Returns the specified system scope registry configuration
 */
export type registriesNameConfigGetResponse200 = {
  data: RegistryConfigEntity;
  status: 200;
};

export type registriesNameConfigGetResponseComposite =
  registriesNameConfigGetResponse200;

export type registriesNameConfigGetResponse =
  registriesNameConfigGetResponseComposite & {
    headers: Headers;
  };

export const getRegistriesNameConfigGetUrl = (registryName: string) => {
  return `https://api.spectrocloud.com/v1/registries/${registryName}/config`;
};

export const registriesNameConfigGet = async (
  registryName: string,
  options?: RequestInit,
): Promise<registriesNameConfigGetResponse> => {
  const res = await fetch(getRegistriesNameConfigGetUrl(registryName), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesNameConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesNameConfigGetResponse;
};

/**
 * @summary Deletes the specified registry
 */
export type registriesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type registriesUidDeleteResponseComposite =
  registriesUidDeleteResponse204;

export type registriesUidDeleteResponse =
  registriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getRegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/${uid}`;
};

export const registriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<registriesUidDeleteResponse> => {
  const res = await fetch(getRegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registriesUidDeleteResponse;
};
