/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  BasicOciRegistriesCreateParams,
  BasicOciRegistriesUidSyncParams,
  BasicOciRegistry,
  BasicOciRegistryBody,
  BasicOciRegistrySpec,
  EcrRegistriesCreateParams,
  EcrRegistriesUidSyncParams,
  EcrRegistry,
  EcrRegistryBody,
  EcrRegistrySpec,
  HelmRegistries,
  HelmRegistriesSummary,
  HelmRegistry,
  HelmRegistryEntity,
  HelmRegistrySpec,
  OciImageRegistry,
  OciRegistries,
  OciRegistriesGetParams,
  OciRegistryEntity,
  PackRegistries,
  PackRegistriesSummary,
  PackRegistry,
  PackRegistryBody,
  PackRegistrySpec,
  RegistriesHelmCreateParams,
  RegistriesHelmListParams,
  RegistriesHelmSummaryListParams,
  RegistriesHelmUidSyncParams,
  RegistriesMetadata,
  RegistriesMetadataParams,
  RegistriesPackCreateParams,
  RegistriesPackListParams,
  RegistriesPackSummaryListParams,
  RegistriesPackUidSyncParams,
  RegistryConfigEntity,
  RegistrySyncStatus,
  Uid,
} from ".././schemas";

/**
 * @summary Retrieves a list of Helm registries
 */
export type RegistriesHelmListResponse200 = {
  data: HelmRegistries;
  status: 200;
};

export type RegistriesHelmListResponseComposite = RegistriesHelmListResponse200;

export type RegistriesHelmListResponse = RegistriesHelmListResponseComposite & {
  headers: Headers;
};

export const getV1RegistriesHelmListUrl = (
  params?: RegistriesHelmListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm`;
};

export const RegistriesHelmList = async (
  params?: RegistriesHelmListParams,
  options?: RequestInit,
): Promise<RegistriesHelmListResponse> => {
  const res = await fetch(getV1RegistriesHelmListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmListResponse;
};

/**
 * @summary Creates a helm registry
 */
export type RegistriesHelmCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type RegistriesHelmCreateResponseComposite =
  RegistriesHelmCreateResponse201;

export type RegistriesHelmCreateResponse =
  RegistriesHelmCreateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmCreateUrl = (
  params?: RegistriesHelmCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm`;
};

export const RegistriesHelmCreate = async (
  HelmRegistryEntity: HelmRegistryEntity,
  params?: RegistriesHelmCreateParams,
  options?: RequestInit,
): Promise<RegistriesHelmCreateResponse> => {
  const res = await fetch(getV1RegistriesHelmCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(HelmRegistryEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmCreateResponse;
};

/**
 * @summary Retrieves a list of helm registries as summary
 */
export type RegistriesHelmSummaryListResponse200 = {
  data: HelmRegistriesSummary;
  status: 200;
};

export type RegistriesHelmSummaryListResponseComposite =
  RegistriesHelmSummaryListResponse200;

export type RegistriesHelmSummaryListResponse =
  RegistriesHelmSummaryListResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmSummaryListUrl = (
  params?: RegistriesHelmSummaryListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm/summary`;
};

export const RegistriesHelmSummaryList = async (
  params?: RegistriesHelmSummaryListParams,
  options?: RequestInit,
): Promise<RegistriesHelmSummaryListResponse> => {
  const res = await fetch(getV1RegistriesHelmSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmSummaryListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmSummaryListResponse;
};

/**
 * Returns no contents if helm registry is valid else error.
 * @summary Check if helm registry is valid
 */
export type RegistriesHelmValidateResponse204 = {
  data: void;
  status: 204;
};

export type RegistriesHelmValidateResponseComposite =
  RegistriesHelmValidateResponse204;

export type RegistriesHelmValidateResponse =
  RegistriesHelmValidateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/helm/validate`;
};

export const RegistriesHelmValidate = async (
  HelmRegistrySpec: HelmRegistrySpec,
  options?: RequestInit,
): Promise<RegistriesHelmValidateResponse> => {
  const res = await fetch(getV1RegistriesHelmValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(HelmRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmValidateResponse;
};

/**
 * @summary Deletes the specified helm registry
 */
export type RegistriesHelmUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type RegistriesHelmUidDeleteResponseComposite =
  RegistriesHelmUidDeleteResponse204;

export type RegistriesHelmUidDeleteResponse =
  RegistriesHelmUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const RegistriesHelmUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<RegistriesHelmUidDeleteResponse> => {
  const res = await fetch(getV1RegistriesHelmUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmUidDeleteResponse;
};

/**
 * @summary Returns the specified Helm registry
 */
export type RegistriesHelmUidGetResponse200 = {
  data: HelmRegistry;
  status: 200;
};

export type RegistriesHelmUidGetResponseComposite =
  RegistriesHelmUidGetResponse200;

export type RegistriesHelmUidGetResponse =
  RegistriesHelmUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const RegistriesHelmUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<RegistriesHelmUidGetResponse> => {
  const res = await fetch(getV1RegistriesHelmUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmUidGetResponse;
};

/**
 * @summary Updates the specified helm registry
 */
export type RegistriesHelmUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type RegistriesHelmUidUpdateResponseComposite =
  RegistriesHelmUidUpdateResponse204;

export type RegistriesHelmUidUpdateResponse =
  RegistriesHelmUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}`;
};

export const RegistriesHelmUidUpdate = async (
  uid: string,
  HelmRegistry: HelmRegistry,
  options?: RequestInit,
): Promise<RegistriesHelmUidUpdateResponse> => {
  const res = await fetch(getV1RegistriesHelmUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(HelmRegistry),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmUidUpdateResponse;
};

/**
 * Sync all the helm charts from the registry
 * @summary Sync Helm registry
 */
export type RegistriesHelmUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type RegistriesHelmUidSyncResponseComposite =
  RegistriesHelmUidSyncResponse202;

export type RegistriesHelmUidSyncResponse =
  RegistriesHelmUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidSyncUrl = (
  uid: string,
  params?: RegistriesHelmUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync`;
};

export const RegistriesHelmUidSync = async (
  uid: string,
  params?: RegistriesHelmUidSyncParams,
  options?: RequestInit,
): Promise<RegistriesHelmUidSyncResponse> => {
  const res = await fetch(getV1RegistriesHelmUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmUidSyncResponse;
};

/**
 * Get the sync status for the specified helm registry
 * @summary Get helm registry sync status
 */
export type RegistriesHelmUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type RegistriesHelmUidSyncStatusResponseComposite =
  RegistriesHelmUidSyncStatusResponse200;

export type RegistriesHelmUidSyncStatusResponse =
  RegistriesHelmUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesHelmUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/helm/${uid}/sync/status`;
};

export const RegistriesHelmUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<RegistriesHelmUidSyncStatusResponse> => {
  const res = await fetch(getV1RegistriesHelmUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesHelmUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesHelmUidSyncStatusResponse;
};

/**
 * @summary Retrieves a list of registries metadata
 */
export type RegistriesMetadataResponse200 = {
  data: RegistriesMetadata;
  status: 200;
};

export type RegistriesMetadataResponseComposite = RegistriesMetadataResponse200;

export type RegistriesMetadataResponse = RegistriesMetadataResponseComposite & {
  headers: Headers;
};

export const getV1RegistriesMetadataUrl = (
  params?: RegistriesMetadataParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/metadata`;
};

export const RegistriesMetadata = async (
  params?: RegistriesMetadataParams,
  options?: RequestInit,
): Promise<RegistriesMetadataResponse> => {
  const res = await fetch(getV1RegistriesMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesMetadataResponse;
};

/**
 * @summary Creates a basic oci registry
 */
export type BasicOciRegistriesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type BasicOciRegistriesCreateResponseComposite =
  BasicOciRegistriesCreateResponse201;

export type BasicOciRegistriesCreateResponse =
  BasicOciRegistriesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesCreateUrl = (
  params?: BasicOciRegistriesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/basic?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/basic`;
};

export const BasicOciRegistriesCreate = async (
  BasicOciRegistryBody: BasicOciRegistryBody,
  params?: BasicOciRegistriesCreateParams,
  options?: RequestInit,
): Promise<BasicOciRegistriesCreateResponse> => {
  const res = await fetch(getV1BasicOciRegistriesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(BasicOciRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: BasicOciRegistriesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as BasicOciRegistriesCreateResponse;
};

/**
 * Returns no contents if oci registry is valid else error.
 * @summary Check if oci registry is valid
 */
export type BasicOciRegistriesValidateResponse204 = {
  data: void;
  status: 204;
};

export type BasicOciRegistriesValidateResponseComposite =
  BasicOciRegistriesValidateResponse204;

export type BasicOciRegistriesValidateResponse =
  BasicOciRegistriesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/basic/validate`;
};

export const BasicOciRegistriesValidate = async (
  BasicOciRegistrySpec: BasicOciRegistrySpec,
  options?: RequestInit,
): Promise<BasicOciRegistriesValidateResponse> => {
  const res = await fetch(getV1BasicOciRegistriesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(BasicOciRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: BasicOciRegistriesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as BasicOciRegistriesValidateResponse;
};

/**
 * @summary Creates a ecr registry
 */
export type EcrRegistriesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type EcrRegistriesCreateResponseComposite =
  EcrRegistriesCreateResponse201;

export type EcrRegistriesCreateResponse =
  EcrRegistriesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesCreateUrl = (
  params?: EcrRegistriesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/ecr?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/ecr`;
};

export const EcrRegistriesCreate = async (
  EcrRegistryBody: EcrRegistryBody,
  params?: EcrRegistriesCreateParams,
  options?: RequestInit,
): Promise<EcrRegistriesCreateResponse> => {
  const res = await fetch(getV1EcrRegistriesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EcrRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EcrRegistriesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EcrRegistriesCreateResponse;
};

/**
 * Returns no contents if ecr registry is valid else error.
 * @summary Check if ecr registry is valid
 */
export type EcrRegistriesValidateResponse204 = {
  data: void;
  status: 204;
};

export type EcrRegistriesValidateResponseComposite =
  EcrRegistriesValidateResponse204;

export type EcrRegistriesValidateResponse =
  EcrRegistriesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/ecr/validate`;
};

export const EcrRegistriesValidate = async (
  EcrRegistrySpec: EcrRegistrySpec,
  options?: RequestInit,
): Promise<EcrRegistriesValidateResponse> => {
  const res = await fetch(getV1EcrRegistriesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EcrRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EcrRegistriesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EcrRegistriesValidateResponse;
};

/**
 * @summary Creates a image registry
 */
export type OciImageRegistryGetResponse200 = {
  data: OciImageRegistry;
  status: 200;
};

export type OciImageRegistryGetResponseComposite =
  OciImageRegistryGetResponse200;

export type OciImageRegistryGetResponse =
  OciImageRegistryGetResponseComposite & {
    headers: Headers;
  };

export const getV1OciImageRegistryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/image`;
};

export const OciImageRegistryGet = async (
  options?: RequestInit,
): Promise<OciImageRegistryGetResponse> => {
  const res = await fetch(getV1OciImageRegistryGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OciImageRegistryGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OciImageRegistryGetResponse;
};

/**
 * @summary Retrieves a oci registries summary
 */
export type OciRegistriesSummaryResponse200 = {
  data: OciRegistries;
  status: 200;
};

export type OciRegistriesSummaryResponseComposite =
  OciRegistriesSummaryResponse200;

export type OciRegistriesSummaryResponse =
  OciRegistriesSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1OciRegistriesSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/oci/summary`;
};

export const OciRegistriesSummary = async (
  options?: RequestInit,
): Promise<OciRegistriesSummaryResponse> => {
  const res = await fetch(getV1OciRegistriesSummaryUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OciRegistriesSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OciRegistriesSummaryResponse;
};

/**
 * @summary Returns the information of specified oci registry
 */
export type OciRegistriesGetResponse200 = {
  data: OciRegistryEntity;
  status: 200;
};

export type OciRegistriesGetResponseComposite = OciRegistriesGetResponse200;

export type OciRegistriesGetResponse = OciRegistriesGetResponseComposite & {
  headers: Headers;
};

export const getV1OciRegistriesGetUrl = (
  uid: string,
  params?: OciRegistriesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}`;
};

export const OciRegistriesGet = async (
  uid: string,
  params?: OciRegistriesGetParams,
  options?: RequestInit,
): Promise<OciRegistriesGetResponse> => {
  const res = await fetch(getV1OciRegistriesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OciRegistriesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OciRegistriesGetResponse;
};

/**
 * @summary Deletes the specified basic oci registry
 */
export type BasicOciRegistriesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type BasicOciRegistriesUidDeleteResponseComposite =
  BasicOciRegistriesUidDeleteResponse204;

export type BasicOciRegistriesUidDeleteResponse =
  BasicOciRegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const BasicOciRegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<BasicOciRegistriesUidDeleteResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: BasicOciRegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as BasicOciRegistriesUidDeleteResponse;
};

/**
 * @summary Returns the basic oci registry
 */
export type BasicOciRegistriesUidGetResponse200 = {
  data: BasicOciRegistry;
  status: 200;
};

export type BasicOciRegistriesUidGetResponseComposite =
  BasicOciRegistriesUidGetResponse200;

export type BasicOciRegistriesUidGetResponse =
  BasicOciRegistriesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const BasicOciRegistriesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<BasicOciRegistriesUidGetResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: BasicOciRegistriesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as BasicOciRegistriesUidGetResponse;
};

/**
 * @summary Updates the specified basic oci registry
 */
export type BasicOciRegistriesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type BasicOciRegistriesUidUpdateResponseComposite =
  BasicOciRegistriesUidUpdateResponse204;

export type BasicOciRegistriesUidUpdateResponse =
  BasicOciRegistriesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic`;
};

export const BasicOciRegistriesUidUpdate = async (
  uid: string,
  BasicOciRegistryBody: BasicOciRegistryBody,
  options?: RequestInit,
): Promise<BasicOciRegistriesUidUpdateResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(BasicOciRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: BasicOciRegistriesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as BasicOciRegistriesUidUpdateResponse;
};

/**
 * Sync all the content from the oci registry
 * @summary Sync oci registry
 */
export type BasicOciRegistriesUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type BasicOciRegistriesUidSyncResponseComposite =
  BasicOciRegistriesUidSyncResponse202;

export type BasicOciRegistriesUidSyncResponse =
  BasicOciRegistriesUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidSyncUrl = (
  uid: string,
  params?: BasicOciRegistriesUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync`;
};

export const BasicOciRegistriesUidSync = async (
  uid: string,
  params?: BasicOciRegistriesUidSyncParams,
  options?: RequestInit,
): Promise<BasicOciRegistriesUidSyncResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: BasicOciRegistriesUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as BasicOciRegistriesUidSyncResponse;
};

/**
 * Get sync status for the oci specified registry
 * @summary Get oci registry sync status
 */
export type BasicOciRegistriesUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type BasicOciRegistriesUidSyncStatusResponseComposite =
  BasicOciRegistriesUidSyncStatusResponse200;

export type BasicOciRegistriesUidSyncStatusResponse =
  BasicOciRegistriesUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1BasicOciRegistriesUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/basic/sync/status`;
};

export const BasicOciRegistriesUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<BasicOciRegistriesUidSyncStatusResponse> => {
  const res = await fetch(getV1BasicOciRegistriesUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: BasicOciRegistriesUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as BasicOciRegistriesUidSyncStatusResponse;
};

/**
 * @summary Deletes the specified ecr registry
 */
export type EcrRegistriesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type EcrRegistriesUidDeleteResponseComposite =
  EcrRegistriesUidDeleteResponse204;

export type EcrRegistriesUidDeleteResponse =
  EcrRegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const EcrRegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<EcrRegistriesUidDeleteResponse> => {
  const res = await fetch(getV1EcrRegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EcrRegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EcrRegistriesUidDeleteResponse;
};

/**
 * @summary Returns the specified ecr registry
 */
export type EcrRegistriesUidGetResponse200 = {
  data: EcrRegistry;
  status: 200;
};

export type EcrRegistriesUidGetResponseComposite =
  EcrRegistriesUidGetResponse200;

export type EcrRegistriesUidGetResponse =
  EcrRegistriesUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const EcrRegistriesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<EcrRegistriesUidGetResponse> => {
  const res = await fetch(getV1EcrRegistriesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EcrRegistriesUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EcrRegistriesUidGetResponse;
};

/**
 * @summary Updates the specified ecr registry
 */
export type EcrRegistriesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type EcrRegistriesUidUpdateResponseComposite =
  EcrRegistriesUidUpdateResponse204;

export type EcrRegistriesUidUpdateResponse =
  EcrRegistriesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr`;
};

export const EcrRegistriesUidUpdate = async (
  uid: string,
  EcrRegistryBody: EcrRegistryBody,
  options?: RequestInit,
): Promise<EcrRegistriesUidUpdateResponse> => {
  const res = await fetch(getV1EcrRegistriesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EcrRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EcrRegistriesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EcrRegistriesUidUpdateResponse;
};

/**
 * Sync all the content from the ecr registry
 * @summary Sync ecr registry
 */
export type EcrRegistriesUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type EcrRegistriesUidSyncResponseComposite =
  EcrRegistriesUidSyncResponse202;

export type EcrRegistriesUidSyncResponse =
  EcrRegistriesUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidSyncUrl = (
  uid: string,
  params?: EcrRegistriesUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync`;
};

export const EcrRegistriesUidSync = async (
  uid: string,
  params?: EcrRegistriesUidSyncParams,
  options?: RequestInit,
): Promise<EcrRegistriesUidSyncResponse> => {
  const res = await fetch(getV1EcrRegistriesUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EcrRegistriesUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EcrRegistriesUidSyncResponse;
};

/**
 * Get sync status for the ecr specified registry
 * @summary Get ecr registry sync status
 */
export type EcrRegistriesUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type EcrRegistriesUidSyncStatusResponseComposite =
  EcrRegistriesUidSyncStatusResponse200;

export type EcrRegistriesUidSyncStatusResponse =
  EcrRegistriesUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1EcrRegistriesUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/oci/${uid}/ecr/sync/status`;
};

export const EcrRegistriesUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<EcrRegistriesUidSyncStatusResponse> => {
  const res = await fetch(getV1EcrRegistriesUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EcrRegistriesUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EcrRegistriesUidSyncStatusResponse;
};

/**
 * @summary Retrieves a list of Pack registries
 */
export type RegistriesPackListResponse200 = {
  data: PackRegistries;
  status: 200;
};

export type RegistriesPackListResponseComposite = RegistriesPackListResponse200;

export type RegistriesPackListResponse = RegistriesPackListResponseComposite & {
  headers: Headers;
};

export const getV1RegistriesPackListUrl = (
  params?: RegistriesPackListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack`;
};

export const RegistriesPackList = async (
  params?: RegistriesPackListParams,
  options?: RequestInit,
): Promise<RegistriesPackListResponse> => {
  const res = await fetch(getV1RegistriesPackListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackListResponse;
};

/**
 * @summary Creates a pack registry
 */
export type RegistriesPackCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type RegistriesPackCreateResponseComposite =
  RegistriesPackCreateResponse201;

export type RegistriesPackCreateResponse =
  RegistriesPackCreateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackCreateUrl = (
  params?: RegistriesPackCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack`;
};

export const RegistriesPackCreate = async (
  PackRegistryBody: PackRegistryBody,
  params?: RegistriesPackCreateParams,
  options?: RequestInit,
): Promise<RegistriesPackCreateResponse> => {
  const res = await fetch(getV1RegistriesPackCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PackRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackCreateResponse;
};

/**
 * @summary Retrieves a list of pack registries as summary
 */
export type RegistriesPackSummaryListResponse200 = {
  data: PackRegistriesSummary;
  status: 200;
};

export type RegistriesPackSummaryListResponseComposite =
  RegistriesPackSummaryListResponse200;

export type RegistriesPackSummaryListResponse =
  RegistriesPackSummaryListResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackSummaryListUrl = (
  params?: RegistriesPackSummaryListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack/summary`;
};

export const RegistriesPackSummaryList = async (
  params?: RegistriesPackSummaryListParams,
  options?: RequestInit,
): Promise<RegistriesPackSummaryListResponse> => {
  const res = await fetch(getV1RegistriesPackSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackSummaryListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackSummaryListResponse;
};

/**
 * Returns no contents if pack registry is valid else error.
 * @summary Check if pack registry is valid
 */
export type RegistriesPackValidateResponse204 = {
  data: void;
  status: 204;
};

export type RegistriesPackValidateResponseComposite =
  RegistriesPackValidateResponse204;

export type RegistriesPackValidateResponse =
  RegistriesPackValidateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/registries/pack/validate`;
};

export const RegistriesPackValidate = async (
  PackRegistrySpec: PackRegistrySpec,
  options?: RequestInit,
): Promise<RegistriesPackValidateResponse> => {
  const res = await fetch(getV1RegistriesPackValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PackRegistrySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackValidateResponse;
};

/**
 * @summary Deletes the specified pack registry
 */
export type RegistriesPackUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type RegistriesPackUidDeleteResponseComposite =
  RegistriesPackUidDeleteResponse204;

export type RegistriesPackUidDeleteResponse =
  RegistriesPackUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const RegistriesPackUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<RegistriesPackUidDeleteResponse> => {
  const res = await fetch(getV1RegistriesPackUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackUidDeleteResponse;
};

/**
 * @summary Returns the specified Pack registry
 */
export type RegistriesPackUidGetResponse200 = {
  data: PackRegistry;
  status: 200;
};

export type RegistriesPackUidGetResponseComposite =
  RegistriesPackUidGetResponse200;

export type RegistriesPackUidGetResponse =
  RegistriesPackUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const RegistriesPackUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<RegistriesPackUidGetResponse> => {
  const res = await fetch(getV1RegistriesPackUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackUidGetResponse;
};

/**
 * @summary Updates the specified pack registry
 */
export type RegistriesPackUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type RegistriesPackUidUpdateResponseComposite =
  RegistriesPackUidUpdateResponse204;

export type RegistriesPackUidUpdateResponse =
  RegistriesPackUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}`;
};

export const RegistriesPackUidUpdate = async (
  uid: string,
  PackRegistryBody: PackRegistryBody,
  options?: RequestInit,
): Promise<RegistriesPackUidUpdateResponse> => {
  const res = await fetch(getV1RegistriesPackUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PackRegistryBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackUidUpdateResponse;
};

/**
 * Sync all the packs from the registry
 * @summary Sync Pack registry
 */
export type RegistriesPackUidSyncResponse202 = {
  data: void;
  status: 202;
};

export type RegistriesPackUidSyncResponseComposite =
  RegistriesPackUidSyncResponse202;

export type RegistriesPackUidSyncResponse =
  RegistriesPackUidSyncResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidSyncUrl = (
  uid: string,
  params?: RegistriesPackUidSyncParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync`;
};

export const RegistriesPackUidSync = async (
  uid: string,
  params?: RegistriesPackUidSyncParams,
  options?: RequestInit,
): Promise<RegistriesPackUidSyncResponse> => {
  const res = await fetch(getV1RegistriesPackUidSyncUrl(uid, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackUidSyncResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackUidSyncResponse;
};

/**
 * Get sync status for the pack specified registry
 * @summary Get pack registry sync status
 */
export type RegistriesPackUidSyncStatusResponse200 = {
  data: RegistrySyncStatus;
  status: 200;
};

export type RegistriesPackUidSyncStatusResponseComposite =
  RegistriesPackUidSyncStatusResponse200;

export type RegistriesPackUidSyncStatusResponse =
  RegistriesPackUidSyncStatusResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesPackUidSyncStatusUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/pack/${uid}/sync/status`;
};

export const RegistriesPackUidSyncStatus = async (
  uid: string,
  options?: RequestInit,
): Promise<RegistriesPackUidSyncStatusResponse> => {
  const res = await fetch(getV1RegistriesPackUidSyncStatusUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesPackUidSyncStatusResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesPackUidSyncStatusResponse;
};

/**
 * @summary Returns the specified system scope registry configuration
 */
export type RegistriesNameConfigGetResponse200 = {
  data: RegistryConfigEntity;
  status: 200;
};

export type RegistriesNameConfigGetResponseComposite =
  RegistriesNameConfigGetResponse200;

export type RegistriesNameConfigGetResponse =
  RegistriesNameConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesNameConfigGetUrl = (registryName: string) => {
  return `https://api.spectrocloud.com/v1/registries/${registryName}/config`;
};

export const RegistriesNameConfigGet = async (
  registryName: string,
  options?: RequestInit,
): Promise<RegistriesNameConfigGetResponse> => {
  const res = await fetch(getV1RegistriesNameConfigGetUrl(registryName), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesNameConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesNameConfigGetResponse;
};

/**
 * @summary Deletes the specified registry
 */
export type RegistriesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type RegistriesUidDeleteResponseComposite =
  RegistriesUidDeleteResponse204;

export type RegistriesUidDeleteResponse =
  RegistriesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1RegistriesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/registries/${uid}`;
};

export const RegistriesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<RegistriesUidDeleteResponse> => {
  const res = await fetch(getV1RegistriesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: RegistriesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as RegistriesUidDeleteResponse;
};
