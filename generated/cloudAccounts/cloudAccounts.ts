/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AwsAccount,
  AwsAccounts,
  AzureAccount,
  AzureAccounts,
  CloudAccountsAwsGetParams,
  CloudAccountsAwsListParams,
  CloudAccountsAzureListParams,
  CloudAccountsCustomListParams,
  CloudAccountsGcpListParams,
  CloudAccountsListSummaryParams,
  CloudAccountsMaasListParams,
  CloudAccountsOpenStackListParams,
  CloudAccountsPatch,
  CloudAccountsSummary,
  CloudAccountsVsphereListParams,
  CustomAccount,
  CustomAccountEntity,
  CustomAccounts,
  GcpAccount,
  GcpAccountEntityBody,
  GcpAccounts,
  GeolocationLatlong,
  MaasAccount,
  MaasAccounts,
  MaasDomains,
  MaasPools,
  MaasSubnets,
  MaasTags,
  MaasZones,
  OpenStackAccount,
  OpenStackAccounts,
  OpenStackAzs,
  OpenStackFlavors,
  OpenStackKeypairs,
  OpenStackNetworks,
  OpenStackProjects,
  OpenStackRegions,
  OpenstackAccountsUidAzsParams,
  OpenstackAccountsUidFlavorsParams,
  OpenstackAccountsUidKeypairsParams,
  OpenstackAccountsUidNetworksParams,
  Uid,
  VsphereAccount,
  VsphereAccountBody,
  VsphereAccounts,
  VsphereAccountsUidClusterResParams,
  VsphereComputeClusterResources,
  VsphereDatacenters,
} from ".././schemas";

/**
 * @summary Retrieves a list of AWS cloud accounts
 */
export type CloudAccountsAwsListResponse200 = {
  data: AwsAccounts;
  status: 200;
};

export type CloudAccountsAwsListResponseComposite =
  CloudAccountsAwsListResponse200;

export type CloudAccountsAwsListResponse =
  CloudAccountsAwsListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsListUrl = (
  params?: CloudAccountsAwsListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/aws?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/aws`;
};

export const CloudAccountsAwsList = async (
  params?: CloudAccountsAwsListParams,
  options?: RequestInit,
): Promise<CloudAccountsAwsListResponse> => {
  const res = await fetch(getV1CloudAccountsAwsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAwsListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAwsListResponse;
};

/**
 * @summary Creates an AWS cloud account
 */
export type CloudAccountsAwsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudAccountsAwsCreateResponseComposite =
  CloudAccountsAwsCreateResponse201;

export type CloudAccountsAwsCreateResponse =
  CloudAccountsAwsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws`;
};

export const CloudAccountsAwsCreate = async (
  AwsAccount: AwsAccount,
  options?: RequestInit,
): Promise<CloudAccountsAwsCreateResponse> => {
  const res = await fetch(getV1CloudAccountsAwsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAwsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAwsCreateResponse;
};

/**
 * @summary Deletes the specified AWS account
 */
export type CloudAccountsAwsDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsAwsDeleteResponseComposite =
  CloudAccountsAwsDeleteResponse204;

export type CloudAccountsAwsDeleteResponse =
  CloudAccountsAwsDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const CloudAccountsAwsDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsAwsDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsAwsDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAwsDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAwsDeleteResponse;
};

/**
 * @summary Returns the specified AWS account
 */
export type CloudAccountsAwsGetResponse200 = {
  data: AwsAccount;
  status: 200;
};

export type CloudAccountsAwsGetResponseComposite =
  CloudAccountsAwsGetResponse200;

export type CloudAccountsAwsGetResponse =
  CloudAccountsAwsGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsGetUrl = (
  uid: string,
  params?: CloudAccountsAwsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const CloudAccountsAwsGet = async (
  uid: string,
  params?: CloudAccountsAwsGetParams,
  options?: RequestInit,
): Promise<CloudAccountsAwsGetResponse> => {
  const res = await fetch(getV1CloudAccountsAwsGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAwsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAwsGetResponse;
};

/**
 * @summary Updates the specified AWS account
 */
export type CloudAccountsAwsUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsAwsUpdateResponseComposite =
  CloudAccountsAwsUpdateResponse204;

export type CloudAccountsAwsUpdateResponse =
  CloudAccountsAwsUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAwsUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/aws/${uid}`;
};

export const CloudAccountsAwsUpdate = async (
  uid: string,
  AwsAccount: AwsAccount,
  options?: RequestInit,
): Promise<CloudAccountsAwsUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsAwsUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAwsUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAwsUpdateResponse;
};

/**
 * @summary Retrieves a list of azure cloud accounts
 */
export type CloudAccountsAzureListResponse200 = {
  data: AzureAccounts;
  status: 200;
};

export type CloudAccountsAzureListResponseComposite =
  CloudAccountsAzureListResponse200;

export type CloudAccountsAzureListResponse =
  CloudAccountsAzureListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureListUrl = (
  params?: CloudAccountsAzureListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/azure?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/azure`;
};

export const CloudAccountsAzureList = async (
  params?: CloudAccountsAzureListParams,
  options?: RequestInit,
): Promise<CloudAccountsAzureListResponse> => {
  const res = await fetch(getV1CloudAccountsAzureListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAzureListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAzureListResponse;
};

/**
 * @summary Create azure cloud account
 */
export type CloudAccountsAzureCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudAccountsAzureCreateResponseComposite =
  CloudAccountsAzureCreateResponse201;

export type CloudAccountsAzureCreateResponse =
  CloudAccountsAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure`;
};

export const CloudAccountsAzureCreate = async (
  AzureAccount: AzureAccount,
  options?: RequestInit,
): Promise<CloudAccountsAzureCreateResponse> => {
  const res = await fetch(getV1CloudAccountsAzureCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AzureAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAzureCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAzureCreateResponse;
};

/**
 * @summary Deletes the specified azure account
 */
export type CloudAccountsAzureDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsAzureDeleteResponseComposite =
  CloudAccountsAzureDeleteResponse204;

export type CloudAccountsAzureDeleteResponse =
  CloudAccountsAzureDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const CloudAccountsAzureDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsAzureDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsAzureDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAzureDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAzureDeleteResponse;
};

/**
 * @summary Returns the specified azure cloud account
 */
export type CloudAccountsAzureGetResponse200 = {
  data: AzureAccount;
  status: 200;
};

export type CloudAccountsAzureGetResponseComposite =
  CloudAccountsAzureGetResponse200;

export type CloudAccountsAzureGetResponse =
  CloudAccountsAzureGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const CloudAccountsAzureGet = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsAzureGetResponse> => {
  const res = await fetch(getV1CloudAccountsAzureGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAzureGetResponse;
};

/**
 * @summary Updates the specified azure account
 */
export type CloudAccountsAzureUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsAzureUpdateResponseComposite =
  CloudAccountsAzureUpdateResponse204;

export type CloudAccountsAzureUpdateResponse =
  CloudAccountsAzureUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsAzureUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/azure/${uid}`;
};

export const CloudAccountsAzureUpdate = async (
  uid: string,
  AzureAccount: AzureAccount,
  options?: RequestInit,
): Promise<CloudAccountsAzureUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsAzureUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AzureAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsAzureUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsAzureUpdateResponse;
};

/**
 * @summary Retrieves a list of cloud accounts by cloud type
 */
export type CloudAccountsCustomListResponse200 = {
  data: CustomAccounts;
  status: 200;
};

export type CloudAccountsCustomListResponseComposite =
  CloudAccountsCustomListResponse200;

export type CloudAccountsCustomListResponse =
  CloudAccountsCustomListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomListUrl = (
  cloudType: string,
  params?: CloudAccountsCustomListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}`;
};

export const CloudAccountsCustomList = async (
  cloudType: string,
  params?: CloudAccountsCustomListParams,
  options?: RequestInit,
): Promise<CloudAccountsCustomListResponse> => {
  const res = await fetch(getV1CloudAccountsCustomListUrl(cloudType, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsCustomListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsCustomListResponse;
};

/**
 * @summary Creates an cloud account of specific cloud type
 */
export type CloudAccountsCustomCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudAccountsCustomCreateResponseComposite =
  CloudAccountsCustomCreateResponse201;

export type CloudAccountsCustomCreateResponse =
  CloudAccountsCustomCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomCreateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}`;
};

export const CloudAccountsCustomCreate = async (
  cloudType: string,
  CustomAccountEntity: CustomAccountEntity,
  options?: RequestInit,
): Promise<CloudAccountsCustomCreateResponse> => {
  const res = await fetch(getV1CloudAccountsCustomCreateUrl(cloudType), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(CustomAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsCustomCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsCustomCreateResponse;
};

/**
 * @summary Deletes the specified account by cloud type
 */
export type CloudAccountsCustomDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsCustomDeleteResponseComposite =
  CloudAccountsCustomDeleteResponse204;

export type CloudAccountsCustomDeleteResponse =
  CloudAccountsCustomDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomDeleteUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const CloudAccountsCustomDelete = async (
  cloudType: string,
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsCustomDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsCustomDeleteUrl(cloudType, uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsCustomDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsCustomDeleteResponse;
};

/**
 * @summary Returns the specified account by cloud type
 */
export type CloudAccountsCustomGetResponse200 = {
  data: CustomAccount;
  status: 200;
};

export type CloudAccountsCustomGetResponseComposite =
  CloudAccountsCustomGetResponse200;

export type CloudAccountsCustomGetResponse =
  CloudAccountsCustomGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomGetUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const CloudAccountsCustomGet = async (
  cloudType: string,
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsCustomGetResponse> => {
  const res = await fetch(getV1CloudAccountsCustomGetUrl(cloudType, uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsCustomGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsCustomGetResponse;
};

/**
 * @summary Updates the specified account by cloud type
 */
export type CloudAccountsCustomUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsCustomUpdateResponseComposite =
  CloudAccountsCustomUpdateResponse204;

export type CloudAccountsCustomUpdateResponse =
  CloudAccountsCustomUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsCustomUpdateUrl = (
  cloudType: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/cloudTypes/${cloudType}/${uid}`;
};

export const CloudAccountsCustomUpdate = async (
  cloudType: string,
  uid: string,
  CustomAccountEntity: CustomAccountEntity,
  options?: RequestInit,
): Promise<CloudAccountsCustomUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsCustomUpdateUrl(cloudType, uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(CustomAccountEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsCustomUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsCustomUpdateResponse;
};

/**
 * @summary Retrieves a list of gcp cloud accounts
 */
export type CloudAccountsGcpListResponse200 = {
  data: GcpAccounts;
  status: 200;
};

export type CloudAccountsGcpListResponseComposite =
  CloudAccountsGcpListResponse200;

export type CloudAccountsGcpListResponse =
  CloudAccountsGcpListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpListUrl = (
  params?: CloudAccountsGcpListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/gcp?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/gcp`;
};

export const CloudAccountsGcpList = async (
  params?: CloudAccountsGcpListParams,
  options?: RequestInit,
): Promise<CloudAccountsGcpListResponse> => {
  const res = await fetch(getV1CloudAccountsGcpListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsGcpListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsGcpListResponse;
};

/**
 * @summary Creates a GCP cloud account
 */
export type CloudAccountsGcpCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudAccountsGcpCreateResponseComposite =
  CloudAccountsGcpCreateResponse201;

export type CloudAccountsGcpCreateResponse =
  CloudAccountsGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp`;
};

export const CloudAccountsGcpCreate = async (
  GcpAccountEntityBody: GcpAccountEntityBody,
  options?: RequestInit,
): Promise<CloudAccountsGcpCreateResponse> => {
  const res = await fetch(getV1CloudAccountsGcpCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpAccountEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsGcpCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsGcpCreateResponse;
};

/**
 * @summary Deletes the specified GCP account
 */
export type CloudAccountsGcpDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsGcpDeleteResponseComposite =
  CloudAccountsGcpDeleteResponse204;

export type CloudAccountsGcpDeleteResponse =
  CloudAccountsGcpDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const CloudAccountsGcpDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsGcpDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsGcpDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsGcpDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsGcpDeleteResponse;
};

/**
 * @summary Returns the specified GCP cloud account
 */
export type CloudAccountsGcpGetResponse200 = {
  data: GcpAccount;
  status: 200;
};

export type CloudAccountsGcpGetResponseComposite =
  CloudAccountsGcpGetResponse200;

export type CloudAccountsGcpGetResponse =
  CloudAccountsGcpGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const CloudAccountsGcpGet = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsGcpGetResponse> => {
  const res = await fetch(getV1CloudAccountsGcpGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsGcpGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsGcpGetResponse;
};

/**
 * @summary Updates the specified GCP account
 */
export type CloudAccountsGcpUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsGcpUpdateResponseComposite =
  CloudAccountsGcpUpdateResponse204;

export type CloudAccountsGcpUpdateResponse =
  CloudAccountsGcpUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsGcpUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/gcp/${uid}`;
};

export const CloudAccountsGcpUpdate = async (
  uid: string,
  GcpAccountEntityBody: GcpAccountEntityBody,
  options?: RequestInit,
): Promise<CloudAccountsGcpUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsGcpUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpAccountEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsGcpUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsGcpUpdateResponse;
};

/**
 * @summary Retrieves a list of Maas cloud accounts
 */
export type CloudAccountsMaasListResponse200 = {
  data: MaasAccounts;
  status: 200;
};

export type CloudAccountsMaasListResponseComposite =
  CloudAccountsMaasListResponse200;

export type CloudAccountsMaasListResponse =
  CloudAccountsMaasListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasListUrl = (
  params?: CloudAccountsMaasListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/maas?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/maas`;
};

export const CloudAccountsMaasList = async (
  params?: CloudAccountsMaasListParams,
  options?: RequestInit,
): Promise<CloudAccountsMaasListResponse> => {
  const res = await fetch(getV1CloudAccountsMaasListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsMaasListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsMaasListResponse;
};

/**
 * @summary Creates an Maas cloud account
 */
export type CloudAccountsMaasCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudAccountsMaasCreateResponseComposite =
  CloudAccountsMaasCreateResponse201;

export type CloudAccountsMaasCreateResponse =
  CloudAccountsMaasCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas`;
};

export const CloudAccountsMaasCreate = async (
  MaasAccount: MaasAccount,
  options?: RequestInit,
): Promise<CloudAccountsMaasCreateResponse> => {
  const res = await fetch(getV1CloudAccountsMaasCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MaasAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsMaasCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsMaasCreateResponse;
};

/**
 * @summary Deletes the specified Maas account
 */
export type CloudAccountsMaasDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsMaasDeleteResponseComposite =
  CloudAccountsMaasDeleteResponse204;

export type CloudAccountsMaasDeleteResponse =
  CloudAccountsMaasDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const CloudAccountsMaasDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsMaasDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsMaasDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsMaasDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsMaasDeleteResponse;
};

/**
 * @summary Returns the specified Maas account
 */
export type CloudAccountsMaasGetResponse200 = {
  data: MaasAccount;
  status: 200;
};

export type CloudAccountsMaasGetResponseComposite =
  CloudAccountsMaasGetResponse200;

export type CloudAccountsMaasGetResponse =
  CloudAccountsMaasGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const CloudAccountsMaasGet = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsMaasGetResponse> => {
  const res = await fetch(getV1CloudAccountsMaasGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsMaasGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsMaasGetResponse;
};

/**
 * @summary Patches the specified CloudAccount Maas
 */
export type CloudAccountsMaasPatchResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsMaasPatchResponseComposite =
  CloudAccountsMaasPatchResponse204;

export type CloudAccountsMaasPatchResponse =
  CloudAccountsMaasPatchResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const CloudAccountsMaasPatch = async (
  uid: string,
  CloudAccountsPatch: CloudAccountsPatch,
  options?: RequestInit,
): Promise<CloudAccountsMaasPatchResponse> => {
  const res = await fetch(getV1CloudAccountsMaasPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(CloudAccountsPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsMaasPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsMaasPatchResponse;
};

/**
 * @summary Updates the specified Maas account
 */
export type CloudAccountsMaasUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsMaasUpdateResponseComposite =
  CloudAccountsMaasUpdateResponse204;

export type CloudAccountsMaasUpdateResponse =
  CloudAccountsMaasUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsMaasUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}`;
};

export const CloudAccountsMaasUpdate = async (
  uid: string,
  MaasAccount: MaasAccount,
  options?: RequestInit,
): Promise<CloudAccountsMaasUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsMaasUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MaasAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsMaasUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsMaasUpdateResponse;
};

/**
 * @summary Get the maas azs for a given account
 */
export type MaasAccountsUidAzsResponse200 = {
  data: MaasZones;
  status: 200;
};

export type MaasAccountsUidAzsResponseComposite = MaasAccountsUidAzsResponse200;

export type MaasAccountsUidAzsResponse = MaasAccountsUidAzsResponseComposite & {
  headers: Headers;
};

export const getV1MaasAccountsUidAzsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/azs`;
};

export const MaasAccountsUidAzs = async (
  uid: string,
  options?: RequestInit,
): Promise<MaasAccountsUidAzsResponse> => {
  const res = await fetch(getV1MaasAccountsUidAzsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasAccountsUidAzsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasAccountsUidAzsResponse;
};

/**
 * @summary Get the maas domains for a given account
 */
export type MaasAccountsUidDomainsResponse200 = {
  data: MaasDomains;
  status: 200;
};

export type MaasAccountsUidDomainsResponseComposite =
  MaasAccountsUidDomainsResponse200;

export type MaasAccountsUidDomainsResponse =
  MaasAccountsUidDomainsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidDomainsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/domains`;
};

export const MaasAccountsUidDomains = async (
  uid: string,
  options?: RequestInit,
): Promise<MaasAccountsUidDomainsResponse> => {
  const res = await fetch(getV1MaasAccountsUidDomainsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasAccountsUidDomainsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasAccountsUidDomainsResponse;
};

/**
 * @summary Get the maas pools for a given account
 */
export type MaasAccountsUidPoolsResponse200 = {
  data: MaasPools;
  status: 200;
};

export type MaasAccountsUidPoolsResponseComposite =
  MaasAccountsUidPoolsResponse200;

export type MaasAccountsUidPoolsResponse =
  MaasAccountsUidPoolsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidPoolsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/resourcePools`;
};

export const MaasAccountsUidPools = async (
  uid: string,
  options?: RequestInit,
): Promise<MaasAccountsUidPoolsResponse> => {
  const res = await fetch(getV1MaasAccountsUidPoolsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasAccountsUidPoolsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasAccountsUidPoolsResponse;
};

/**
 * @summary Get the maas subnets for a given account
 */
export type MaasAccountsUidSubnetsResponse200 = {
  data: MaasSubnets;
  status: 200;
};

export type MaasAccountsUidSubnetsResponseComposite =
  MaasAccountsUidSubnetsResponse200;

export type MaasAccountsUidSubnetsResponse =
  MaasAccountsUidSubnetsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidSubnetsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/subnets`;
};

export const MaasAccountsUidSubnets = async (
  uid: string,
  options?: RequestInit,
): Promise<MaasAccountsUidSubnetsResponse> => {
  const res = await fetch(getV1MaasAccountsUidSubnetsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasAccountsUidSubnetsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasAccountsUidSubnetsResponse;
};

/**
 * @summary Get the maas tags for a given account
 */
export type MaasAccountsUidTagsResponse200 = {
  data: MaasTags;
  status: 200;
};

export type MaasAccountsUidTagsResponseComposite =
  MaasAccountsUidTagsResponse200;

export type MaasAccountsUidTagsResponse =
  MaasAccountsUidTagsResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountsUidTagsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/maas/${uid}/properties/tags`;
};

export const MaasAccountsUidTags = async (
  uid: string,
  options?: RequestInit,
): Promise<MaasAccountsUidTagsResponse> => {
  const res = await fetch(getV1MaasAccountsUidTagsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasAccountsUidTagsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasAccountsUidTagsResponse;
};

/**
 * @summary Retrieves a list of OpenStack cloud accounts
 */
export type CloudAccountsOpenStackListResponse200 = {
  data: OpenStackAccounts;
  status: 200;
};

export type CloudAccountsOpenStackListResponseComposite =
  CloudAccountsOpenStackListResponse200;

export type CloudAccountsOpenStackListResponse =
  CloudAccountsOpenStackListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackListUrl = (
  params?: CloudAccountsOpenStackListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack`;
};

export const CloudAccountsOpenStackList = async (
  params?: CloudAccountsOpenStackListParams,
  options?: RequestInit,
): Promise<CloudAccountsOpenStackListResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsOpenStackListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsOpenStackListResponse;
};

/**
 * @summary Creates a OpenStack cloud account
 */
export type CloudAccountsOpenStackCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudAccountsOpenStackCreateResponseComposite =
  CloudAccountsOpenStackCreateResponse201;

export type CloudAccountsOpenStackCreateResponse =
  CloudAccountsOpenStackCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack`;
};

export const CloudAccountsOpenStackCreate = async (
  OpenStackAccount: OpenStackAccount,
  options?: RequestInit,
): Promise<CloudAccountsOpenStackCreateResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OpenStackAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsOpenStackCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsOpenStackCreateResponse;
};

/**
 * @summary Deletes the specified OpenStack account
 */
export type CloudAccountsOpenStackDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsOpenStackDeleteResponseComposite =
  CloudAccountsOpenStackDeleteResponse204;

export type CloudAccountsOpenStackDeleteResponse =
  CloudAccountsOpenStackDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const CloudAccountsOpenStackDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsOpenStackDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsOpenStackDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsOpenStackDeleteResponse;
};

/**
 * @summary Returns the specified OpenStack account
 */
export type CloudAccountsOpenStackGetResponse200 = {
  data: OpenStackAccount;
  status: 200;
};

export type CloudAccountsOpenStackGetResponseComposite =
  CloudAccountsOpenStackGetResponse200;

export type CloudAccountsOpenStackGetResponse =
  CloudAccountsOpenStackGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const CloudAccountsOpenStackGet = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsOpenStackGetResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsOpenStackGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsOpenStackGetResponse;
};

/**
 * @summary Updates the specified OpenStack account
 */
export type CloudAccountsOpenStackUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsOpenStackUpdateResponseComposite =
  CloudAccountsOpenStackUpdateResponse204;

export type CloudAccountsOpenStackUpdateResponse =
  CloudAccountsOpenStackUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsOpenStackUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}`;
};

export const CloudAccountsOpenStackUpdate = async (
  uid: string,
  OpenStackAccount: OpenStackAccount,
  options?: RequestInit,
): Promise<CloudAccountsOpenStackUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsOpenStackUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OpenStackAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsOpenStackUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsOpenStackUpdateResponse;
};

/**
 * @summary Get the openstack azs for a given account and region
 */
export type OpenstackAccountsUidAzsResponse200 = {
  data: OpenStackAzs;
  status: 200;
};

export type OpenstackAccountsUidAzsResponseComposite =
  OpenstackAccountsUidAzsResponse200;

export type OpenstackAccountsUidAzsResponse =
  OpenstackAccountsUidAzsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidAzsUrl = (
  uid: string,
  params?: OpenstackAccountsUidAzsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/azs`;
};

export const OpenstackAccountsUidAzs = async (
  uid: string,
  params?: OpenstackAccountsUidAzsParams,
  options?: RequestInit,
): Promise<OpenstackAccountsUidAzsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidAzsUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenstackAccountsUidAzsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenstackAccountsUidAzsResponse;
};

/**
 * @summary Get the openstack keypairs for a given account and scope
 */
export type OpenstackAccountsUidFlavorsResponse200 = {
  data: OpenStackFlavors;
  status: 200;
};

export type OpenstackAccountsUidFlavorsResponseComposite =
  OpenstackAccountsUidFlavorsResponse200;

export type OpenstackAccountsUidFlavorsResponse =
  OpenstackAccountsUidFlavorsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidFlavorsUrl = (
  uid: string,
  params?: OpenstackAccountsUidFlavorsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/flavors?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/flavors`;
};

export const OpenstackAccountsUidFlavors = async (
  uid: string,
  params?: OpenstackAccountsUidFlavorsParams,
  options?: RequestInit,
): Promise<OpenstackAccountsUidFlavorsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidFlavorsUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenstackAccountsUidFlavorsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenstackAccountsUidFlavorsResponse;
};

/**
 * @summary Get the openstack keypairs for a given account and scope
 */
export type OpenstackAccountsUidKeypairsResponse200 = {
  data: OpenStackKeypairs;
  status: 200;
};

export type OpenstackAccountsUidKeypairsResponseComposite =
  OpenstackAccountsUidKeypairsResponse200;

export type OpenstackAccountsUidKeypairsResponse =
  OpenstackAccountsUidKeypairsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidKeypairsUrl = (
  uid: string,
  params?: OpenstackAccountsUidKeypairsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/keypairs`;
};

export const OpenstackAccountsUidKeypairs = async (
  uid: string,
  params?: OpenstackAccountsUidKeypairsParams,
  options?: RequestInit,
): Promise<OpenstackAccountsUidKeypairsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidKeypairsUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenstackAccountsUidKeypairsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenstackAccountsUidKeypairsResponse;
};

/**
 * @summary Get the openstack networks for a given account and scope
 */
export type OpenstackAccountsUidNetworksResponse200 = {
  data: OpenStackNetworks;
  status: 200;
};

export type OpenstackAccountsUidNetworksResponseComposite =
  OpenstackAccountsUidNetworksResponse200;

export type OpenstackAccountsUidNetworksResponse =
  OpenstackAccountsUidNetworksResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidNetworksUrl = (
  uid: string,
  params?: OpenstackAccountsUidNetworksParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/networks`;
};

export const OpenstackAccountsUidNetworks = async (
  uid: string,
  params?: OpenstackAccountsUidNetworksParams,
  options?: RequestInit,
): Promise<OpenstackAccountsUidNetworksResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidNetworksUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenstackAccountsUidNetworksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenstackAccountsUidNetworksResponse;
};

/**
 * @summary Get the openstack projects for a given account
 */
export type OpenstackAccountsUidProjectsResponse200 = {
  data: OpenStackProjects;
  status: 200;
};

export type OpenstackAccountsUidProjectsResponseComposite =
  OpenstackAccountsUidProjectsResponse200;

export type OpenstackAccountsUidProjectsResponse =
  OpenstackAccountsUidProjectsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidProjectsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/projects`;
};

export const OpenstackAccountsUidProjects = async (
  uid: string,
  options?: RequestInit,
): Promise<OpenstackAccountsUidProjectsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidProjectsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenstackAccountsUidProjectsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenstackAccountsUidProjectsResponse;
};

/**
 * @summary Get the openstack regions for a given account
 */
export type OpenstackAccountsUidRegionsResponse200 = {
  data: OpenStackRegions;
  status: 200;
};

export type OpenstackAccountsUidRegionsResponseComposite =
  OpenstackAccountsUidRegionsResponse200;

export type OpenstackAccountsUidRegionsResponse =
  OpenstackAccountsUidRegionsResponseComposite & {
    headers: Headers;
  };

export const getV1OpenstackAccountsUidRegionsUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/openstack/${uid}/properties/regions`;
};

export const OpenstackAccountsUidRegions = async (
  uid: string,
  options?: RequestInit,
): Promise<OpenstackAccountsUidRegionsResponse> => {
  const res = await fetch(getV1OpenstackAccountsUidRegionsUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenstackAccountsUidRegionsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenstackAccountsUidRegionsResponse;
};

/**
 * @summary Retrieves a list of cloud accounts summary
 */
export type CloudAccountsListSummaryResponse200 = {
  data: CloudAccountsSummary;
  status: 200;
};

export type CloudAccountsListSummaryResponseComposite =
  CloudAccountsListSummaryResponse200;

export type CloudAccountsListSummaryResponse =
  CloudAccountsListSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsListSummaryUrl = (
  params?: CloudAccountsListSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/summary?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/summary`;
};

export const CloudAccountsListSummary = async (
  params?: CloudAccountsListSummaryParams,
  options?: RequestInit,
): Promise<CloudAccountsListSummaryResponse> => {
  const res = await fetch(getV1CloudAccountsListSummaryUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsListSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsListSummaryResponse;
};

/**
 * @summary Retrieves a list of vSphere cloud accounts
 */
export type CloudAccountsVsphereListResponse200 = {
  data: VsphereAccounts;
  status: 200;
};

export type CloudAccountsVsphereListResponseComposite =
  CloudAccountsVsphereListResponse200;

export type CloudAccountsVsphereListResponse =
  CloudAccountsVsphereListResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereListUrl = (
  params?: CloudAccountsVsphereListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/vsphere?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/vsphere`;
};

export const CloudAccountsVsphereList = async (
  params?: CloudAccountsVsphereListParams,
  options?: RequestInit,
): Promise<CloudAccountsVsphereListResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsVsphereListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsVsphereListResponse;
};

/**
 * @summary Creates a vSphere cloud account
 */
export type CloudAccountsVsphereCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type CloudAccountsVsphereCreateResponseComposite =
  CloudAccountsVsphereCreateResponse201;

export type CloudAccountsVsphereCreateResponse =
  CloudAccountsVsphereCreateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere`;
};

export const CloudAccountsVsphereCreate = async (
  VsphereAccountBody: VsphereAccountBody,
  options?: RequestInit,
): Promise<CloudAccountsVsphereCreateResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VsphereAccountBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsVsphereCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsVsphereCreateResponse;
};

/**
 * @summary Deletes the specified vSphere account
 */
export type CloudAccountsVsphereDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsVsphereDeleteResponseComposite =
  CloudAccountsVsphereDeleteResponse204;

export type CloudAccountsVsphereDeleteResponse =
  CloudAccountsVsphereDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const CloudAccountsVsphereDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsVsphereDeleteResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsVsphereDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsVsphereDeleteResponse;
};

/**
 * @summary Returns the specified vSphere account
 */
export type CloudAccountsVsphereGetResponse200 = {
  data: VsphereAccount;
  status: 200;
};

export type CloudAccountsVsphereGetResponseComposite =
  CloudAccountsVsphereGetResponse200;

export type CloudAccountsVsphereGetResponse =
  CloudAccountsVsphereGetResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const CloudAccountsVsphereGet = async (
  uid: string,
  options?: RequestInit,
): Promise<CloudAccountsVsphereGetResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsVsphereGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsVsphereGetResponse;
};

/**
 * @summary Updates the specified VSphere account
 */
export type CloudAccountsVsphereUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CloudAccountsVsphereUpdateResponseComposite =
  CloudAccountsVsphereUpdateResponse204;

export type CloudAccountsVsphereUpdateResponse =
  CloudAccountsVsphereUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudAccountsVsphereUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}`;
};

export const CloudAccountsVsphereUpdate = async (
  uid: string,
  VsphereAccountBody: VsphereAccountBody,
  options?: RequestInit,
): Promise<CloudAccountsVsphereUpdateResponse> => {
  const res = await fetch(getV1CloudAccountsVsphereUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VsphereAccountBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudAccountsVsphereUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudAccountsVsphereUpdateResponse;
};

/**
 * @summary Get the vSphere computecluster resources for the given overlord account
 */
export type VsphereAccountsUidClusterResResponse200 = {
  data: VsphereComputeClusterResources;
  status: 200;
};

export type VsphereAccountsUidClusterResResponseComposite =
  VsphereAccountsUidClusterResResponse200;

export type VsphereAccountsUidClusterResResponse =
  VsphereAccountsUidClusterResResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereAccountsUidClusterResUrl = (
  uid: string,
  params: VsphereAccountsUidClusterResParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/computecluster/resources?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/computecluster/resources`;
};

export const VsphereAccountsUidClusterRes = async (
  uid: string,
  params: VsphereAccountsUidClusterResParams,
  options?: RequestInit,
): Promise<VsphereAccountsUidClusterResResponse> => {
  const res = await fetch(getV1VsphereAccountsUidClusterResUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereAccountsUidClusterResResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereAccountsUidClusterResResponse;
};

/**
 * @summary Get the vSphere datacenters & datacluster for the given overlord account
 */
export type VsphereAccountsUidDatacentersResponse200 = {
  data: VsphereDatacenters;
  status: 200;
};

export type VsphereAccountsUidDatacentersResponseComposite =
  VsphereAccountsUidDatacentersResponse200;

export type VsphereAccountsUidDatacentersResponse =
  VsphereAccountsUidDatacentersResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereAccountsUidDatacentersUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/vsphere/${uid}/properties/datacenters`;
};

export const VsphereAccountsUidDatacenters = async (
  uid: string,
  options?: RequestInit,
): Promise<VsphereAccountsUidDatacentersResponse> => {
  const res = await fetch(getV1VsphereAccountsUidDatacentersUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereAccountsUidDatacentersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereAccountsUidDatacentersResponse;
};

/**
 * @summary Update the geolocation annotation
 */
export type AccountsGeolocationPatchResponse204 = {
  data: void;
  status: 204;
};

export type AccountsGeolocationPatchResponseComposite =
  AccountsGeolocationPatchResponse204;

export type AccountsGeolocationPatchResponse =
  AccountsGeolocationPatchResponseComposite & {
    headers: Headers;
  };

export const getV1AccountsGeolocationPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/cloudaccounts/${uid}/geoLocation`;
};

export const AccountsGeolocationPatch = async (
  uid: string,
  GeolocationLatlong: GeolocationLatlong,
  options?: RequestInit,
): Promise<AccountsGeolocationPatchResponse> => {
  const res = await fetch(getV1AccountsGeolocationPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GeolocationLatlong),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AccountsGeolocationPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AccountsGeolocationPatchResponse;
};
