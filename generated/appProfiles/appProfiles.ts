/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AppProfile,
  AppProfileCloneEntity,
  AppProfileCloneMetaInputEntity,
  AppProfileMetaEntity,
  AppProfileTiers,
  AppTier,
  AppTierEntity,
  AppTierManifests,
  AppTierPatchEntity,
  AppTierResolvedValues,
  Macros,
  Manifest,
  Uid,
  V1AppProfileEntityBody,
  V1AppTierUpdateEntityBody,
  V1ManifestInputEntityBody,
  V1ManifestRefUpdateEntityBody,
} from ".././schemas";

/**
 * @summary Creates a application profile
 */
export type appProfilesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type appProfilesCreateResponseComposite = appProfilesCreateResponse201;

export type appProfilesCreateResponse = appProfilesCreateResponseComposite & {
  headers: Headers;
};

export const getAppProfilesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/appProfiles`;
};

export const appProfilesCreate = async (
  v1AppProfileEntityBody: V1AppProfileEntityBody,
  options?: RequestInit,
): Promise<appProfilesCreateResponse> => {
  const res = await fetch(getAppProfilesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfileEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesCreateResponse;
};

/**
 * @summary Retrieves a list of application profile macros
 */
export type appProfilesMacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type appProfilesMacrosListResponseComposite =
  appProfilesMacrosListResponse200;

export type appProfilesMacrosListResponse =
  appProfilesMacrosListResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesMacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/appProfiles/macros`;
};

export const appProfilesMacrosList = async (
  options?: RequestInit,
): Promise<appProfilesMacrosListResponse> => {
  const res = await fetch(getAppProfilesMacrosListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesMacrosListResponse;
};

/**
 * @summary Deletes the specified application profile
 */
export type appProfilesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidDeleteResponseComposite =
  appProfilesUidDeleteResponse204;

export type appProfilesUidDeleteResponse =
  appProfilesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}`;
};

export const appProfilesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<appProfilesUidDeleteResponse> => {
  const res = await fetch(getAppProfilesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidDeleteResponse;
};

/**
 * @summary Returns the specified application profile
 */
export type appProfilesUidGetResponse200 = {
  data: AppProfile;
  status: 200;
};

export type appProfilesUidGetResponseComposite = appProfilesUidGetResponse200;

export type appProfilesUidGetResponse = appProfilesUidGetResponseComposite & {
  headers: Headers;
};

export const getAppProfilesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}`;
};

export const appProfilesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<appProfilesUidGetResponse> => {
  const res = await fetch(getAppProfilesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidGetResponse;
};

/**
 * @summary Updates the specified application profile
 */
export type appProfilesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidUpdateResponseComposite =
  appProfilesUidUpdateResponse204;

export type appProfilesUidUpdateResponse =
  appProfilesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}`;
};

export const appProfilesUidUpdate = async (
  uid: string,
  v1AppProfileEntityBody: V1AppProfileEntityBody,
  options?: RequestInit,
): Promise<appProfilesUidUpdateResponse> => {
  const res = await fetch(getAppProfilesUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppProfileEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidUpdateResponse;
};

/**
 * @summary Clones the specified application profile
 */
export type appProfilesUidCloneResponse201 = {
  data: Uid;
  status: 201;
};

export type appProfilesUidCloneResponseComposite =
  appProfilesUidCloneResponse201;

export type appProfilesUidCloneResponse =
  appProfilesUidCloneResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/clone`;
};

export const appProfilesUidClone = async (
  uid: string,
  appProfileCloneEntity: AppProfileCloneEntity,
  options?: RequestInit,
): Promise<appProfilesUidCloneResponse> => {
  const res = await fetch(getAppProfilesUidCloneUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appProfileCloneEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidCloneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidCloneResponse;
};

/**
 * @summary Validates the specified application profile clone
 */
export type appProfilesUidCloneValidateResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidCloneValidateResponseComposite =
  appProfilesUidCloneValidateResponse204;

export type appProfilesUidCloneValidateResponse =
  appProfilesUidCloneValidateResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidCloneValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/clone/validate`;
};

export const appProfilesUidCloneValidate = async (
  uid: string,
  appProfileCloneMetaInputEntity: AppProfileCloneMetaInputEntity,
  options?: RequestInit,
): Promise<appProfilesUidCloneValidateResponse> => {
  const res = await fetch(getAppProfilesUidCloneValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appProfileCloneMetaInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidCloneValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidCloneValidateResponse;
};

/**
 * @summary Updates the specified application profile metadata
 */
export type appProfilesUidMetadataUpdateResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidMetadataUpdateResponseComposite =
  appProfilesUidMetadataUpdateResponse204;

export type appProfilesUidMetadataUpdateResponse =
  appProfilesUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/metadata`;
};

export const appProfilesUidMetadataUpdate = async (
  uid: string,
  appProfileMetaEntity: AppProfileMetaEntity,
  options?: RequestInit,
): Promise<appProfilesUidMetadataUpdateResponse> => {
  const res = await fetch(getAppProfilesUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appProfileMetaEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidMetadataUpdateResponse;
};

/**
 * @summary Retrieves a list of tiers of the specified application profile
 */
export type appProfilesUidTiersGetResponse200 = {
  data: AppProfileTiers;
  status: 200;
};

export type appProfilesUidTiersGetResponseComposite =
  appProfilesUidTiersGetResponse200;

export type appProfilesUidTiersGetResponse =
  appProfilesUidTiersGetResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers`;
};

export const appProfilesUidTiersGet = async (
  uid: string,
  options?: RequestInit,
): Promise<appProfilesUidTiersGetResponse> => {
  const res = await fetch(getAppProfilesUidTiersGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersGetResponse;
};

/**
 * @summary Updates app tier of the specified application profile
 */
export type appProfilesUidTiersPatchResponse201 = {
  data: Uid;
  status: 201;
};

export type appProfilesUidTiersPatchResponseComposite =
  appProfilesUidTiersPatchResponse201;

export type appProfilesUidTiersPatchResponse =
  appProfilesUidTiersPatchResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers`;
};

export const appProfilesUidTiersPatch = async (
  uid: string,
  appTierPatchEntity: AppTierPatchEntity,
  options?: RequestInit,
): Promise<appProfilesUidTiersPatchResponse> => {
  const res = await fetch(getAppProfilesUidTiersPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appTierPatchEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersPatchResponse;
};

/**
 * @summary Adds tier to the specified application profile
 */
export type appProfilesUidTiersCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type appProfilesUidTiersCreateResponseComposite =
  appProfilesUidTiersCreateResponse201;

export type appProfilesUidTiersCreateResponse =
  appProfilesUidTiersCreateResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers`;
};

export const appProfilesUidTiersCreate = async (
  uid: string,
  appTierEntity: AppTierEntity,
  options?: RequestInit,
): Promise<appProfilesUidTiersCreateResponse> => {
  const res = await fetch(getAppProfilesUidTiersCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appTierEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersCreateResponse;
};

/**
 * @summary Deletes the specified application profile tier
 */
export type appProfilesUidTiersUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidTiersUidDeleteResponseComposite =
  appProfilesUidTiersUidDeleteResponse204;

export type appProfilesUidTiersUidDeleteResponse =
  appProfilesUidTiersUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidDeleteUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}`;
};

export const appProfilesUidTiersUidDelete = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidDeleteResponse> => {
  const res = await fetch(getAppProfilesUidTiersUidDeleteUrl(uid, tierUid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidDeleteResponse;
};

/**
 * @summary Returns the specified application profile tier information
 */
export type appProfilesUidTiersUidGetResponse200 = {
  data: AppTier;
  status: 200;
};

export type appProfilesUidTiersUidGetResponseComposite =
  appProfilesUidTiersUidGetResponse200;

export type appProfilesUidTiersUidGetResponse =
  appProfilesUidTiersUidGetResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}`;
};

export const appProfilesUidTiersUidGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidGetResponse> => {
  const res = await fetch(getAppProfilesUidTiersUidGetUrl(uid, tierUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidGetResponse;
};

/**
 * @summary Updates the specified application profile tier
 */
export type appProfilesUidTiersUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidTiersUidUpdateResponseComposite =
  appProfilesUidTiersUidUpdateResponse204;

export type appProfilesUidTiersUidUpdateResponse =
  appProfilesUidTiersUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidUpdateUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}`;
};

export const appProfilesUidTiersUidUpdate = async (
  uid: string,
  tierUid: string,
  v1AppTierUpdateEntityBody: V1AppTierUpdateEntityBody,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidUpdateResponse> => {
  const res = await fetch(getAppProfilesUidTiersUidUpdateUrl(uid, tierUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1AppTierUpdateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidUpdateResponse;
};

/**
 * @summary Retrieves a list of manifests of the specified application profile tier
 */
export type appProfilesUidTiersUidManifestsGetResponse200 = {
  data: AppTierManifests;
  status: 200;
};

export type appProfilesUidTiersUidManifestsGetResponseComposite =
  appProfilesUidTiersUidManifestsGetResponse200;

export type appProfilesUidTiersUidManifestsGetResponse =
  appProfilesUidTiersUidManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidManifestsGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests`;
};

export const appProfilesUidTiersUidManifestsGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidManifestsGetResponse> => {
  const res = await fetch(
    getAppProfilesUidTiersUidManifestsGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidManifestsGetResponse;
};

/**
 * @summary Adds manifest to the specified application profile tier
 */
export type appProfilesUidTiersUidManifestsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type appProfilesUidTiersUidManifestsCreateResponseComposite =
  appProfilesUidTiersUidManifestsCreateResponse201;

export type appProfilesUidTiersUidManifestsCreateResponse =
  appProfilesUidTiersUidManifestsCreateResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidManifestsCreateUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests`;
};

export const appProfilesUidTiersUidManifestsCreate = async (
  uid: string,
  tierUid: string,
  v1ManifestInputEntityBody: V1ManifestInputEntityBody,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidManifestsCreateResponse> => {
  const res = await fetch(
    getAppProfilesUidTiersUidManifestsCreateUrl(uid, tierUid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestInputEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidManifestsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidManifestsCreateResponse;
};

/**
 * @summary Deletes the specified application profile tier manifest
 */
export type appProfilesUidTiersUidManifestsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidTiersUidManifestsUidDeleteResponseComposite =
  appProfilesUidTiersUidManifestsUidDeleteResponse204;

export type appProfilesUidTiersUidManifestsUidDeleteResponse =
  appProfilesUidTiersUidManifestsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidManifestsUidDeleteUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const appProfilesUidTiersUidManifestsUidDelete = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidManifestsUidDeleteResponse> => {
  const res = await fetch(
    getAppProfilesUidTiersUidManifestsUidDeleteUrl(uid, tierUid, manifestUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidManifestsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidManifestsUidDeleteResponse;
};

/**
 * @summary Returns the specified application profile tier manifest information
 */
export type appProfilesUidTiersUidManifestsUidGetResponse200 = {
  data: Manifest;
  status: 200;
};

export type appProfilesUidTiersUidManifestsUidGetResponseComposite =
  appProfilesUidTiersUidManifestsUidGetResponse200;

export type appProfilesUidTiersUidManifestsUidGetResponse =
  appProfilesUidTiersUidManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidManifestsUidGetUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const appProfilesUidTiersUidManifestsUidGet = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidManifestsUidGetResponse> => {
  const res = await fetch(
    getAppProfilesUidTiersUidManifestsUidGetUrl(uid, tierUid, manifestUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidManifestsUidGetResponse;
};

/**
 * @summary Updates the specified application profile tier manifest information
 */
export type appProfilesUidTiersUidManifestsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type appProfilesUidTiersUidManifestsUidUpdateResponseComposite =
  appProfilesUidTiersUidManifestsUidUpdateResponse204;

export type appProfilesUidTiersUidManifestsUidUpdateResponse =
  appProfilesUidTiersUidManifestsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidManifestsUidUpdateUrl = (
  uid: string,
  tierUid: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/manifests/${manifestUid}`;
};

export const appProfilesUidTiersUidManifestsUidUpdate = async (
  uid: string,
  tierUid: string,
  manifestUid: string,
  v1ManifestRefUpdateEntityBody: V1ManifestRefUpdateEntityBody,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidManifestsUidUpdateResponse> => {
  const res = await fetch(
    getAppProfilesUidTiersUidManifestsUidUpdateUrl(uid, tierUid, manifestUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestRefUpdateEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidManifestsUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidManifestsUidUpdateResponse;
};

/**
 * @summary Returns the specified application profile tier resolved values
 */
export type appProfilesUidTiersUidResolvedValuesGetResponse200 = {
  data: AppTierResolvedValues;
  status: 200;
};

export type appProfilesUidTiersUidResolvedValuesGetResponseComposite =
  appProfilesUidTiersUidResolvedValuesGetResponse200;

export type appProfilesUidTiersUidResolvedValuesGetResponse =
  appProfilesUidTiersUidResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getAppProfilesUidTiersUidResolvedValuesGetUrl = (
  uid: string,
  tierUid: string,
) => {
  return `https://api.spectrocloud.com/v1/appProfiles/${uid}/tiers/${tierUid}/resolvedValues`;
};

export const appProfilesUidTiersUidResolvedValuesGet = async (
  uid: string,
  tierUid: string,
  options?: RequestInit,
): Promise<appProfilesUidTiersUidResolvedValuesGetResponse> => {
  const res = await fetch(
    getAppProfilesUidTiersUidResolvedValuesGetUrl(uid, tierUid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appProfilesUidTiersUidResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appProfilesUidTiersUidResolvedValuesGetResponse;
};
