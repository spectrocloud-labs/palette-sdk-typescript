/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AuthLogin,
  AuthOrgParams,
  AuthRefreshParams,
  AuthenticateParams,
  IdentityProviders,
  LoginResponse,
  Organizations,
  PasswordResetRequestBody,
  SsoLogins,
  UserToken,
  V1AuthUserOrgForgotParams,
  V1OidcCallbackParams,
  V1OidcLogoutParams,
  V1PasswordActivateBodyBody,
  V1SamlCallbackBody,
  V1SamlCallbackParams,
  V1SamlLogoutBody,
  V1SamlLogoutParams,
  V1SsoCallbackParams,
  V1SsoLoginsParams,
} from ".././schemas";

/**
 * Creates a authentication request with the specified credentials
 * @summary Authenticates the user for the specified crendentials
 */
export type authenticateResponse200 = {
  data: UserToken;
  status: 200;
};

export type authenticateResponseComposite = authenticateResponse200;

export type authenticateResponse = authenticateResponseComposite & {
  headers: Headers;
};

export const getAuthenticateUrl = (params?: AuthenticateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/authenticate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/authenticate`;
};

export const authenticate = async (
  authLogin: AuthLogin,
  params?: AuthenticateParams,
  options?: RequestInit,
): Promise<authenticateResponse> => {
  const res = await fetch(getAuthenticateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(authLogin),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authenticateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authenticateResponse;
};

/**
 * Returns the allowed login method and information with the organization details
 * @summary Returns the user organization details
 */
export type authOrgResponse200 = {
  data: LoginResponse;
  status: 200;
};

export type authOrgResponseComposite = authOrgResponse200;

export type authOrgResponse = authOrgResponseComposite & {
  headers: Headers;
};

export const getAuthOrgUrl = (params?: AuthOrgParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org`;
};

export const authOrg = async (
  params?: AuthOrgParams,
  options?: RequestInit,
): Promise<authOrgResponse> => {
  const res = await fetch(getAuthOrgUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authOrgResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as authOrgResponse;
};

/**
 * Returns the Authorization token for the palette. This is called by the IDP as a callback url after IDP authenticates the user with its server.
 * @summary Idp authorization code callback
 */
export type v1OidcCallbackResponse200 = {
  data: UserToken;
  status: 200;
};

export type v1OidcCallbackResponseComposite = v1OidcCallbackResponse200;

export type v1OidcCallbackResponse = v1OidcCallbackResponseComposite & {
  headers: Headers;
};

export const getV1OidcCallbackUrl = (
  org: string,
  params?: V1OidcCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/callback`;
};

export const v1OidcCallback = async (
  org: string,
  params?: V1OidcCallbackParams,
  options?: RequestInit,
): Promise<v1OidcCallbackResponse> => {
  const res = await fetch(getV1OidcCallbackUrl(org, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OidcCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OidcCallbackResponse;
};

/**
 * Returns No Content. Works as a callback url after the IDP logout from their server.
 * @summary Identity provider logout url for the Oidc
 */
export type v1OidcLogoutResponse204 = {
  data: void;
  status: 204;
};

export type v1OidcLogoutResponseComposite = v1OidcLogoutResponse204;

export type v1OidcLogoutResponse = v1OidcLogoutResponseComposite & {
  headers: Headers;
};

export const getV1OidcLogoutUrl = (
  org: string,
  params?: V1OidcLogoutParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/logout?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/logout`;
};

export const v1OidcLogout = async (
  org: string,
  params?: V1OidcLogoutParams,
  options?: RequestInit,
): Promise<v1OidcLogoutResponse> => {
  const res = await fetch(getV1OidcLogoutUrl(org, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OidcLogoutResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OidcLogoutResponse;
};

/**
 * Returns the Authorization token for the palette. This is called by the SAML based IDP as a callback url after IDP authenticates the user with its server.
 * @summary Identity provider callback url for the SMAL authentication
 */
export type v1SamlCallbackResponse200 = {
  data: UserToken;
  status: 200;
};

export type v1SamlCallbackResponseComposite = v1SamlCallbackResponse200;

export type v1SamlCallbackResponse = v1SamlCallbackResponseComposite & {
  headers: Headers;
};

export const getV1SamlCallbackUrl = (
  org: string,
  params?: V1SamlCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/saml/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/saml/callback`;
};

export const v1SamlCallback = async (
  org: string,
  v1SamlCallbackBody: V1SamlCallbackBody,
  params?: V1SamlCallbackParams,
  options?: RequestInit,
): Promise<v1SamlCallbackResponse> => {
  const formUrlEncoded = new URLSearchParams();
  if (v1SamlCallbackBody.SAMLResponse !== undefined) {
    formUrlEncoded.append(`SAMLResponse`, v1SamlCallbackBody.SAMLResponse);
  }
  if (v1SamlCallbackBody.RelayState !== undefined) {
    formUrlEncoded.append(`RelayState`, v1SamlCallbackBody.RelayState);
  }

  const res = await fetch(getV1SamlCallbackUrl(org, params), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SamlCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SamlCallbackResponse;
};

/**
 * Returns No Content. Works as a callback url after the IDP logout from their server.
 * @summary Identity provider logout url for the SMAL
 */
export type v1SamlLogoutResponse204 = {
  data: void;
  status: 204;
};

export type v1SamlLogoutResponseComposite = v1SamlLogoutResponse204;

export type v1SamlLogoutResponse = v1SamlLogoutResponseComposite & {
  headers: Headers;
};

export const getV1SamlLogoutUrl = (
  org: string,
  params?: V1SamlLogoutParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/saml/logout?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/saml/logout`;
};

export const v1SamlLogout = async (
  org: string,
  v1SamlLogoutBody: V1SamlLogoutBody,
  params?: V1SamlLogoutParams,
  options?: RequestInit,
): Promise<v1SamlLogoutResponse> => {
  const formUrlEncoded = new URLSearchParams();
  if (v1SamlLogoutBody.SAMLResponse !== undefined) {
    formUrlEncoded.append(`SAMLResponse`, v1SamlLogoutBody.SAMLResponse);
  }

  const res = await fetch(getV1SamlLogoutUrl(org, params), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SamlLogoutResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SamlLogoutResponse;
};

/**
 * Returns a list of user's organizations details and login methods
 * @summary Returns a list of user's organizations
 */
export type v1AuthOrgsResponse200 = {
  data: Organizations;
  status: 200;
};

export type v1AuthOrgsResponseComposite = v1AuthOrgsResponse200;

export type v1AuthOrgsResponse = v1AuthOrgsResponseComposite & {
  headers: Headers;
};

export const getV1AuthOrgsUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/orgs`;
};

export const v1AuthOrgs = async (
  options?: RequestInit,
): Promise<v1AuthOrgsResponse> => {
  const res = await fetch(getV1AuthOrgsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthOrgsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthOrgsResponse;
};

/**
 * Updates and Activates user password with the help of password token
 * @summary Updates and Activates the specified user password using the password token
 */
export type passwordActivateResponse204 = {
  data: void;
  status: 204;
};

export type passwordActivateResponseComposite = passwordActivateResponse204;

export type passwordActivateResponse = passwordActivateResponseComposite & {
  headers: Headers;
};

export const getPasswordActivateUrl = (passwordToken: string) => {
  return `https://api.spectrocloud.com/v1/auth/password/${passwordToken}/activate`;
};

export const passwordActivate = async (
  passwordToken: string,
  v1PasswordActivateBodyBody: V1PasswordActivateBodyBody,
  options?: RequestInit,
): Promise<passwordActivateResponse> => {
  const res = await fetch(getPasswordActivateUrl(passwordToken), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PasswordActivateBodyBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: passwordActivateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as passwordActivateResponse;
};

/**
 * Updates the new user password with the help of password token
 * @summary Resets the user password using the password token
 */
export type passwordResetResponse204 = {
  data: void;
  status: 204;
};

export type passwordResetResponseComposite = passwordResetResponse204;

export type passwordResetResponse = passwordResetResponseComposite & {
  headers: Headers;
};

export const getPasswordResetUrl = (passwordToken: string) => {
  return `https://api.spectrocloud.com/v1/auth/password/${passwordToken}/reset`;
};

export const passwordReset = async (
  passwordToken: string,
  v1PasswordActivateBodyBody: V1PasswordActivateBodyBody,
  options?: RequestInit,
): Promise<passwordResetResponse> => {
  const res = await fetch(getPasswordResetUrl(passwordToken), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1PasswordActivateBodyBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: passwordResetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as passwordResetResponse;
};

/**
 * Returns a new token within refresh timeout and same session id is maintained
 * @summary Refreshes authentication token
 */
export type authRefreshResponse200 = {
  data: UserToken;
  status: 200;
};

export type authRefreshResponseComposite = authRefreshResponse200;

export type authRefreshResponse = authRefreshResponseComposite & {
  headers: Headers;
};

export const getAuthRefreshUrl = (
  token: string,
  params?: AuthRefreshParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/refresh/${token}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/refresh/${token}`;
};

export const authRefresh = async (
  token: string,
  params?: AuthRefreshParams,
  options?: RequestInit,
): Promise<authRefreshResponse> => {
  const res = await fetch(getAuthRefreshUrl(token, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authRefreshResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authRefreshResponse;
};

/**
 * Returns a list of predefined Identity Provider (IDP)
 * @summary Returns a list of predefined Identity Provider (IDP)
 */
export type v1SsoIdpsResponse200 = {
  data: IdentityProviders;
  status: 200;
};

export type v1SsoIdpsResponseComposite = v1SsoIdpsResponse200;

export type v1SsoIdpsResponse = v1SsoIdpsResponseComposite & {
  headers: Headers;
};

export const getV1SsoIdpsUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/sso/idps`;
};

export const v1SsoIdps = async (
  options?: RequestInit,
): Promise<v1SsoIdpsResponse> => {
  const res = await fetch(getV1SsoIdpsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SsoIdpsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SsoIdpsResponse;
};

/**
 * Returns a list of supported sso logins and their authentication mechanism
 * @summary Returns a list of supported sso logins
 */
export type v1SsoLoginsResponse200 = {
  data: SsoLogins;
  status: 200;
};

export type v1SsoLoginsResponseComposite = v1SsoLoginsResponse200;

export type v1SsoLoginsResponse = v1SsoLoginsResponseComposite & {
  headers: Headers;
};

export const getV1SsoLoginsUrl = (params?: V1SsoLoginsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/sso/logins?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/sso/logins`;
};

export const v1SsoLogins = async (
  params?: V1SsoLoginsParams,
  options?: RequestInit,
): Promise<v1SsoLoginsResponse> => {
  const res = await fetch(getV1SsoLoginsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SsoLoginsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SsoLoginsResponse;
};

/**
 * Returns a list of supported sso auth providers
 * @summary Returns a list of supported sso auth providers
 */
export type v1AuthSsoProvidersResponse200 = {
  data: SsoLogins;
  status: 200;
};

export type v1AuthSsoProvidersResponseComposite = v1AuthSsoProvidersResponse200;

export type v1AuthSsoProvidersResponse = v1AuthSsoProvidersResponseComposite & {
  headers: Headers;
};

export const getV1AuthSsoProvidersUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/sso/providers`;
};

export const v1AuthSsoProviders = async (
  options?: RequestInit,
): Promise<v1AuthSsoProvidersResponse> => {
  const res = await fetch(getV1AuthSsoProvidersUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthSsoProvidersResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthSsoProvidersResponse;
};

/**
 * Returns Authorization token. Works as a callback url for the system defined sso apps
 * @summary Returns Authorization token. Works as a callback url for the system defined sso apps
 */
export type v1SsoCallbackResponse200 = {
  data: UserToken;
  status: 200;
};

export type v1SsoCallbackResponseComposite = v1SsoCallbackResponse200;

export type v1SsoCallbackResponse = v1SsoCallbackResponseComposite & {
  headers: Headers;
};

export const getV1SsoCallbackUrl = (
  ssoApp: string,
  params?: V1SsoCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/sso/${ssoApp}/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/sso/${ssoApp}/callback`;
};

export const v1SsoCallback = async (
  ssoApp: string,
  params?: V1SsoCallbackParams,
  options?: RequestInit,
): Promise<v1SsoCallbackResponse> => {
  const res = await fetch(getV1SsoCallbackUrl(ssoApp, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1SsoCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1SsoCallbackResponse;
};

/**
 * Returns No Content. Sends the user organization(s) information via email
 * @summary Returns No Content. Sends the user organization information via email
 */
export type v1AuthUserOrgForgotResponse204 = {
  data: void;
  status: 204;
};

export type v1AuthUserOrgForgotResponseComposite =
  v1AuthUserOrgForgotResponse204;

export type v1AuthUserOrgForgotResponse =
  v1AuthUserOrgForgotResponseComposite & {
    headers: Headers;
  };

export const getV1AuthUserOrgForgotUrl = (
  params: V1AuthUserOrgForgotParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/user/org/forgot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/user/org/forgot`;
};

export const v1AuthUserOrgForgot = async (
  params: V1AuthUserOrgForgotParams,
  options?: RequestInit,
): Promise<v1AuthUserOrgForgotResponse> => {
  const res = await fetch(getV1AuthUserOrgForgotUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AuthUserOrgForgotResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AuthUserOrgForgotResponse;
};

/**
 * Creates request to reset password via email. Password reset email will be sent to the user. Sends 204 No Content.
 * @summary Creates request to reset password via email
 */
export type passwordResetRequestResponse204 = {
  data: void;
  status: 204;
};

export type passwordResetRequestResponseComposite =
  passwordResetRequestResponse204;

export type passwordResetRequestResponse =
  passwordResetRequestResponseComposite & {
    headers: Headers;
  };

export const getPasswordResetRequestUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/user/password/reset`;
};

export const passwordResetRequest = async (
  passwordResetRequestBody: PasswordResetRequestBody,
  options?: RequestInit,
): Promise<passwordResetRequestResponse> => {
  const res = await fetch(getPasswordResetRequestUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(passwordResetRequestBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: passwordResetRequestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as passwordResetRequestResponse;
};
