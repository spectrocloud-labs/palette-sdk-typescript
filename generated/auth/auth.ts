/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AuthLogin,
  AuthOrgParams,
  AuthRefreshParams,
  AuthUserOrgForgotParams,
  AuthenticateParams,
  IdentityProviders,
  LoginResponse,
  OidcCallbackParams,
  OidcLogoutParams,
  Organizations,
  PasswordActivateBodyBody,
  PasswordResetRequestBody,
  SamlCallbackBody,
  SamlCallbackParams,
  SamlLogoutBody,
  SamlLogoutParams,
  SsoCallbackParams,
  SsoLogins,
  SsoLoginsParams,
  UserToken,
} from ".././schemas";

/**
 * Creates a authentication request with the specified credentials
 * @summary Authenticates the user for the specified crendentials
 */
export type AuthenticateResponse200 = {
  data: UserToken;
  status: 200;
};

export type AuthenticateResponseComposite = AuthenticateResponse200;

export type AuthenticateResponse = AuthenticateResponseComposite & {
  headers: Headers;
};

export const getV1AuthenticateUrl = (params?: AuthenticateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/authenticate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/authenticate`;
};

export const Authenticate = async (
  AuthLogin: AuthLogin,
  params?: AuthenticateParams,
  options?: RequestInit,
): Promise<AuthenticateResponse> => {
  const res = await fetch(getV1AuthenticateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AuthLogin),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuthenticateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuthenticateResponse;
};

/**
 * Returns the allowed login method and information with the organization details
 * @summary Returns the user organization details
 */
export type AuthOrgResponse200 = {
  data: LoginResponse;
  status: 200;
};

export type AuthOrgResponseComposite = AuthOrgResponse200;

export type AuthOrgResponse = AuthOrgResponseComposite & {
  headers: Headers;
};

export const getV1AuthOrgUrl = (params?: AuthOrgParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org`;
};

export const AuthOrg = async (
  params?: AuthOrgParams,
  options?: RequestInit,
): Promise<AuthOrgResponse> => {
  const res = await fetch(getV1AuthOrgUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuthOrgResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as AuthOrgResponse;
};

/**
 * Returns the Authorization token for the palette. This is called by the IDP as a callback url after IDP authenticates the user with its server.
 * @summary Idp authorization code callback
 */
export type OidcCallbackResponse200 = {
  data: UserToken;
  status: 200;
};

export type OidcCallbackResponseComposite = OidcCallbackResponse200;

export type OidcCallbackResponse = OidcCallbackResponseComposite & {
  headers: Headers;
};

export const getV1OidcCallbackUrl = (
  org: string,
  params?: OidcCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/callback`;
};

export const OidcCallback = async (
  org: string,
  params?: OidcCallbackParams,
  options?: RequestInit,
): Promise<OidcCallbackResponse> => {
  const res = await fetch(getV1OidcCallbackUrl(org, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OidcCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OidcCallbackResponse;
};

/**
 * Returns No Content. Works as a callback url after the IDP logout from their server.
 * @summary Identity provider logout url for the Oidc
 */
export type OidcLogoutResponse204 = {
  data: void;
  status: 204;
};

export type OidcLogoutResponseComposite = OidcLogoutResponse204;

export type OidcLogoutResponse = OidcLogoutResponseComposite & {
  headers: Headers;
};

export const getV1OidcLogoutUrl = (org: string, params?: OidcLogoutParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/logout?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/oidc/logout`;
};

export const OidcLogout = async (
  org: string,
  params?: OidcLogoutParams,
  options?: RequestInit,
): Promise<OidcLogoutResponse> => {
  const res = await fetch(getV1OidcLogoutUrl(org, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OidcLogoutResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OidcLogoutResponse;
};

/**
 * Returns the Authorization token for the palette. This is called by the SAML based IDP as a callback url after IDP authenticates the user with its server.
 * @summary Identity provider callback url for the SMAL authentication
 */
export type SamlCallbackResponse200 = {
  data: UserToken;
  status: 200;
};

export type SamlCallbackResponseComposite = SamlCallbackResponse200;

export type SamlCallbackResponse = SamlCallbackResponseComposite & {
  headers: Headers;
};

export const getV1SamlCallbackUrl = (
  org: string,
  params?: SamlCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/saml/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/saml/callback`;
};

export const SamlCallback = async (
  org: string,
  SamlCallbackBody: SamlCallbackBody,
  params?: SamlCallbackParams,
  options?: RequestInit,
): Promise<SamlCallbackResponse> => {
  const formUrlEncoded = new URLSearchParams();
  if (SamlCallbackBody.SAMLResponse !== undefined) {
    formUrlEncoded.append(`SAMLResponse`, SamlCallbackBody.SAMLResponse);
  }
  if (SamlCallbackBody.RelayState !== undefined) {
    formUrlEncoded.append(`RelayState`, SamlCallbackBody.RelayState);
  }

  const res = await fetch(getV1SamlCallbackUrl(org, params), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SamlCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SamlCallbackResponse;
};

/**
 * Returns No Content. Works as a callback url after the IDP logout from their server.
 * @summary Identity provider logout url for the SMAL
 */
export type SamlLogoutResponse204 = {
  data: void;
  status: 204;
};

export type SamlLogoutResponseComposite = SamlLogoutResponse204;

export type SamlLogoutResponse = SamlLogoutResponseComposite & {
  headers: Headers;
};

export const getV1SamlLogoutUrl = (org: string, params?: SamlLogoutParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/org/${org}/saml/logout?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/org/${org}/saml/logout`;
};

export const SamlLogout = async (
  org: string,
  SamlLogoutBody: SamlLogoutBody,
  params?: SamlLogoutParams,
  options?: RequestInit,
): Promise<SamlLogoutResponse> => {
  const formUrlEncoded = new URLSearchParams();
  if (SamlLogoutBody.SAMLResponse !== undefined) {
    formUrlEncoded.append(`SAMLResponse`, SamlLogoutBody.SAMLResponse);
  }

  const res = await fetch(getV1SamlLogoutUrl(org, params), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SamlLogoutResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SamlLogoutResponse;
};

/**
 * Returns a list of user's organizations details and login methods
 * @summary Returns a list of user's organizations
 */
export type AuthOrgsResponse200 = {
  data: Organizations;
  status: 200;
};

export type AuthOrgsResponseComposite = AuthOrgsResponse200;

export type AuthOrgsResponse = AuthOrgsResponseComposite & {
  headers: Headers;
};

export const getV1AuthOrgsUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/orgs`;
};

export const AuthOrgs = async (
  options?: RequestInit,
): Promise<AuthOrgsResponse> => {
  const res = await fetch(getV1AuthOrgsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuthOrgsResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as AuthOrgsResponse;
};

/**
 * Updates and Activates user password with the help of password token
 * @summary Updates and Activates the specified user password using the password token
 */
export type PasswordActivateResponse204 = {
  data: void;
  status: 204;
};

export type PasswordActivateResponseComposite = PasswordActivateResponse204;

export type PasswordActivateResponse = PasswordActivateResponseComposite & {
  headers: Headers;
};

export const getV1PasswordActivateUrl = (passwordToken: string) => {
  return `https://api.spectrocloud.com/v1/auth/password/${passwordToken}/activate`;
};

export const PasswordActivate = async (
  passwordToken: string,
  PasswordActivateBodyBody: PasswordActivateBodyBody,
  options?: RequestInit,
): Promise<PasswordActivateResponse> => {
  const res = await fetch(getV1PasswordActivateUrl(passwordToken), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PasswordActivateBodyBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PasswordActivateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PasswordActivateResponse;
};

/**
 * Updates the new user password with the help of password token
 * @summary Resets the user password using the password token
 */
export type PasswordResetResponse204 = {
  data: void;
  status: 204;
};

export type PasswordResetResponseComposite = PasswordResetResponse204;

export type PasswordResetResponse = PasswordResetResponseComposite & {
  headers: Headers;
};

export const getV1PasswordResetUrl = (passwordToken: string) => {
  return `https://api.spectrocloud.com/v1/auth/password/${passwordToken}/reset`;
};

export const PasswordReset = async (
  passwordToken: string,
  PasswordActivateBodyBody: PasswordActivateBodyBody,
  options?: RequestInit,
): Promise<PasswordResetResponse> => {
  const res = await fetch(getV1PasswordResetUrl(passwordToken), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PasswordActivateBodyBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PasswordResetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PasswordResetResponse;
};

/**
 * Returns a new token within refresh timeout and same session id is maintained
 * @summary Refreshes authentication token
 */
export type AuthRefreshResponse200 = {
  data: UserToken;
  status: 200;
};

export type AuthRefreshResponseComposite = AuthRefreshResponse200;

export type AuthRefreshResponse = AuthRefreshResponseComposite & {
  headers: Headers;
};

export const getV1AuthRefreshUrl = (
  token: string,
  params?: AuthRefreshParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/refresh/${token}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/refresh/${token}`;
};

export const AuthRefresh = async (
  token: string,
  params?: AuthRefreshParams,
  options?: RequestInit,
): Promise<AuthRefreshResponse> => {
  const res = await fetch(getV1AuthRefreshUrl(token, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuthRefreshResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuthRefreshResponse;
};

/**
 * Returns a list of predefined Identity Provider (IDP)
 * @summary Returns a list of predefined Identity Provider (IDP)
 */
export type SsoIdpsResponse200 = {
  data: IdentityProviders;
  status: 200;
};

export type SsoIdpsResponseComposite = SsoIdpsResponse200;

export type SsoIdpsResponse = SsoIdpsResponseComposite & {
  headers: Headers;
};

export const getV1SsoIdpsUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/sso/idps`;
};

export const SsoIdps = async (
  options?: RequestInit,
): Promise<SsoIdpsResponse> => {
  const res = await fetch(getV1SsoIdpsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SsoIdpsResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as SsoIdpsResponse;
};

/**
 * Returns a list of supported sso logins and their authentication mechanism
 * @summary Returns a list of supported sso logins
 */
export type SsoLoginsResponse200 = {
  data: SsoLogins;
  status: 200;
};

export type SsoLoginsResponseComposite = SsoLoginsResponse200;

export type SsoLoginsResponse = SsoLoginsResponseComposite & {
  headers: Headers;
};

export const getV1SsoLoginsUrl = (params?: SsoLoginsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/sso/logins?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/sso/logins`;
};

export const SsoLogins = async (
  params?: SsoLoginsParams,
  options?: RequestInit,
): Promise<SsoLoginsResponse> => {
  const res = await fetch(getV1SsoLoginsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SsoLoginsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SsoLoginsResponse;
};

/**
 * Returns a list of supported sso auth providers
 * @summary Returns a list of supported sso auth providers
 */
export type AuthSsoProvidersResponse200 = {
  data: SsoLogins;
  status: 200;
};

export type AuthSsoProvidersResponseComposite = AuthSsoProvidersResponse200;

export type AuthSsoProvidersResponse = AuthSsoProvidersResponseComposite & {
  headers: Headers;
};

export const getV1AuthSsoProvidersUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/sso/providers`;
};

export const AuthSsoProviders = async (
  options?: RequestInit,
): Promise<AuthSsoProvidersResponse> => {
  const res = await fetch(getV1AuthSsoProvidersUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuthSsoProvidersResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuthSsoProvidersResponse;
};

/**
 * Returns Authorization token. Works as a callback url for the system defined sso apps
 * @summary Returns Authorization token. Works as a callback url for the system defined sso apps
 */
export type SsoCallbackResponse200 = {
  data: UserToken;
  status: 200;
};

export type SsoCallbackResponseComposite = SsoCallbackResponse200;

export type SsoCallbackResponse = SsoCallbackResponseComposite & {
  headers: Headers;
};

export const getV1SsoCallbackUrl = (
  ssoApp: string,
  params?: SsoCallbackParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/sso/${ssoApp}/callback?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/sso/${ssoApp}/callback`;
};

export const SsoCallback = async (
  ssoApp: string,
  params?: SsoCallbackParams,
  options?: RequestInit,
): Promise<SsoCallbackResponse> => {
  const res = await fetch(getV1SsoCallbackUrl(ssoApp, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: SsoCallbackResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as SsoCallbackResponse;
};

/**
 * Returns No Content. Sends the user organization(s) information via email
 * @summary Returns No Content. Sends the user organization information via email
 */
export type AuthUserOrgForgotResponse204 = {
  data: void;
  status: 204;
};

export type AuthUserOrgForgotResponseComposite = AuthUserOrgForgotResponse204;

export type AuthUserOrgForgotResponse = AuthUserOrgForgotResponseComposite & {
  headers: Headers;
};

export const getV1AuthUserOrgForgotUrl = (params: AuthUserOrgForgotParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/auth/user/org/forgot?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/auth/user/org/forgot`;
};

export const AuthUserOrgForgot = async (
  params: AuthUserOrgForgotParams,
  options?: RequestInit,
): Promise<AuthUserOrgForgotResponse> => {
  const res = await fetch(getV1AuthUserOrgForgotUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuthUserOrgForgotResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuthUserOrgForgotResponse;
};

/**
 * Creates request to reset password via email. Password reset email will be sent to the user. Sends 204 No Content.
 * @summary Creates request to reset password via email
 */
export type PasswordResetRequestResponse204 = {
  data: void;
  status: 204;
};

export type PasswordResetRequestResponseComposite =
  PasswordResetRequestResponse204;

export type PasswordResetRequestResponse =
  PasswordResetRequestResponseComposite & {
    headers: Headers;
  };

export const getV1PasswordResetRequestUrl = () => {
  return `https://api.spectrocloud.com/v1/auth/user/password/reset`;
};

export const PasswordResetRequest = async (
  PasswordResetRequestBody: PasswordResetRequestBody,
  options?: RequestInit,
): Promise<PasswordResetRequestResponse> => {
  const res = await fetch(getV1PasswordResetRequestUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PasswordResetRequestBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PasswordResetRequestResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PasswordResetRequestResponse;
};
