/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  PackMetadataList,
  PackReadme,
  PackSummaries,
  PackTagEntity,
  PacksFilterSpec,
  PacksNameRegistryUidListParams,
  PacksSearchParams,
  PacksSummaryListParams,
} from ".././schemas";

/**
 * @summary Retrieves a list of packs
 */
export type PacksSummaryListResponse200 = {
  data: PackSummaries;
  status: 200;
};

export type PacksSummaryListResponseComposite = PacksSummaryListResponse200;

export type PacksSummaryListResponse = PacksSummaryListResponseComposite & {
  headers: Headers;
};

export const getV1PacksSummaryListUrl = (params?: PacksSummaryListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs`;
};

export const PacksSummaryList = async (
  params?: PacksSummaryListParams,
  options?: RequestInit,
): Promise<PacksSummaryListResponse> => {
  const res = await fetch(getV1PacksSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PacksSummaryListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PacksSummaryListResponse;
};

/**
 * @summary Retrieves a list of packs based on filter
 */
export type PacksSearchResponse200 = {
  data: PackMetadataList;
  status: 200;
};

export type PacksSearchResponseComposite = PacksSearchResponse200;

export type PacksSearchResponse = PacksSearchResponseComposite & {
  headers: Headers;
};

export const getV1PacksSearchUrl = (params?: PacksSearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs/search`;
};

export const PacksSearch = async (
  PacksFilterSpec: PacksFilterSpec,
  params?: PacksSearchParams,
  options?: RequestInit,
): Promise<PacksSearchResponse> => {
  const res = await fetch(getV1PacksSearchUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PacksFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PacksSearchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PacksSearchResponse;
};

/**
 * @summary Retrieves a list of packs
 */
export type PacksNameRegistryUidListResponse200 = {
  data: PackTagEntity;
  status: 200;
};

export type PacksNameRegistryUidListResponseComposite =
  PacksNameRegistryUidListResponse200;

export type PacksNameRegistryUidListResponse =
  PacksNameRegistryUidListResponseComposite & {
    headers: Headers;
  };

export const getV1PacksNameRegistryUidListUrl = (
  packName: string,
  registryUid: string,
  params?: PacksNameRegistryUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs/${packName}/registries/${registryUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs/${packName}/registries/${registryUid}`;
};

export const PacksNameRegistryUidList = async (
  packName: string,
  registryUid: string,
  params?: PacksNameRegistryUidListParams,
  options?: RequestInit,
): Promise<PacksNameRegistryUidListResponse> => {
  const res = await fetch(
    getV1PacksNameRegistryUidListUrl(packName, registryUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PacksNameRegistryUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PacksNameRegistryUidListResponse;
};

/**
 * @summary Returns the logo for a specified pack
 */
export type PacksPackUidLogoResponse200 = {
  data: Blob;
  status: 200;
};

export type PacksPackUidLogoResponseComposite = PacksPackUidLogoResponse200;

export type PacksPackUidLogoResponse = PacksPackUidLogoResponseComposite & {
  headers: Headers;
};

export const getV1PacksPackUidLogoUrl = (packUid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${packUid}/logo`;
};

export const PacksPackUidLogo = async (
  packUid: string,
  options?: RequestInit,
): Promise<PacksPackUidLogoResponse> => {
  const res = await fetch(getV1PacksPackUidLogoUrl(packUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PacksPackUidLogoResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PacksPackUidLogoResponse;
};

/**
 * @summary Returns the specified pack
 */
export type PacksUidResponse200 = {
  data: PackTagEntity;
  status: 200;
};

export type PacksUidResponseComposite = PacksUidResponse200;

export type PacksUidResponse = PacksUidResponseComposite & {
  headers: Headers;
};

export const getV1PacksUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${uid}`;
};

export const PacksUid = async (
  uid: string,
  options?: RequestInit,
): Promise<PacksUidResponse> => {
  const res = await fetch(getV1PacksUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PacksUidResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PacksUidResponse;
};

/**
 * @summary Returns the readme of a specified pack
 */
export type PacksUidReadmeResponse200 = {
  data: PackReadme;
  status: 200;
};

export type PacksUidReadmeResponseComposite = PacksUidReadmeResponse200;

export type PacksUidReadmeResponse = PacksUidReadmeResponseComposite & {
  headers: Headers;
};

export const getV1PacksUidReadmeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${uid}/readme`;
};

export const PacksUidReadme = async (
  uid: string,
  options?: RequestInit,
): Promise<PacksUidReadmeResponse> => {
  const res = await fetch(getV1PacksUidReadmeUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PacksUidReadmeResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PacksUidReadmeResponse;
};
