/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  PackMetadataList,
  PackReadme,
  PackSummaries,
  PackTagEntity,
  PacksFilterSpec,
  PacksNameRegistryUidListParams,
  PacksSearchParams,
  PacksSummaryListParams,
} from ".././schemas";

/**
 * @summary Retrieves a list of packs
 */
export type packsSummaryListResponse200 = {
  data: PackSummaries;
  status: 200;
};

export type packsSummaryListResponseComposite = packsSummaryListResponse200;

export type packsSummaryListResponse = packsSummaryListResponseComposite & {
  headers: Headers;
};

export const getPacksSummaryListUrl = (params?: PacksSummaryListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs`;
};

export const packsSummaryList = async (
  params?: PacksSummaryListParams,
  options?: RequestInit,
): Promise<packsSummaryListResponse> => {
  const res = await fetch(getPacksSummaryListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: packsSummaryListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as packsSummaryListResponse;
};

/**
 * @summary Retrieves a list of packs based on filter
 */
export type packsSearchResponse200 = {
  data: PackMetadataList;
  status: 200;
};

export type packsSearchResponseComposite = packsSearchResponse200;

export type packsSearchResponse = packsSearchResponseComposite & {
  headers: Headers;
};

export const getPacksSearchUrl = (params?: PacksSearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs/search?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs/search`;
};

export const packsSearch = async (
  packsFilterSpec: PacksFilterSpec,
  params?: PacksSearchParams,
  options?: RequestInit,
): Promise<packsSearchResponse> => {
  const res = await fetch(getPacksSearchUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(packsFilterSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: packsSearchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as packsSearchResponse;
};

/**
 * @summary Retrieves a list of packs
 */
export type packsNameRegistryUidListResponse200 = {
  data: PackTagEntity;
  status: 200;
};

export type packsNameRegistryUidListResponseComposite =
  packsNameRegistryUidListResponse200;

export type packsNameRegistryUidListResponse =
  packsNameRegistryUidListResponseComposite & {
    headers: Headers;
  };

export const getPacksNameRegistryUidListUrl = (
  packName: string,
  registryUid: string,
  params?: PacksNameRegistryUidListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/packs/${packName}/registries/${registryUid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/packs/${packName}/registries/${registryUid}`;
};

export const packsNameRegistryUidList = async (
  packName: string,
  registryUid: string,
  params?: PacksNameRegistryUidListParams,
  options?: RequestInit,
): Promise<packsNameRegistryUidListResponse> => {
  const res = await fetch(
    getPacksNameRegistryUidListUrl(packName, registryUid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: packsNameRegistryUidListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as packsNameRegistryUidListResponse;
};

/**
 * @summary Returns the logo for a specified pack
 */
export type packsPackUidLogoResponse200 = {
  data: Blob;
  status: 200;
};

export type packsPackUidLogoResponseComposite = packsPackUidLogoResponse200;

export type packsPackUidLogoResponse = packsPackUidLogoResponseComposite & {
  headers: Headers;
};

export const getPacksPackUidLogoUrl = (packUid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${packUid}/logo`;
};

export const packsPackUidLogo = async (
  packUid: string,
  options?: RequestInit,
): Promise<packsPackUidLogoResponse> => {
  const res = await fetch(getPacksPackUidLogoUrl(packUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: packsPackUidLogoResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as packsPackUidLogoResponse;
};

/**
 * @summary Returns the specified pack
 */
export type packsUidResponse200 = {
  data: PackTagEntity;
  status: 200;
};

export type packsUidResponseComposite = packsUidResponse200;

export type packsUidResponse = packsUidResponseComposite & {
  headers: Headers;
};

export const getPacksUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${uid}`;
};

export const packsUid = async (
  uid: string,
  options?: RequestInit,
): Promise<packsUidResponse> => {
  const res = await fetch(getPacksUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: packsUidResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as packsUidResponse;
};

/**
 * @summary Returns the readme of a specified pack
 */
export type packsUidReadmeResponse200 = {
  data: PackReadme;
  status: 200;
};

export type packsUidReadmeResponseComposite = packsUidReadmeResponse200;

export type packsUidReadmeResponse = packsUidReadmeResponseComposite & {
  headers: Headers;
};

export const getPacksUidReadmeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/packs/${uid}/readme`;
};

export const packsUidReadme = async (
  uid: string,
  options?: RequestInit,
): Promise<packsUidReadmeResponse> => {
  const res = await fetch(getPacksUidReadmeUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: packsUidReadmeResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as packsUidReadmeResponse;
};
