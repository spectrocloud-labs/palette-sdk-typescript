/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ClusterGroup,
  ClusterGroupEntity,
  ClusterGroupHostClusterEntity,
  ClusterGroupsDeveloperCreditUsage,
  ClusterGroupsHostClusterMetadata,
  ClusterGroupsHostClusterSummary,
  ClusterGroupsUidProfilesGetParams,
  ClusterGroupsValidateNameParams,
  ObjectMetaBody,
  SpectroClusterProfileList,
  SpectroClusterProfilesBody,
  SpectroClusterProfilesResolvedValues,
  Uid,
} from ".././schemas";

/**
 * @summary Create cluster groups
 */
export type ClusterGroupsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterGroupsCreateResponseComposite =
  ClusterGroupsCreateResponse201;

export type ClusterGroupsCreateResponse =
  ClusterGroupsCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups`;
};

export const ClusterGroupsCreate = async (
  ClusterGroupEntity: ClusterGroupEntity,
  options?: RequestInit,
): Promise<ClusterGroupsCreateResponse> => {
  const res = await fetch(getV1ClusterGroupsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterGroupEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsCreateResponse;
};

/**
 * @summary Get cluster group developer credit usage by scope
 */
export type ClusterGroupsDeveloperCreditUsageGetResponse200 = {
  data: ClusterGroupsDeveloperCreditUsage;
  status: 200;
};

export type ClusterGroupsDeveloperCreditUsageGetResponseComposite =
  ClusterGroupsDeveloperCreditUsageGetResponse200;

export type ClusterGroupsDeveloperCreditUsageGetResponse =
  ClusterGroupsDeveloperCreditUsageGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsDeveloperCreditUsageGetUrl = (
  scope: "system" | "tenant",
) => {
  return `https://api.spectrocloud.com/v1/clustergroups/developerCredit/usage/${scope}`;
};

export const ClusterGroupsDeveloperCreditUsageGet = async (
  scope: "system" | "tenant",
  options?: RequestInit,
): Promise<ClusterGroupsDeveloperCreditUsageGetResponse> => {
  const res = await fetch(getV1ClusterGroupsDeveloperCreditUsageGetUrl(scope), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsDeveloperCreditUsageGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsDeveloperCreditUsageGetResponse;
};

/**
 * @summary Retrieves a list of cluster groups host cluster summary
 */
export type ClusterGroupsHostClusterSummaryResponse200 = {
  data: ClusterGroupsHostClusterSummary;
  status: 200;
};

export type ClusterGroupsHostClusterSummaryResponseComposite =
  ClusterGroupsHostClusterSummaryResponse200;

export type ClusterGroupsHostClusterSummaryResponse =
  ClusterGroupsHostClusterSummaryResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsHostClusterSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster`;
};

export const ClusterGroupsHostClusterSummary = async (
  options?: RequestInit,
): Promise<ClusterGroupsHostClusterSummaryResponse> => {
  const res = await fetch(getV1ClusterGroupsHostClusterSummaryUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsHostClusterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsHostClusterSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster groups host cluster metadata
 */
export type ClusterGroupsHostClusterMetadataResponse200 = {
  data: ClusterGroupsHostClusterMetadata;
  status: 200;
};

export type ClusterGroupsHostClusterMetadataResponseComposite =
  ClusterGroupsHostClusterMetadataResponse200;

export type ClusterGroupsHostClusterMetadataResponse =
  ClusterGroupsHostClusterMetadataResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsHostClusterMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster/metadata`;
};

export const ClusterGroupsHostClusterMetadata = async (
  options?: RequestInit,
): Promise<ClusterGroupsHostClusterMetadataResponse> => {
  const res = await fetch(getV1ClusterGroupsHostClusterMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsHostClusterMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsHostClusterMetadataResponse;
};

/**
 * @summary Validates the cluster groups name
 */
export type ClusterGroupsValidateNameResponse204 = {
  data: void;
  status: 204;
};

export type ClusterGroupsValidateNameResponseComposite =
  ClusterGroupsValidateNameResponse204;

export type ClusterGroupsValidateNameResponse =
  ClusterGroupsValidateNameResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsValidateNameUrl = (
  params: ClusterGroupsValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/validate/name`;
};

export const ClusterGroupsValidateName = async (
  params: ClusterGroupsValidateNameParams,
  options?: RequestInit,
): Promise<ClusterGroupsValidateNameResponse> => {
  const res = await fetch(getV1ClusterGroupsValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsValidateNameResponse;
};

/**
 * @summary Deletes the specified cluster group
 */
export type ClusterGroupsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ClusterGroupsUidDeleteResponseComposite =
  ClusterGroupsUidDeleteResponse204;

export type ClusterGroupsUidDeleteResponse =
  ClusterGroupsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const ClusterGroupsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterGroupsUidDeleteResponse> => {
  const res = await fetch(getV1ClusterGroupsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsUidDeleteResponse;
};

/**
 * @summary Returns the specified cluster groups
 */
export type ClusterGroupsUidGetResponse200 = {
  data: ClusterGroup;
  status: 200;
};

export type ClusterGroupsUidGetResponseComposite =
  ClusterGroupsUidGetResponse200;

export type ClusterGroupsUidGetResponse =
  ClusterGroupsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const ClusterGroupsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterGroupsUidGetResponse> => {
  const res = await fetch(getV1ClusterGroupsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsUidGetResponse;
};

/**
 * @summary Updates cluster reference and host cluster config
 */
export type ClusterGroupsUidHostClusterUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterGroupsUidHostClusterUpdateResponseComposite =
  ClusterGroupsUidHostClusterUpdateResponse204;

export type ClusterGroupsUidHostClusterUpdateResponse =
  ClusterGroupsUidHostClusterUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidHostClusterUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/hostCluster`;
};

export const ClusterGroupsUidHostClusterUpdate = async (
  uid: string,
  ClusterGroupHostClusterEntity: ClusterGroupHostClusterEntity,
  options?: RequestInit,
): Promise<ClusterGroupsUidHostClusterUpdateResponse> => {
  const res = await fetch(getV1ClusterGroupsUidHostClusterUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterGroupHostClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsUidHostClusterUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsUidHostClusterUpdateResponse;
};

/**
 * @summary Updates the specified cluster groups meta
 */
export type ClusterGroupsUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterGroupsUidMetaUpdateResponseComposite =
  ClusterGroupsUidMetaUpdateResponse204;

export type ClusterGroupsUidMetaUpdateResponse =
  ClusterGroupsUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/meta`;
};

export const ClusterGroupsUidMetaUpdate = async (
  uid: string,
  ObjectMetaBody: ObjectMetaBody,
  options?: RequestInit,
): Promise<ClusterGroupsUidMetaUpdateResponse> => {
  const res = await fetch(getV1ClusterGroupsUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ObjectMetaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsUidMetaUpdateResponse;
};

/**
 * @summary Returns the specified clustergroup's profile packs resolved values
 */
export type ClusterGroupsUidPacksResolvedValuesGetResponse200 = {
  data: SpectroClusterProfilesResolvedValues;
  status: 200;
};

export type ClusterGroupsUidPacksResolvedValuesGetResponseComposite =
  ClusterGroupsUidPacksResolvedValuesGetResponse200;

export type ClusterGroupsUidPacksResolvedValuesGetResponse =
  ClusterGroupsUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidPacksResolvedValuesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/packs/resolvedValues`;
};

export const ClusterGroupsUidPacksResolvedValuesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterGroupsUidPacksResolvedValuesGetResponse> => {
  const res = await fetch(getV1ClusterGroupsUidPacksResolvedValuesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsUidPacksResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsUidPacksResolvedValuesGetResponse;
};

/**
 * @summary Returns the associated profiles of a specified cluster group
 */
export type ClusterGroupsUidProfilesGetResponse200 = {
  data: SpectroClusterProfileList;
  status: 200;
};

export type ClusterGroupsUidProfilesGetResponseComposite =
  ClusterGroupsUidProfilesGetResponse200;

export type ClusterGroupsUidProfilesGetResponse =
  ClusterGroupsUidProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidProfilesGetUrl = (
  uid: string,
  params?: ClusterGroupsUidProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const ClusterGroupsUidProfilesGet = async (
  uid: string,
  params?: ClusterGroupsUidProfilesGetParams,
  options?: RequestInit,
): Promise<ClusterGroupsUidProfilesGetResponse> => {
  const res = await fetch(getV1ClusterGroupsUidProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsUidProfilesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsUidProfilesGetResponse;
};

/**
 * @summary Updates the specified cluster groups profiles
 */
export type ClusterGroupsUidProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterGroupsUidProfilesUpdateResponseComposite =
  ClusterGroupsUidProfilesUpdateResponse204;

export type ClusterGroupsUidProfilesUpdateResponse =
  ClusterGroupsUidProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterGroupsUidProfilesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const ClusterGroupsUidProfilesUpdate = async (
  uid: string,
  SpectroClusterProfilesBody: SpectroClusterProfilesBody,
  options?: RequestInit,
): Promise<ClusterGroupsUidProfilesUpdateResponse> => {
  const res = await fetch(getV1ClusterGroupsUidProfilesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(SpectroClusterProfilesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterGroupsUidProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterGroupsUidProfilesUpdateResponse;
};
