/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ClusterGroup,
  ClusterGroupEntity,
  ClusterGroupHostClusterEntity,
  ClusterGroupsDeveloperCreditUsage,
  ClusterGroupsHostClusterMetadata,
  ClusterGroupsHostClusterSummary,
  ClusterGroupsUidProfilesGetParams,
  ClusterGroupsValidateNameParams,
  SpectroClusterProfileList,
  SpectroClusterProfilesResolvedValues,
  Uid,
  V1ObjectMetaBody,
  V1SpectroClusterProfilesBody,
} from ".././schemas";

/**
 * @summary Create cluster groups
 */
export type clusterGroupsCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterGroupsCreateResponseComposite =
  clusterGroupsCreateResponse201;

export type clusterGroupsCreateResponse =
  clusterGroupsCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups`;
};

export const clusterGroupsCreate = async (
  clusterGroupEntity: ClusterGroupEntity,
  options?: RequestInit,
): Promise<clusterGroupsCreateResponse> => {
  const res = await fetch(getClusterGroupsCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(clusterGroupEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsCreateResponse;
};

/**
 * @summary Get cluster group developer credit usage by scope
 */
export type clusterGroupsDeveloperCreditUsageGetResponse200 = {
  data: ClusterGroupsDeveloperCreditUsage;
  status: 200;
};

export type clusterGroupsDeveloperCreditUsageGetResponseComposite =
  clusterGroupsDeveloperCreditUsageGetResponse200;

export type clusterGroupsDeveloperCreditUsageGetResponse =
  clusterGroupsDeveloperCreditUsageGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsDeveloperCreditUsageGetUrl = (
  scope: "system" | "tenant",
) => {
  return `https://api.spectrocloud.com/v1/clustergroups/developerCredit/usage/${scope}`;
};

export const clusterGroupsDeveloperCreditUsageGet = async (
  scope: "system" | "tenant",
  options?: RequestInit,
): Promise<clusterGroupsDeveloperCreditUsageGetResponse> => {
  const res = await fetch(getClusterGroupsDeveloperCreditUsageGetUrl(scope), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsDeveloperCreditUsageGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsDeveloperCreditUsageGetResponse;
};

/**
 * @summary Retrieves a list of cluster groups host cluster summary
 */
export type clusterGroupsHostClusterSummaryResponse200 = {
  data: ClusterGroupsHostClusterSummary;
  status: 200;
};

export type clusterGroupsHostClusterSummaryResponseComposite =
  clusterGroupsHostClusterSummaryResponse200;

export type clusterGroupsHostClusterSummaryResponse =
  clusterGroupsHostClusterSummaryResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsHostClusterSummaryUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster`;
};

export const clusterGroupsHostClusterSummary = async (
  options?: RequestInit,
): Promise<clusterGroupsHostClusterSummaryResponse> => {
  const res = await fetch(getClusterGroupsHostClusterSummaryUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsHostClusterSummaryResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsHostClusterSummaryResponse;
};

/**
 * @summary Retrieves a list of cluster groups host cluster metadata
 */
export type clusterGroupsHostClusterMetadataResponse200 = {
  data: ClusterGroupsHostClusterMetadata;
  status: 200;
};

export type clusterGroupsHostClusterMetadataResponseComposite =
  clusterGroupsHostClusterMetadataResponse200;

export type clusterGroupsHostClusterMetadataResponse =
  clusterGroupsHostClusterMetadataResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsHostClusterMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/clustergroups/hostCluster/metadata`;
};

export const clusterGroupsHostClusterMetadata = async (
  options?: RequestInit,
): Promise<clusterGroupsHostClusterMetadataResponse> => {
  const res = await fetch(getClusterGroupsHostClusterMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsHostClusterMetadataResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsHostClusterMetadataResponse;
};

/**
 * @summary Validates the cluster groups name
 */
export type clusterGroupsValidateNameResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsValidateNameResponseComposite =
  clusterGroupsValidateNameResponse204;

export type clusterGroupsValidateNameResponse =
  clusterGroupsValidateNameResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsValidateNameUrl = (
  params: ClusterGroupsValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/validate/name`;
};

export const clusterGroupsValidateName = async (
  params: ClusterGroupsValidateNameParams,
  options?: RequestInit,
): Promise<clusterGroupsValidateNameResponse> => {
  const res = await fetch(getClusterGroupsValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsValidateNameResponse;
};

/**
 * @summary Deletes the specified cluster group
 */
export type clusterGroupsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidDeleteResponseComposite =
  clusterGroupsUidDeleteResponse204;

export type clusterGroupsUidDeleteResponse =
  clusterGroupsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const clusterGroupsUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterGroupsUidDeleteResponse> => {
  const res = await fetch(getClusterGroupsUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsUidDeleteResponse;
};

/**
 * @summary Returns the specified cluster groups
 */
export type clusterGroupsUidGetResponse200 = {
  data: ClusterGroup;
  status: 200;
};

export type clusterGroupsUidGetResponseComposite =
  clusterGroupsUidGetResponse200;

export type clusterGroupsUidGetResponse =
  clusterGroupsUidGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}`;
};

export const clusterGroupsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterGroupsUidGetResponse> => {
  const res = await fetch(getClusterGroupsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsUidGetResponse;
};

/**
 * @summary Updates cluster reference and host cluster config
 */
export type clusterGroupsUidHostClusterUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidHostClusterUpdateResponseComposite =
  clusterGroupsUidHostClusterUpdateResponse204;

export type clusterGroupsUidHostClusterUpdateResponse =
  clusterGroupsUidHostClusterUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidHostClusterUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/hostCluster`;
};

export const clusterGroupsUidHostClusterUpdate = async (
  uid: string,
  clusterGroupHostClusterEntity: ClusterGroupHostClusterEntity,
  options?: RequestInit,
): Promise<clusterGroupsUidHostClusterUpdateResponse> => {
  const res = await fetch(getClusterGroupsUidHostClusterUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(clusterGroupHostClusterEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsUidHostClusterUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsUidHostClusterUpdateResponse;
};

/**
 * @summary Updates the specified cluster groups meta
 */
export type clusterGroupsUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidMetaUpdateResponseComposite =
  clusterGroupsUidMetaUpdateResponse204;

export type clusterGroupsUidMetaUpdateResponse =
  clusterGroupsUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/meta`;
};

export const clusterGroupsUidMetaUpdate = async (
  uid: string,
  v1ObjectMetaBody: V1ObjectMetaBody,
  options?: RequestInit,
): Promise<clusterGroupsUidMetaUpdateResponse> => {
  const res = await fetch(getClusterGroupsUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMetaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsUidMetaUpdateResponse;
};

/**
 * @summary Returns the specified clustergroup's profile packs resolved values
 */
export type clusterGroupsUidPacksResolvedValuesGetResponse200 = {
  data: SpectroClusterProfilesResolvedValues;
  status: 200;
};

export type clusterGroupsUidPacksResolvedValuesGetResponseComposite =
  clusterGroupsUidPacksResolvedValuesGetResponse200;

export type clusterGroupsUidPacksResolvedValuesGetResponse =
  clusterGroupsUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidPacksResolvedValuesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/packs/resolvedValues`;
};

export const clusterGroupsUidPacksResolvedValuesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterGroupsUidPacksResolvedValuesGetResponse> => {
  const res = await fetch(getClusterGroupsUidPacksResolvedValuesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsUidPacksResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsUidPacksResolvedValuesGetResponse;
};

/**
 * @summary Returns the associated profiles of a specified cluster group
 */
export type clusterGroupsUidProfilesGetResponse200 = {
  data: SpectroClusterProfileList;
  status: 200;
};

export type clusterGroupsUidProfilesGetResponseComposite =
  clusterGroupsUidProfilesGetResponse200;

export type clusterGroupsUidProfilesGetResponse =
  clusterGroupsUidProfilesGetResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidProfilesGetUrl = (
  uid: string,
  params?: ClusterGroupsUidProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const clusterGroupsUidProfilesGet = async (
  uid: string,
  params?: ClusterGroupsUidProfilesGetParams,
  options?: RequestInit,
): Promise<clusterGroupsUidProfilesGetResponse> => {
  const res = await fetch(getClusterGroupsUidProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsUidProfilesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsUidProfilesGetResponse;
};

/**
 * @summary Updates the specified cluster groups profiles
 */
export type clusterGroupsUidProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterGroupsUidProfilesUpdateResponseComposite =
  clusterGroupsUidProfilesUpdateResponse204;

export type clusterGroupsUidProfilesUpdateResponse =
  clusterGroupsUidProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterGroupsUidProfilesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clustergroups/${uid}/profiles`;
};

export const clusterGroupsUidProfilesUpdate = async (
  uid: string,
  v1SpectroClusterProfilesBody: V1SpectroClusterProfilesBody,
  options?: RequestInit,
): Promise<clusterGroupsUidProfilesUpdateResponse> => {
  const res = await fetch(getClusterGroupsUidProfilesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1SpectroClusterProfilesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: clusterGroupsUidProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as clusterGroupsUidProfilesUpdateResponse;
};
