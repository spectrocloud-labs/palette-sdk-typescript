/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  PairingCode,
  PcgSelfHostedParams,
  PcgServiceKubectlCommands,
} from ".././schemas";

/**
 * @summary Returns the private gateway manifest link
 */
export type PcgSelfHostedResponse200 = {
  data: PcgServiceKubectlCommands;
  status: 200;
};

export type PcgSelfHostedResponseComposite = PcgSelfHostedResponse200;

export type PcgSelfHostedResponse = PcgSelfHostedResponseComposite & {
  headers: Headers;
};

export const getV1PcgSelfHostedUrl = () => {
  return `https://api.spectrocloud.com/v1/pcg/selfHosted`;
};

export const PcgSelfHosted = async (
  PcgSelfHostedParams: PcgSelfHostedParams,
  options?: RequestInit,
): Promise<PcgSelfHostedResponse> => {
  const res = await fetch(getV1PcgSelfHostedUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PcgSelfHostedParams),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PcgSelfHostedResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PcgSelfHostedResponse;
};

/**
 * @summary Registers the pcg
 */
export type PcgUidRegisterResponse204 = {
  data: void;
  status: 204;
};

export type PcgUidRegisterResponseComposite = PcgUidRegisterResponse204;

export type PcgUidRegisterResponse = PcgUidRegisterResponseComposite & {
  headers: Headers;
};

export const getV1PcgUidRegisterUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/register`;
};

export const PcgUidRegister = async (
  uid: string,
  PairingCode: PairingCode,
  options?: RequestInit,
): Promise<PcgUidRegisterResponse> => {
  const res = await fetch(getV1PcgUidRegisterUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PairingCode),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PcgUidRegisterResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PcgUidRegisterResponse;
};

/**
 * @summary Returns the pcg ally manifest
 */
export type PcgUidAllyManifestGetResponse200 = {
  data: Blob;
  status: 200;
};

export type PcgUidAllyManifestGetResponseComposite =
  PcgUidAllyManifestGetResponse200;

export type PcgUidAllyManifestGetResponse =
  PcgUidAllyManifestGetResponseComposite & {
    headers: Headers;
  };

export const getV1PcgUidAllyManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/services/ally/manifest`;
};

export const PcgUidAllyManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<PcgUidAllyManifestGetResponse> => {
  const res = await fetch(getV1PcgUidAllyManifestGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PcgUidAllyManifestGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PcgUidAllyManifestGetResponse;
};

/**
 * @summary Returns the pcg jet manifest
 */
export type PcgUidJetManifestGetResponse200 = {
  data: Blob;
  status: 200;
};

export type PcgUidJetManifestGetResponseComposite =
  PcgUidJetManifestGetResponse200;

export type PcgUidJetManifestGetResponse =
  PcgUidJetManifestGetResponseComposite & {
    headers: Headers;
  };

export const getV1PcgUidJetManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/services/jet/manifest`;
};

export const PcgUidJetManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<PcgUidJetManifestGetResponse> => {
  const res = await fetch(getV1PcgUidJetManifestGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: PcgUidJetManifestGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as PcgUidJetManifestGetResponse;
};
