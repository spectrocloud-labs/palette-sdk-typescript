/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  PairingCode,
  PcgSelfHostedParams,
  PcgServiceKubectlCommands,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * @summary Returns the private gateway manifest link
 */
export type pcgSelfHostedResponse200 = {
  data: PcgServiceKubectlCommands;
  status: 200;
};

export type pcgSelfHostedResponseComposite = pcgSelfHostedResponse200;

export type pcgSelfHostedResponse = pcgSelfHostedResponseComposite & {
  headers: Headers;
};

export const getPcgSelfHostedUrl = () => {
  return `https://api.spectrocloud.com/v1/pcg/selfHosted`;
};

export const pcgSelfHosted = async (
  pcgSelfHostedParams: PcgSelfHostedParams,
  options?: RequestInit,
): Promise<pcgSelfHostedResponse> => {
  return customInstance<pcgSelfHostedResponse>(getPcgSelfHostedUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pcgSelfHostedParams),
  });
};

/**
 * @summary Registers the pcg
 */
export type pcgUidRegisterResponse204 = {
  data: void;
  status: 204;
};

export type pcgUidRegisterResponseComposite = pcgUidRegisterResponse204;

export type pcgUidRegisterResponse = pcgUidRegisterResponseComposite & {
  headers: Headers;
};

export const getPcgUidRegisterUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/register`;
};

export const pcgUidRegister = async (
  uid: string,
  pairingCode: PairingCode,
  options?: RequestInit,
): Promise<pcgUidRegisterResponse> => {
  return customInstance<pcgUidRegisterResponse>(getPcgUidRegisterUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pairingCode),
  });
};

/**
 * @summary Returns the pcg ally manifest
 */
export type pcgUidAllyManifestGetResponse200 = {
  data: Blob;
  status: 200;
};

export type pcgUidAllyManifestGetResponseComposite =
  pcgUidAllyManifestGetResponse200;

export type pcgUidAllyManifestGetResponse =
  pcgUidAllyManifestGetResponseComposite & {
    headers: Headers;
  };

export const getPcgUidAllyManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/services/ally/manifest`;
};

export const pcgUidAllyManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<pcgUidAllyManifestGetResponse> => {
  return customInstance<pcgUidAllyManifestGetResponse>(
    getPcgUidAllyManifestGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the pcg jet manifest
 */
export type pcgUidJetManifestGetResponse200 = {
  data: Blob;
  status: 200;
};

export type pcgUidJetManifestGetResponseComposite =
  pcgUidJetManifestGetResponse200;

export type pcgUidJetManifestGetResponse =
  pcgUidJetManifestGetResponseComposite & {
    headers: Headers;
  };

export const getPcgUidJetManifestGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/pcg/${uid}/services/jet/manifest`;
};

export const pcgUidJetManifestGet = async (
  uid: string,
  options?: RequestInit,
): Promise<pcgUidJetManifestGetResponse> => {
  return customInstance<pcgUidJetManifestGetResponse>(
    getPcgUidJetManifestGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};
