/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ServiceManifest,
  ServiceManifestGetParams,
  ServiceVersion,
  ServiceVersionGetParams,
} from ".././schemas";

/**
 * @summary Returns a latest version for a given service name
 */
export type serviceVersionGetResponse200 = {
  data: ServiceVersion;
  status: 200;
};

export type serviceVersionGetResponseComposite = serviceVersionGetResponse200;

export type serviceVersionGetResponse = serviceVersionGetResponseComposite & {
  headers: Headers;
};

export const getServiceVersionGetUrl = (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  params?: ServiceVersionGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/services/${serviceName}/version?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/services/${serviceName}/version`;
};

export const serviceVersionGet = async (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  params?: ServiceVersionGetParams,
  options?: RequestInit,
): Promise<serviceVersionGetResponse> => {
  const res = await fetch(getServiceVersionGetUrl(serviceName, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: serviceVersionGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as serviceVersionGetResponse;
};

/**
 * @summary Returns a service manifest for a given service name and version
 */
export type serviceManifestGetResponse200 = {
  data: ServiceManifest;
  status: 200;
};

export type serviceManifestGetResponseComposite = serviceManifestGetResponse200;

export type serviceManifestGetResponse = serviceManifestGetResponseComposite & {
  headers: Headers;
};

export const getServiceManifestGetUrl = (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  version: string,
  params: ServiceManifestGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/services/${serviceName}/versions/${version}/manifest?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/services/${serviceName}/versions/${version}/manifest`;
};

export const serviceManifestGet = async (
  serviceName:
    | "ally"
    | "jet"
    | "palette"
    | "ambit"
    | "ally-lite"
    | "palette-lite"
    | "crony"
    | "tick"
    | "edge"
    | "lodge"
    | "level"
    | "edgeconfig"
    | "firth"
    | "stylus",
  version: string,
  params: ServiceManifestGetParams,
  options?: RequestInit,
): Promise<serviceManifestGetResponse> => {
  const res = await fetch(
    getServiceManifestGetUrl(serviceName, version, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: serviceManifestGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as serviceManifestGetResponse;
};
