/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  BulkDeleteRequest,
  BulkDeleteResponse,
  ClusterProfile,
  ClusterProfileCloneEntity,
  ClusterProfileCloneMetaInputEntity,
  ClusterProfileEntity,
  ClusterProfileImportEntity,
  ClusterProfileImportEntityBody,
  ClusterProfilePackConfigList,
  ClusterProfilePacksEntities,
  ClusterProfilePacksManifests,
  ClusterProfileTemplateDraftBody,
  ClusterProfileUpdateEntity,
  ClusterProfileValidatorResponse,
  ClusterProfilesCreateParams,
  ClusterProfilesDeleteParams,
  ClusterProfilesGetParams,
  ClusterProfilesImportFileBody,
  ClusterProfilesImportFileParams,
  ClusterProfilesImportParams,
  ClusterProfilesPacksRefUpdateParams,
  ClusterProfilesUidExportParams,
  ClusterProfilesUidExportTerraformParams,
  ClusterProfilesUidPacksAddParams,
  ClusterProfilesUidPacksConfigGetParams,
  ClusterProfilesUidPacksGetParams,
  ClusterProfilesUidPacksManifestsGetParams,
  ClusterProfilesUpdateParams,
  ClusterProfilesValidateNameVersionParams,
  Macros,
  ManifestEntities,
  ManifestEntity,
  ManifestInputEntityBody,
  PackInputEntity,
  PackRefSummaryResponse,
  PackResolvedValues,
  PackUpdateEntity,
  ProfileMetaEntity,
  Uid,
  VariableNames,
  Variables,
  VariablesBody,
} from ".././schemas";

/**
 * @summary Creates a cluster profile
 */
export type ClusterProfilesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterProfilesCreateResponseComposite =
  ClusterProfilesCreateResponse201;

export type ClusterProfilesCreateResponse =
  ClusterProfilesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesCreateUrl = (
  params?: ClusterProfilesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles`;
};

export const ClusterProfilesCreate = async (
  ClusterProfileEntity: ClusterProfileEntity,
  params?: ClusterProfilesCreateParams,
  options?: RequestInit,
): Promise<ClusterProfilesCreateResponse> => {
  const res = await fetch(getV1ClusterProfilesCreateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesCreateResponse;
};

/**
 * @summary Deletes list of cluster profiles
 */
export type ClusterProfilesBulkDeleteResponse200 = {
  data: BulkDeleteResponse;
  status: 200;
};

export type ClusterProfilesBulkDeleteResponseComposite =
  ClusterProfilesBulkDeleteResponse200;

export type ClusterProfilesBulkDeleteResponse =
  ClusterProfilesBulkDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesBulkDeleteUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/bulk`;
};

export const ClusterProfilesBulkDelete = async (
  BulkDeleteRequest: BulkDeleteRequest,
  options?: RequestInit,
): Promise<ClusterProfilesBulkDeleteResponse> => {
  const res = await fetch(getV1ClusterProfilesBulkDeleteUrl(), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(BulkDeleteRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesBulkDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesBulkDeleteResponse;
};

/**
 * @summary Imports a cluster profile
 */
export type ClusterProfilesImportResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterProfilesImportResponseComposite =
  ClusterProfilesImportResponse201;

export type ClusterProfilesImportResponse =
  ClusterProfilesImportResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesImportUrl = (
  params?: ClusterProfilesImportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/import?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/import`;
};

export const ClusterProfilesImport = async (
  ClusterProfileImportEntityBody: ClusterProfileImportEntityBody,
  params?: ClusterProfilesImportParams,
  options?: RequestInit,
): Promise<ClusterProfilesImportResponse> => {
  const res = await fetch(getV1ClusterProfilesImportUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileImportEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesImportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesImportResponse;
};

/**
 * @summary Imports a cluster profile via file
 */
export type ClusterProfilesImportFileResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterProfilesImportFileResponseComposite =
  ClusterProfilesImportFileResponse201;

export type ClusterProfilesImportFileResponse =
  ClusterProfilesImportFileResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesImportFileUrl = (
  params?: ClusterProfilesImportFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/import/file?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/import/file`;
};

export const ClusterProfilesImportFile = async (
  ClusterProfilesImportFileBody: ClusterProfilesImportFileBody,
  params?: ClusterProfilesImportFileParams,
  options?: RequestInit,
): Promise<ClusterProfilesImportFileResponse> => {
  const formData = new FormData();
  if (ClusterProfilesImportFileBody.importFile !== undefined) {
    formData.append(`importFile`, ClusterProfilesImportFileBody.importFile);
  }

  const res = await fetch(getV1ClusterProfilesImportFileUrl(params), {
    ...options,
    method: "POST",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesImportFileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesImportFileResponse;
};

/**
 * @summary Validates cluster profile import
 */
export type ClusterProfilesImportValidateResponse200 = {
  data: ClusterProfileImportEntity;
  status: 200;
};

export type ClusterProfilesImportValidateResponseComposite =
  ClusterProfilesImportValidateResponse200;

export type ClusterProfilesImportValidateResponse =
  ClusterProfilesImportValidateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesImportValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/import/validate`;
};

export const ClusterProfilesImportValidate = async (
  ClusterProfileImportEntityBody: ClusterProfileImportEntityBody,
  options?: RequestInit,
): Promise<ClusterProfilesImportValidateResponse> => {
  const res = await fetch(getV1ClusterProfilesImportValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileImportEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesImportValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesImportValidateResponse;
};

/**
 * @summary Retrieves a list of macros
 */
export type MacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type MacrosListResponseComposite = MacrosListResponse200;

export type MacrosListResponse = MacrosListResponseComposite & {
  headers: Headers;
};

export const getV1MacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/macros`;
};

export const MacrosList = async (
  options?: RequestInit,
): Promise<MacrosListResponse> => {
  const res = await fetch(getV1MacrosListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MacrosListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MacrosListResponse;
};

/**
 * Validates the cluster profile name and version
 * @summary Validates the cluster profile metadata
 */
export type ClusterProfilesValidateNameVersionResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesValidateNameVersionResponseComposite =
  ClusterProfilesValidateNameVersionResponse204;

export type ClusterProfilesValidateNameVersionResponse =
  ClusterProfilesValidateNameVersionResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesValidateNameVersionUrl = (
  params?: ClusterProfilesValidateNameVersionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/validate/name`;
};

export const ClusterProfilesValidateNameVersion = async (
  params?: ClusterProfilesValidateNameVersionParams,
  options?: RequestInit,
): Promise<ClusterProfilesValidateNameVersionResponse> => {
  const res = await fetch(getV1ClusterProfilesValidateNameVersionUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesValidateNameVersionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesValidateNameVersionResponse;
};

/**
 * @summary Validates cluster profile packs
 */
export type ClusterProfilesValidatePacksResponse200 = {
  data: ClusterProfileValidatorResponse;
  status: 200;
};

export type ClusterProfilesValidatePacksResponseComposite =
  ClusterProfilesValidatePacksResponse200;

export type ClusterProfilesValidatePacksResponse =
  ClusterProfilesValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesValidatePacksUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/validate/packs`;
};

export const ClusterProfilesValidatePacks = async (
  ClusterProfileTemplateDraftBody: ClusterProfileTemplateDraftBody,
  options?: RequestInit,
): Promise<ClusterProfilesValidatePacksResponse> => {
  const res = await fetch(getV1ClusterProfilesValidatePacksUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileTemplateDraftBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesValidatePacksResponse;
};

/**
 * @summary Deletes the specified cluster profile
 */
export type ClusterProfilesDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesDeleteResponseComposite =
  ClusterProfilesDeleteResponse204;

export type ClusterProfilesDeleteResponse =
  ClusterProfilesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesDeleteUrl = (
  uid: string,
  params?: ClusterProfilesDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const ClusterProfilesDelete = async (
  uid: string,
  params?: ClusterProfilesDeleteParams,
  options?: RequestInit,
): Promise<ClusterProfilesDeleteResponse> => {
  const res = await fetch(getV1ClusterProfilesDeleteUrl(uid, params), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesDeleteResponse;
};

/**
 * @summary Returns a specified cluster profile
 */
export type ClusterProfilesGetResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type ClusterProfilesGetResponseComposite = ClusterProfilesGetResponse200;

export type ClusterProfilesGetResponse = ClusterProfilesGetResponseComposite & {
  headers: Headers;
};

export const getV1ClusterProfilesGetUrl = (
  uid: string,
  params?: ClusterProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const ClusterProfilesGet = async (
  uid: string,
  params?: ClusterProfilesGetParams,
  options?: RequestInit,
): Promise<ClusterProfilesGetResponse> => {
  const res = await fetch(getV1ClusterProfilesGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesGetResponse;
};

/**
 * @summary Updates the specified cluster profile
 */
export type ClusterProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUpdateResponseComposite =
  ClusterProfilesUpdateResponse204;

export type ClusterProfilesUpdateResponse =
  ClusterProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUpdateUrl = (
  uid: string,
  params?: ClusterProfilesUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const ClusterProfilesUpdate = async (
  uid: string,
  ClusterProfileUpdateEntity: ClusterProfileUpdateEntity,
  params?: ClusterProfilesUpdateParams,
  options?: RequestInit,
): Promise<ClusterProfilesUpdateResponse> => {
  const res = await fetch(getV1ClusterProfilesUpdateUrl(uid, params), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUpdateResponse;
};

/**
 * @summary Creates a clone of the specified cluster profile
 */
export type ClusterProfilesUidCloneResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterProfilesUidCloneResponseComposite =
  ClusterProfilesUidCloneResponse201;

export type ClusterProfilesUidCloneResponse =
  ClusterProfilesUidCloneResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/clone`;
};

export const ClusterProfilesUidClone = async (
  uid: string,
  ClusterProfileCloneEntity: ClusterProfileCloneEntity,
  options?: RequestInit,
): Promise<ClusterProfilesUidCloneResponse> => {
  const res = await fetch(getV1ClusterProfilesUidCloneUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileCloneEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidCloneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidCloneResponse;
};

/**
 * Validates the cloned cluster profile name, version and target project uid
 * @summary Validates the cluster profile clone
 */
export type ClusterProfilesUidCloneValidateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidCloneValidateResponseComposite =
  ClusterProfilesUidCloneValidateResponse204;

export type ClusterProfilesUidCloneValidateResponse =
  ClusterProfilesUidCloneValidateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidCloneValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/clone/validate`;
};

export const ClusterProfilesUidCloneValidate = async (
  uid: string,
  ClusterProfileCloneMetaInputEntity: ClusterProfileCloneMetaInputEntity,
  options?: RequestInit,
): Promise<ClusterProfilesUidCloneValidateResponse> => {
  const res = await fetch(getV1ClusterProfilesUidCloneValidateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileCloneMetaInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidCloneValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidCloneValidateResponse;
};

/**
 * @summary Export the specified cluster profile
 */
export type ClusterProfilesUidExportResponse200 = {
  data: Blob;
  status: 200;
};

export type ClusterProfilesUidExportResponseComposite =
  ClusterProfilesUidExportResponse200;

export type ClusterProfilesUidExportResponse =
  ClusterProfilesUidExportResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidExportUrl = (
  uid: string,
  params?: ClusterProfilesUidExportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export`;
};

export const ClusterProfilesUidExport = async (
  uid: string,
  params?: ClusterProfilesUidExportParams,
  options?: RequestInit,
): Promise<ClusterProfilesUidExportResponse> => {
  const res = await fetch(getV1ClusterProfilesUidExportUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidExportResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidExportResponse;
};

/**
 * @summary Downloads the specified cluster profile
 */
export type ClusterProfilesUidExportTerraformResponse200 = {
  data: Blob;
  status: 200;
};

export type ClusterProfilesUidExportTerraformResponseComposite =
  ClusterProfilesUidExportTerraformResponse200;

export type ClusterProfilesUidExportTerraformResponse =
  ClusterProfilesUidExportTerraformResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidExportTerraformUrl = (
  uid: string,
  params?: ClusterProfilesUidExportTerraformParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export/terraform?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export/terraform`;
};

export const ClusterProfilesUidExportTerraform = async (
  uid: string,
  params?: ClusterProfilesUidExportTerraformParams,
  options?: RequestInit,
): Promise<ClusterProfilesUidExportTerraformResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidExportTerraformUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidExportTerraformResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidExportTerraformResponse;
};

/**
 * @summary Updates the specified cluster profile metadata
 */
export type ClusterProfilesUidMetadataUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidMetadataUpdateResponseComposite =
  ClusterProfilesUidMetadataUpdateResponse204;

export type ClusterProfilesUidMetadataUpdateResponse =
  ClusterProfilesUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/metadata`;
};

export const ClusterProfilesUidMetadataUpdate = async (
  uid: string,
  ProfileMetaEntity: ProfileMetaEntity,
  options?: RequestInit,
): Promise<ClusterProfilesUidMetadataUpdateResponse> => {
  const res = await fetch(getV1ClusterProfilesUidMetadataUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProfileMetaEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidMetadataUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidMetadataUpdateResponse;
};

/**
 * @summary Updates cluster profile packs ref
 */
export type ClusterProfilesPacksRefUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesPacksRefUpdateResponseComposite =
  ClusterProfilesPacksRefUpdateResponse204;

export type ClusterProfilesPacksRefUpdateResponse =
  ClusterProfilesPacksRefUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesPacksRefUpdateUrl = (
  uid: string,
  params?: ClusterProfilesPacksRefUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packRefs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packRefs`;
};

export const ClusterProfilesPacksRefUpdate = async (
  uid: string,
  params?: ClusterProfilesPacksRefUpdateParams,
  options?: RequestInit,
): Promise<ClusterProfilesPacksRefUpdateResponse> => {
  const res = await fetch(getV1ClusterProfilesPacksRefUpdateUrl(uid, params), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesPacksRefUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesPacksRefUpdateResponse;
};

/**
 * @summary Returns the specified cluster profile packs
 */
export type ClusterProfilesUidPacksGetResponse200 = {
  data: ClusterProfilePacksEntities;
  status: 200;
};

export type ClusterProfilesUidPacksGetResponseComposite =
  ClusterProfilesUidPacksGetResponse200;

export type ClusterProfilesUidPacksGetResponse =
  ClusterProfilesUidPacksGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksGetUrl = (
  uid: string,
  params?: ClusterProfilesUidPacksGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs`;
};

export const ClusterProfilesUidPacksGet = async (
  uid: string,
  params?: ClusterProfilesUidPacksGetParams,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksGetResponse> => {
  const res = await fetch(getV1ClusterProfilesUidPacksGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksGetResponse;
};

/**
 * @summary Adds a new pack to the specified cluster profile and returns the created pack uid
 */
export type ClusterProfilesUidPacksAddResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterProfilesUidPacksAddResponseComposite =
  ClusterProfilesUidPacksAddResponse201;

export type ClusterProfilesUidPacksAddResponse =
  ClusterProfilesUidPacksAddResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksAddUrl = (
  uid: string,
  params?: ClusterProfilesUidPacksAddParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs`;
};

export const ClusterProfilesUidPacksAdd = async (
  uid: string,
  PackInputEntity: PackInputEntity,
  params?: ClusterProfilesUidPacksAddParams,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksAddResponse> => {
  const res = await fetch(getV1ClusterProfilesUidPacksAddUrl(uid, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(PackInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksAddResponse;
};

/**
 * @summary Returns the specified cluster profile pack manifests
 */
export type ClusterProfilesUidPacksManifestsGetResponse200 = {
  data: ClusterProfilePacksManifests;
  status: 200;
};

export type ClusterProfilesUidPacksManifestsGetResponseComposite =
  ClusterProfilesUidPacksManifestsGetResponse200;

export type ClusterProfilesUidPacksManifestsGetResponse =
  ClusterProfilesUidPacksManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksManifestsGetUrl = (
  uid: string,
  params?: ClusterProfilesUidPacksManifestsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/manifests?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/manifests`;
};

export const ClusterProfilesUidPacksManifestsGet = async (
  uid: string,
  params?: ClusterProfilesUidPacksManifestsGetParams,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksManifestsGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksManifestsGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksManifestsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksManifestsGetResponse;
};

/**
 * @summary Returns the specified cluster profile packs resolved values
 */
export type ClusterProfilesUidPacksResolvedValuesGetResponse200 = {
  data: PackResolvedValues;
  status: 200;
};

export type ClusterProfilesUidPacksResolvedValuesGetResponseComposite =
  ClusterProfilesUidPacksResolvedValuesGetResponse200;

export type ClusterProfilesUidPacksResolvedValuesGetResponse =
  ClusterProfilesUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksResolvedValuesGetUrl = (
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/resolvedValues`;
};

export const ClusterProfilesUidPacksResolvedValuesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksResolvedValuesGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksResolvedValuesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksResolvedValuesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksResolvedValuesGetResponse;
};

/**
 * @summary Deletes the specified pack information in the cluster profile
 */
export type ClusterProfilesUidPacksNameDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidPacksNameDeleteResponseComposite =
  ClusterProfilesUidPacksNameDeleteResponse204;

export type ClusterProfilesUidPacksNameDeleteResponse =
  ClusterProfilesUidPacksNameDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameDeleteUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const ClusterProfilesUidPacksNameDelete = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksNameDeleteResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameDeleteUrl(uid, packName),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksNameDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksNameDeleteResponse;
};

/**
 * @summary Returns the specified cluster profile pack
 */
export type ClusterProfilesUidPacksNameGetResponse200 = {
  data: PackRefSummaryResponse;
  status: 200;
};

export type ClusterProfilesUidPacksNameGetResponseComposite =
  ClusterProfilesUidPacksNameGetResponse200;

export type ClusterProfilesUidPacksNameGetResponse =
  ClusterProfilesUidPacksNameGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameGetUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const ClusterProfilesUidPacksNameGet = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksNameGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameGetUrl(uid, packName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksNameGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksNameGetResponse;
};

/**
 * @summary Updates the specified pack information in the cluster profile
 */
export type ClusterProfilesUidPacksNameUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidPacksNameUpdateResponseComposite =
  ClusterProfilesUidPacksNameUpdateResponse204;

export type ClusterProfilesUidPacksNameUpdateResponse =
  ClusterProfilesUidPacksNameUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameUpdateUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const ClusterProfilesUidPacksNameUpdate = async (
  uid: string,
  packName: string,
  PackUpdateEntity: PackUpdateEntity,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksNameUpdateResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameUpdateUrl(uid, packName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(PackUpdateEntity),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksNameUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksNameUpdateResponse;
};

/**
 * @summary Returns the specified cluster profile pack configuration
 */
export type ClusterProfilesUidPacksConfigGetResponse200 = {
  data: ClusterProfilePackConfigList;
  status: 200;
};

export type ClusterProfilesUidPacksConfigGetResponseComposite =
  ClusterProfilesUidPacksConfigGetResponse200;

export type ClusterProfilesUidPacksConfigGetResponse =
  ClusterProfilesUidPacksConfigGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksConfigGetUrl = (
  uid: string,
  packName: string,
  params: ClusterProfilesUidPacksConfigGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/config?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/config`;
};

export const ClusterProfilesUidPacksConfigGet = async (
  uid: string,
  packName: string,
  params: ClusterProfilesUidPacksConfigGetParams,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksConfigGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksConfigGetUrl(uid, packName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksConfigGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksConfigGetResponse;
};

/**
 * @summary Returns the associated manifests for the specified profile's pack
 */
export type ClusterProfilesUidPacksUidManifestsResponse200 = {
  data: ManifestEntities;
  status: 200;
};

export type ClusterProfilesUidPacksUidManifestsResponseComposite =
  ClusterProfilesUidPacksUidManifestsResponse200;

export type ClusterProfilesUidPacksUidManifestsResponse =
  ClusterProfilesUidPacksUidManifestsResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksUidManifestsUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests`;
};

export const ClusterProfilesUidPacksUidManifests = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksUidManifestsResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksUidManifestsUrl(uid, packName),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksUidManifestsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksUidManifestsResponse;
};

/**
 * @summary Adds manifest to the profiles packs and returns the added manifests uid
 */
export type ClusterProfilesUidPacksNameManifestsAddResponse201 = {
  data: Uid;
  status: 201;
};

export type ClusterProfilesUidPacksNameManifestsAddResponseComposite =
  ClusterProfilesUidPacksNameManifestsAddResponse201;

export type ClusterProfilesUidPacksNameManifestsAddResponse =
  ClusterProfilesUidPacksNameManifestsAddResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsAddUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests`;
};

export const ClusterProfilesUidPacksNameManifestsAdd = async (
  uid: string,
  packName: string,
  ManifestInputEntityBody: ManifestInputEntityBody,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksNameManifestsAddResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsAddUrl(uid, packName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ManifestInputEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksNameManifestsAddResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksNameManifestsAddResponse;
};

/**
 * @summary Deletes the specified cluster profile pack manifest
 */
export type ClusterProfilesUidPacksNameManifestsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidPacksNameManifestsUidDeleteResponseComposite =
  ClusterProfilesUidPacksNameManifestsUidDeleteResponse204;

export type ClusterProfilesUidPacksNameManifestsUidDeleteResponse =
  ClusterProfilesUidPacksNameManifestsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsUidDeleteUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const ClusterProfilesUidPacksNameManifestsUidDelete = async (
  uid: string,
  packName: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksNameManifestsUidDeleteResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsUidDeleteUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksNameManifestsUidDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksNameManifestsUidDeleteResponse;
};

/**
 * @summary Returns the specified cluster profile pack manifest
 */
export type ClusterProfilesUidPacksNameManifestsUidGetResponse200 = {
  data: ManifestEntity;
  status: 200;
};

export type ClusterProfilesUidPacksNameManifestsUidGetResponseComposite =
  ClusterProfilesUidPacksNameManifestsUidGetResponse200;

export type ClusterProfilesUidPacksNameManifestsUidGetResponse =
  ClusterProfilesUidPacksNameManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsUidGetUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const ClusterProfilesUidPacksNameManifestsUidGet = async (
  uid: string,
  packName: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksNameManifestsUidGetResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsUidGetUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksNameManifestsUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksNameManifestsUidGetResponse;
};

/**
 * @summary Updates the specified manifest of the profile's pack
 */
export type ClusterProfilesUidPacksNameManifestsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidPacksNameManifestsUidUpdateResponseComposite =
  ClusterProfilesUidPacksNameManifestsUidUpdateResponse204;

export type ClusterProfilesUidPacksNameManifestsUidUpdateResponse =
  ClusterProfilesUidPacksNameManifestsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameManifestsUidUpdateUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const ClusterProfilesUidPacksNameManifestsUidUpdate = async (
  uid: string,
  packName: string,
  manifestUid: string,
  ManifestInputEntityBody: ManifestInputEntityBody,
  options?: RequestInit,
): Promise<ClusterProfilesUidPacksNameManifestsUidUpdateResponse> => {
  const res = await fetch(
    getV1ClusterProfilesUidPacksNameManifestsUidUpdateUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ManifestInputEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidPacksNameManifestsUidUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidPacksNameManifestsUidUpdateResponse;
};

/**
 * Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published
and the draft cluster profile will be set to null in the cluster profile template.

 * @summary Publishes the specified cluster profile
 */
export type ClusterProfilesPublishResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesPublishResponseComposite =
  ClusterProfilesPublishResponse204;

export type ClusterProfilesPublishResponse =
  ClusterProfilesPublishResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesPublishUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/publish`;
};

export const ClusterProfilesPublish = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterProfilesPublishResponse> => {
  const res = await fetch(getV1ClusterProfilesPublishUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesPublishResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesPublishResponse;
};

/**
 * @summary Downloads the specified cluster profile
 */
export type ClusterProfilesUidSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type ClusterProfilesUidSpcDownloadResponseComposite =
  ClusterProfilesUidSpcDownloadResponse200;

export type ClusterProfilesUidSpcDownloadResponse =
  ClusterProfilesUidSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidSpcDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/spc/download`;
};

export const ClusterProfilesUidSpcDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidSpcDownloadResponse> => {
  const res = await fetch(getV1ClusterProfilesUidSpcDownloadUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidSpcDownloadResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidSpcDownloadResponse;
};

/**
 * @summary Validates specified cluster profile packs
 */
export type ClusterProfilesUidValidatePacksResponse200 = {
  data: ClusterProfileValidatorResponse;
  status: 200;
};

export type ClusterProfilesUidValidatePacksResponseComposite =
  ClusterProfilesUidValidatePacksResponse200;

export type ClusterProfilesUidValidatePacksResponse =
  ClusterProfilesUidValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidValidatePacksUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/validate/packs`;
};

export const ClusterProfilesUidValidatePacks = async (
  uid: string,
  ClusterProfileTemplateDraftBody: ClusterProfileTemplateDraftBody,
  options?: RequestInit,
): Promise<ClusterProfilesUidValidatePacksResponse> => {
  const res = await fetch(getV1ClusterProfilesUidValidatePacksUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterProfileTemplateDraftBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidValidatePacksResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidValidatePacksResponse;
};

/**
 * @summary Deletes the specified cluster profile variables
 */
export type ClusterProfilesUidVariablesDeleteResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidVariablesDeleteResponseComposite =
  ClusterProfilesUidVariablesDeleteResponse204;

export type ClusterProfilesUidVariablesDeleteResponse =
  ClusterProfilesUidVariablesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const ClusterProfilesUidVariablesDelete = async (
  uid: string,
  VariableNames: VariableNames,
  options?: RequestInit,
): Promise<ClusterProfilesUidVariablesDeleteResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesDeleteUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VariableNames),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidVariablesDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidVariablesDeleteResponse;
};

/**
 * @summary Retrieve a list of variables defined for the cluster profile
 */
export type ClusterProfilesUidVariablesGetResponse200 = {
  data: Variables;
  status: 200;
};

export type ClusterProfilesUidVariablesGetResponseComposite =
  ClusterProfilesUidVariablesGetResponse200;

export type ClusterProfilesUidVariablesGetResponse =
  ClusterProfilesUidVariablesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const ClusterProfilesUidVariablesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<ClusterProfilesUidVariablesGetResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidVariablesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidVariablesGetResponse;
};

/**
 * @summary Update specific variables defined for a cluster profile
 */
export type ClusterProfilesUidVariablesPatchResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidVariablesPatchResponseComposite =
  ClusterProfilesUidVariablesPatchResponse204;

export type ClusterProfilesUidVariablesPatchResponse =
  ClusterProfilesUidVariablesPatchResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const ClusterProfilesUidVariablesPatch = async (
  uid: string,
  VariablesBody: VariablesBody,
  options?: RequestInit,
): Promise<ClusterProfilesUidVariablesPatchResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VariablesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidVariablesPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidVariablesPatchResponse;
};

/**
 * @summary Update the variables defined for a cluster profile
 */
export type ClusterProfilesUidVariablesPutResponse204 = {
  data: void;
  status: 204;
};

export type ClusterProfilesUidVariablesPutResponseComposite =
  ClusterProfilesUidVariablesPutResponse204;

export type ClusterProfilesUidVariablesPutResponse =
  ClusterProfilesUidVariablesPutResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const ClusterProfilesUidVariablesPut = async (
  uid: string,
  VariablesBody: VariablesBody,
  options?: RequestInit,
): Promise<ClusterProfilesUidVariablesPutResponse> => {
  const res = await fetch(getV1ClusterProfilesUidVariablesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VariablesBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: ClusterProfilesUidVariablesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as ClusterProfilesUidVariablesPutResponse;
};
