/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  BulkDeleteRequest,
  BulkDeleteResponse,
  ClusterProfile,
  ClusterProfileCloneEntity,
  ClusterProfileCloneMetaInputEntity,
  ClusterProfileEntity,
  ClusterProfileImportEntity,
  ClusterProfilePackConfigList,
  ClusterProfilePacksEntities,
  ClusterProfilePacksManifests,
  ClusterProfileUpdateEntity,
  ClusterProfileValidatorResponse,
  ClusterProfilesCreateParams,
  ClusterProfilesDeleteParams,
  ClusterProfilesGetParams,
  ClusterProfilesImportFileBody,
  ClusterProfilesImportFileParams,
  ClusterProfilesImportParams,
  ClusterProfilesPacksRefUpdateParams,
  ClusterProfilesUidPacksAddParams,
  ClusterProfilesUidPacksConfigGetParams,
  ClusterProfilesUidPacksGetParams,
  ClusterProfilesUidPacksManifestsGetParams,
  ClusterProfilesUpdateParams,
  ClusterProfilesValidateNameVersionParams,
  Macros,
  ManifestEntities,
  ManifestEntity,
  PackInputEntity,
  PackRefSummaryResponse,
  PackResolvedValues,
  PackUpdateEntity,
  ProfileMetaEntity,
  Uid,
  V1ClusterProfileImportEntityBody,
  V1ClusterProfileTemplateDraftBody,
  V1ClusterProfilesUidExportParams,
  V1ClusterProfilesUidExportTerraformParams,
  V1ManifestInputEntityBody,
  V1VariablesBody,
  VariableNames,
  Variables,
} from ".././schemas";

import { customInstance } from ".././httpClient/customClient";

/**
 * @summary Creates a cluster profile
 */
export type clusterProfilesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterProfilesCreateResponseComposite =
  clusterProfilesCreateResponse201;

export type clusterProfilesCreateResponse =
  clusterProfilesCreateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesCreateUrl = (
  params?: ClusterProfilesCreateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles`;
};

export const clusterProfilesCreate = async (
  clusterProfileEntity: ClusterProfileEntity,
  params?: ClusterProfilesCreateParams,
  options?: RequestInit,
): Promise<clusterProfilesCreateResponse> => {
  return customInstance<clusterProfilesCreateResponse>(
    getClusterProfilesCreateUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterProfileEntity),
    },
  );
};

/**
 * @summary Deletes list of cluster profiles
 */
export type clusterProfilesBulkDeleteResponse200 = {
  data: BulkDeleteResponse;
  status: 200;
};

export type clusterProfilesBulkDeleteResponseComposite =
  clusterProfilesBulkDeleteResponse200;

export type clusterProfilesBulkDeleteResponse =
  clusterProfilesBulkDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesBulkDeleteUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/bulk`;
};

export const clusterProfilesBulkDelete = async (
  bulkDeleteRequest: BulkDeleteRequest,
  options?: RequestInit,
): Promise<clusterProfilesBulkDeleteResponse> => {
  return customInstance<clusterProfilesBulkDeleteResponse>(
    getClusterProfilesBulkDeleteUrl(),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(bulkDeleteRequest),
    },
  );
};

/**
 * @summary Imports a cluster profile
 */
export type clusterProfilesImportResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterProfilesImportResponseComposite =
  clusterProfilesImportResponse201;

export type clusterProfilesImportResponse =
  clusterProfilesImportResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesImportUrl = (
  params?: ClusterProfilesImportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/import?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/import`;
};

export const clusterProfilesImport = async (
  v1ClusterProfileImportEntityBody: V1ClusterProfileImportEntityBody,
  params?: ClusterProfilesImportParams,
  options?: RequestInit,
): Promise<clusterProfilesImportResponse> => {
  return customInstance<clusterProfilesImportResponse>(
    getClusterProfilesImportUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterProfileImportEntityBody),
    },
  );
};

/**
 * @summary Imports a cluster profile via file
 */
export type clusterProfilesImportFileResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterProfilesImportFileResponseComposite =
  clusterProfilesImportFileResponse201;

export type clusterProfilesImportFileResponse =
  clusterProfilesImportFileResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesImportFileUrl = (
  params?: ClusterProfilesImportFileParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/import/file?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/import/file`;
};

export const clusterProfilesImportFile = async (
  clusterProfilesImportFileBody: ClusterProfilesImportFileBody,
  params?: ClusterProfilesImportFileParams,
  options?: RequestInit,
): Promise<clusterProfilesImportFileResponse> => {
  const formData = new FormData();
  if (clusterProfilesImportFileBody.importFile !== undefined) {
    formData.append(`importFile`, clusterProfilesImportFileBody.importFile);
  }

  return customInstance<clusterProfilesImportFileResponse>(
    getClusterProfilesImportFileUrl(params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

/**
 * @summary Validates cluster profile import
 */
export type clusterProfilesImportValidateResponse200 = {
  data: ClusterProfileImportEntity;
  status: 200;
};

export type clusterProfilesImportValidateResponseComposite =
  clusterProfilesImportValidateResponse200;

export type clusterProfilesImportValidateResponse =
  clusterProfilesImportValidateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesImportValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/import/validate`;
};

export const clusterProfilesImportValidate = async (
  v1ClusterProfileImportEntityBody: V1ClusterProfileImportEntityBody,
  options?: RequestInit,
): Promise<clusterProfilesImportValidateResponse> => {
  return customInstance<clusterProfilesImportValidateResponse>(
    getClusterProfilesImportValidateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterProfileImportEntityBody),
    },
  );
};

/**
 * @summary Retrieves a list of macros
 */
export type macrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type macrosListResponseComposite = macrosListResponse200;

export type macrosListResponse = macrosListResponseComposite & {
  headers: Headers;
};

export const getMacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/macros`;
};

export const macrosList = async (
  options?: RequestInit,
): Promise<macrosListResponse> => {
  return customInstance<macrosListResponse>(getMacrosListUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Validates the cluster profile name and version
 * @summary Validates the cluster profile metadata
 */
export type clusterProfilesValidateNameVersionResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesValidateNameVersionResponseComposite =
  clusterProfilesValidateNameVersionResponse204;

export type clusterProfilesValidateNameVersionResponse =
  clusterProfilesValidateNameVersionResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesValidateNameVersionUrl = (
  params?: ClusterProfilesValidateNameVersionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/validate/name`;
};

export const clusterProfilesValidateNameVersion = async (
  params?: ClusterProfilesValidateNameVersionParams,
  options?: RequestInit,
): Promise<clusterProfilesValidateNameVersionResponse> => {
  return customInstance<clusterProfilesValidateNameVersionResponse>(
    getClusterProfilesValidateNameVersionUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Validates cluster profile packs
 */
export type clusterProfilesValidatePacksResponse200 = {
  data: ClusterProfileValidatorResponse;
  status: 200;
};

export type clusterProfilesValidatePacksResponseComposite =
  clusterProfilesValidatePacksResponse200;

export type clusterProfilesValidatePacksResponse =
  clusterProfilesValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesValidatePacksUrl = () => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/validate/packs`;
};

export const clusterProfilesValidatePacks = async (
  v1ClusterProfileTemplateDraftBody: V1ClusterProfileTemplateDraftBody,
  options?: RequestInit,
): Promise<clusterProfilesValidatePacksResponse> => {
  return customInstance<clusterProfilesValidatePacksResponse>(
    getClusterProfilesValidatePacksUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterProfileTemplateDraftBody),
    },
  );
};

/**
 * @summary Deletes the specified cluster profile
 */
export type clusterProfilesDeleteResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesDeleteResponseComposite =
  clusterProfilesDeleteResponse204;

export type clusterProfilesDeleteResponse =
  clusterProfilesDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesDeleteUrl = (
  uid: string,
  params?: ClusterProfilesDeleteParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const clusterProfilesDelete = async (
  uid: string,
  params?: ClusterProfilesDeleteParams,
  options?: RequestInit,
): Promise<clusterProfilesDeleteResponse> => {
  return customInstance<clusterProfilesDeleteResponse>(
    getClusterProfilesDeleteUrl(uid, params),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns a specified cluster profile
 */
export type clusterProfilesGetResponse200 = {
  data: ClusterProfile;
  status: 200;
};

export type clusterProfilesGetResponseComposite = clusterProfilesGetResponse200;

export type clusterProfilesGetResponse = clusterProfilesGetResponseComposite & {
  headers: Headers;
};

export const getClusterProfilesGetUrl = (
  uid: string,
  params?: ClusterProfilesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const clusterProfilesGet = async (
  uid: string,
  params?: ClusterProfilesGetParams,
  options?: RequestInit,
): Promise<clusterProfilesGetResponse> => {
  return customInstance<clusterProfilesGetResponse>(
    getClusterProfilesGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified cluster profile
 */
export type clusterProfilesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesUpdateResponseComposite =
  clusterProfilesUpdateResponse204;

export type clusterProfilesUpdateResponse =
  clusterProfilesUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUpdateUrl = (
  uid: string,
  params?: ClusterProfilesUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}`;
};

export const clusterProfilesUpdate = async (
  uid: string,
  clusterProfileUpdateEntity: ClusterProfileUpdateEntity,
  params?: ClusterProfilesUpdateParams,
  options?: RequestInit,
): Promise<clusterProfilesUpdateResponse> => {
  return customInstance<clusterProfilesUpdateResponse>(
    getClusterProfilesUpdateUrl(uid, params),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterProfileUpdateEntity),
    },
  );
};

/**
 * @summary Creates a clone of the specified cluster profile
 */
export type clusterProfilesUidCloneResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterProfilesUidCloneResponseComposite =
  clusterProfilesUidCloneResponse201;

export type clusterProfilesUidCloneResponse =
  clusterProfilesUidCloneResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidCloneUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/clone`;
};

export const clusterProfilesUidClone = async (
  uid: string,
  clusterProfileCloneEntity: ClusterProfileCloneEntity,
  options?: RequestInit,
): Promise<clusterProfilesUidCloneResponse> => {
  return customInstance<clusterProfilesUidCloneResponse>(
    getClusterProfilesUidCloneUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterProfileCloneEntity),
    },
  );
};

/**
 * Validates the cloned cluster profile name, version and target project uid
 * @summary Validates the cluster profile clone
 */
export type clusterProfilesUidCloneValidateResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesUidCloneValidateResponseComposite =
  clusterProfilesUidCloneValidateResponse204;

export type clusterProfilesUidCloneValidateResponse =
  clusterProfilesUidCloneValidateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidCloneValidateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/clone/validate`;
};

export const clusterProfilesUidCloneValidate = async (
  uid: string,
  clusterProfileCloneMetaInputEntity: ClusterProfileCloneMetaInputEntity,
  options?: RequestInit,
): Promise<clusterProfilesUidCloneValidateResponse> => {
  return customInstance<clusterProfilesUidCloneValidateResponse>(
    getClusterProfilesUidCloneValidateUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(clusterProfileCloneMetaInputEntity),
    },
  );
};

/**
 * @summary Export the specified cluster profile
 */
export type v1ClusterProfilesUidExportResponse200 = {
  data: Blob;
  status: 200;
};

export type v1ClusterProfilesUidExportResponseComposite =
  v1ClusterProfilesUidExportResponse200;

export type v1ClusterProfilesUidExportResponse =
  v1ClusterProfilesUidExportResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidExportUrl = (
  uid: string,
  params?: V1ClusterProfilesUidExportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export`;
};

export const v1ClusterProfilesUidExport = async (
  uid: string,
  params?: V1ClusterProfilesUidExportParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidExportResponse> => {
  return customInstance<v1ClusterProfilesUidExportResponse>(
    getV1ClusterProfilesUidExportUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Downloads the specified cluster profile
 */
export type v1ClusterProfilesUidExportTerraformResponse200 = {
  data: Blob;
  status: 200;
};

export type v1ClusterProfilesUidExportTerraformResponseComposite =
  v1ClusterProfilesUidExportTerraformResponse200;

export type v1ClusterProfilesUidExportTerraformResponse =
  v1ClusterProfilesUidExportTerraformResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidExportTerraformUrl = (
  uid: string,
  params?: V1ClusterProfilesUidExportTerraformParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export/terraform?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/export/terraform`;
};

export const v1ClusterProfilesUidExportTerraform = async (
  uid: string,
  params?: V1ClusterProfilesUidExportTerraformParams,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidExportTerraformResponse> => {
  return customInstance<v1ClusterProfilesUidExportTerraformResponse>(
    getV1ClusterProfilesUidExportTerraformUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified cluster profile metadata
 */
export type clusterProfilesUidMetadataUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesUidMetadataUpdateResponseComposite =
  clusterProfilesUidMetadataUpdateResponse204;

export type clusterProfilesUidMetadataUpdateResponse =
  clusterProfilesUidMetadataUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidMetadataUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/metadata`;
};

export const clusterProfilesUidMetadataUpdate = async (
  uid: string,
  profileMetaEntity: ProfileMetaEntity,
  options?: RequestInit,
): Promise<clusterProfilesUidMetadataUpdateResponse> => {
  return customInstance<clusterProfilesUidMetadataUpdateResponse>(
    getClusterProfilesUidMetadataUpdateUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(profileMetaEntity),
    },
  );
};

/**
 * @summary Updates cluster profile packs ref
 */
export type clusterProfilesPacksRefUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesPacksRefUpdateResponseComposite =
  clusterProfilesPacksRefUpdateResponse204;

export type clusterProfilesPacksRefUpdateResponse =
  clusterProfilesPacksRefUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesPacksRefUpdateUrl = (
  uid: string,
  params?: ClusterProfilesPacksRefUpdateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packRefs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packRefs`;
};

export const clusterProfilesPacksRefUpdate = async (
  uid: string,
  params?: ClusterProfilesPacksRefUpdateParams,
  options?: RequestInit,
): Promise<clusterProfilesPacksRefUpdateResponse> => {
  return customInstance<clusterProfilesPacksRefUpdateResponse>(
    getClusterProfilesPacksRefUpdateUrl(uid, params),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * @summary Returns the specified cluster profile packs
 */
export type clusterProfilesUidPacksGetResponse200 = {
  data: ClusterProfilePacksEntities;
  status: 200;
};

export type clusterProfilesUidPacksGetResponseComposite =
  clusterProfilesUidPacksGetResponse200;

export type clusterProfilesUidPacksGetResponse =
  clusterProfilesUidPacksGetResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksGetUrl = (
  uid: string,
  params?: ClusterProfilesUidPacksGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs`;
};

export const clusterProfilesUidPacksGet = async (
  uid: string,
  params?: ClusterProfilesUidPacksGetParams,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksGetResponse> => {
  return customInstance<clusterProfilesUidPacksGetResponse>(
    getClusterProfilesUidPacksGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Adds a new pack to the specified cluster profile and returns the created pack uid
 */
export type clusterProfilesUidPacksAddResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterProfilesUidPacksAddResponseComposite =
  clusterProfilesUidPacksAddResponse201;

export type clusterProfilesUidPacksAddResponse =
  clusterProfilesUidPacksAddResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksAddUrl = (
  uid: string,
  params?: ClusterProfilesUidPacksAddParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs`;
};

export const clusterProfilesUidPacksAdd = async (
  uid: string,
  packInputEntity: PackInputEntity,
  params?: ClusterProfilesUidPacksAddParams,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksAddResponse> => {
  return customInstance<clusterProfilesUidPacksAddResponse>(
    getClusterProfilesUidPacksAddUrl(uid, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(packInputEntity),
    },
  );
};

/**
 * @summary Returns the specified cluster profile pack manifests
 */
export type clusterProfilesUidPacksManifestsGetResponse200 = {
  data: ClusterProfilePacksManifests;
  status: 200;
};

export type clusterProfilesUidPacksManifestsGetResponseComposite =
  clusterProfilesUidPacksManifestsGetResponse200;

export type clusterProfilesUidPacksManifestsGetResponse =
  clusterProfilesUidPacksManifestsGetResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksManifestsGetUrl = (
  uid: string,
  params?: ClusterProfilesUidPacksManifestsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {});

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/manifests?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/manifests`;
};

export const clusterProfilesUidPacksManifestsGet = async (
  uid: string,
  params?: ClusterProfilesUidPacksManifestsGetParams,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksManifestsGetResponse> => {
  return customInstance<clusterProfilesUidPacksManifestsGetResponse>(
    getClusterProfilesUidPacksManifestsGetUrl(uid, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the specified cluster profile packs resolved values
 */
export type clusterProfilesUidPacksResolvedValuesGetResponse200 = {
  data: PackResolvedValues;
  status: 200;
};

export type clusterProfilesUidPacksResolvedValuesGetResponseComposite =
  clusterProfilesUidPacksResolvedValuesGetResponse200;

export type clusterProfilesUidPacksResolvedValuesGetResponse =
  clusterProfilesUidPacksResolvedValuesGetResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksResolvedValuesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/resolvedValues`;
};

export const clusterProfilesUidPacksResolvedValuesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksResolvedValuesGetResponse> => {
  return customInstance<clusterProfilesUidPacksResolvedValuesGetResponse>(
    getClusterProfilesUidPacksResolvedValuesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Deletes the specified pack information in the cluster profile
 */
export type clusterProfilesUidPacksNameDeleteResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesUidPacksNameDeleteResponseComposite =
  clusterProfilesUidPacksNameDeleteResponse204;

export type clusterProfilesUidPacksNameDeleteResponse =
  clusterProfilesUidPacksNameDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksNameDeleteUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const clusterProfilesUidPacksNameDelete = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksNameDeleteResponse> => {
  return customInstance<clusterProfilesUidPacksNameDeleteResponse>(
    getClusterProfilesUidPacksNameDeleteUrl(uid, packName),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified cluster profile pack
 */
export type v1ClusterProfilesUidPacksNameGetResponse200 = {
  data: PackRefSummaryResponse;
  status: 200;
};

export type v1ClusterProfilesUidPacksNameGetResponseComposite =
  v1ClusterProfilesUidPacksNameGetResponse200;

export type v1ClusterProfilesUidPacksNameGetResponse =
  v1ClusterProfilesUidPacksNameGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidPacksNameGetUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const v1ClusterProfilesUidPacksNameGet = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidPacksNameGetResponse> => {
  return customInstance<v1ClusterProfilesUidPacksNameGetResponse>(
    getV1ClusterProfilesUidPacksNameGetUrl(uid, packName),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified pack information in the cluster profile
 */
export type clusterProfilesUidPacksNameUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesUidPacksNameUpdateResponseComposite =
  clusterProfilesUidPacksNameUpdateResponse204;

export type clusterProfilesUidPacksNameUpdateResponse =
  clusterProfilesUidPacksNameUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksNameUpdateUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}`;
};

export const clusterProfilesUidPacksNameUpdate = async (
  uid: string,
  packName: string,
  packUpdateEntity: PackUpdateEntity,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksNameUpdateResponse> => {
  return customInstance<clusterProfilesUidPacksNameUpdateResponse>(
    getClusterProfilesUidPacksNameUpdateUrl(uid, packName),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(packUpdateEntity),
    },
  );
};

/**
 * @summary Returns the specified cluster profile pack configuration
 */
export type clusterProfilesUidPacksConfigGetResponse200 = {
  data: ClusterProfilePackConfigList;
  status: 200;
};

export type clusterProfilesUidPacksConfigGetResponseComposite =
  clusterProfilesUidPacksConfigGetResponse200;

export type clusterProfilesUidPacksConfigGetResponse =
  clusterProfilesUidPacksConfigGetResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksConfigGetUrl = (
  uid: string,
  packName: string,
  params: ClusterProfilesUidPacksConfigGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/config?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/config`;
};

export const clusterProfilesUidPacksConfigGet = async (
  uid: string,
  packName: string,
  params: ClusterProfilesUidPacksConfigGetParams,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksConfigGetResponse> => {
  return customInstance<clusterProfilesUidPacksConfigGetResponse>(
    getClusterProfilesUidPacksConfigGetUrl(uid, packName, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Returns the associated manifests for the specified profile's pack
 */
export type clusterProfilesUidPacksUidManifestsResponse200 = {
  data: ManifestEntities;
  status: 200;
};

export type clusterProfilesUidPacksUidManifestsResponseComposite =
  clusterProfilesUidPacksUidManifestsResponse200;

export type clusterProfilesUidPacksUidManifestsResponse =
  clusterProfilesUidPacksUidManifestsResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksUidManifestsUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests`;
};

export const clusterProfilesUidPacksUidManifests = async (
  uid: string,
  packName: string,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksUidManifestsResponse> => {
  return customInstance<clusterProfilesUidPacksUidManifestsResponse>(
    getClusterProfilesUidPacksUidManifestsUrl(uid, packName),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Adds manifest to the profiles packs and returns the added manifests uid
 */
export type clusterProfilesUidPacksNameManifestsAddResponse201 = {
  data: Uid;
  status: 201;
};

export type clusterProfilesUidPacksNameManifestsAddResponseComposite =
  clusterProfilesUidPacksNameManifestsAddResponse201;

export type clusterProfilesUidPacksNameManifestsAddResponse =
  clusterProfilesUidPacksNameManifestsAddResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksNameManifestsAddUrl = (
  uid: string,
  packName: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests`;
};

export const clusterProfilesUidPacksNameManifestsAdd = async (
  uid: string,
  packName: string,
  v1ManifestInputEntityBody: V1ManifestInputEntityBody,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksNameManifestsAddResponse> => {
  return customInstance<clusterProfilesUidPacksNameManifestsAddResponse>(
    getClusterProfilesUidPacksNameManifestsAddUrl(uid, packName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestInputEntityBody),
    },
  );
};

/**
 * @summary Deletes the specified cluster profile pack manifest
 */
export type clusterProfilesUidPacksNameManifestsUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesUidPacksNameManifestsUidDeleteResponseComposite =
  clusterProfilesUidPacksNameManifestsUidDeleteResponse204;

export type clusterProfilesUidPacksNameManifestsUidDeleteResponse =
  clusterProfilesUidPacksNameManifestsUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksNameManifestsUidDeleteUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const clusterProfilesUidPacksNameManifestsUidDelete = async (
  uid: string,
  packName: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksNameManifestsUidDeleteResponse> => {
  return customInstance<clusterProfilesUidPacksNameManifestsUidDeleteResponse>(
    getClusterProfilesUidPacksNameManifestsUidDeleteUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Returns the specified cluster profile pack manifest
 */
export type clusterProfilesUidPacksNameManifestsUidGetResponse200 = {
  data: ManifestEntity;
  status: 200;
};

export type clusterProfilesUidPacksNameManifestsUidGetResponseComposite =
  clusterProfilesUidPacksNameManifestsUidGetResponse200;

export type clusterProfilesUidPacksNameManifestsUidGetResponse =
  clusterProfilesUidPacksNameManifestsUidGetResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksNameManifestsUidGetUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const clusterProfilesUidPacksNameManifestsUidGet = async (
  uid: string,
  packName: string,
  manifestUid: string,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksNameManifestsUidGetResponse> => {
  return customInstance<clusterProfilesUidPacksNameManifestsUidGetResponse>(
    getClusterProfilesUidPacksNameManifestsUidGetUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Updates the specified manifest of the profile's pack
 */
export type clusterProfilesUidPacksNameManifestsUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesUidPacksNameManifestsUidUpdateResponseComposite =
  clusterProfilesUidPacksNameManifestsUidUpdateResponse204;

export type clusterProfilesUidPacksNameManifestsUidUpdateResponse =
  clusterProfilesUidPacksNameManifestsUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidPacksNameManifestsUidUpdateUrl = (
  uid: string,
  packName: string,
  manifestUid: string,
) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/packs/${packName}/manifests/${manifestUid}`;
};

export const clusterProfilesUidPacksNameManifestsUidUpdate = async (
  uid: string,
  packName: string,
  manifestUid: string,
  v1ManifestInputEntityBody: V1ManifestInputEntityBody,
  options?: RequestInit,
): Promise<clusterProfilesUidPacksNameManifestsUidUpdateResponse> => {
  return customInstance<clusterProfilesUidPacksNameManifestsUidUpdateResponse>(
    getClusterProfilesUidPacksNameManifestsUidUpdateUrl(
      uid,
      packName,
      manifestUid,
    ),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ManifestInputEntityBody),
    },
  );
};

/**
 * Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published
and the draft cluster profile will be set to null in the cluster profile template.

 * @summary Publishes the specified cluster profile
 */
export type clusterProfilesPublishResponse204 = {
  data: void;
  status: 204;
};

export type clusterProfilesPublishResponseComposite =
  clusterProfilesPublishResponse204;

export type clusterProfilesPublishResponse =
  clusterProfilesPublishResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesPublishUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/publish`;
};

export const clusterProfilesPublish = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterProfilesPublishResponse> => {
  return customInstance<clusterProfilesPublishResponse>(
    getClusterProfilesPublishUrl(uid),
    {
      ...options,
      method: "PATCH",
    },
  );
};

/**
 * @summary Downloads the specified cluster profile
 */
export type clusterProfilesUidSpcDownloadResponse200 = {
  data: Blob;
  status: 200;
};

export type clusterProfilesUidSpcDownloadResponseComposite =
  clusterProfilesUidSpcDownloadResponse200;

export type clusterProfilesUidSpcDownloadResponse =
  clusterProfilesUidSpcDownloadResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidSpcDownloadUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/spc/download`;
};

export const clusterProfilesUidSpcDownload = async (
  uid: string,
  options?: RequestInit,
): Promise<clusterProfilesUidSpcDownloadResponse> => {
  return customInstance<clusterProfilesUidSpcDownloadResponse>(
    getClusterProfilesUidSpcDownloadUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Validates specified cluster profile packs
 */
export type clusterProfilesUidValidatePacksResponse200 = {
  data: ClusterProfileValidatorResponse;
  status: 200;
};

export type clusterProfilesUidValidatePacksResponseComposite =
  clusterProfilesUidValidatePacksResponse200;

export type clusterProfilesUidValidatePacksResponse =
  clusterProfilesUidValidatePacksResponseComposite & {
    headers: Headers;
  };

export const getClusterProfilesUidValidatePacksUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/validate/packs`;
};

export const clusterProfilesUidValidatePacks = async (
  uid: string,
  v1ClusterProfileTemplateDraftBody: V1ClusterProfileTemplateDraftBody,
  options?: RequestInit,
): Promise<clusterProfilesUidValidatePacksResponse> => {
  return customInstance<clusterProfilesUidValidatePacksResponse>(
    getClusterProfilesUidValidatePacksUrl(uid),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterProfileTemplateDraftBody),
    },
  );
};

/**
 * @summary Deletes the specified cluster profile variables
 */
export type v1ClusterProfilesUidVariablesDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1ClusterProfilesUidVariablesDeleteResponseComposite =
  v1ClusterProfilesUidVariablesDeleteResponse204;

export type v1ClusterProfilesUidVariablesDeleteResponse =
  v1ClusterProfilesUidVariablesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesDelete = async (
  uid: string,
  variableNames: VariableNames,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesDeleteResponse> => {
  return customInstance<v1ClusterProfilesUidVariablesDeleteResponse>(
    getV1ClusterProfilesUidVariablesDeleteUrl(uid),
    {
      ...options,
      method: "DELETE",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(variableNames),
    },
  );
};

/**
 * @summary Retrieve a list of variables defined for the cluster profile
 */
export type v1ClusterProfilesUidVariablesGetResponse200 = {
  data: Variables;
  status: 200;
};

export type v1ClusterProfilesUidVariablesGetResponseComposite =
  v1ClusterProfilesUidVariablesGetResponse200;

export type v1ClusterProfilesUidVariablesGetResponse =
  v1ClusterProfilesUidVariablesGetResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesGet = async (
  uid: string,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesGetResponse> => {
  return customInstance<v1ClusterProfilesUidVariablesGetResponse>(
    getV1ClusterProfilesUidVariablesGetUrl(uid),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update specific variables defined for a cluster profile
 */
export type v1ClusterProfilesUidVariablesPatchResponse204 = {
  data: void;
  status: 204;
};

export type v1ClusterProfilesUidVariablesPatchResponseComposite =
  v1ClusterProfilesUidVariablesPatchResponse204;

export type v1ClusterProfilesUidVariablesPatchResponse =
  v1ClusterProfilesUidVariablesPatchResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesPatch = async (
  uid: string,
  v1VariablesBody: V1VariablesBody,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesPatchResponse> => {
  return customInstance<v1ClusterProfilesUidVariablesPatchResponse>(
    getV1ClusterProfilesUidVariablesPatchUrl(uid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VariablesBody),
    },
  );
};

/**
 * @summary Update the variables defined for a cluster profile
 */
export type v1ClusterProfilesUidVariablesPutResponse204 = {
  data: void;
  status: 204;
};

export type v1ClusterProfilesUidVariablesPutResponseComposite =
  v1ClusterProfilesUidVariablesPutResponse204;

export type v1ClusterProfilesUidVariablesPutResponse =
  v1ClusterProfilesUidVariablesPutResponseComposite & {
    headers: Headers;
  };

export const getV1ClusterProfilesUidVariablesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/clusterprofiles/${uid}/variables`;
};

export const v1ClusterProfilesUidVariablesPut = async (
  uid: string,
  v1VariablesBody: V1VariablesBody,
  options?: RequestInit,
): Promise<v1ClusterProfilesUidVariablesPutResponse> => {
  return customInstance<v1ClusterProfilesUidVariablesPutResponse>(
    getV1ClusterProfilesUidVariablesPutUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1VariablesBody),
    },
  );
};
