/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type { V1VmDevicesClientPassthrough } from './v1VmDevicesClientPassthrough';
import type { V1VmDisk } from './v1VmDisk';
import type { V1VmFilesystem } from './v1VmFilesystem';
import type { V1VmGPU } from './v1VmGPU';
import type { V1VmHostDevice } from './v1VmHostDevice';
import type { V1VmInput } from './v1VmInput';
import type { V1VmInterface } from './v1VmInterface';
import type { V1VmDevicesRng } from './v1VmDevicesRng';
import type { V1VmSoundDevice } from './v1VmSoundDevice';
import type { V1VmDevicesTpm } from './v1VmDevicesTpm';
import type { V1VmWatchdog } from './v1VmWatchdog';

export interface V1VmDevices {
  /** Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true. */
  autoattachGraphicsDevice?: boolean;
  /** Whether to attach an Input Device. Defaults to false. */
  autoattachInputDevice?: boolean;
  /** Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true. */
  autoattachMemBalloon?: boolean;
  /** Whether to attach a pod network interface. Defaults to true. */
  autoattachPodInterface?: boolean;
  /** Whether to attach the default serial console or not. Serial console access will not be available if set to false. Defaults to true. */
  autoattachSerialConsole?: boolean;
  /** Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false. */
  autoattachVSOCK?: boolean;
  /** Whether or not to enable virtio multi-queue for block devices. Defaults to false. */
  blockMultiQueue?: boolean;
  /** Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.

The struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices. */
  clientPassthrough?: V1VmDevicesClientPassthrough;
  /** DisableHotplug disabled the ability to hotplug disks. */
  disableHotplug?: boolean;
  /** Disks describes disks, cdroms and luns which are connected to the vmi. */
  disks?: V1VmDisk[];
  /** Filesystems describes filesystem which is connected to the vmi. */
  filesystems?: V1VmFilesystem[];
  /** Whether to attach a GPU device to the vmi. */
  gpus?: V1VmGPU[];
  /** Whether to attach a host device to the vmi. */
  hostDevices?: V1VmHostDevice[];
  /** Inputs describe input devices */
  inputs?: V1VmInput[];
  /** Interfaces describe network interfaces which are added to the vmi. */
  interfaces?: V1VmInterface[];
  /** If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs. */
  networkInterfaceMultiqueue?: boolean;
  /** Rng represents the random device passed from host */
  rng?: V1VmDevicesRng;
  sound?: V1VmSoundDevice;
  tpm?: V1VmDevicesTpm;
  /** Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0). */
  useVirtioTransitional?: boolean;
  watchdog?: V1VmWatchdog;
}
