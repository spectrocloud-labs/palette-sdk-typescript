/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type { V1VmInterfaceBridgeProperty } from './v1VmInterfaceBridgeProperty';
import type { V1VmDHCPOptions } from './v1VmDHCPOptions';
import type { V1VmInterfaceMacvtapProperty } from './v1VmInterfaceMacvtapProperty';
import type { V1VmInterfaceMasqueradeProperty } from './v1VmInterfaceMasqueradeProperty';
import type { V1VmInterfacePasstProperty } from './v1VmInterfacePasstProperty';
import type { V1VmPort } from './v1VmPort';
import type { V1VmInterfaceSlirpProperty } from './v1VmInterfaceSlirpProperty';
import type { V1VmInterfaceSriov } from './v1VmInterfaceSriov';

export interface V1VmInterface {
  /** If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1). */
  acpiIndex?: number;
  /** BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried. */
  bootOrder?: number;
  /** InterfaceBridge connects to a given network via a linux bridge. */
  bridge?: V1VmInterfaceBridgeProperty;
  dhcpOptions?: V1VmDHCPOptions;
  /** Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF. */
  macAddress?: string;
  /** InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface. */
  macvtap?: V1VmInterfaceMacvtapProperty;
  /** InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic. */
  masquerade?: V1VmInterfaceMasqueradeProperty;
  /** Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio. */
  model?: string;
  /** Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network. */
  name: string;
  /** InterfacePasst connects to a given network. */
  passt?: V1VmInterfacePasstProperty;
  /** If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10 */
  pciAddress?: string;
  /** List of ports to be forwarded to the virtual machine. */
  ports?: V1VmPort[];
  /** InterfaceSlirp connects to a given network using QEMU user networking mode. */
  slirp?: V1VmInterfaceSlirpProperty;
  /** InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio. */
  sriov?: V1VmInterfaceSriov;
  /** If specified, the virtual network interface address and its tag will be provided to the guest via config drive */
  tag?: string;
}
