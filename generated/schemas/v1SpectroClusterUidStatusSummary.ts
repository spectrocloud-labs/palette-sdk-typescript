/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type { V1SpectroClusterAddOnServiceSummary } from "./v1SpectroClusterAddOnServiceSummary";
import type { V1APIEndpoint } from "./v1APIEndpoint";
import type { V1ClusterImport } from "./v1ClusterImport";
import type { V1ClusterCondition } from "./v1ClusterCondition";
import type { V1ResourceCost } from "./v1ResourceCost";
import type { V1ClusterFips } from "./v1ClusterFips";
import type { V1SpectroClusterHealthStatus } from "./v1SpectroClusterHealthStatus";
import type { V1KubeMeta } from "./v1KubeMeta";
import type { V1ClusterMetaSpecLocation } from "./v1ClusterMetaSpecLocation";
import type { V1SpectroClusterMetrics } from "./v1SpectroClusterMetrics";
import type { V1ClusterNotificationStatus } from "./v1ClusterNotificationStatus";
import type { V1ClusterPackStatus } from "./v1ClusterPackStatus";
import type { V1LoadBalancerService } from "./v1LoadBalancerService";
import type { V1SpcApply } from "./v1SpcApply";
import type { V1Upgrades } from "./v1Upgrades";
import type { V1Virtual } from "./v1Virtual";
import type { V1ResourceReference } from "./v1ResourceReference";

/**
 * Spectro cluster status summary
 */
export interface V1SpectroClusterUidStatusSummary {
  /** Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers. */
  abortTimestamp?: string;
  addOnServices?: V1SpectroClusterAddOnServiceSummary[];
  apiEndpoints?: V1APIEndpoint[];
  clusterImport?: V1ClusterImport;
  conditions?: V1ClusterCondition[];
  cost?: V1ResourceCost;
  fips?: V1ClusterFips;
  health?: V1SpectroClusterHealthStatus;
  hourlyRate?: V1ResourceCost;
  kubeMeta?: V1KubeMeta;
  location?: V1ClusterMetaSpecLocation;
  metrics?: V1SpectroClusterMetrics;
  notifications?: V1ClusterNotificationStatus;
  packs?: V1ClusterPackStatus[];
  services?: V1LoadBalancerService[];
  spcApply?: V1SpcApply;
  /** current operational state */
  state?: string;
  upgrades?: V1Upgrades[];
  virtual?: V1Virtual;
  workspaces?: V1ResourceReference[];
}
