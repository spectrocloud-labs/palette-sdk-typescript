/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  FiltersListParams,
  FiltersMetadata,
  FiltersMetadataParams,
  FiltersSummary,
  TagFilterSummary,
  Uid,
  V1TagFilterBody,
} from ".././schemas";

/**
 * @summary Returns a list of Filters
 */
export type filtersListResponse200 = {
  data: FiltersSummary;
  status: 200;
};

export type filtersListResponseComposite = filtersListResponse200;

export type filtersListResponse = filtersListResponseComposite & {
  headers: Headers;
};

export const getFiltersListUrl = (params?: FiltersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/filters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/filters`;
};

export const filtersList = async (
  params?: FiltersListParams,
  options?: RequestInit,
): Promise<filtersListResponse> => {
  const res = await fetch(getFiltersListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: filtersListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as filtersListResponse;
};

/**
 * @summary Returns a list of Filters metadata
 */
export type filtersMetadataResponse200 = {
  data: FiltersMetadata;
  status: 200;
};

export type filtersMetadataResponseComposite = filtersMetadataResponse200;

export type filtersMetadataResponse = filtersMetadataResponseComposite & {
  headers: Headers;
};

export const getFiltersMetadataUrl = (params?: FiltersMetadataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/filters/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/filters/metadata`;
};

export const filtersMetadata = async (
  params?: FiltersMetadataParams,
  options?: RequestInit,
): Promise<filtersMetadataResponse> => {
  const res = await fetch(getFiltersMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: filtersMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as filtersMetadataResponse;
};

/**
 * @summary Creates a Tag filter
 */
export type tagFiltersCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type tagFiltersCreateResponseComposite = tagFiltersCreateResponse201;

export type tagFiltersCreateResponse = tagFiltersCreateResponseComposite & {
  headers: Headers;
};

export const getTagFiltersCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/filters/tag`;
};

export const tagFiltersCreate = async (
  v1TagFilterBody: V1TagFilterBody,
  options?: RequestInit,
): Promise<tagFiltersCreateResponse> => {
  const res = await fetch(getTagFiltersCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TagFilterBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tagFiltersCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tagFiltersCreateResponse;
};

/**
 * @summary Delete the specified Filter object
 */
export type tagFilterUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type tagFilterUidDeleteResponseComposite = tagFilterUidDeleteResponse204;

export type tagFilterUidDeleteResponse = tagFilterUidDeleteResponseComposite & {
  headers: Headers;
};

export const getTagFilterUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const tagFilterUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<tagFilterUidDeleteResponse> => {
  const res = await fetch(getTagFilterUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tagFilterUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tagFilterUidDeleteResponse;
};

/**
 * @summary Returns the specified Filter object
 */
export type tagFilterUidGetResponse200 = {
  data: TagFilterSummary;
  status: 200;
};

export type tagFilterUidGetResponseComposite = tagFilterUidGetResponse200;

export type tagFilterUidGetResponse = tagFilterUidGetResponseComposite & {
  headers: Headers;
};

export const getTagFilterUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const tagFilterUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<tagFilterUidGetResponse> => {
  const res = await fetch(getTagFilterUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tagFilterUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tagFilterUidGetResponse;
};

/**
 * @summary Updates a Tag filter
 */
export type tagFilterUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type tagFilterUidUpdateResponseComposite = tagFilterUidUpdateResponse204;

export type tagFilterUidUpdateResponse = tagFilterUidUpdateResponseComposite & {
  headers: Headers;
};

export const getTagFilterUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const tagFilterUidUpdate = async (
  uid: string,
  v1TagFilterBody: V1TagFilterBody,
  options?: RequestInit,
): Promise<tagFilterUidUpdateResponse> => {
  const res = await fetch(getTagFilterUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1TagFilterBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: tagFilterUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as tagFilterUidUpdateResponse;
};
