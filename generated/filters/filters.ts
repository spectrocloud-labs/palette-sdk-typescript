/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  FiltersListParams,
  FiltersMetadata,
  FiltersMetadataParams,
  FiltersSummary,
  TagFilterBody,
  TagFilterSummary,
  Uid,
} from ".././schemas";

/**
 * @summary Returns a list of Filters
 */
export type FiltersListResponse200 = {
  data: FiltersSummary;
  status: 200;
};

export type FiltersListResponseComposite = FiltersListResponse200;

export type FiltersListResponse = FiltersListResponseComposite & {
  headers: Headers;
};

export const getV1FiltersListUrl = (params?: FiltersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/filters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/filters`;
};

export const FiltersList = async (
  params?: FiltersListParams,
  options?: RequestInit,
): Promise<FiltersListResponse> => {
  const res = await fetch(getV1FiltersListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: FiltersListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as FiltersListResponse;
};

/**
 * @summary Returns a list of Filters metadata
 */
export type FiltersMetadataResponse200 = {
  data: FiltersMetadata;
  status: 200;
};

export type FiltersMetadataResponseComposite = FiltersMetadataResponse200;

export type FiltersMetadataResponse = FiltersMetadataResponseComposite & {
  headers: Headers;
};

export const getV1FiltersMetadataUrl = (params?: FiltersMetadataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/filters/metadata?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/filters/metadata`;
};

export const FiltersMetadata = async (
  params?: FiltersMetadataParams,
  options?: RequestInit,
): Promise<FiltersMetadataResponse> => {
  const res = await fetch(getV1FiltersMetadataUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: FiltersMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as FiltersMetadataResponse;
};

/**
 * @summary Creates a Tag filter
 */
export type TagFiltersCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type TagFiltersCreateResponseComposite = TagFiltersCreateResponse201;

export type TagFiltersCreateResponse = TagFiltersCreateResponseComposite & {
  headers: Headers;
};

export const getV1TagFiltersCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/filters/tag`;
};

export const TagFiltersCreate = async (
  TagFilterBody: TagFilterBody,
  options?: RequestInit,
): Promise<TagFiltersCreateResponse> => {
  const res = await fetch(getV1TagFiltersCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TagFilterBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TagFiltersCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TagFiltersCreateResponse;
};

/**
 * @summary Delete the specified Filter object
 */
export type TagFilterUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type TagFilterUidDeleteResponseComposite =
  TagFilterUidDeleteResponse204;

export type TagFilterUidDeleteResponse =
  TagFilterUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1TagFilterUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const TagFilterUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<TagFilterUidDeleteResponse> => {
  const res = await fetch(getV1TagFilterUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TagFilterUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TagFilterUidDeleteResponse;
};

/**
 * @summary Returns the specified Filter object
 */
export type TagFilterUidGetResponse200 = {
  data: TagFilterSummary;
  status: 200;
};

export type TagFilterUidGetResponseComposite = TagFilterUidGetResponse200;

export type TagFilterUidGetResponse = TagFilterUidGetResponseComposite & {
  headers: Headers;
};

export const getV1TagFilterUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const TagFilterUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<TagFilterUidGetResponse> => {
  const res = await fetch(getV1TagFilterUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TagFilterUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TagFilterUidGetResponse;
};

/**
 * @summary Updates a Tag filter
 */
export type TagFilterUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type TagFilterUidUpdateResponseComposite =
  TagFilterUidUpdateResponse204;

export type TagFilterUidUpdateResponse =
  TagFilterUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1TagFilterUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/filters/tag/${uid}`;
};

export const TagFilterUidUpdate = async (
  uid: string,
  TagFilterBody: TagFilterBody,
  options?: RequestInit,
): Promise<TagFilterUidUpdateResponse> => {
  const res = await fetch(getV1TagFilterUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(TagFilterBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TagFilterUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TagFilterUidUpdateResponse;
};
