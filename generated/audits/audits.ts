/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  Audit,
  AuditMsgUpdate,
  AuditSysMsg,
  Audits,
  AuditsListParams,
} from ".././schemas";

/**
 * @summary Retrieves the list of audit logs
 */
export type AuditsListResponse200 = {
  data: Audits;
  status: 200;
};

export type AuditsListResponseComposite = AuditsListResponse200;

export type AuditsListResponse = AuditsListResponseComposite & {
  headers: Headers;
};

export const getV1AuditsListUrl = (params?: AuditsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/audits?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/audits`;
};

export const AuditsList = async (
  params?: AuditsListParams,
  options?: RequestInit,
): Promise<AuditsListResponse> => {
  const res = await fetch(getV1AuditsListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuditsListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuditsListResponse;
};

/**
 * @summary Returns the specified audit log
 */
export type AuditsUidGetResponse200 = {
  data: Audit;
  status: 200;
};

export type AuditsUidGetResponseComposite = AuditsUidGetResponse200;

export type AuditsUidGetResponse = AuditsUidGetResponseComposite & {
  headers: Headers;
};

export const getV1AuditsUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/audits/${uid}`;
};

export const AuditsUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<AuditsUidGetResponse> => {
  const res = await fetch(getV1AuditsUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuditsUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuditsUidGetResponse;
};

/**
 * @summary Returns the specified system audit message
 */
export type AuditsUidGetSysMsgResponse200 = {
  data: AuditSysMsg;
  status: 200;
};

export type AuditsUidGetSysMsgResponseComposite =
  AuditsUidGetSysMsgResponse200;

export type AuditsUidGetSysMsgResponse =
  AuditsUidGetSysMsgResponseComposite & {
    headers: Headers;
  };

export const getV1AuditsUidGetSysMsgUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/audits/${uid}/sysMsg`;
};

export const AuditsUidGetSysMsg = async (
  uid: string,
  options?: RequestInit,
): Promise<AuditsUidGetSysMsgResponse> => {
  const res = await fetch(getV1AuditsUidGetSysMsgUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuditsUidGetSysMsgResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuditsUidGetSysMsgResponse;
};

/**
 * @summary Updates the specified user message for the specified audit
 */
export type AuditsUidMsgUpdateResponse204 = {
  data: void;
  status: 204;
};

export type AuditsUidMsgUpdateResponseComposite =
  AuditsUidMsgUpdateResponse204;

export type AuditsUidMsgUpdateResponse =
  AuditsUidMsgUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1AuditsUidMsgUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/audits/${uid}/userMsg`;
};

export const AuditsUidMsgUpdate = async (
  uid: string,
  AuditMsgUpdate: AuditMsgUpdate,
  options?: RequestInit,
): Promise<AuditsUidMsgUpdateResponse> => {
  const res = await fetch(getV1AuditsUidMsgUpdateUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AuditMsgUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AuditsUidMsgUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AuditsUidMsgUpdateResponse;
};
