/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AWSVolumeTypes,
  AmiTypes,
  AsyncOperationIdEntity,
  AwsAccountCredentials,
  AwsAccountSts,
  AwsAvailabilityZones,
  AwsCloudAccount,
  AwsCloudCostSpec,
  AwsCloudCostSummary,
  AwsFindImageRequest,
  AwsImage,
  AwsInstanceTypes,
  AwsKeyPairs,
  AwsKmsKeyEntity,
  AwsKmsKeys,
  AwsPolicies,
  AwsPolicyArnsSpec,
  AwsPropertiesValidateSpec,
  AwsRegions,
  AwsS3BucketCredentials,
  AwsSecretSpecInputEntity,
  AwsSecurityGroups,
  AwsStorageTypes,
  AwsVolumeSize,
  AwsVpcs,
  AzValidateEntity,
  AzureCloudAccount,
  AzureGroups,
  AzureInstanceTypes,
  AzurePrivateDnsZones,
  AzureRegions,
  AzureResourceGroupList,
  AzureStorageAccountEntity,
  AzureStorageAccounts,
  AzureStorageContainers,
  AzureStorageTypes,
  AzureSubscriptionList,
  AzureVhdUrlEntity,
  AzureVirtualNetworkList,
  AzureZoneEntity,
  CloudAccountUidEntity,
  CloudCost,
  CustomCloudMetaEntity,
  CustomCloudRequestEntity,
  CustomCloudTypeCloudAccountKeys,
  CustomCloudTypeContentResponse,
  CustomCloudTypes,
  EksPropertiesValidateSpec,
  GcpAccountNameValidateSpec,
  GcpCloudAccountValidateEntity,
  GcpImageUrlEntity,
  GcpInstanceTypes,
  GcpNetworks,
  GcpProjects,
  GcpPropertiesValidateSpec,
  GcpRegions,
  GcpStorageTypes,
  GcpZones,
  MaasCloudAccount,
  MaasDomains,
  MaasPools,
  MaasSubnets,
  MaasTags,
  MaasZones,
  OpenStackAzs,
  OpenStackCloudAccount,
  OpenStackFlavors,
  OpenStackKeypairs,
  OpenStackNetworks,
  OpenStackProjects,
  OpenStackRegions,
  Uid,
  V1AwsAccountStsGetParams,
  V1AwsClusterNameValidateParams,
  V1AwsIamPoliciesParams,
  V1AwsInstanceTypesParams,
  V1AwsKeyPairValidateParams,
  V1AwsKeyPairsParams,
  V1AwsKmsKeyGetParams,
  V1AwsKmsKeyValidateParams,
  V1AwsKmsKeysParams,
  V1AwsPolicyArnsValidateParams,
  V1AwsRegionsParams,
  V1AwsSecurityGroupsParams,
  V1AwsVolumeSizeGetParams,
  V1AwsVolumeTypesGetParams,
  V1AwsVpcsParams,
  V1AwsZonesParams,
  V1AzureClusterNameValidateParams,
  V1AzureGroupsParams,
  V1AzureInstanceTypesParams,
  V1AzurePrivateDnsZonesParams,
  V1AzureRegionsParams,
  V1AzureResourceGroupListParams,
  V1AzureStorageAccountTypesParams,
  V1AzureStorageAccountsParams,
  V1AzureStorageContainersParams,
  V1AzureSubscriptionListParams,
  V1AzureVirtualNetworkListParams,
  V1AzureZonesParams,
  V1CloudComputeRateParams,
  V1CloudStorageRateParams,
  V1CloudWatchConfig,
  V1CustomCloudTypeBootstrapUpdateBody,
  V1GcpAvailabilityZonesParams,
  V1GcpContainerImageValidateParams,
  V1GcpInstanceTypesParams,
  V1GcpNetworksParams,
  V1GcpProjectsParams,
  V1GcpRegionsParams,
  V1GcpZonesParams,
  V1MaasDomainsGetParams,
  V1MaasPoolsGetParams,
  V1MaasSubnetsGetParams,
  V1MaasTagsGetParams,
  V1MaasZonesGetParams,
  V1OpenStackAzsGetParams,
  V1OpenStackFlavorsGetParams,
  V1OpenStackKeypairsGetParams,
  V1OpenStackNetworksGetParams,
  V1OpenStackProjectsGetParams,
  V1OpenStackRegionsGetParams,
  V1VsphereCloudAccountBody,
  V1VsphereComputeClusterResourcesParams,
  V1VsphereDatacentersParams,
  VsphereComputeClusterResources,
  VsphereDatacenters,
  VsphereEnv,
} from ".././schemas";

/**
 * @summary Retrieves the Aws secret credentials
 */
export type v1AwsAccountSecretCredentialsResponse200 = {
  data: AwsAccountCredentials;
  status: 200;
};

export type v1AwsAccountSecretCredentialsResponseComposite =
  v1AwsAccountSecretCredentialsResponse200;

export type v1AwsAccountSecretCredentialsResponse =
  v1AwsAccountSecretCredentialsResponseComposite & {
    headers: Headers;
  };

export const getV1AwsAccountSecretCredentialsUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/account/secret/credentials`;
};

export const v1AwsAccountSecretCredentials = async (
  awsSecretSpecInputEntity: AwsSecretSpecInputEntity,
  options?: RequestInit,
): Promise<v1AwsAccountSecretCredentialsResponse> => {
  const res = await fetch(getV1AwsAccountSecretCredentialsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsSecretSpecInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAccountSecretCredentialsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAccountSecretCredentialsResponse;
};

/**
 * @summary Retrieves AWS external id and account id
 */
export type v1AwsAccountStsGetResponse200 = {
  data: AwsAccountSts;
  status: 200;
};

export type v1AwsAccountStsGetResponseComposite = v1AwsAccountStsGetResponse200;

export type v1AwsAccountStsGetResponse = v1AwsAccountStsGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsAccountStsGetUrl = (params?: V1AwsAccountStsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/account/sts?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/account/sts`;
};

export const v1AwsAccountStsGet = async (
  params?: V1AwsAccountStsGetParams,
  options?: RequestInit,
): Promise<v1AwsAccountStsGetResponse> => {
  const res = await fetch(getV1AwsAccountStsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAccountStsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAccountStsGetResponse;
};

/**
 * @summary Validate the specified AWS account credentials
 */
export type v1AwsAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AwsAccountValidateResponseComposite =
  v1AwsAccountValidateResponse204;

export type v1AwsAccountValidateResponse =
  v1AwsAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/account/validate`;
};

export const v1AwsAccountValidate = async (
  awsCloudAccount: AwsCloudAccount,
  options?: RequestInit,
): Promise<v1AwsAccountValidateResponse> => {
  const res = await fetch(getV1AwsAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAccountValidateResponse;
};

/**
 * @summary Retrieves a list of AWS AMI types
 */
export type v1AwsAmiTypesResponse200 = {
  data: AmiTypes;
  status: 200;
};

export type v1AwsAmiTypesResponseComposite = v1AwsAmiTypesResponse200;

export type v1AwsAmiTypesResponse = v1AwsAmiTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsAmiTypesUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/amiTypes`;
};

export const v1AwsAmiTypes = async (
  options?: RequestInit,
): Promise<v1AwsAmiTypesResponse> => {
  const res = await fetch(getV1AwsAmiTypesUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsAmiTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsAmiTypesResponse;
};

/**
 * Validates aws cloud watch credentials
 * @summary validates aws cloud watch credentials
 */
export type v1CloudsAwsCloudWatchValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1CloudsAwsCloudWatchValidateResponseComposite =
  v1CloudsAwsCloudWatchValidateResponse204;

export type v1CloudsAwsCloudWatchValidateResponse =
  v1CloudsAwsCloudWatchValidateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudsAwsCloudWatchValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/cloudwatch/validate`;
};

export const v1CloudsAwsCloudWatchValidate = async (
  v1CloudWatchConfig: V1CloudWatchConfig,
  options?: RequestInit,
): Promise<v1CloudsAwsCloudWatchValidateResponse> => {
  const res = await fetch(getV1CloudsAwsCloudWatchValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1CloudWatchConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudsAwsCloudWatchValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudsAwsCloudWatchValidateResponse;
};

/**
 * @summary Retrieves AWS cloud account usage cost from cost explorer.
 */
export type awsCloudCostResponse200 = {
  data: AwsCloudCostSummary;
  status: 200;
};

export type awsCloudCostResponseComposite = awsCloudCostResponse200;

export type awsCloudCostResponse = awsCloudCostResponseComposite & {
  headers: Headers;
};

export const getAwsCloudCostUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/cost`;
};

export const awsCloudCost = async (
  awsCloudCostSpec: AwsCloudCostSpec,
  options?: RequestInit,
): Promise<awsCloudCostResponse> => {
  const res = await fetch(getAwsCloudCostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsCloudCostSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: awsCloudCostResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as awsCloudCostResponse;
};

/**
 * Get AWS Volume Size
 * @summary Get AWS Volume Size
 */
export type v1AwsVolumeSizeGetResponse200 = {
  data: AwsVolumeSize;
  status: 200;
};

export type v1AwsVolumeSizeGetResponseComposite = v1AwsVolumeSizeGetResponse200;

export type v1AwsVolumeSizeGetResponse = v1AwsVolumeSizeGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsVolumeSizeGetUrl = (
  imageId: string,
  params: V1AwsVolumeSizeGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/imageIds/${imageId}/volumeSize?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/imageIds/${imageId}/volumeSize`;
};

export const v1AwsVolumeSizeGet = async (
  imageId: string,
  params: V1AwsVolumeSizeGetParams,
  options?: RequestInit,
): Promise<v1AwsVolumeSizeGetResponse> => {
  const res = await fetch(getV1AwsVolumeSizeGetUrl(imageId, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsVolumeSizeGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsVolumeSizeGetResponse;
};

/**
 * @summary Retrieves a list of AWS policies for the specified account
 */
export type v1AwsIamPoliciesResponse200 = {
  data: AwsPolicies;
  status: 200;
};

export type v1AwsIamPoliciesResponseComposite = v1AwsIamPoliciesResponse200;

export type v1AwsIamPoliciesResponse = v1AwsIamPoliciesResponseComposite & {
  headers: Headers;
};

export const getV1AwsIamPoliciesUrl = (params?: V1AwsIamPoliciesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/policies?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/policies`;
};

export const v1AwsIamPolicies = async (
  awsCloudAccount: AwsCloudAccount,
  params?: V1AwsIamPoliciesParams,
  options?: RequestInit,
): Promise<v1AwsIamPoliciesResponse> => {
  const res = await fetch(getV1AwsIamPoliciesUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsIamPoliciesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsIamPoliciesResponse;
};

/**
 * @summary Validate the aws policy arns validate
 */
export type v1AwsPolicyArnsValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AwsPolicyArnsValidateResponseComposite =
  v1AwsPolicyArnsValidateResponse204;

export type v1AwsPolicyArnsValidateResponse =
  v1AwsPolicyArnsValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsPolicyArnsValidateUrl = (
  params?: V1AwsPolicyArnsValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/policyArns/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/policyArns/validate`;
};

export const v1AwsPolicyArnsValidate = async (
  awsPolicyArnsSpec: AwsPolicyArnsSpec,
  params?: V1AwsPolicyArnsValidateParams,
  options?: RequestInit,
): Promise<v1AwsPolicyArnsValidateResponse> => {
  const res = await fetch(getV1AwsPolicyArnsValidateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsPolicyArnsSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsPolicyArnsValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsPolicyArnsValidateResponse;
};

/**
 * @summary Validate AWS properties
 */
export type v1AwsPropertiesValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AwsPropertiesValidateResponseComposite =
  v1AwsPropertiesValidateResponse204;

export type v1AwsPropertiesValidateResponse =
  v1AwsPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/properties/validate`;
};

export const v1AwsPropertiesValidate = async (
  awsPropertiesValidateSpec: AwsPropertiesValidateSpec,
  options?: RequestInit,
): Promise<v1AwsPropertiesValidateResponse> => {
  const res = await fetch(getV1AwsPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsPropertiesValidateResponse;
};

/**
 * @summary Retrieves a list of AWS regions for the specified account
 */
export type v1AwsRegionsResponse200 = {
  data: AwsRegions;
  status: 200;
};

export type v1AwsRegionsResponseComposite = v1AwsRegionsResponse200;

export type v1AwsRegionsResponse = v1AwsRegionsResponseComposite & {
  headers: Headers;
};

export const getV1AwsRegionsUrl = (params: V1AwsRegionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions`;
};

export const v1AwsRegions = async (
  params: V1AwsRegionsParams,
  options?: RequestInit,
): Promise<v1AwsRegionsResponse> => {
  const res = await fetch(getV1AwsRegionsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsRegionsResponse;
};

/**
 * @summary Retrieves a list of AWS availability zones for the specified region
 */
export type v1AwsZonesResponse200 = {
  data: AwsAvailabilityZones;
  status: 200;
};

export type v1AwsZonesResponseComposite = v1AwsZonesResponse200;

export type v1AwsZonesResponse = v1AwsZonesResponseComposite & {
  headers: Headers;
};

export const getV1AwsZonesUrl = (region: string, params: V1AwsZonesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/availabilityzones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/availabilityzones`;
};

export const v1AwsZones = async (
  region: string,
  params: V1AwsZonesParams,
  options?: RequestInit,
): Promise<v1AwsZonesResponse> => {
  const res = await fetch(getV1AwsZonesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsZonesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsZonesResponse;
};

/**
 * @summary Copies the specified image from one region to another region
 */
export type v1AwsCopyImageFromDefaultRegionResponse200 = {
  data: AsyncOperationIdEntity;
  status: 200;
};

export type v1AwsCopyImageFromDefaultRegionResponseComposite =
  v1AwsCopyImageFromDefaultRegionResponse200;

export type v1AwsCopyImageFromDefaultRegionResponse =
  v1AwsCopyImageFromDefaultRegionResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCopyImageFromDefaultRegionUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/copydefaultimages`;
};

export const v1AwsCopyImageFromDefaultRegion = async (
  region: string,
  awsFindImageRequest: AwsFindImageRequest,
  options?: RequestInit,
): Promise<v1AwsCopyImageFromDefaultRegionResponse> => {
  const res = await fetch(getV1AwsCopyImageFromDefaultRegionUrl(region), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsFindImageRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsCopyImageFromDefaultRegionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsCopyImageFromDefaultRegionResponse;
};

/**
 * Returns no contents if aws cluster name is valid else error.
 * @summary Check if Aws cluster name is valid
 */
export type v1AwsClusterNameValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AwsClusterNameValidateResponseComposite =
  v1AwsClusterNameValidateResponse204;

export type v1AwsClusterNameValidateResponse =
  v1AwsClusterNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsClusterNameValidateUrl = (
  region: string,
  params: V1AwsClusterNameValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/eksClusters/name/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/eksClusters/name/validate`;
};

export const v1AwsClusterNameValidate = async (
  region: string,
  params: V1AwsClusterNameValidateParams,
  options?: RequestInit,
): Promise<v1AwsClusterNameValidateResponse> => {
  const res = await fetch(getV1AwsClusterNameValidateUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsClusterNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsClusterNameValidateResponse;
};

/**
 * @summary Returns AWS image for the specified AMI name
 */
export type v1AwsFindImageResponse200 = {
  data: AwsImage;
  status: 200;
};

export type v1AwsFindImageResponseComposite = v1AwsFindImageResponse200;

export type v1AwsFindImageResponse = v1AwsFindImageResponseComposite & {
  headers: Headers;
};

export const getV1AwsFindImageUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/images`;
};

export const v1AwsFindImage = async (
  region: string,
  awsFindImageRequest: AwsFindImageRequest,
  options?: RequestInit,
): Promise<v1AwsFindImageResponse> => {
  const res = await fetch(getV1AwsFindImageUrl(region), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsFindImageRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsFindImageResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsFindImageResponse;
};

/**
 * @summary Retrieves a list of AWS instance types
 */
export type v1AwsInstanceTypesResponse200 = {
  data: AwsInstanceTypes;
  status: 200;
};

export type v1AwsInstanceTypesResponseComposite = v1AwsInstanceTypesResponse200;

export type v1AwsInstanceTypesResponse = v1AwsInstanceTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsInstanceTypesUrl = (
  region: string,
  params?: V1AwsInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/instancetypes`;
};

export const v1AwsInstanceTypes = async (
  region: string,
  params?: V1AwsInstanceTypesParams,
  options?: RequestInit,
): Promise<v1AwsInstanceTypesResponse> => {
  const res = await fetch(getV1AwsInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsInstanceTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of AWS keypairs
 */
export type v1AwsKeyPairsResponse200 = {
  data: AwsKeyPairs;
  status: 200;
};

export type v1AwsKeyPairsResponseComposite = v1AwsKeyPairsResponse200;

export type v1AwsKeyPairsResponse = v1AwsKeyPairsResponseComposite & {
  headers: Headers;
};

export const getV1AwsKeyPairsUrl = (
  region: string,
  params: V1AwsKeyPairsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs`;
};

export const v1AwsKeyPairs = async (
  region: string,
  params: V1AwsKeyPairsParams,
  options?: RequestInit,
): Promise<v1AwsKeyPairsResponse> => {
  const res = await fetch(getV1AwsKeyPairsUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKeyPairsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKeyPairsResponse;
};

/**
 * @summary Validate the specified AWS keypair
 */
export type v1AwsKeyPairValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AwsKeyPairValidateResponseComposite =
  v1AwsKeyPairValidateResponse204;

export type v1AwsKeyPairValidateResponse =
  v1AwsKeyPairValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsKeyPairValidateUrl = (
  region: string,
  keypair: string,
  params: V1AwsKeyPairValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs/${keypair}/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs/${keypair}/validate`;
};

export const v1AwsKeyPairValidate = async (
  region: string,
  keypair: string,
  params: V1AwsKeyPairValidateParams,
  options?: RequestInit,
): Promise<v1AwsKeyPairValidateResponse> => {
  const res = await fetch(getV1AwsKeyPairValidateUrl(region, keypair, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKeyPairValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKeyPairValidateResponse;
};

/**
 * @summary Get AWS KMS key by Id
 */
export type v1AwsKmsKeyGetResponse200 = {
  data: AwsKmsKeyEntity;
  status: 200;
};

export type v1AwsKmsKeyGetResponseComposite = v1AwsKmsKeyGetResponse200;

export type v1AwsKmsKeyGetResponse = v1AwsKmsKeyGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsKmsKeyGetUrl = (
  region: string,
  keyId: string,
  params: V1AwsKmsKeyGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kms/${keyId}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kms/${keyId}`;
};

export const v1AwsKmsKeyGet = async (
  region: string,
  keyId: string,
  params: V1AwsKmsKeyGetParams,
  options?: RequestInit,
): Promise<v1AwsKmsKeyGetResponse> => {
  const res = await fetch(getV1AwsKmsKeyGetUrl(region, keyId, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKmsKeyGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKmsKeyGetResponse;
};

/**
 * @summary Retrieves a list of AWS KMS keys for the specified account
 */
export type v1AwsKmsKeysResponse200 = {
  data: AwsKmsKeys;
  status: 200;
};

export type v1AwsKmsKeysResponseComposite = v1AwsKmsKeysResponse200;

export type v1AwsKmsKeysResponse = v1AwsKmsKeysResponseComposite & {
  headers: Headers;
};

export const getV1AwsKmsKeysUrl = (
  region: string,
  params: V1AwsKmsKeysParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys`;
};

export const v1AwsKmsKeys = async (
  region: string,
  params: V1AwsKmsKeysParams,
  options?: RequestInit,
): Promise<v1AwsKmsKeysResponse> => {
  const res = await fetch(getV1AwsKmsKeysUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKmsKeysResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKmsKeysResponse;
};

/**
 * @summary Validate an Aws KMS key for the specified account
 */
export type v1AwsKmsKeyValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AwsKmsKeyValidateResponseComposite =
  v1AwsKmsKeyValidateResponse204;

export type v1AwsKmsKeyValidateResponse =
  v1AwsKmsKeyValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsKmsKeyValidateUrl = (
  region: string,
  params: V1AwsKmsKeyValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys/validate`;
};

export const v1AwsKmsKeyValidate = async (
  region: string,
  params: V1AwsKmsKeyValidateParams,
  options?: RequestInit,
): Promise<v1AwsKmsKeyValidateResponse> => {
  const res = await fetch(getV1AwsKmsKeyValidateUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsKmsKeyValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsKmsKeyValidateResponse;
};

/**
 * @summary Retrieves a list of AWS storage types
 */
export type v1AwsStorageTypesResponse200 = {
  data: AwsStorageTypes;
  status: 200;
};

export type v1AwsStorageTypesResponseComposite = v1AwsStorageTypesResponse200;

export type v1AwsStorageTypesResponse = v1AwsStorageTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/storagetypes`;
};

export const v1AwsStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<v1AwsStorageTypesResponse> => {
  const res = await fetch(getV1AwsStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsStorageTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsStorageTypesResponse;
};

/**
 * @summary Retrieves a list of VPCs for the specified account
 */
export type v1AwsVpcsResponse200 = {
  data: AwsVpcs;
  status: 200;
};

export type v1AwsVpcsResponseComposite = v1AwsVpcsResponse200;

export type v1AwsVpcsResponse = v1AwsVpcsResponseComposite & {
  headers: Headers;
};

export const getV1AwsVpcsUrl = (region: string, params: V1AwsVpcsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/vpcs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/vpcs`;
};

export const v1AwsVpcs = async (
  region: string,
  params: V1AwsVpcsParams,
  options?: RequestInit,
): Promise<v1AwsVpcsResponse> => {
  const res = await fetch(getV1AwsVpcsUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsVpcsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsVpcsResponse;
};

/**
 * @summary Validate the AWS S3 bucket
 */
export type v1AwsS3ValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AwsS3ValidateResponseComposite = v1AwsS3ValidateResponse204;

export type v1AwsS3ValidateResponse = v1AwsS3ValidateResponseComposite & {
  headers: Headers;
};

export const getV1AwsS3ValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/s3/validate`;
};

export const v1AwsS3Validate = async (
  awsS3BucketCredentials: AwsS3BucketCredentials,
  options?: RequestInit,
): Promise<v1AwsS3ValidateResponse> => {
  const res = await fetch(getV1AwsS3ValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(awsS3BucketCredentials),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsS3ValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsS3ValidateResponse;
};

/**
 * @summary Retrieves a list of AWS security groups for the specified account
 */
export type v1AwsSecurityGroupsResponse200 = {
  data: AwsSecurityGroups;
  status: 200;
};

export type v1AwsSecurityGroupsResponseComposite =
  v1AwsSecurityGroupsResponse200;

export type v1AwsSecurityGroupsResponse =
  v1AwsSecurityGroupsResponseComposite & {
    headers: Headers;
  };

export const getV1AwsSecurityGroupsUrl = (
  params: V1AwsSecurityGroupsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/securitygroups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/securitygroups`;
};

export const v1AwsSecurityGroups = async (
  params: V1AwsSecurityGroupsParams,
  options?: RequestInit,
): Promise<v1AwsSecurityGroupsResponse> => {
  const res = await fetch(getV1AwsSecurityGroupsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsSecurityGroupsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsSecurityGroupsResponse;
};

/**
 * List all AWS Volume Types
 * @summary Get all AWS Volume Types
 */
export type v1AwsVolumeTypesGetResponse200 = {
  data: AWSVolumeTypes;
  status: 200;
};

export type v1AwsVolumeTypesGetResponseComposite =
  v1AwsVolumeTypesGetResponse200;

export type v1AwsVolumeTypesGetResponse =
  v1AwsVolumeTypesGetResponseComposite & {
    headers: Headers;
  };

export const getV1AwsVolumeTypesGetUrl = (
  params: V1AwsVolumeTypesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/volumeTypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/volumeTypes`;
};

export const v1AwsVolumeTypesGet = async (
  params: V1AwsVolumeTypesGetParams,
  options?: RequestInit,
): Promise<v1AwsVolumeTypesGetResponse> => {
  const res = await fetch(getV1AwsVolumeTypesGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AwsVolumeTypesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AwsVolumeTypesGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Azure account is valid
 */
export type v1AzureAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AzureAccountValidateResponseComposite =
  v1AzureAccountValidateResponse204;

export type v1AzureAccountValidateResponse =
  v1AzureAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AzureAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/azure/account/validate`;
};

export const v1AzureAccountValidate = async (
  azureCloudAccount: AzureCloudAccount,
  options?: RequestInit,
): Promise<v1AzureAccountValidateResponse> => {
  const res = await fetch(getV1AzureAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(azureCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureAccountValidateResponse;
};

/**
 * @summary Retrieves a list of Azure groups
 */
export type v1AzureGroupsResponse200 = {
  data: AzureGroups;
  status: 200;
};

export type v1AzureGroupsResponseComposite = v1AzureGroupsResponse200;

export type v1AzureGroupsResponse = v1AzureGroupsResponseComposite & {
  headers: Headers;
};

export const getV1AzureGroupsUrl = (params?: V1AzureGroupsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/groups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/groups`;
};

export const v1AzureGroups = async (
  params?: V1AzureGroupsParams,
  options?: RequestInit,
): Promise<v1AzureGroupsResponse> => {
  const res = await fetch(getV1AzureGroupsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureGroupsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureGroupsResponse;
};

/**
 * @summary Retrieves a list of Azure regions
 */
export type v1AzureRegionsResponse200 = {
  data: AzureRegions;
  status: 200;
};

export type v1AzureRegionsResponseComposite = v1AzureRegionsResponse200;

export type v1AzureRegionsResponse = v1AzureRegionsResponseComposite & {
  headers: Headers;
};

export const getV1AzureRegionsUrl = (params?: V1AzureRegionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions`;
};

export const v1AzureRegions = async (
  params?: V1AzureRegionsParams,
  options?: RequestInit,
): Promise<v1AzureRegionsResponse> => {
  const res = await fetch(getV1AzureRegionsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureRegionsResponse;
};

/**
 * @summary Retrieves a list of Azure instance types
 */
export type v1AzureInstanceTypesResponse200 = {
  data: AzureInstanceTypes;
  status: 200;
};

export type v1AzureInstanceTypesResponseComposite =
  v1AzureInstanceTypesResponse200;

export type v1AzureInstanceTypesResponse =
  v1AzureInstanceTypesResponseComposite & {
    headers: Headers;
  };

export const getV1AzureInstanceTypesUrl = (
  region: string,
  params?: V1AzureInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/instancetypes`;
};

export const v1AzureInstanceTypes = async (
  region: string,
  params?: V1AzureInstanceTypesParams,
  options?: RequestInit,
): Promise<v1AzureInstanceTypesResponse> => {
  const res = await fetch(getV1AzureInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureInstanceTypesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of Azure storage types
 */
export type v1AzureStorageTypesResponse200 = {
  data: AzureStorageTypes;
  status: 200;
};

export type v1AzureStorageTypesResponseComposite =
  v1AzureStorageTypesResponse200;

export type v1AzureStorageTypesResponse =
  v1AzureStorageTypesResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/storagetypes`;
};

export const v1AzureStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<v1AzureStorageTypesResponse> => {
  const res = await fetch(getV1AzureStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageTypesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageTypesResponse;
};

/**
 * Returns no contents if Azure cluster name is valid else error.
 * @summary Check if Azure cluster name is valid
 */
export type v1AzureClusterNameValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1AzureClusterNameValidateResponseComposite =
  v1AzureClusterNameValidateResponse204;

export type v1AzureClusterNameValidateResponse =
  v1AzureClusterNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AzureClusterNameValidateUrl = (
  region: string,
  subscriptionId: string,
  params: V1AzureClusterNameValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/aksClusters/name/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/aksClusters/name/validate`;
};

export const v1AzureClusterNameValidate = async (
  region: string,
  subscriptionId: string,
  params: V1AzureClusterNameValidateParams,
  options?: RequestInit,
): Promise<v1AzureClusterNameValidateResponse> => {
  const res = await fetch(
    getV1AzureClusterNameValidateUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureClusterNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureClusterNameValidateResponse;
};

/**
 * @summary Retrieves a list of Azure virtual network list for the sepcified account
 */
export type v1AzureVirtualNetworkListResponse200 = {
  data: AzureVirtualNetworkList;
  status: 200;
};

export type v1AzureVirtualNetworkListResponseComposite =
  v1AzureVirtualNetworkListResponse200;

export type v1AzureVirtualNetworkListResponse =
  v1AzureVirtualNetworkListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureVirtualNetworkListUrl = (
  region: string,
  subscriptionId: string,
  params: V1AzureVirtualNetworkListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/networks`;
};

export const v1AzureVirtualNetworkList = async (
  region: string,
  subscriptionId: string,
  params: V1AzureVirtualNetworkListParams,
  options?: RequestInit,
): Promise<v1AzureVirtualNetworkListResponse> => {
  const res = await fetch(
    getV1AzureVirtualNetworkListUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureVirtualNetworkListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureVirtualNetworkListResponse;
};

/**
 * @summary Retrieves a list of Azure resource group for the specified account
 */
export type v1AzureResourceGroupListResponse200 = {
  data: AzureResourceGroupList;
  status: 200;
};

export type v1AzureResourceGroupListResponseComposite =
  v1AzureResourceGroupListResponse200;

export type v1AzureResourceGroupListResponse =
  v1AzureResourceGroupListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureResourceGroupListUrl = (
  region: string,
  subscriptionId: string,
  params: V1AzureResourceGroupListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/resourceGroups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/resourceGroups`;
};

export const v1AzureResourceGroupList = async (
  region: string,
  subscriptionId: string,
  params: V1AzureResourceGroupListParams,
  options?: RequestInit,
): Promise<v1AzureResourceGroupListResponse> => {
  const res = await fetch(
    getV1AzureResourceGroupListUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureResourceGroupListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureResourceGroupListResponse;
};

/**
 * @summary Retrieves a list of Azure zones for the specified region
 */
export type v1AzureZonesResponse200 = {
  data: AzureZoneEntity;
  status: 200;
};

export type v1AzureZonesResponseComposite = v1AzureZonesResponse200;

export type v1AzureZonesResponse = v1AzureZonesResponseComposite & {
  headers: Headers;
};

export const getV1AzureZonesUrl = (
  region: string,
  params?: V1AzureZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/zones`;
};

export const v1AzureZones = async (
  region: string,
  params?: V1AzureZonesParams,
  options?: RequestInit,
): Promise<v1AzureZonesResponse> => {
  const res = await fetch(getV1AzureZonesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureZonesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureZonesResponse;
};

/**
 * Returns Azure private DNS zones
 * @summary Get Azure private DNS zones for the given resource group
 */
export type v1AzurePrivateDnsZonesResponse200 = {
  data: AzurePrivateDnsZones;
  status: 200;
};

export type v1AzurePrivateDnsZonesResponseComposite =
  v1AzurePrivateDnsZonesResponse200;

export type v1AzurePrivateDnsZonesResponse =
  v1AzurePrivateDnsZonesResponseComposite & {
    headers: Headers;
  };

export const getV1AzurePrivateDnsZonesUrl = (
  resourceGroup: string,
  params: V1AzurePrivateDnsZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/privateDnsZones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/privateDnsZones`;
};

export const v1AzurePrivateDnsZones = async (
  resourceGroup: string,
  params: V1AzurePrivateDnsZonesParams,
  options?: RequestInit,
): Promise<v1AzurePrivateDnsZonesResponse> => {
  const res = await fetch(getV1AzurePrivateDnsZonesUrl(resourceGroup, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzurePrivateDnsZonesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzurePrivateDnsZonesResponse;
};

/**
 * Returns Azure storage accounts.
 * @summary Get Azure storage accounts
 */
export type v1AzureStorageAccountsResponse200 = {
  data: AzureStorageAccounts;
  status: 200;
};

export type v1AzureStorageAccountsResponseComposite =
  v1AzureStorageAccountsResponse200;

export type v1AzureStorageAccountsResponse =
  v1AzureStorageAccountsResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageAccountsUrl = (
  resourceGroup: string,
  params: V1AzureStorageAccountsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts`;
};

export const v1AzureStorageAccounts = async (
  resourceGroup: string,
  params: V1AzureStorageAccountsParams,
  options?: RequestInit,
): Promise<v1AzureStorageAccountsResponse> => {
  const res = await fetch(getV1AzureStorageAccountsUrl(resourceGroup, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageAccountsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageAccountsResponse;
};

/**
 * Returns Azure storage containers for the given account.
 * @summary Get Azure storage containers
 */
export type v1AzureStorageContainersResponse200 = {
  data: AzureStorageContainers;
  status: 200;
};

export type v1AzureStorageContainersResponseComposite =
  v1AzureStorageContainersResponse200;

export type v1AzureStorageContainersResponse =
  v1AzureStorageContainersResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageContainersUrl = (
  resourceGroup: string,
  storageAccountName: string,
  params: V1AzureStorageContainersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts/${storageAccountName}/containers?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts/${storageAccountName}/containers`;
};

export const v1AzureStorageContainers = async (
  resourceGroup: string,
  storageAccountName: string,
  params: V1AzureStorageContainersParams,
  options?: RequestInit,
): Promise<v1AzureStorageContainersResponse> => {
  const res = await fetch(
    getV1AzureStorageContainersUrl(resourceGroup, storageAccountName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageContainersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageContainersResponse;
};

/**
 * Returns Azure storage account types.
 * @summary Get Azure storage account types
 */
export type v1AzureStorageAccountTypesResponse200 = {
  data: AzureStorageAccountEntity;
  status: 200;
};

export type v1AzureStorageAccountTypesResponseComposite =
  v1AzureStorageAccountTypesResponse200;

export type v1AzureStorageAccountTypesResponse =
  v1AzureStorageAccountTypesResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageAccountTypesUrl = (
  params?: V1AzureStorageAccountTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/storageaccounttypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/storageaccounttypes`;
};

export const v1AzureStorageAccountTypes = async (
  params?: V1AzureStorageAccountTypesParams,
  options?: RequestInit,
): Promise<v1AzureStorageAccountTypesResponse> => {
  const res = await fetch(getV1AzureStorageAccountTypesUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureStorageAccountTypesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureStorageAccountTypesResponse;
};

/**
 * Returns list of Azure subscription list.
 * @summary Retrieves a list of Azure subscription list for the specified account
 */
export type v1AzureSubscriptionListResponse200 = {
  data: AzureSubscriptionList;
  status: 200;
};

export type v1AzureSubscriptionListResponseComposite =
  v1AzureSubscriptionListResponse200;

export type v1AzureSubscriptionListResponse =
  v1AzureSubscriptionListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureSubscriptionListUrl = (
  params: V1AzureSubscriptionListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/subscriptions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/subscriptions`;
};

export const v1AzureSubscriptionList = async (
  params: V1AzureSubscriptionListParams,
  options?: RequestInit,
): Promise<v1AzureSubscriptionListResponse> => {
  const res = await fetch(getV1AzureSubscriptionListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureSubscriptionListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureSubscriptionListResponse;
};

/**
 * @summary Returns the Azure vhd url for the specified vhd location
 */
export type v1AzureVhdUrlResponse200 = {
  data: AzureVhdUrlEntity;
  status: 200;
};

export type v1AzureVhdUrlResponseComposite = v1AzureVhdUrlResponse200;

export type v1AzureVhdUrlResponse = v1AzureVhdUrlResponseComposite & {
  headers: Headers;
};

export const getV1AzureVhdUrlUrl = (vhd: string) => {
  return `https://api.spectrocloud.com/v1/clouds/azure/vhds/${vhd}/url`;
};

export const v1AzureVhdUrl = async (
  vhd: string,
  options?: RequestInit,
): Promise<v1AzureVhdUrlResponse> => {
  const res = await fetch(getV1AzureVhdUrlUrl(vhd), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1AzureVhdUrlResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1AzureVhdUrlResponse;
};

/**
 * @summary Returns the custom cloud types
 */
export type v1CustomCloudTypesGetResponse200 = {
  data: CustomCloudTypes;
  status: 200;
};

export type v1CustomCloudTypesGetResponseComposite =
  v1CustomCloudTypesGetResponse200;

export type v1CustomCloudTypesGetResponse =
  v1CustomCloudTypesGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypesGetUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes`;
};

export const v1CustomCloudTypesGet = async (
  options?: RequestInit,
): Promise<v1CustomCloudTypesGetResponse> => {
  const res = await fetch(getV1CustomCloudTypesGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypesGetResponse;
};

/**
 * @summary Registers the custom cloud type
 */
export type v1CustomCloudTypeRegisterResponse201 = {
  data: Uid;
  status: 201;
};

export type v1CustomCloudTypeRegisterResponseComposite =
  v1CustomCloudTypeRegisterResponse201;

export type v1CustomCloudTypeRegisterResponse =
  v1CustomCloudTypeRegisterResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeRegisterUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/register`;
};

export const v1CustomCloudTypeRegister = async (
  customCloudRequestEntity: CustomCloudRequestEntity,
  options?: RequestInit,
): Promise<v1CustomCloudTypeRegisterResponse> => {
  const res = await fetch(getV1CustomCloudTypeRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(customCloudRequestEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeRegisterResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeRegisterResponse;
};

/**
 * @summary Deletes the custom cloud type
 */
export type v1CustomCloudTypesDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypesDeleteResponseComposite =
  v1CustomCloudTypesDeleteResponse204;

export type v1CustomCloudTypesDeleteResponse =
  v1CustomCloudTypesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypesDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}`;
};

export const v1CustomCloudTypesDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypesDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypesDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypesDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypesDeleteResponse;
};

/**
 * @summary Returns valid keys for the cloud account used for custom cloud type
 */
export type v1CustomCloudTypeCloudAccountKeysGetResponse200 = {
  data: CustomCloudTypeCloudAccountKeys;
  status: 200;
};

export type v1CustomCloudTypeCloudAccountKeysGetResponseComposite =
  v1CustomCloudTypeCloudAccountKeysGetResponse200;

export type v1CustomCloudTypeCloudAccountKeysGetResponse =
  v1CustomCloudTypeCloudAccountKeysGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudAccountKeysGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/cloudAccountKeys`;
};

export const v1CustomCloudTypeCloudAccountKeysGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudAccountKeysGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudAccountKeysGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudAccountKeysGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudAccountKeysGetResponse;
};

/**
 * @summary Update the custom cloud type cloud account keys
 */
export type v1CustomCloudTypeCloudAccountKeysUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeCloudAccountKeysUpdateResponseComposite =
  v1CustomCloudTypeCloudAccountKeysUpdateResponse204;

export type v1CustomCloudTypeCloudAccountKeysUpdateResponse =
  v1CustomCloudTypeCloudAccountKeysUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudAccountKeysUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/cloudAccountKeys`;
};

export const v1CustomCloudTypeCloudAccountKeysUpdate = async (
  cloudType: string,
  customCloudTypeCloudAccountKeys: CustomCloudTypeCloudAccountKeys,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudAccountKeysUpdateResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudAccountKeysUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(customCloudTypeCloudAccountKeys),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudAccountKeysUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudAccountKeysUpdateResponse;
};

/**
 * @summary Delete the custom cloud type bootstrap
 */
export type v1CustomCloudTypeBootstrapDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeBootstrapDeleteResponseComposite =
  v1CustomCloudTypeBootstrapDeleteResponse204;

export type v1CustomCloudTypeBootstrapDeleteResponse =
  v1CustomCloudTypeBootstrapDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const v1CustomCloudTypeBootstrapDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeBootstrapDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypeBootstrapDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeBootstrapDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeBootstrapDeleteResponse;
};

/**
 * @summary Returns the custom cloud type bootstrap
 */
export type v1CustomCloudTypeBootstrapGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeBootstrapGetResponseComposite =
  v1CustomCloudTypeBootstrapGetResponse200;

export type v1CustomCloudTypeBootstrapGetResponse =
  v1CustomCloudTypeBootstrapGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const v1CustomCloudTypeBootstrapGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeBootstrapGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeBootstrapGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeBootstrapGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeBootstrapGetResponse;
};

/**
 * @summary Update the custom cloud type bootstrap
 */
export type v1CustomCloudTypeBootstrapUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeBootstrapUpdateResponseComposite =
  v1CustomCloudTypeBootstrapUpdateResponse204;

export type v1CustomCloudTypeBootstrapUpdateResponse =
  v1CustomCloudTypeBootstrapUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const v1CustomCloudTypeBootstrapUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeBootstrapUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(getV1CustomCloudTypeBootstrapUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeBootstrapUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeBootstrapUpdateResponse;
};

/**
 * @summary Delete the custom cloud type cloud provider
 */
export type v1CustomCloudTypeCloudProviderDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeCloudProviderDeleteResponseComposite =
  v1CustomCloudTypeCloudProviderDeleteResponse204;

export type v1CustomCloudTypeCloudProviderDeleteResponse =
  v1CustomCloudTypeCloudProviderDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const v1CustomCloudTypeCloudProviderDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudProviderDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudProviderDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudProviderDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudProviderDeleteResponse;
};

/**
 * @summary Returns the custom cloud type cloud provider
 */
export type v1CustomCloudTypeCloudProviderGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeCloudProviderGetResponseComposite =
  v1CustomCloudTypeCloudProviderGetResponse200;

export type v1CustomCloudTypeCloudProviderGetResponse =
  v1CustomCloudTypeCloudProviderGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const v1CustomCloudTypeCloudProviderGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudProviderGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeCloudProviderGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudProviderGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudProviderGetResponse;
};

/**
 * @summary Update the custom cloud type cloud provider
 */
export type v1CustomCloudTypeCloudProviderUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeCloudProviderUpdateResponseComposite =
  v1CustomCloudTypeCloudProviderUpdateResponse204;

export type v1CustomCloudTypeCloudProviderUpdateResponse =
  v1CustomCloudTypeCloudProviderUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const v1CustomCloudTypeCloudProviderUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCloudProviderUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeCloudProviderUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCloudProviderUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCloudProviderUpdateResponse;
};

/**
 * @summary Delete the custom cloud type control plane
 */
export type v1CustomCloudTypeControlPlaneDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeControlPlaneDeleteResponseComposite =
  v1CustomCloudTypeControlPlaneDeleteResponse204;

export type v1CustomCloudTypeControlPlaneDeleteResponse =
  v1CustomCloudTypeControlPlaneDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const v1CustomCloudTypeControlPlaneDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlaneDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlaneDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlaneDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlaneDeleteResponse;
};

/**
 * @summary Returns the custom cloud type control plane
 */
export type v1CustomCloudTypeControlPlaneGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeControlPlaneGetResponseComposite =
  v1CustomCloudTypeControlPlaneGetResponse200;

export type v1CustomCloudTypeControlPlaneGetResponse =
  v1CustomCloudTypeControlPlaneGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const v1CustomCloudTypeControlPlaneGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlaneGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeControlPlaneGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlaneGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlaneGetResponse;
};

/**
 * @summary Update the custom cloud type control plane
 */
export type v1CustomCloudTypeControlPlaneUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeControlPlaneUpdateResponseComposite =
  v1CustomCloudTypeControlPlaneUpdateResponse204;

export type v1CustomCloudTypeControlPlaneUpdateResponse =
  v1CustomCloudTypeControlPlaneUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const v1CustomCloudTypeControlPlaneUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlaneUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeControlPlaneUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlaneUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlaneUpdateResponse;
};

/**
 * @summary Delete the custom cloud type core
 */
export type v1CustomCloudTypeCoreDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeCoreDeleteResponseComposite =
  v1CustomCloudTypeCoreDeleteResponse204;

export type v1CustomCloudTypeCoreDeleteResponse =
  v1CustomCloudTypeCoreDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const v1CustomCloudTypeCoreDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCoreDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypeCoreDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCoreDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCoreDeleteResponse;
};

/**
 * @summary Returns the custom cloud type core
 */
export type v1CustomCloudTypeCoreGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeCoreGetResponseComposite =
  v1CustomCloudTypeCoreGetResponse200;

export type v1CustomCloudTypeCoreGetResponse =
  v1CustomCloudTypeCoreGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const v1CustomCloudTypeCoreGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCoreGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeCoreGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCoreGetResponse;
};

/**
 * @summary Update the custom cloud type core
 */
export type v1CustomCloudTypeCoreUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeCoreUpdateResponseComposite =
  v1CustomCloudTypeCoreUpdateResponse204;

export type v1CustomCloudTypeCoreUpdateResponse =
  v1CustomCloudTypeCoreUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const v1CustomCloudTypeCoreUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeCoreUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(getV1CustomCloudTypeCoreUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeCoreUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeCoreUpdateResponse;
};

/**
 * @summary Delete the custom cloud type cluster template
 */
export type v1CustomCloudTypeClusterTemplateDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeClusterTemplateDeleteResponseComposite =
  v1CustomCloudTypeClusterTemplateDeleteResponse204;

export type v1CustomCloudTypeClusterTemplateDeleteResponse =
  v1CustomCloudTypeClusterTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const v1CustomCloudTypeClusterTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeClusterTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeClusterTemplateDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeClusterTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type cluster template
 */
export type v1CustomCloudTypeClusterTemplateGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeClusterTemplateGetResponseComposite =
  v1CustomCloudTypeClusterTemplateGetResponse200;

export type v1CustomCloudTypeClusterTemplateGetResponse =
  v1CustomCloudTypeClusterTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const v1CustomCloudTypeClusterTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeClusterTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeClusterTemplateGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeClusterTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type cluster template
 */
export type v1CustomCloudTypeClusterTemplateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeClusterTemplateUpdateResponseComposite =
  v1CustomCloudTypeClusterTemplateUpdateResponse204;

export type v1CustomCloudTypeClusterTemplateUpdateResponse =
  v1CustomCloudTypeClusterTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const v1CustomCloudTypeClusterTemplateUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeClusterTemplateUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeClusterTemplateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeClusterTemplateUpdateResponse;
};

/**
 * @summary Delete the custom cloud type controlPlane pool template
 */
export type v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeControlPlanePoolTemplateDeleteResponseComposite =
  v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse204;

export type v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse =
  v1CustomCloudTypeControlPlanePoolTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const v1CustomCloudTypeControlPlanePoolTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlanePoolTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type controlPlane pool template
 */
export type v1CustomCloudTypeControlPlanePoolTemplateGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeControlPlanePoolTemplateGetResponseComposite =
  v1CustomCloudTypeControlPlanePoolTemplateGetResponse200;

export type v1CustomCloudTypeControlPlanePoolTemplateGetResponse =
  v1CustomCloudTypeControlPlanePoolTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const v1CustomCloudTypeControlPlanePoolTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlanePoolTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlanePoolTemplateGetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlanePoolTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type controlPlane pool template
 */
export type v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeControlPlanePoolTemplateUpdateResponseComposite =
  v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse204;

export type v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse =
  v1CustomCloudTypeControlPlanePoolTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const v1CustomCloudTypeControlPlanePoolTemplateUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeControlPlanePoolTemplateUpdateResponse;
};

/**
 * @summary Delete the custom cloud type worker pool template
 */
export type v1CustomCloudTypeWorkerPoolTemplateDeleteResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeWorkerPoolTemplateDeleteResponseComposite =
  v1CustomCloudTypeWorkerPoolTemplateDeleteResponse204;

export type v1CustomCloudTypeWorkerPoolTemplateDeleteResponse =
  v1CustomCloudTypeWorkerPoolTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const v1CustomCloudTypeWorkerPoolTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeWorkerPoolTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeWorkerPoolTemplateDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeWorkerPoolTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type worker pool template
 */
export type v1CustomCloudTypeWorkerPoolTemplateGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type v1CustomCloudTypeWorkerPoolTemplateGetResponseComposite =
  v1CustomCloudTypeWorkerPoolTemplateGetResponse200;

export type v1CustomCloudTypeWorkerPoolTemplateGetResponse =
  v1CustomCloudTypeWorkerPoolTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const v1CustomCloudTypeWorkerPoolTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeWorkerPoolTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeWorkerPoolTemplateGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeWorkerPoolTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type worker pool template
 */
export type v1CustomCloudTypeWorkerPoolTemplateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeWorkerPoolTemplateUpdateResponseComposite =
  v1CustomCloudTypeWorkerPoolTemplateUpdateResponse204;

export type v1CustomCloudTypeWorkerPoolTemplateUpdateResponse =
  v1CustomCloudTypeWorkerPoolTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const v1CustomCloudTypeWorkerPoolTemplateUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeWorkerPoolTemplateUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeWorkerPoolTemplateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeWorkerPoolTemplateUpdateResponse;
};

/**
 * @summary Returns the custom cloud type logo
 */
export type v1CustomCloudTypeLogoGetResponse200 = {
  data: Blob;
  status: 200;
};

export type v1CustomCloudTypeLogoGetResponseComposite =
  v1CustomCloudTypeLogoGetResponse200;

export type v1CustomCloudTypeLogoGetResponse =
  v1CustomCloudTypeLogoGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeLogoGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/logo`;
};

export const v1CustomCloudTypeLogoGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeLogoGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeLogoGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeLogoGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeLogoGetResponse;
};

/**
 * @summary Update the custom cloud type logo
 */
export type v1CustomCloudTypeLogoUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeLogoUpdateResponseComposite =
  v1CustomCloudTypeLogoUpdateResponse204;

export type v1CustomCloudTypeLogoUpdateResponse =
  v1CustomCloudTypeLogoUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeLogoUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/logo`;
};

export const v1CustomCloudTypeLogoUpdate = async (
  cloudType: string,
  v1CustomCloudTypeBootstrapUpdateBody: V1CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<v1CustomCloudTypeLogoUpdateResponse> => {
  const formData = new FormData();
  if (v1CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, v1CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(getV1CustomCloudTypeLogoUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeLogoUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeLogoUpdateResponse;
};

/**
 * @summary Returns the custom cloud type meta
 */
export type v1CustomCloudTypeMetaGetResponse200 = {
  data: CustomCloudMetaEntity;
  status: 200;
};

export type v1CustomCloudTypeMetaGetResponseComposite =
  v1CustomCloudTypeMetaGetResponse200;

export type v1CustomCloudTypeMetaGetResponse =
  v1CustomCloudTypeMetaGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeMetaGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/meta`;
};

export const v1CustomCloudTypeMetaGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<v1CustomCloudTypeMetaGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeMetaGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeMetaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeMetaGetResponse;
};

/**
 * @summary Update the custom cloud type meta
 */
export type v1CustomCloudTypeMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type v1CustomCloudTypeMetaUpdateResponseComposite =
  v1CustomCloudTypeMetaUpdateResponse204;

export type v1CustomCloudTypeMetaUpdateResponse =
  v1CustomCloudTypeMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeMetaUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/meta`;
};

export const v1CustomCloudTypeMetaUpdate = async (
  cloudType: string,
  customCloudRequestEntity: CustomCloudRequestEntity,
  options?: RequestInit,
): Promise<v1CustomCloudTypeMetaUpdateResponse> => {
  const res = await fetch(getV1CustomCloudTypeMetaUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(customCloudRequestEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CustomCloudTypeMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CustomCloudTypeMetaUpdateResponse;
};

/**
 * @summary Validate EKS properties
 */
export type v1EksPropertiesValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1EksPropertiesValidateResponseComposite =
  v1EksPropertiesValidateResponse204;

export type v1EksPropertiesValidateResponse =
  v1EksPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1EksPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/eks/properties/validate`;
};

export const v1EksPropertiesValidate = async (
  eksPropertiesValidateSpec: EksPropertiesValidateSpec,
  options?: RequestInit,
): Promise<v1EksPropertiesValidateResponse> => {
  const res = await fetch(getV1EksPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(eksPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1EksPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1EksPropertiesValidateResponse;
};

/**
 * @summary Validate the specified GCP account credentials
 */
export type v1GcpAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1GcpAccountValidateResponseComposite =
  v1GcpAccountValidateResponse204;

export type v1GcpAccountValidateResponse =
  v1GcpAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/account/validate`;
};

export const v1GcpAccountValidate = async (
  gcpCloudAccountValidateEntity: GcpCloudAccountValidateEntity,
  options?: RequestInit,
): Promise<v1GcpAccountValidateResponse> => {
  const res = await fetch(getV1GcpAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(gcpCloudAccountValidateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpAccountValidateResponse;
};

/**
 * @summary Validate the specified GCP az
 */
export type v1GcpAzValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1GcpAzValidateResponseComposite = v1GcpAzValidateResponse204;

export type v1GcpAzValidateResponse = v1GcpAzValidateResponseComposite & {
  headers: Headers;
};

export const getV1GcpAzValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/azs/validate`;
};

export const v1GcpAzValidate = async (
  azValidateEntity: AzValidateEntity,
  options?: RequestInit,
): Promise<v1GcpAzValidateResponse> => {
  const res = await fetch(getV1GcpAzValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(azValidateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpAzValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpAzValidateResponse;
};

/**
 * @summary Validate the specified GCP bucket name credentials
 */
export type v1GcpBucketNameValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1GcpBucketNameValidateResponseComposite =
  v1GcpBucketNameValidateResponse204;

export type v1GcpBucketNameValidateResponse =
  v1GcpBucketNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpBucketNameValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/bucketname/validate`;
};

export const v1GcpBucketNameValidate = async (
  gcpAccountNameValidateSpec: GcpAccountNameValidateSpec,
  options?: RequestInit,
): Promise<v1GcpBucketNameValidateResponse> => {
  const res = await fetch(getV1GcpBucketNameValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(gcpAccountNameValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpBucketNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpBucketNameValidateResponse;
};

/**
 * @summary Validates the image with tag
 */
export type v1GcpContainerImageValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1GcpContainerImageValidateResponseComposite =
  v1GcpContainerImageValidateResponse204;

export type v1GcpContainerImageValidateResponse =
  v1GcpContainerImageValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpContainerImageValidateUrl = (
  params: V1GcpContainerImageValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/image/container/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/image/container/validate`;
};

export const v1GcpContainerImageValidate = async (
  params: V1GcpContainerImageValidateParams,
  options?: RequestInit,
): Promise<v1GcpContainerImageValidateResponse> => {
  const res = await fetch(getV1GcpContainerImageValidateUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpContainerImageValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpContainerImageValidateResponse;
};

/**
 * @summary Returns the Gcp image url for the specified image location
 */
export type v1GcpImageUrlResponse200 = {
  data: GcpImageUrlEntity;
  status: 200;
};

export type v1GcpImageUrlResponseComposite = v1GcpImageUrlResponse200;

export type v1GcpImageUrlResponse = v1GcpImageUrlResponseComposite & {
  headers: Headers;
};

export const getV1GcpImageUrlUrl = (imageName: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/images/${imageName}/url`;
};

export const v1GcpImageUrl = async (
  imageName: string,
  options?: RequestInit,
): Promise<v1GcpImageUrlResponse> => {
  const res = await fetch(getV1GcpImageUrlUrl(imageName), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpImageUrlResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpImageUrlResponse;
};

/**
 * @summary Retrieves a list of GCP projects for the specified account
 */
export type v1GcpProjectsResponse200 = {
  data: GcpProjects;
  status: 200;
};

export type v1GcpProjectsResponseComposite = v1GcpProjectsResponse200;

export type v1GcpProjectsResponse = v1GcpProjectsResponseComposite & {
  headers: Headers;
};

export const getV1GcpProjectsUrl = (params: V1GcpProjectsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects`;
};

export const v1GcpProjects = async (
  params: V1GcpProjectsParams,
  options?: RequestInit,
): Promise<v1GcpProjectsResponse> => {
  const res = await fetch(getV1GcpProjectsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpProjectsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpProjectsResponse;
};

/**
 * @summary Retrieves a list of GCP regions
 */
export type v1GcpRegionsResponse200 = {
  data: GcpRegions;
  status: 200;
};

export type v1GcpRegionsResponseComposite = v1GcpRegionsResponse200;

export type v1GcpRegionsResponse = v1GcpRegionsResponseComposite & {
  headers: Headers;
};

export const getV1GcpRegionsUrl = (
  project: string,
  params: V1GcpRegionsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions`;
};

export const v1GcpRegions = async (
  project: string,
  params: V1GcpRegionsParams,
  options?: RequestInit,
): Promise<v1GcpRegionsResponse> => {
  const res = await fetch(getV1GcpRegionsUrl(project, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpRegionsResponse;
};

/**
 * @summary Retrieves a list of GCP networks for the specified account
 */
export type v1GcpNetworksResponse200 = {
  data: GcpNetworks;
  status: 200;
};

export type v1GcpNetworksResponseComposite = v1GcpNetworksResponse200;

export type v1GcpNetworksResponse = v1GcpNetworksResponseComposite & {
  headers: Headers;
};

export const getV1GcpNetworksUrl = (
  project: string,
  region: string,
  params: V1GcpNetworksParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/networks`;
};

export const v1GcpNetworks = async (
  project: string,
  region: string,
  params: V1GcpNetworksParams,
  options?: RequestInit,
): Promise<v1GcpNetworksResponse> => {
  const res = await fetch(getV1GcpNetworksUrl(project, region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpNetworksResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpNetworksResponse;
};

/**
 * @summary Retrieves a list of GCP zones for the specified account and region
 */
export type v1GcpZonesResponse200 = {
  data: GcpZones;
  status: 200;
};

export type v1GcpZonesResponseComposite = v1GcpZonesResponse200;

export type v1GcpZonesResponse = v1GcpZonesResponseComposite & {
  headers: Headers;
};

export const getV1GcpZonesUrl = (
  project: string,
  region: string,
  params: V1GcpZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/zones`;
};

export const v1GcpZones = async (
  project: string,
  region: string,
  params: V1GcpZonesParams,
  options?: RequestInit,
): Promise<v1GcpZonesResponse> => {
  const res = await fetch(getV1GcpZonesUrl(project, region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpZonesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpZonesResponse;
};

/**
 * @summary Validate the specified GCP project
 */
export type v1GcpProjectValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1GcpProjectValidateResponseComposite =
  v1GcpProjectValidateResponse204;

export type v1GcpProjectValidateResponse =
  v1GcpProjectValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpProjectValidateUrl = (project: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/validate`;
};

export const v1GcpProjectValidate = async (
  project: string,
  cloudAccountUidEntity: CloudAccountUidEntity,
  options?: RequestInit,
): Promise<v1GcpProjectValidateResponse> => {
  const res = await fetch(getV1GcpProjectValidateUrl(project), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(cloudAccountUidEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpProjectValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpProjectValidateResponse;
};

/**
 * @summary Retrieves a list of GCP zones for the specified account
 */
export type v1GcpAvailabilityZonesResponse200 = {
  data: GcpZones;
  status: 200;
};

export type v1GcpAvailabilityZonesResponseComposite =
  v1GcpAvailabilityZonesResponse200;

export type v1GcpAvailabilityZonesResponse =
  v1GcpAvailabilityZonesResponseComposite & {
    headers: Headers;
  };

export const getV1GcpAvailabilityZonesUrl = (
  project: string,
  params: V1GcpAvailabilityZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/zones`;
};

export const v1GcpAvailabilityZones = async (
  project: string,
  params: V1GcpAvailabilityZonesParams,
  options?: RequestInit,
): Promise<v1GcpAvailabilityZonesResponse> => {
  const res = await fetch(getV1GcpAvailabilityZonesUrl(project, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpAvailabilityZonesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpAvailabilityZonesResponse;
};

/**
 * @summary Validate GCP properties
 */
export type v1GcpPropertiesValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1GcpPropertiesValidateResponseComposite =
  v1GcpPropertiesValidateResponse204;

export type v1GcpPropertiesValidateResponse =
  v1GcpPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/properties/validate`;
};

export const v1GcpPropertiesValidate = async (
  gcpPropertiesValidateSpec: GcpPropertiesValidateSpec,
  options?: RequestInit,
): Promise<v1GcpPropertiesValidateResponse> => {
  const res = await fetch(getV1GcpPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(gcpPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpPropertiesValidateResponse;
};

/**
 * @summary Retrieves a list of GCP instance types
 */
export type v1GcpInstanceTypesResponse200 = {
  data: GcpInstanceTypes;
  status: 200;
};

export type v1GcpInstanceTypesResponseComposite = v1GcpInstanceTypesResponse200;

export type v1GcpInstanceTypesResponse = v1GcpInstanceTypesResponseComposite & {
  headers: Headers;
};

export const getV1GcpInstanceTypesUrl = (
  region: string,
  params?: V1GcpInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/instancetypes`;
};

export const v1GcpInstanceTypes = async (
  region: string,
  params?: V1GcpInstanceTypesParams,
  options?: RequestInit,
): Promise<v1GcpInstanceTypesResponse> => {
  const res = await fetch(getV1GcpInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpInstanceTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of Gcp storage types
 */
export type v1GcpStorageTypesResponse200 = {
  data: GcpStorageTypes;
  status: 200;
};

export type v1GcpStorageTypesResponseComposite = v1GcpStorageTypesResponse200;

export type v1GcpStorageTypesResponse = v1GcpStorageTypesResponseComposite & {
  headers: Headers;
};

export const getV1GcpStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/storagetypes`;
};

export const v1GcpStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<v1GcpStorageTypesResponse> => {
  const res = await fetch(getV1GcpStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1GcpStorageTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1GcpStorageTypesResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Maas account is valid
 */
export type v1MaasAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1MaasAccountValidateResponseComposite =
  v1MaasAccountValidateResponse204;

export type v1MaasAccountValidateResponse =
  v1MaasAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/maas/account/validate`;
};

export const v1MaasAccountValidate = async (
  maasCloudAccount: MaasCloudAccount,
  options?: RequestInit,
): Promise<v1MaasAccountValidateResponse> => {
  const res = await fetch(getV1MaasAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(maasCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasAccountValidateResponse;
};

/**
 * @summary Retrieves a list of Maas zones for a particular account uid
 */
export type v1MaasZonesGetResponse200 = {
  data: MaasZones;
  status: 200;
};

export type v1MaasZonesGetResponseComposite = v1MaasZonesGetResponse200;

export type v1MaasZonesGetResponse = v1MaasZonesGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasZonesGetUrl = (params?: V1MaasZonesGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/azs`;
};

export const v1MaasZonesGet = async (
  params?: V1MaasZonesGetParams,
  options?: RequestInit,
): Promise<v1MaasZonesGetResponse> => {
  const res = await fetch(getV1MaasZonesGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasZonesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasZonesGetResponse;
};

/**
 * @summary Retrieves a list of Maas domains
 */
export type v1MaasDomainsGetResponse200 = {
  data: MaasDomains;
  status: 200;
};

export type v1MaasDomainsGetResponseComposite = v1MaasDomainsGetResponse200;

export type v1MaasDomainsGetResponse = v1MaasDomainsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasDomainsGetUrl = (params?: V1MaasDomainsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/domains?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/domains`;
};

export const v1MaasDomainsGet = async (
  params?: V1MaasDomainsGetParams,
  options?: RequestInit,
): Promise<v1MaasDomainsGetResponse> => {
  const res = await fetch(getV1MaasDomainsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasDomainsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasDomainsGetResponse;
};

/**
 * @summary Retrieves a list of Maas pools for a particular account uid
 */
export type v1MaasPoolsGetResponse200 = {
  data: MaasPools;
  status: 200;
};

export type v1MaasPoolsGetResponseComposite = v1MaasPoolsGetResponse200;

export type v1MaasPoolsGetResponse = v1MaasPoolsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasPoolsGetUrl = (params?: V1MaasPoolsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/resourcePools?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/resourcePools`;
};

export const v1MaasPoolsGet = async (
  params?: V1MaasPoolsGetParams,
  options?: RequestInit,
): Promise<v1MaasPoolsGetResponse> => {
  const res = await fetch(getV1MaasPoolsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasPoolsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasPoolsGetResponse;
};

/**
 * @summary Retrieves a list of Maas subnets for a particular account uid
 */
export type v1MaasSubnetsGetResponse200 = {
  data: MaasSubnets;
  status: 200;
};

export type v1MaasSubnetsGetResponseComposite = v1MaasSubnetsGetResponse200;

export type v1MaasSubnetsGetResponse = v1MaasSubnetsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasSubnetsGetUrl = (params?: V1MaasSubnetsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/subnets?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/subnets`;
};

export const v1MaasSubnetsGet = async (
  params?: V1MaasSubnetsGetParams,
  options?: RequestInit,
): Promise<v1MaasSubnetsGetResponse> => {
  const res = await fetch(getV1MaasSubnetsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasSubnetsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasSubnetsGetResponse;
};

/**
 * @summary Retrieves a list of Maas tags for a particular account uid
 */
export type v1MaasTagsGetResponse200 = {
  data: MaasTags;
  status: 200;
};

export type v1MaasTagsGetResponseComposite = v1MaasTagsGetResponse200;

export type v1MaasTagsGetResponse = v1MaasTagsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasTagsGetUrl = (params?: V1MaasTagsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/tags?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/tags`;
};

export const v1MaasTagsGet = async (
  params?: V1MaasTagsGetParams,
  options?: RequestInit,
): Promise<v1MaasTagsGetResponse> => {
  const res = await fetch(getV1MaasTagsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1MaasTagsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1MaasTagsGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if OpenStack account is valid
 */
export type v1OpenStackAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1OpenStackAccountValidateResponseComposite =
  v1OpenStackAccountValidateResponse204;

export type v1OpenStackAccountValidateResponse =
  v1OpenStackAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/openstack/account/validate`;
};

export const v1OpenStackAccountValidate = async (
  openStackCloudAccount: OpenStackCloudAccount,
  options?: RequestInit,
): Promise<v1OpenStackAccountValidateResponse> => {
  const res = await fetch(getV1OpenStackAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(openStackCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackAccountValidateResponse;
};

/**
 * @summary Retrieves a list of OpenStack azs for a particular account uid
 */
export type v1OpenStackAzsGetResponse200 = {
  data: OpenStackAzs;
  status: 200;
};

export type v1OpenStackAzsGetResponseComposite = v1OpenStackAzsGetResponse200;

export type v1OpenStackAzsGetResponse = v1OpenStackAzsGetResponseComposite & {
  headers: Headers;
};

export const getV1OpenStackAzsGetUrl = (params?: V1OpenStackAzsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/azs`;
};

export const v1OpenStackAzsGet = async (
  params?: V1OpenStackAzsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackAzsGetResponse> => {
  const res = await fetch(getV1OpenStackAzsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackAzsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackAzsGetResponse;
};

/**
 * @summary Returns the OpenStack flavors
 */
export type v1OpenStackFlavorsGetResponse200 = {
  data: OpenStackFlavors;
  status: 200;
};

export type v1OpenStackFlavorsGetResponseComposite =
  v1OpenStackFlavorsGetResponse200;

export type v1OpenStackFlavorsGetResponse =
  v1OpenStackFlavorsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackFlavorsGetUrl = (
  params?: V1OpenStackFlavorsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/flavors?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/flavors`;
};

export const v1OpenStackFlavorsGet = async (
  params?: V1OpenStackFlavorsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackFlavorsGetResponse> => {
  const res = await fetch(getV1OpenStackFlavorsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackFlavorsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackFlavorsGetResponse;
};

/**
 * @summary Returns the OpenStack keypair
 */
export type v1OpenStackKeypairsGetResponse200 = {
  data: OpenStackKeypairs;
  status: 200;
};

export type v1OpenStackKeypairsGetResponseComposite =
  v1OpenStackKeypairsGetResponse200;

export type v1OpenStackKeypairsGetResponse =
  v1OpenStackKeypairsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackKeypairsGetUrl = (
  params?: V1OpenStackKeypairsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/keypairs`;
};

export const v1OpenStackKeypairsGet = async (
  params?: V1OpenStackKeypairsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackKeypairsGetResponse> => {
  const res = await fetch(getV1OpenStackKeypairsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackKeypairsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackKeypairsGetResponse;
};

/**
 * @summary Returns the OpenStack networks
 */
export type v1OpenStackNetworksGetResponse200 = {
  data: OpenStackNetworks;
  status: 200;
};

export type v1OpenStackNetworksGetResponseComposite =
  v1OpenStackNetworksGetResponse200;

export type v1OpenStackNetworksGetResponse =
  v1OpenStackNetworksGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackNetworksGetUrl = (
  params?: V1OpenStackNetworksGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/networks`;
};

export const v1OpenStackNetworksGet = async (
  params?: V1OpenStackNetworksGetParams,
  options?: RequestInit,
): Promise<v1OpenStackNetworksGetResponse> => {
  const res = await fetch(getV1OpenStackNetworksGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackNetworksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackNetworksGetResponse;
};

/**
 * @summary Returns the OpenStack projects
 */
export type v1OpenStackProjectsGetResponse200 = {
  data: OpenStackProjects;
  status: 200;
};

export type v1OpenStackProjectsGetResponseComposite =
  v1OpenStackProjectsGetResponse200;

export type v1OpenStackProjectsGetResponse =
  v1OpenStackProjectsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackProjectsGetUrl = (
  params?: V1OpenStackProjectsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/projects`;
};

export const v1OpenStackProjectsGet = async (
  params?: V1OpenStackProjectsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackProjectsGetResponse> => {
  const res = await fetch(getV1OpenStackProjectsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackProjectsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackProjectsGetResponse;
};

/**
 * @summary Returns the OpenStack regions
 */
export type v1OpenStackRegionsGetResponse200 = {
  data: OpenStackRegions;
  status: 200;
};

export type v1OpenStackRegionsGetResponseComposite =
  v1OpenStackRegionsGetResponse200;

export type v1OpenStackRegionsGetResponse =
  v1OpenStackRegionsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackRegionsGetUrl = (
  params?: V1OpenStackRegionsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/regions`;
};

export const v1OpenStackRegionsGet = async (
  params?: V1OpenStackRegionsGetParams,
  options?: RequestInit,
): Promise<v1OpenStackRegionsGetResponse> => {
  const res = await fetch(getV1OpenStackRegionsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1OpenStackRegionsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1OpenStackRegionsGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Vsphere account is valid
 */
export type v1VsphereAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type v1VsphereAccountValidateResponseComposite =
  v1VsphereAccountValidateResponse204;

export type v1VsphereAccountValidateResponse =
  v1VsphereAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/vsphere/account/validate`;
};

export const v1VsphereAccountValidate = async (
  v1VsphereCloudAccountBody: V1VsphereCloudAccountBody,
  options?: RequestInit,
): Promise<v1VsphereAccountValidateResponse> => {
  const res = await fetch(getV1VsphereAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereCloudAccountBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereAccountValidateResponse;
};

/**
 * @summary Returns the vsphere data centers
 */
export type v1VsphereDatacentersResponse200 = {
  data: VsphereDatacenters;
  status: 200;
};

export type v1VsphereDatacentersResponseComposite =
  v1VsphereDatacentersResponse200;

export type v1VsphereDatacentersResponse =
  v1VsphereDatacentersResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDatacentersUrl = (
  params?: V1VsphereDatacentersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters`;
};

export const v1VsphereDatacenters = async (
  params?: V1VsphereDatacentersParams,
  options?: RequestInit,
): Promise<v1VsphereDatacentersResponse> => {
  const res = await fetch(getV1VsphereDatacentersUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereDatacentersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereDatacentersResponse;
};

/**
 * @summary Returns the resources for vsphere compute cluster
 */
export type v1VsphereComputeClusterResourcesResponse200 = {
  data: VsphereComputeClusterResources;
  status: 200;
};

export type v1VsphereComputeClusterResourcesResponseComposite =
  v1VsphereComputeClusterResourcesResponse200;

export type v1VsphereComputeClusterResourcesResponse =
  v1VsphereComputeClusterResourcesResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereComputeClusterResourcesUrl = (
  uid: string,
  computecluster: string,
  params: V1VsphereComputeClusterResourcesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters/${uid}/computeclusters/${computecluster}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters/${uid}/computeclusters/${computecluster}`;
};

export const v1VsphereComputeClusterResources = async (
  uid: string,
  computecluster: string,
  params: V1VsphereComputeClusterResourcesParams,
  options?: RequestInit,
): Promise<v1VsphereComputeClusterResourcesResponse> => {
  const res = await fetch(
    getV1VsphereComputeClusterResourcesUrl(uid, computecluster, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereComputeClusterResourcesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereComputeClusterResourcesResponse;
};

/**
 * @summary Retrieves vsphere env
 */
export type v1VsphereEnvResponse200 = {
  data: VsphereEnv;
  status: 200;
};

export type v1VsphereEnvResponseComposite = v1VsphereEnvResponse200;

export type v1VsphereEnvResponse = v1VsphereEnvResponseComposite & {
  headers: Headers;
};

export const getV1VsphereEnvUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/vsphere/env`;
};

export const v1VsphereEnv = async (
  v1VsphereCloudAccountBody: V1VsphereCloudAccountBody,
  options?: RequestInit,
): Promise<v1VsphereEnvResponse> => {
  const res = await fetch(getV1VsphereEnvUrl(), {
    ...options,
    method: "GET",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereCloudAccountBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1VsphereEnvResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1VsphereEnvResponse;
};

/**
 * @summary Returns the cloud compute rate
 */
export type v1CloudComputeRateResponse200 = {
  data: CloudCost;
  status: 200;
};

export type v1CloudComputeRateResponseComposite = v1CloudComputeRateResponse200;

export type v1CloudComputeRateResponse = v1CloudComputeRateResponseComposite & {
  headers: Headers;
};

export const getV1CloudComputeRateUrl = (
  cloud: string,
  type: string,
  params: V1CloudComputeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/${cloud}/compute/${type}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/${cloud}/compute/${type}/rate`;
};

export const v1CloudComputeRate = async (
  cloud: string,
  type: string,
  params: V1CloudComputeRateParams,
  options?: RequestInit,
): Promise<v1CloudComputeRateResponse> => {
  const res = await fetch(getV1CloudComputeRateUrl(cloud, type, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudComputeRateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudComputeRateResponse;
};

/**
 * @summary Returns the cloud storage rate
 */
export type v1CloudStorageRateResponse200 = {
  data: CloudCost;
  status: 200;
};

export type v1CloudStorageRateResponseComposite = v1CloudStorageRateResponse200;

export type v1CloudStorageRateResponse = v1CloudStorageRateResponseComposite & {
  headers: Headers;
};

export const getV1CloudStorageRateUrl = (
  cloud: string,
  type: string,
  params: V1CloudStorageRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/${cloud}/storage/${type}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/${cloud}/storage/${type}/rate`;
};

export const v1CloudStorageRate = async (
  cloud: string,
  type: string,
  params: V1CloudStorageRateParams,
  options?: RequestInit,
): Promise<v1CloudStorageRateResponse> => {
  const res = await fetch(getV1CloudStorageRateUrl(cloud, type, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1CloudStorageRateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1CloudStorageRateResponse;
};
