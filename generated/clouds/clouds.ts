/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AWSVolumeTypes,
  AmiTypes,
  AsyncOperationIdEntity,
  AwsAccountCredentials,
  AwsAccountSts,
  AwsAccountStsGetParams,
  AwsAvailabilityZones,
  AwsCloudAccount,
  AwsCloudCostSpec,
  AwsCloudCostSummary,
  AwsClusterNameValidateParams,
  AwsFindImageRequest,
  AwsIamPoliciesParams,
  AwsImage,
  AwsInstanceTypes,
  AwsInstanceTypesParams,
  AwsKeyPairValidateParams,
  AwsKeyPairs,
  AwsKeyPairsParams,
  AwsKmsKeyEntity,
  AwsKmsKeyGetParams,
  AwsKmsKeyValidateParams,
  AwsKmsKeys,
  AwsKmsKeysParams,
  AwsPolicies,
  AwsPolicyArnsSpec,
  AwsPolicyArnsValidateParams,
  AwsPropertiesValidateSpec,
  AwsRegions,
  AwsRegionsParams,
  AwsS3BucketCredentials,
  AwsSecretSpecInputEntity,
  AwsSecurityGroups,
  AwsSecurityGroupsParams,
  AwsStorageTypes,
  AwsVolumeSize,
  AwsVolumeSizeGetParams,
  AwsVolumeTypesGetParams,
  AwsVpcs,
  AwsVpcsParams,
  AwsZonesParams,
  AzValidateEntity,
  AzureCloudAccount,
  AzureClusterNameValidateParams,
  AzureGroups,
  AzureGroupsParams,
  AzureInstanceTypes,
  AzureInstanceTypesParams,
  AzurePrivateDnsZones,
  AzurePrivateDnsZonesParams,
  AzureRegions,
  AzureRegionsParams,
  AzureResourceGroupList,
  AzureResourceGroupListParams,
  AzureStorageAccountEntity,
  AzureStorageAccountTypesParams,
  AzureStorageAccounts,
  AzureStorageAccountsParams,
  AzureStorageContainers,
  AzureStorageContainersParams,
  AzureStorageTypes,
  AzureSubscriptionList,
  AzureSubscriptionListParams,
  AzureVhdUrlEntity,
  AzureVirtualNetworkList,
  AzureVirtualNetworkListParams,
  AzureZoneEntity,
  AzureZonesParams,
  CloudAccountUidEntity,
  CloudComputeRateParams,
  CloudCost,
  CloudStorageRateParams,
  CloudWatchConfig,
  CustomCloudMetaEntity,
  CustomCloudRequestEntity,
  CustomCloudTypeBootstrapUpdateBody,
  CustomCloudTypeCloudAccountKeys,
  CustomCloudTypeContentResponse,
  CustomCloudTypes,
  EksPropertiesValidateSpec,
  GcpAccountNameValidateSpec,
  GcpAvailabilityZonesParams,
  GcpCloudAccountValidateEntity,
  GcpContainerImageValidateParams,
  GcpImageUrlEntity,
  GcpInstanceTypes,
  GcpInstanceTypesParams,
  GcpNetworks,
  GcpNetworksParams,
  GcpProjects,
  GcpProjectsParams,
  GcpPropertiesValidateSpec,
  GcpRegions,
  GcpRegionsParams,
  GcpStorageTypes,
  GcpZones,
  GcpZonesParams,
  MaasCloudAccount,
  MaasDomains,
  MaasDomainsGetParams,
  MaasPools,
  MaasPoolsGetParams,
  MaasSubnets,
  MaasSubnetsGetParams,
  MaasTags,
  MaasTagsGetParams,
  MaasZones,
  MaasZonesGetParams,
  OpenStackAzs,
  OpenStackAzsGetParams,
  OpenStackCloudAccount,
  OpenStackFlavors,
  OpenStackFlavorsGetParams,
  OpenStackKeypairs,
  OpenStackKeypairsGetParams,
  OpenStackNetworks,
  OpenStackNetworksGetParams,
  OpenStackProjects,
  OpenStackProjectsGetParams,
  OpenStackRegions,
  OpenStackRegionsGetParams,
  Uid,
  VsphereCloudAccountBody,
  VsphereComputeClusterResources,
  VsphereComputeClusterResourcesParams,
  VsphereDatacenters,
  VsphereDatacentersParams,
  VsphereEnv,
} from ".././schemas";

/**
 * @summary Retrieves the Aws secret credentials
 */
export type AwsAccountSecretCredentialsResponse200 = {
  data: AwsAccountCredentials;
  status: 200;
};

export type AwsAccountSecretCredentialsResponseComposite =
  AwsAccountSecretCredentialsResponse200;

export type AwsAccountSecretCredentialsResponse =
  AwsAccountSecretCredentialsResponseComposite & {
    headers: Headers;
  };

export const getV1AwsAccountSecretCredentialsUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/account/secret/credentials`;
};

export const AwsAccountSecretCredentials = async (
  AwsSecretSpecInputEntity: AwsSecretSpecInputEntity,
  options?: RequestInit,
): Promise<AwsAccountSecretCredentialsResponse> => {
  const res = await fetch(getV1AwsAccountSecretCredentialsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsSecretSpecInputEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsAccountSecretCredentialsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsAccountSecretCredentialsResponse;
};

/**
 * @summary Retrieves AWS external id and account id
 */
export type AwsAccountStsGetResponse200 = {
  data: AwsAccountSts;
  status: 200;
};

export type AwsAccountStsGetResponseComposite = AwsAccountStsGetResponse200;

export type AwsAccountStsGetResponse = AwsAccountStsGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsAccountStsGetUrl = (params?: AwsAccountStsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/account/sts?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/account/sts`;
};

export const AwsAccountStsGet = async (
  params?: AwsAccountStsGetParams,
  options?: RequestInit,
): Promise<AwsAccountStsGetResponse> => {
  const res = await fetch(getV1AwsAccountStsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsAccountStsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsAccountStsGetResponse;
};

/**
 * @summary Validate the specified AWS account credentials
 */
export type AwsAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type AwsAccountValidateResponseComposite = AwsAccountValidateResponse204;

export type AwsAccountValidateResponse = AwsAccountValidateResponseComposite & {
  headers: Headers;
};

export const getV1AwsAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/account/validate`;
};

export const AwsAccountValidate = async (
  AwsCloudAccount: AwsCloudAccount,
  options?: RequestInit,
): Promise<AwsAccountValidateResponse> => {
  const res = await fetch(getV1AwsAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsAccountValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsAccountValidateResponse;
};

/**
 * @summary Retrieves a list of AWS AMI types
 */
export type AwsAmiTypesResponse200 = {
  data: AmiTypes;
  status: 200;
};

export type AwsAmiTypesResponseComposite = AwsAmiTypesResponse200;

export type AwsAmiTypesResponse = AwsAmiTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsAmiTypesUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/amiTypes`;
};

export const AwsAmiTypes = async (
  options?: RequestInit,
): Promise<AwsAmiTypesResponse> => {
  const res = await fetch(getV1AwsAmiTypesUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsAmiTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsAmiTypesResponse;
};

/**
 * Validates aws cloud watch credentials
 * @summary validates aws cloud watch credentials
 */
export type CloudsAwsCloudWatchValidateResponse204 = {
  data: void;
  status: 204;
};

export type CloudsAwsCloudWatchValidateResponseComposite =
  CloudsAwsCloudWatchValidateResponse204;

export type CloudsAwsCloudWatchValidateResponse =
  CloudsAwsCloudWatchValidateResponseComposite & {
    headers: Headers;
  };

export const getV1CloudsAwsCloudWatchValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/cloudwatch/validate`;
};

export const CloudsAwsCloudWatchValidate = async (
  CloudWatchConfig: CloudWatchConfig,
  options?: RequestInit,
): Promise<CloudsAwsCloudWatchValidateResponse> => {
  const res = await fetch(getV1CloudsAwsCloudWatchValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(CloudWatchConfig),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudsAwsCloudWatchValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudsAwsCloudWatchValidateResponse;
};

/**
 * @summary Retrieves AWS cloud account usage cost from cost explorer.
 */
export type AwsCloudCostResponse200 = {
  data: AwsCloudCostSummary;
  status: 200;
};

export type AwsCloudCostResponseComposite = AwsCloudCostResponse200;

export type AwsCloudCostResponse = AwsCloudCostResponseComposite & {
  headers: Headers;
};

export const getV1AwsCloudCostUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/cost`;
};

export const AwsCloudCost = async (
  AwsCloudCostSpec: AwsCloudCostSpec,
  options?: RequestInit,
): Promise<AwsCloudCostResponse> => {
  const res = await fetch(getV1AwsCloudCostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsCloudCostSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsCloudCostResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsCloudCostResponse;
};

/**
 * Get AWS Volume Size
 * @summary Get AWS Volume Size
 */
export type AwsVolumeSizeGetResponse200 = {
  data: AwsVolumeSize;
  status: 200;
};

export type AwsVolumeSizeGetResponseComposite = AwsVolumeSizeGetResponse200;

export type AwsVolumeSizeGetResponse = AwsVolumeSizeGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsVolumeSizeGetUrl = (
  imageId: string,
  params: AwsVolumeSizeGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/imageIds/${imageId}/volumeSize?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/imageIds/${imageId}/volumeSize`;
};

export const AwsVolumeSizeGet = async (
  imageId: string,
  params: AwsVolumeSizeGetParams,
  options?: RequestInit,
): Promise<AwsVolumeSizeGetResponse> => {
  const res = await fetch(getV1AwsVolumeSizeGetUrl(imageId, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsVolumeSizeGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsVolumeSizeGetResponse;
};

/**
 * @summary Retrieves a list of AWS policies for the specified account
 */
export type AwsIamPoliciesResponse200 = {
  data: AwsPolicies;
  status: 200;
};

export type AwsIamPoliciesResponseComposite = AwsIamPoliciesResponse200;

export type AwsIamPoliciesResponse = AwsIamPoliciesResponseComposite & {
  headers: Headers;
};

export const getV1AwsIamPoliciesUrl = (params?: AwsIamPoliciesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/policies?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/policies`;
};

export const AwsIamPolicies = async (
  AwsCloudAccount: AwsCloudAccount,
  params?: AwsIamPoliciesParams,
  options?: RequestInit,
): Promise<AwsIamPoliciesResponse> => {
  const res = await fetch(getV1AwsIamPoliciesUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsIamPoliciesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsIamPoliciesResponse;
};

/**
 * @summary Validate the aws policy arns validate
 */
export type AwsPolicyArnsValidateResponse204 = {
  data: void;
  status: 204;
};

export type AwsPolicyArnsValidateResponseComposite =
  AwsPolicyArnsValidateResponse204;

export type AwsPolicyArnsValidateResponse =
  AwsPolicyArnsValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsPolicyArnsValidateUrl = (
  params?: AwsPolicyArnsValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/policyArns/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/policyArns/validate`;
};

export const AwsPolicyArnsValidate = async (
  AwsPolicyArnsSpec: AwsPolicyArnsSpec,
  params?: AwsPolicyArnsValidateParams,
  options?: RequestInit,
): Promise<AwsPolicyArnsValidateResponse> => {
  const res = await fetch(getV1AwsPolicyArnsValidateUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsPolicyArnsSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsPolicyArnsValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsPolicyArnsValidateResponse;
};

/**
 * @summary Validate AWS properties
 */
export type AwsPropertiesValidateResponse204 = {
  data: void;
  status: 204;
};

export type AwsPropertiesValidateResponseComposite =
  AwsPropertiesValidateResponse204;

export type AwsPropertiesValidateResponse =
  AwsPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/properties/validate`;
};

export const AwsPropertiesValidate = async (
  AwsPropertiesValidateSpec: AwsPropertiesValidateSpec,
  options?: RequestInit,
): Promise<AwsPropertiesValidateResponse> => {
  const res = await fetch(getV1AwsPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsPropertiesValidateResponse;
};

/**
 * @summary Retrieves a list of AWS regions for the specified account
 */
export type AwsRegionsResponse200 = {
  data: AwsRegions;
  status: 200;
};

export type AwsRegionsResponseComposite = AwsRegionsResponse200;

export type AwsRegionsResponse = AwsRegionsResponseComposite & {
  headers: Headers;
};

export const getV1AwsRegionsUrl = (params: AwsRegionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions`;
};

export const AwsRegions = async (
  params: AwsRegionsParams,
  options?: RequestInit,
): Promise<AwsRegionsResponse> => {
  const res = await fetch(getV1AwsRegionsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsRegionsResponse;
};

/**
 * @summary Retrieves a list of AWS availability zones for the specified region
 */
export type AwsZonesResponse200 = {
  data: AwsAvailabilityZones;
  status: 200;
};

export type AwsZonesResponseComposite = AwsZonesResponse200;

export type AwsZonesResponse = AwsZonesResponseComposite & {
  headers: Headers;
};

export const getV1AwsZonesUrl = (region: string, params: AwsZonesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/availabilityzones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/availabilityzones`;
};

export const AwsZones = async (
  region: string,
  params: AwsZonesParams,
  options?: RequestInit,
): Promise<AwsZonesResponse> => {
  const res = await fetch(getV1AwsZonesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsZonesResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as AwsZonesResponse;
};

/**
 * @summary Copies the specified image from one region to another region
 */
export type AwsCopyImageFromDefaultRegionResponse200 = {
  data: AsyncOperationIdEntity;
  status: 200;
};

export type AwsCopyImageFromDefaultRegionResponseComposite =
  AwsCopyImageFromDefaultRegionResponse200;

export type AwsCopyImageFromDefaultRegionResponse =
  AwsCopyImageFromDefaultRegionResponseComposite & {
    headers: Headers;
  };

export const getV1AwsCopyImageFromDefaultRegionUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/copydefaultimages`;
};

export const AwsCopyImageFromDefaultRegion = async (
  region: string,
  AwsFindImageRequest: AwsFindImageRequest,
  options?: RequestInit,
): Promise<AwsCopyImageFromDefaultRegionResponse> => {
  const res = await fetch(getV1AwsCopyImageFromDefaultRegionUrl(region), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsFindImageRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsCopyImageFromDefaultRegionResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsCopyImageFromDefaultRegionResponse;
};

/**
 * Returns no contents if aws cluster name is valid else error.
 * @summary Check if Aws cluster name is valid
 */
export type AwsClusterNameValidateResponse204 = {
  data: void;
  status: 204;
};

export type AwsClusterNameValidateResponseComposite =
  AwsClusterNameValidateResponse204;

export type AwsClusterNameValidateResponse =
  AwsClusterNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AwsClusterNameValidateUrl = (
  region: string,
  params: AwsClusterNameValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/eksClusters/name/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/eksClusters/name/validate`;
};

export const AwsClusterNameValidate = async (
  region: string,
  params: AwsClusterNameValidateParams,
  options?: RequestInit,
): Promise<AwsClusterNameValidateResponse> => {
  const res = await fetch(getV1AwsClusterNameValidateUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsClusterNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsClusterNameValidateResponse;
};

/**
 * @summary Returns AWS image for the specified AMI name
 */
export type AwsFindImageResponse200 = {
  data: AwsImage;
  status: 200;
};

export type AwsFindImageResponseComposite = AwsFindImageResponse200;

export type AwsFindImageResponse = AwsFindImageResponseComposite & {
  headers: Headers;
};

export const getV1AwsFindImageUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/images`;
};

export const AwsFindImage = async (
  region: string,
  AwsFindImageRequest: AwsFindImageRequest,
  options?: RequestInit,
): Promise<AwsFindImageResponse> => {
  const res = await fetch(getV1AwsFindImageUrl(region), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsFindImageRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsFindImageResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsFindImageResponse;
};

/**
 * @summary Retrieves a list of AWS instance types
 */
export type AwsInstanceTypesResponse200 = {
  data: AwsInstanceTypes;
  status: 200;
};

export type AwsInstanceTypesResponseComposite = AwsInstanceTypesResponse200;

export type AwsInstanceTypesResponse = AwsInstanceTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsInstanceTypesUrl = (
  region: string,
  params?: AwsInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/instancetypes`;
};

export const AwsInstanceTypes = async (
  region: string,
  params?: AwsInstanceTypesParams,
  options?: RequestInit,
): Promise<AwsInstanceTypesResponse> => {
  const res = await fetch(getV1AwsInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsInstanceTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of AWS keypairs
 */
export type AwsKeyPairsResponse200 = {
  data: AwsKeyPairs;
  status: 200;
};

export type AwsKeyPairsResponseComposite = AwsKeyPairsResponse200;

export type AwsKeyPairsResponse = AwsKeyPairsResponseComposite & {
  headers: Headers;
};

export const getV1AwsKeyPairsUrl = (
  region: string,
  params: AwsKeyPairsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs`;
};

export const AwsKeyPairs = async (
  region: string,
  params: AwsKeyPairsParams,
  options?: RequestInit,
): Promise<AwsKeyPairsResponse> => {
  const res = await fetch(getV1AwsKeyPairsUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsKeyPairsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsKeyPairsResponse;
};

/**
 * @summary Validate the specified AWS keypair
 */
export type AwsKeyPairValidateResponse204 = {
  data: void;
  status: 204;
};

export type AwsKeyPairValidateResponseComposite = AwsKeyPairValidateResponse204;

export type AwsKeyPairValidateResponse = AwsKeyPairValidateResponseComposite & {
  headers: Headers;
};

export const getV1AwsKeyPairValidateUrl = (
  region: string,
  keypair: string,
  params: AwsKeyPairValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs/${keypair}/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/keypairs/${keypair}/validate`;
};

export const AwsKeyPairValidate = async (
  region: string,
  keypair: string,
  params: AwsKeyPairValidateParams,
  options?: RequestInit,
): Promise<AwsKeyPairValidateResponse> => {
  const res = await fetch(getV1AwsKeyPairValidateUrl(region, keypair, params), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsKeyPairValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsKeyPairValidateResponse;
};

/**
 * @summary Get AWS KMS key by Id
 */
export type AwsKmsKeyGetResponse200 = {
  data: AwsKmsKeyEntity;
  status: 200;
};

export type AwsKmsKeyGetResponseComposite = AwsKmsKeyGetResponse200;

export type AwsKmsKeyGetResponse = AwsKmsKeyGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsKmsKeyGetUrl = (
  region: string,
  keyId: string,
  params: AwsKmsKeyGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kms/${keyId}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kms/${keyId}`;
};

export const AwsKmsKeyGet = async (
  region: string,
  keyId: string,
  params: AwsKmsKeyGetParams,
  options?: RequestInit,
): Promise<AwsKmsKeyGetResponse> => {
  const res = await fetch(getV1AwsKmsKeyGetUrl(region, keyId, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsKmsKeyGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsKmsKeyGetResponse;
};

/**
 * @summary Retrieves a list of AWS KMS keys for the specified account
 */
export type AwsKmsKeysResponse200 = {
  data: AwsKmsKeys;
  status: 200;
};

export type AwsKmsKeysResponseComposite = AwsKmsKeysResponse200;

export type AwsKmsKeysResponse = AwsKmsKeysResponseComposite & {
  headers: Headers;
};

export const getV1AwsKmsKeysUrl = (
  region: string,
  params: AwsKmsKeysParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys`;
};

export const AwsKmsKeys = async (
  region: string,
  params: AwsKmsKeysParams,
  options?: RequestInit,
): Promise<AwsKmsKeysResponse> => {
  const res = await fetch(getV1AwsKmsKeysUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsKmsKeysResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsKmsKeysResponse;
};

/**
 * @summary Validate an Aws KMS key for the specified account
 */
export type AwsKmsKeyValidateResponse204 = {
  data: void;
  status: 204;
};

export type AwsKmsKeyValidateResponseComposite = AwsKmsKeyValidateResponse204;

export type AwsKmsKeyValidateResponse = AwsKmsKeyValidateResponseComposite & {
  headers: Headers;
};

export const getV1AwsKmsKeyValidateUrl = (
  region: string,
  params: AwsKmsKeyValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/kmskeys/validate`;
};

export const AwsKmsKeyValidate = async (
  region: string,
  params: AwsKmsKeyValidateParams,
  options?: RequestInit,
): Promise<AwsKmsKeyValidateResponse> => {
  const res = await fetch(getV1AwsKmsKeyValidateUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsKmsKeyValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsKmsKeyValidateResponse;
};

/**
 * @summary Retrieves a list of AWS storage types
 */
export type AwsStorageTypesResponse200 = {
  data: AwsStorageTypes;
  status: 200;
};

export type AwsStorageTypesResponseComposite = AwsStorageTypesResponse200;

export type AwsStorageTypesResponse = AwsStorageTypesResponseComposite & {
  headers: Headers;
};

export const getV1AwsStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/storagetypes`;
};

export const AwsStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<AwsStorageTypesResponse> => {
  const res = await fetch(getV1AwsStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsStorageTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsStorageTypesResponse;
};

/**
 * @summary Retrieves a list of VPCs for the specified account
 */
export type AwsVpcsResponse200 = {
  data: AwsVpcs;
  status: 200;
};

export type AwsVpcsResponseComposite = AwsVpcsResponse200;

export type AwsVpcsResponse = AwsVpcsResponseComposite & {
  headers: Headers;
};

export const getV1AwsVpcsUrl = (region: string, params: AwsVpcsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/vpcs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/regions/${region}/vpcs`;
};

export const AwsVpcs = async (
  region: string,
  params: AwsVpcsParams,
  options?: RequestInit,
): Promise<AwsVpcsResponse> => {
  const res = await fetch(getV1AwsVpcsUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsVpcsResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as AwsVpcsResponse;
};

/**
 * @summary Validate the AWS S3 bucket
 */
export type AwsS3ValidateResponse204 = {
  data: void;
  status: 204;
};

export type AwsS3ValidateResponseComposite = AwsS3ValidateResponse204;

export type AwsS3ValidateResponse = AwsS3ValidateResponseComposite & {
  headers: Headers;
};

export const getV1AwsS3ValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/aws/s3/validate`;
};

export const AwsS3Validate = async (
  AwsS3BucketCredentials: AwsS3BucketCredentials,
  options?: RequestInit,
): Promise<AwsS3ValidateResponse> => {
  const res = await fetch(getV1AwsS3ValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AwsS3BucketCredentials),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsS3ValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsS3ValidateResponse;
};

/**
 * @summary Retrieves a list of AWS security groups for the specified account
 */
export type AwsSecurityGroupsResponse200 = {
  data: AwsSecurityGroups;
  status: 200;
};

export type AwsSecurityGroupsResponseComposite = AwsSecurityGroupsResponse200;

export type AwsSecurityGroupsResponse = AwsSecurityGroupsResponseComposite & {
  headers: Headers;
};

export const getV1AwsSecurityGroupsUrl = (params: AwsSecurityGroupsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/securitygroups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/securitygroups`;
};

export const AwsSecurityGroups = async (
  params: AwsSecurityGroupsParams,
  options?: RequestInit,
): Promise<AwsSecurityGroupsResponse> => {
  const res = await fetch(getV1AwsSecurityGroupsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsSecurityGroupsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsSecurityGroupsResponse;
};

/**
 * List all AWS Volume Types
 * @summary Get all AWS Volume Types
 */
export type AwsVolumeTypesGetResponse200 = {
  data: AWSVolumeTypes;
  status: 200;
};

export type AwsVolumeTypesGetResponseComposite = AwsVolumeTypesGetResponse200;

export type AwsVolumeTypesGetResponse = AwsVolumeTypesGetResponseComposite & {
  headers: Headers;
};

export const getV1AwsVolumeTypesGetUrl = (params: AwsVolumeTypesGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/aws/volumeTypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/aws/volumeTypes`;
};

export const AwsVolumeTypesGet = async (
  params: AwsVolumeTypesGetParams,
  options?: RequestInit,
): Promise<AwsVolumeTypesGetResponse> => {
  const res = await fetch(getV1AwsVolumeTypesGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AwsVolumeTypesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AwsVolumeTypesGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Azure account is valid
 */
export type AzureAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type AzureAccountValidateResponseComposite =
  AzureAccountValidateResponse204;

export type AzureAccountValidateResponse =
  AzureAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AzureAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/azure/account/validate`;
};

export const AzureAccountValidate = async (
  AzureCloudAccount: AzureCloudAccount,
  options?: RequestInit,
): Promise<AzureAccountValidateResponse> => {
  const res = await fetch(getV1AzureAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AzureCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureAccountValidateResponse;
};

/**
 * @summary Retrieves a list of Azure groups
 */
export type AzureGroupsResponse200 = {
  data: AzureGroups;
  status: 200;
};

export type AzureGroupsResponseComposite = AzureGroupsResponse200;

export type AzureGroupsResponse = AzureGroupsResponseComposite & {
  headers: Headers;
};

export const getV1AzureGroupsUrl = (params?: AzureGroupsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/groups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/groups`;
};

export const AzureGroups = async (
  params?: AzureGroupsParams,
  options?: RequestInit,
): Promise<AzureGroupsResponse> => {
  const res = await fetch(getV1AzureGroupsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureGroupsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureGroupsResponse;
};

/**
 * @summary Retrieves a list of Azure regions
 */
export type AzureRegionsResponse200 = {
  data: AzureRegions;
  status: 200;
};

export type AzureRegionsResponseComposite = AzureRegionsResponse200;

export type AzureRegionsResponse = AzureRegionsResponseComposite & {
  headers: Headers;
};

export const getV1AzureRegionsUrl = (params?: AzureRegionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions`;
};

export const AzureRegions = async (
  params?: AzureRegionsParams,
  options?: RequestInit,
): Promise<AzureRegionsResponse> => {
  const res = await fetch(getV1AzureRegionsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureRegionsResponse;
};

/**
 * @summary Retrieves a list of Azure instance types
 */
export type AzureInstanceTypesResponse200 = {
  data: AzureInstanceTypes;
  status: 200;
};

export type AzureInstanceTypesResponseComposite = AzureInstanceTypesResponse200;

export type AzureInstanceTypesResponse = AzureInstanceTypesResponseComposite & {
  headers: Headers;
};

export const getV1AzureInstanceTypesUrl = (
  region: string,
  params?: AzureInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/instancetypes`;
};

export const AzureInstanceTypes = async (
  region: string,
  params?: AzureInstanceTypesParams,
  options?: RequestInit,
): Promise<AzureInstanceTypesResponse> => {
  const res = await fetch(getV1AzureInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureInstanceTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of Azure storage types
 */
export type AzureStorageTypesResponse200 = {
  data: AzureStorageTypes;
  status: 200;
};

export type AzureStorageTypesResponseComposite = AzureStorageTypesResponse200;

export type AzureStorageTypesResponse = AzureStorageTypesResponseComposite & {
  headers: Headers;
};

export const getV1AzureStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/storagetypes`;
};

export const AzureStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<AzureStorageTypesResponse> => {
  const res = await fetch(getV1AzureStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureStorageTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureStorageTypesResponse;
};

/**
 * Returns no contents if Azure cluster name is valid else error.
 * @summary Check if Azure cluster name is valid
 */
export type AzureClusterNameValidateResponse204 = {
  data: void;
  status: 204;
};

export type AzureClusterNameValidateResponseComposite =
  AzureClusterNameValidateResponse204;

export type AzureClusterNameValidateResponse =
  AzureClusterNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1AzureClusterNameValidateUrl = (
  region: string,
  subscriptionId: string,
  params: AzureClusterNameValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/aksClusters/name/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/aksClusters/name/validate`;
};

export const AzureClusterNameValidate = async (
  region: string,
  subscriptionId: string,
  params: AzureClusterNameValidateParams,
  options?: RequestInit,
): Promise<AzureClusterNameValidateResponse> => {
  const res = await fetch(
    getV1AzureClusterNameValidateUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureClusterNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureClusterNameValidateResponse;
};

/**
 * @summary Retrieves a list of Azure virtual network list for the sepcified account
 */
export type AzureVirtualNetworkListResponse200 = {
  data: AzureVirtualNetworkList;
  status: 200;
};

export type AzureVirtualNetworkListResponseComposite =
  AzureVirtualNetworkListResponse200;

export type AzureVirtualNetworkListResponse =
  AzureVirtualNetworkListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureVirtualNetworkListUrl = (
  region: string,
  subscriptionId: string,
  params: AzureVirtualNetworkListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/networks`;
};

export const AzureVirtualNetworkList = async (
  region: string,
  subscriptionId: string,
  params: AzureVirtualNetworkListParams,
  options?: RequestInit,
): Promise<AzureVirtualNetworkListResponse> => {
  const res = await fetch(
    getV1AzureVirtualNetworkListUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureVirtualNetworkListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureVirtualNetworkListResponse;
};

/**
 * @summary Retrieves a list of Azure resource group for the specified account
 */
export type AzureResourceGroupListResponse200 = {
  data: AzureResourceGroupList;
  status: 200;
};

export type AzureResourceGroupListResponseComposite =
  AzureResourceGroupListResponse200;

export type AzureResourceGroupListResponse =
  AzureResourceGroupListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureResourceGroupListUrl = (
  region: string,
  subscriptionId: string,
  params: AzureResourceGroupListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/resourceGroups?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/subscriptions/${subscriptionId}/resourceGroups`;
};

export const AzureResourceGroupList = async (
  region: string,
  subscriptionId: string,
  params: AzureResourceGroupListParams,
  options?: RequestInit,
): Promise<AzureResourceGroupListResponse> => {
  const res = await fetch(
    getV1AzureResourceGroupListUrl(region, subscriptionId, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureResourceGroupListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureResourceGroupListResponse;
};

/**
 * @summary Retrieves a list of Azure zones for the specified region
 */
export type AzureZonesResponse200 = {
  data: AzureZoneEntity;
  status: 200;
};

export type AzureZonesResponseComposite = AzureZonesResponse200;

export type AzureZonesResponse = AzureZonesResponseComposite & {
  headers: Headers;
};

export const getV1AzureZonesUrl = (
  region: string,
  params?: AzureZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/regions/${region}/zones`;
};

export const AzureZones = async (
  region: string,
  params?: AzureZonesParams,
  options?: RequestInit,
): Promise<AzureZonesResponse> => {
  const res = await fetch(getV1AzureZonesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureZonesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureZonesResponse;
};

/**
 * Returns Azure private DNS zones
 * @summary Get Azure private DNS zones for the given resource group
 */
export type AzurePrivateDnsZonesResponse200 = {
  data: AzurePrivateDnsZones;
  status: 200;
};

export type AzurePrivateDnsZonesResponseComposite =
  AzurePrivateDnsZonesResponse200;

export type AzurePrivateDnsZonesResponse =
  AzurePrivateDnsZonesResponseComposite & {
    headers: Headers;
  };

export const getV1AzurePrivateDnsZonesUrl = (
  resourceGroup: string,
  params: AzurePrivateDnsZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/privateDnsZones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/privateDnsZones`;
};

export const AzurePrivateDnsZones = async (
  resourceGroup: string,
  params: AzurePrivateDnsZonesParams,
  options?: RequestInit,
): Promise<AzurePrivateDnsZonesResponse> => {
  const res = await fetch(getV1AzurePrivateDnsZonesUrl(resourceGroup, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzurePrivateDnsZonesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzurePrivateDnsZonesResponse;
};

/**
 * Returns Azure storage accounts.
 * @summary Get Azure storage accounts
 */
export type AzureStorageAccountsResponse200 = {
  data: AzureStorageAccounts;
  status: 200;
};

export type AzureStorageAccountsResponseComposite =
  AzureStorageAccountsResponse200;

export type AzureStorageAccountsResponse =
  AzureStorageAccountsResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageAccountsUrl = (
  resourceGroup: string,
  params: AzureStorageAccountsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts`;
};

export const AzureStorageAccounts = async (
  resourceGroup: string,
  params: AzureStorageAccountsParams,
  options?: RequestInit,
): Promise<AzureStorageAccountsResponse> => {
  const res = await fetch(getV1AzureStorageAccountsUrl(resourceGroup, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureStorageAccountsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureStorageAccountsResponse;
};

/**
 * Returns Azure storage containers for the given account.
 * @summary Get Azure storage containers
 */
export type AzureStorageContainersResponse200 = {
  data: AzureStorageContainers;
  status: 200;
};

export type AzureStorageContainersResponseComposite =
  AzureStorageContainersResponse200;

export type AzureStorageContainersResponse =
  AzureStorageContainersResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageContainersUrl = (
  resourceGroup: string,
  storageAccountName: string,
  params: AzureStorageContainersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts/${storageAccountName}/containers?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/resourceGroups/${resourceGroup}/storageAccounts/${storageAccountName}/containers`;
};

export const AzureStorageContainers = async (
  resourceGroup: string,
  storageAccountName: string,
  params: AzureStorageContainersParams,
  options?: RequestInit,
): Promise<AzureStorageContainersResponse> => {
  const res = await fetch(
    getV1AzureStorageContainersUrl(resourceGroup, storageAccountName, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureStorageContainersResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureStorageContainersResponse;
};

/**
 * Returns Azure storage account types.
 * @summary Get Azure storage account types
 */
export type AzureStorageAccountTypesResponse200 = {
  data: AzureStorageAccountEntity;
  status: 200;
};

export type AzureStorageAccountTypesResponseComposite =
  AzureStorageAccountTypesResponse200;

export type AzureStorageAccountTypesResponse =
  AzureStorageAccountTypesResponseComposite & {
    headers: Headers;
  };

export const getV1AzureStorageAccountTypesUrl = (
  params?: AzureStorageAccountTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/storageaccounttypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/storageaccounttypes`;
};

export const AzureStorageAccountTypes = async (
  params?: AzureStorageAccountTypesParams,
  options?: RequestInit,
): Promise<AzureStorageAccountTypesResponse> => {
  const res = await fetch(getV1AzureStorageAccountTypesUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureStorageAccountTypesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureStorageAccountTypesResponse;
};

/**
 * Returns list of Azure subscription list.
 * @summary Retrieves a list of Azure subscription list for the specified account
 */
export type AzureSubscriptionListResponse200 = {
  data: AzureSubscriptionList;
  status: 200;
};

export type AzureSubscriptionListResponseComposite =
  AzureSubscriptionListResponse200;

export type AzureSubscriptionListResponse =
  AzureSubscriptionListResponseComposite & {
    headers: Headers;
  };

export const getV1AzureSubscriptionListUrl = (
  params: AzureSubscriptionListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/azure/subscriptions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/azure/subscriptions`;
};

export const AzureSubscriptionList = async (
  params: AzureSubscriptionListParams,
  options?: RequestInit,
): Promise<AzureSubscriptionListResponse> => {
  const res = await fetch(getV1AzureSubscriptionListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureSubscriptionListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureSubscriptionListResponse;
};

/**
 * @summary Returns the Azure vhd url for the specified vhd location
 */
export type AzureVhdUrlResponse200 = {
  data: AzureVhdUrlEntity;
  status: 200;
};

export type AzureVhdUrlResponseComposite = AzureVhdUrlResponse200;

export type AzureVhdUrlResponse = AzureVhdUrlResponseComposite & {
  headers: Headers;
};

export const getV1AzureVhdUrlUrl = (vhd: string) => {
  return `https://api.spectrocloud.com/v1/clouds/azure/vhds/${vhd}/url`;
};

export const AzureVhdUrl = async (
  vhd: string,
  options?: RequestInit,
): Promise<AzureVhdUrlResponse> => {
  const res = await fetch(getV1AzureVhdUrlUrl(vhd), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: AzureVhdUrlResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as AzureVhdUrlResponse;
};

/**
 * @summary Returns the custom cloud types
 */
export type CustomCloudTypesGetResponse200 = {
  data: CustomCloudTypes;
  status: 200;
};

export type CustomCloudTypesGetResponseComposite =
  CustomCloudTypesGetResponse200;

export type CustomCloudTypesGetResponse =
  CustomCloudTypesGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypesGetUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes`;
};

export const CustomCloudTypesGet = async (
  options?: RequestInit,
): Promise<CustomCloudTypesGetResponse> => {
  const res = await fetch(getV1CustomCloudTypesGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypesGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypesGetResponse;
};

/**
 * @summary Registers the custom cloud type
 */
export type CustomCloudTypeRegisterResponse201 = {
  data: Uid;
  status: 201;
};

export type CustomCloudTypeRegisterResponseComposite =
  CustomCloudTypeRegisterResponse201;

export type CustomCloudTypeRegisterResponse =
  CustomCloudTypeRegisterResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeRegisterUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/register`;
};

export const CustomCloudTypeRegister = async (
  CustomCloudRequestEntity: CustomCloudRequestEntity,
  options?: RequestInit,
): Promise<CustomCloudTypeRegisterResponse> => {
  const res = await fetch(getV1CustomCloudTypeRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(CustomCloudRequestEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeRegisterResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeRegisterResponse;
};

/**
 * @summary Deletes the custom cloud type
 */
export type CustomCloudTypesDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypesDeleteResponseComposite =
  CustomCloudTypesDeleteResponse204;

export type CustomCloudTypesDeleteResponse =
  CustomCloudTypesDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypesDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}`;
};

export const CustomCloudTypesDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypesDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypesDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypesDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypesDeleteResponse;
};

/**
 * @summary Returns valid keys for the cloud account used for custom cloud type
 */
export type CustomCloudTypeCloudAccountKeysGetResponse200 = {
  data: CustomCloudTypeCloudAccountKeys;
  status: 200;
};

export type CustomCloudTypeCloudAccountKeysGetResponseComposite =
  CustomCloudTypeCloudAccountKeysGetResponse200;

export type CustomCloudTypeCloudAccountKeysGetResponse =
  CustomCloudTypeCloudAccountKeysGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudAccountKeysGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/cloudAccountKeys`;
};

export const CustomCloudTypeCloudAccountKeysGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeCloudAccountKeysGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudAccountKeysGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCloudAccountKeysGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCloudAccountKeysGetResponse;
};

/**
 * @summary Update the custom cloud type cloud account keys
 */
export type CustomCloudTypeCloudAccountKeysUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeCloudAccountKeysUpdateResponseComposite =
  CustomCloudTypeCloudAccountKeysUpdateResponse204;

export type CustomCloudTypeCloudAccountKeysUpdateResponse =
  CustomCloudTypeCloudAccountKeysUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudAccountKeysUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/cloudAccountKeys`;
};

export const CustomCloudTypeCloudAccountKeysUpdate = async (
  cloudType: string,
  CustomCloudTypeCloudAccountKeys: CustomCloudTypeCloudAccountKeys,
  options?: RequestInit,
): Promise<CustomCloudTypeCloudAccountKeysUpdateResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudAccountKeysUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(CustomCloudTypeCloudAccountKeys),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCloudAccountKeysUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCloudAccountKeysUpdateResponse;
};

/**
 * @summary Delete the custom cloud type bootstrap
 */
export type CustomCloudTypeBootstrapDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeBootstrapDeleteResponseComposite =
  CustomCloudTypeBootstrapDeleteResponse204;

export type CustomCloudTypeBootstrapDeleteResponse =
  CustomCloudTypeBootstrapDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const CustomCloudTypeBootstrapDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeBootstrapDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypeBootstrapDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeBootstrapDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeBootstrapDeleteResponse;
};

/**
 * @summary Returns the custom cloud type bootstrap
 */
export type CustomCloudTypeBootstrapGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type CustomCloudTypeBootstrapGetResponseComposite =
  CustomCloudTypeBootstrapGetResponse200;

export type CustomCloudTypeBootstrapGetResponse =
  CustomCloudTypeBootstrapGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const CustomCloudTypeBootstrapGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeBootstrapGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeBootstrapGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeBootstrapGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeBootstrapGetResponse;
};

/**
 * @summary Update the custom cloud type bootstrap
 */
export type CustomCloudTypeBootstrapUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeBootstrapUpdateResponseComposite =
  CustomCloudTypeBootstrapUpdateResponse204;

export type CustomCloudTypeBootstrapUpdateResponse =
  CustomCloudTypeBootstrapUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeBootstrapUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/bootstrap`;
};

export const CustomCloudTypeBootstrapUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeBootstrapUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(getV1CustomCloudTypeBootstrapUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeBootstrapUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeBootstrapUpdateResponse;
};

/**
 * @summary Delete the custom cloud type cloud provider
 */
export type CustomCloudTypeCloudProviderDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeCloudProviderDeleteResponseComposite =
  CustomCloudTypeCloudProviderDeleteResponse204;

export type CustomCloudTypeCloudProviderDeleteResponse =
  CustomCloudTypeCloudProviderDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const CustomCloudTypeCloudProviderDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeCloudProviderDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeCloudProviderDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCloudProviderDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCloudProviderDeleteResponse;
};

/**
 * @summary Returns the custom cloud type cloud provider
 */
export type CustomCloudTypeCloudProviderGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type CustomCloudTypeCloudProviderGetResponseComposite =
  CustomCloudTypeCloudProviderGetResponse200;

export type CustomCloudTypeCloudProviderGetResponse =
  CustomCloudTypeCloudProviderGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const CustomCloudTypeCloudProviderGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeCloudProviderGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeCloudProviderGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCloudProviderGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCloudProviderGetResponse;
};

/**
 * @summary Update the custom cloud type cloud provider
 */
export type CustomCloudTypeCloudProviderUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeCloudProviderUpdateResponseComposite =
  CustomCloudTypeCloudProviderUpdateResponse204;

export type CustomCloudTypeCloudProviderUpdateResponse =
  CustomCloudTypeCloudProviderUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCloudProviderUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/cloudProvider`;
};

export const CustomCloudTypeCloudProviderUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeCloudProviderUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeCloudProviderUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCloudProviderUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCloudProviderUpdateResponse;
};

/**
 * @summary Delete the custom cloud type control plane
 */
export type CustomCloudTypeControlPlaneDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeControlPlaneDeleteResponseComposite =
  CustomCloudTypeControlPlaneDeleteResponse204;

export type CustomCloudTypeControlPlaneDeleteResponse =
  CustomCloudTypeControlPlaneDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const CustomCloudTypeControlPlaneDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeControlPlaneDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlaneDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeControlPlaneDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeControlPlaneDeleteResponse;
};

/**
 * @summary Returns the custom cloud type control plane
 */
export type CustomCloudTypeControlPlaneGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type CustomCloudTypeControlPlaneGetResponseComposite =
  CustomCloudTypeControlPlaneGetResponse200;

export type CustomCloudTypeControlPlaneGetResponse =
  CustomCloudTypeControlPlaneGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const CustomCloudTypeControlPlaneGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeControlPlaneGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeControlPlaneGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeControlPlaneGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeControlPlaneGetResponse;
};

/**
 * @summary Update the custom cloud type control plane
 */
export type CustomCloudTypeControlPlaneUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeControlPlaneUpdateResponseComposite =
  CustomCloudTypeControlPlaneUpdateResponse204;

export type CustomCloudTypeControlPlaneUpdateResponse =
  CustomCloudTypeControlPlaneUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlaneUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/controlPlane`;
};

export const CustomCloudTypeControlPlaneUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeControlPlaneUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeControlPlaneUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeControlPlaneUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeControlPlaneUpdateResponse;
};

/**
 * @summary Delete the custom cloud type core
 */
export type CustomCloudTypeCoreDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeCoreDeleteResponseComposite =
  CustomCloudTypeCoreDeleteResponse204;

export type CustomCloudTypeCoreDeleteResponse =
  CustomCloudTypeCoreDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreDeleteUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const CustomCloudTypeCoreDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeCoreDeleteResponse> => {
  const res = await fetch(getV1CustomCloudTypeCoreDeleteUrl(cloudType), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCoreDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCoreDeleteResponse;
};

/**
 * @summary Returns the custom cloud type core
 */
export type CustomCloudTypeCoreGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type CustomCloudTypeCoreGetResponseComposite =
  CustomCloudTypeCoreGetResponse200;

export type CustomCloudTypeCoreGetResponse =
  CustomCloudTypeCoreGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const CustomCloudTypeCoreGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeCoreGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeCoreGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCoreGetResponse;
};

/**
 * @summary Update the custom cloud type core
 */
export type CustomCloudTypeCoreUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeCoreUpdateResponseComposite =
  CustomCloudTypeCoreUpdateResponse204;

export type CustomCloudTypeCoreUpdateResponse =
  CustomCloudTypeCoreUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeCoreUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/core`;
};

export const CustomCloudTypeCoreUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeCoreUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(getV1CustomCloudTypeCoreUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeCoreUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeCoreUpdateResponse;
};

/**
 * @summary Delete the custom cloud type cluster template
 */
export type CustomCloudTypeClusterTemplateDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeClusterTemplateDeleteResponseComposite =
  CustomCloudTypeClusterTemplateDeleteResponse204;

export type CustomCloudTypeClusterTemplateDeleteResponse =
  CustomCloudTypeClusterTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const CustomCloudTypeClusterTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeClusterTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeClusterTemplateDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeClusterTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type cluster template
 */
export type CustomCloudTypeClusterTemplateGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type CustomCloudTypeClusterTemplateGetResponseComposite =
  CustomCloudTypeClusterTemplateGetResponse200;

export type CustomCloudTypeClusterTemplateGetResponse =
  CustomCloudTypeClusterTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const CustomCloudTypeClusterTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeClusterTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeClusterTemplateGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeClusterTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type cluster template
 */
export type CustomCloudTypeClusterTemplateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeClusterTemplateUpdateResponseComposite =
  CustomCloudTypeClusterTemplateUpdateResponse204;

export type CustomCloudTypeClusterTemplateUpdateResponse =
  CustomCloudTypeClusterTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeClusterTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/clusterTemplate`;
};

export const CustomCloudTypeClusterTemplateUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeClusterTemplateUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeClusterTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeClusterTemplateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeClusterTemplateUpdateResponse;
};

/**
 * @summary Delete the custom cloud type controlPlane pool template
 */
export type CustomCloudTypeControlPlanePoolTemplateDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeControlPlanePoolTemplateDeleteResponseComposite =
  CustomCloudTypeControlPlanePoolTemplateDeleteResponse204;

export type CustomCloudTypeControlPlanePoolTemplateDeleteResponse =
  CustomCloudTypeControlPlanePoolTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const CustomCloudTypeControlPlanePoolTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeControlPlanePoolTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeControlPlanePoolTemplateDeleteResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeControlPlanePoolTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type controlPlane pool template
 */
export type CustomCloudTypeControlPlanePoolTemplateGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type CustomCloudTypeControlPlanePoolTemplateGetResponseComposite =
  CustomCloudTypeControlPlanePoolTemplateGetResponse200;

export type CustomCloudTypeControlPlanePoolTemplateGetResponse =
  CustomCloudTypeControlPlanePoolTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const CustomCloudTypeControlPlanePoolTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeControlPlanePoolTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeControlPlanePoolTemplateGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeControlPlanePoolTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type controlPlane pool template
 */
export type CustomCloudTypeControlPlanePoolTemplateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeControlPlanePoolTemplateUpdateResponseComposite =
  CustomCloudTypeControlPlanePoolTemplateUpdateResponse204;

export type CustomCloudTypeControlPlanePoolTemplateUpdateResponse =
  CustomCloudTypeControlPlanePoolTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeControlPlanePoolTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/controlPlanePoolTemplate`;
};

export const CustomCloudTypeControlPlanePoolTemplateUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeControlPlanePoolTemplateUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeControlPlanePoolTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeControlPlanePoolTemplateUpdateResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeControlPlanePoolTemplateUpdateResponse;
};

/**
 * @summary Delete the custom cloud type worker pool template
 */
export type CustomCloudTypeWorkerPoolTemplateDeleteResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeWorkerPoolTemplateDeleteResponseComposite =
  CustomCloudTypeWorkerPoolTemplateDeleteResponse204;

export type CustomCloudTypeWorkerPoolTemplateDeleteResponse =
  CustomCloudTypeWorkerPoolTemplateDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateDeleteUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const CustomCloudTypeWorkerPoolTemplateDelete = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeWorkerPoolTemplateDeleteResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateDeleteUrl(cloudType),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeWorkerPoolTemplateDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeWorkerPoolTemplateDeleteResponse;
};

/**
 * @summary Returns the custom cloud type worker pool template
 */
export type CustomCloudTypeWorkerPoolTemplateGetResponse200 = {
  data: CustomCloudTypeContentResponse;
  status: 200;
};

export type CustomCloudTypeWorkerPoolTemplateGetResponseComposite =
  CustomCloudTypeWorkerPoolTemplateGetResponse200;

export type CustomCloudTypeWorkerPoolTemplateGetResponse =
  CustomCloudTypeWorkerPoolTemplateGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateGetUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const CustomCloudTypeWorkerPoolTemplateGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeWorkerPoolTemplateGetResponse> => {
  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateGetUrl(cloudType),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeWorkerPoolTemplateGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeWorkerPoolTemplateGetResponse;
};

/**
 * @summary Update the custom cloud type worker pool template
 */
export type CustomCloudTypeWorkerPoolTemplateUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeWorkerPoolTemplateUpdateResponseComposite =
  CustomCloudTypeWorkerPoolTemplateUpdateResponse204;

export type CustomCloudTypeWorkerPoolTemplateUpdateResponse =
  CustomCloudTypeWorkerPoolTemplateUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeWorkerPoolTemplateUpdateUrl = (
  cloudType: string,
) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/content/templates/workerPoolTemplate`;
};

export const CustomCloudTypeWorkerPoolTemplateUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeWorkerPoolTemplateUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(
    getV1CustomCloudTypeWorkerPoolTemplateUpdateUrl(cloudType),
    {
      ...options,
      method: "PUT",
      body: formData,
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeWorkerPoolTemplateUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeWorkerPoolTemplateUpdateResponse;
};

/**
 * @summary Returns the custom cloud type logo
 */
export type CustomCloudTypeLogoGetResponse200 = {
  data: Blob;
  status: 200;
};

export type CustomCloudTypeLogoGetResponseComposite =
  CustomCloudTypeLogoGetResponse200;

export type CustomCloudTypeLogoGetResponse =
  CustomCloudTypeLogoGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeLogoGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/logo`;
};

export const CustomCloudTypeLogoGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeLogoGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeLogoGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeLogoGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeLogoGetResponse;
};

/**
 * @summary Update the custom cloud type logo
 */
export type CustomCloudTypeLogoUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeLogoUpdateResponseComposite =
  CustomCloudTypeLogoUpdateResponse204;

export type CustomCloudTypeLogoUpdateResponse =
  CustomCloudTypeLogoUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeLogoUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/logo`;
};

export const CustomCloudTypeLogoUpdate = async (
  cloudType: string,
  CustomCloudTypeBootstrapUpdateBody: CustomCloudTypeBootstrapUpdateBody,
  options?: RequestInit,
): Promise<CustomCloudTypeLogoUpdateResponse> => {
  const formData = new FormData();
  if (CustomCloudTypeBootstrapUpdateBody.fileName !== undefined) {
    formData.append(`fileName`, CustomCloudTypeBootstrapUpdateBody.fileName);
  }

  const res = await fetch(getV1CustomCloudTypeLogoUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    body: formData,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeLogoUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeLogoUpdateResponse;
};

/**
 * @summary Returns the custom cloud type meta
 */
export type CustomCloudTypeMetaGetResponse200 = {
  data: CustomCloudMetaEntity;
  status: 200;
};

export type CustomCloudTypeMetaGetResponseComposite =
  CustomCloudTypeMetaGetResponse200;

export type CustomCloudTypeMetaGetResponse =
  CustomCloudTypeMetaGetResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeMetaGetUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/meta`;
};

export const CustomCloudTypeMetaGet = async (
  cloudType: string,
  options?: RequestInit,
): Promise<CustomCloudTypeMetaGetResponse> => {
  const res = await fetch(getV1CustomCloudTypeMetaGetUrl(cloudType), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeMetaGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeMetaGetResponse;
};

/**
 * @summary Update the custom cloud type meta
 */
export type CustomCloudTypeMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type CustomCloudTypeMetaUpdateResponseComposite =
  CustomCloudTypeMetaUpdateResponse204;

export type CustomCloudTypeMetaUpdateResponse =
  CustomCloudTypeMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1CustomCloudTypeMetaUpdateUrl = (cloudType: string) => {
  return `https://api.spectrocloud.com/v1/clouds/cloudTypes/${cloudType}/meta`;
};

export const CustomCloudTypeMetaUpdate = async (
  cloudType: string,
  CustomCloudRequestEntity: CustomCloudRequestEntity,
  options?: RequestInit,
): Promise<CustomCloudTypeMetaUpdateResponse> => {
  const res = await fetch(getV1CustomCloudTypeMetaUpdateUrl(cloudType), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(CustomCloudRequestEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CustomCloudTypeMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CustomCloudTypeMetaUpdateResponse;
};

/**
 * @summary Validate EKS properties
 */
export type EksPropertiesValidateResponse204 = {
  data: void;
  status: 204;
};

export type EksPropertiesValidateResponseComposite =
  EksPropertiesValidateResponse204;

export type EksPropertiesValidateResponse =
  EksPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1EksPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/eks/properties/validate`;
};

export const EksPropertiesValidate = async (
  EksPropertiesValidateSpec: EksPropertiesValidateSpec,
  options?: RequestInit,
): Promise<EksPropertiesValidateResponse> => {
  const res = await fetch(getV1EksPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(EksPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: EksPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as EksPropertiesValidateResponse;
};

/**
 * @summary Validate the specified GCP account credentials
 */
export type GcpAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type GcpAccountValidateResponseComposite = GcpAccountValidateResponse204;

export type GcpAccountValidateResponse = GcpAccountValidateResponseComposite & {
  headers: Headers;
};

export const getV1GcpAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/account/validate`;
};

export const GcpAccountValidate = async (
  GcpCloudAccountValidateEntity: GcpCloudAccountValidateEntity,
  options?: RequestInit,
): Promise<GcpAccountValidateResponse> => {
  const res = await fetch(getV1GcpAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpCloudAccountValidateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpAccountValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpAccountValidateResponse;
};

/**
 * @summary Validate the specified GCP az
 */
export type GcpAzValidateResponse204 = {
  data: void;
  status: 204;
};

export type GcpAzValidateResponseComposite = GcpAzValidateResponse204;

export type GcpAzValidateResponse = GcpAzValidateResponseComposite & {
  headers: Headers;
};

export const getV1GcpAzValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/azs/validate`;
};

export const GcpAzValidate = async (
  AzValidateEntity: AzValidateEntity,
  options?: RequestInit,
): Promise<GcpAzValidateResponse> => {
  const res = await fetch(getV1GcpAzValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AzValidateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpAzValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpAzValidateResponse;
};

/**
 * @summary Validate the specified GCP bucket name credentials
 */
export type GcpBucketNameValidateResponse204 = {
  data: void;
  status: 204;
};

export type GcpBucketNameValidateResponseComposite =
  GcpBucketNameValidateResponse204;

export type GcpBucketNameValidateResponse =
  GcpBucketNameValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpBucketNameValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/bucketname/validate`;
};

export const GcpBucketNameValidate = async (
  GcpAccountNameValidateSpec: GcpAccountNameValidateSpec,
  options?: RequestInit,
): Promise<GcpBucketNameValidateResponse> => {
  const res = await fetch(getV1GcpBucketNameValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpAccountNameValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpBucketNameValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpBucketNameValidateResponse;
};

/**
 * @summary Validates the image with tag
 */
export type GcpContainerImageValidateResponse204 = {
  data: void;
  status: 204;
};

export type GcpContainerImageValidateResponseComposite =
  GcpContainerImageValidateResponse204;

export type GcpContainerImageValidateResponse =
  GcpContainerImageValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpContainerImageValidateUrl = (
  params: GcpContainerImageValidateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/image/container/validate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/image/container/validate`;
};

export const GcpContainerImageValidate = async (
  params: GcpContainerImageValidateParams,
  options?: RequestInit,
): Promise<GcpContainerImageValidateResponse> => {
  const res = await fetch(getV1GcpContainerImageValidateUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpContainerImageValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpContainerImageValidateResponse;
};

/**
 * @summary Returns the Gcp image url for the specified image location
 */
export type GcpImageUrlResponse200 = {
  data: GcpImageUrlEntity;
  status: 200;
};

export type GcpImageUrlResponseComposite = GcpImageUrlResponse200;

export type GcpImageUrlResponse = GcpImageUrlResponseComposite & {
  headers: Headers;
};

export const getV1GcpImageUrlUrl = (imageName: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/images/${imageName}/url`;
};

export const GcpImageUrl = async (
  imageName: string,
  options?: RequestInit,
): Promise<GcpImageUrlResponse> => {
  const res = await fetch(getV1GcpImageUrlUrl(imageName), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpImageUrlResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpImageUrlResponse;
};

/**
 * @summary Retrieves a list of GCP projects for the specified account
 */
export type GcpProjectsResponse200 = {
  data: GcpProjects;
  status: 200;
};

export type GcpProjectsResponseComposite = GcpProjectsResponse200;

export type GcpProjectsResponse = GcpProjectsResponseComposite & {
  headers: Headers;
};

export const getV1GcpProjectsUrl = (params: GcpProjectsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects`;
};

export const GcpProjects = async (
  params: GcpProjectsParams,
  options?: RequestInit,
): Promise<GcpProjectsResponse> => {
  const res = await fetch(getV1GcpProjectsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpProjectsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpProjectsResponse;
};

/**
 * @summary Retrieves a list of GCP regions
 */
export type GcpRegionsResponse200 = {
  data: GcpRegions;
  status: 200;
};

export type GcpRegionsResponseComposite = GcpRegionsResponse200;

export type GcpRegionsResponse = GcpRegionsResponseComposite & {
  headers: Headers;
};

export const getV1GcpRegionsUrl = (
  project: string,
  params: GcpRegionsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions`;
};

export const GcpRegions = async (
  project: string,
  params: GcpRegionsParams,
  options?: RequestInit,
): Promise<GcpRegionsResponse> => {
  const res = await fetch(getV1GcpRegionsUrl(project, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpRegionsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpRegionsResponse;
};

/**
 * @summary Retrieves a list of GCP networks for the specified account
 */
export type GcpNetworksResponse200 = {
  data: GcpNetworks;
  status: 200;
};

export type GcpNetworksResponseComposite = GcpNetworksResponse200;

export type GcpNetworksResponse = GcpNetworksResponseComposite & {
  headers: Headers;
};

export const getV1GcpNetworksUrl = (
  project: string,
  region: string,
  params: GcpNetworksParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/networks`;
};

export const GcpNetworks = async (
  project: string,
  region: string,
  params: GcpNetworksParams,
  options?: RequestInit,
): Promise<GcpNetworksResponse> => {
  const res = await fetch(getV1GcpNetworksUrl(project, region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpNetworksResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpNetworksResponse;
};

/**
 * @summary Retrieves a list of GCP zones for the specified account and region
 */
export type GcpZonesResponse200 = {
  data: GcpZones;
  status: 200;
};

export type GcpZonesResponseComposite = GcpZonesResponse200;

export type GcpZonesResponse = GcpZonesResponseComposite & {
  headers: Headers;
};

export const getV1GcpZonesUrl = (
  project: string,
  region: string,
  params: GcpZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/regions/${region}/zones`;
};

export const GcpZones = async (
  project: string,
  region: string,
  params: GcpZonesParams,
  options?: RequestInit,
): Promise<GcpZonesResponse> => {
  const res = await fetch(getV1GcpZonesUrl(project, region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpZonesResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as GcpZonesResponse;
};

/**
 * @summary Validate the specified GCP project
 */
export type GcpProjectValidateResponse204 = {
  data: void;
  status: 204;
};

export type GcpProjectValidateResponseComposite = GcpProjectValidateResponse204;

export type GcpProjectValidateResponse = GcpProjectValidateResponseComposite & {
  headers: Headers;
};

export const getV1GcpProjectValidateUrl = (project: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/validate`;
};

export const GcpProjectValidate = async (
  project: string,
  CloudAccountUidEntity: CloudAccountUidEntity,
  options?: RequestInit,
): Promise<GcpProjectValidateResponse> => {
  const res = await fetch(getV1GcpProjectValidateUrl(project), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(CloudAccountUidEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpProjectValidateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpProjectValidateResponse;
};

/**
 * @summary Retrieves a list of GCP zones for the specified account
 */
export type GcpAvailabilityZonesResponse200 = {
  data: GcpZones;
  status: 200;
};

export type GcpAvailabilityZonesResponseComposite =
  GcpAvailabilityZonesResponse200;

export type GcpAvailabilityZonesResponse =
  GcpAvailabilityZonesResponseComposite & {
    headers: Headers;
  };

export const getV1GcpAvailabilityZonesUrl = (
  project: string,
  params: GcpAvailabilityZonesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/zones?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/projects/${project}/zones`;
};

export const GcpAvailabilityZones = async (
  project: string,
  params: GcpAvailabilityZonesParams,
  options?: RequestInit,
): Promise<GcpAvailabilityZonesResponse> => {
  const res = await fetch(getV1GcpAvailabilityZonesUrl(project, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpAvailabilityZonesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpAvailabilityZonesResponse;
};

/**
 * @summary Validate GCP properties
 */
export type GcpPropertiesValidateResponse204 = {
  data: void;
  status: 204;
};

export type GcpPropertiesValidateResponseComposite =
  GcpPropertiesValidateResponse204;

export type GcpPropertiesValidateResponse =
  GcpPropertiesValidateResponseComposite & {
    headers: Headers;
  };

export const getV1GcpPropertiesValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/properties/validate`;
};

export const GcpPropertiesValidate = async (
  GcpPropertiesValidateSpec: GcpPropertiesValidateSpec,
  options?: RequestInit,
): Promise<GcpPropertiesValidateResponse> => {
  const res = await fetch(getV1GcpPropertiesValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(GcpPropertiesValidateSpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpPropertiesValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpPropertiesValidateResponse;
};

/**
 * @summary Retrieves a list of GCP instance types
 */
export type GcpInstanceTypesResponse200 = {
  data: GcpInstanceTypes;
  status: 200;
};

export type GcpInstanceTypesResponseComposite = GcpInstanceTypesResponse200;

export type GcpInstanceTypesResponse = GcpInstanceTypesResponseComposite & {
  headers: Headers;
};

export const getV1GcpInstanceTypesUrl = (
  region: string,
  params?: GcpInstanceTypesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/instancetypes?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/instancetypes`;
};

export const GcpInstanceTypes = async (
  region: string,
  params?: GcpInstanceTypesParams,
  options?: RequestInit,
): Promise<GcpInstanceTypesResponse> => {
  const res = await fetch(getV1GcpInstanceTypesUrl(region, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpInstanceTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpInstanceTypesResponse;
};

/**
 * @summary Retrieves a list of Gcp storage types
 */
export type GcpStorageTypesResponse200 = {
  data: GcpStorageTypes;
  status: 200;
};

export type GcpStorageTypesResponseComposite = GcpStorageTypesResponse200;

export type GcpStorageTypesResponse = GcpStorageTypesResponseComposite & {
  headers: Headers;
};

export const getV1GcpStorageTypesUrl = (region: string) => {
  return `https://api.spectrocloud.com/v1/clouds/gcp/regions/${region}/storagetypes`;
};

export const GcpStorageTypes = async (
  region: string,
  options?: RequestInit,
): Promise<GcpStorageTypesResponse> => {
  const res = await fetch(getV1GcpStorageTypesUrl(region), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: GcpStorageTypesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as GcpStorageTypesResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Maas account is valid
 */
export type MaasAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type MaasAccountValidateResponseComposite =
  MaasAccountValidateResponse204;

export type MaasAccountValidateResponse =
  MaasAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1MaasAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/maas/account/validate`;
};

export const MaasAccountValidate = async (
  MaasCloudAccount: MaasCloudAccount,
  options?: RequestInit,
): Promise<MaasAccountValidateResponse> => {
  const res = await fetch(getV1MaasAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MaasCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasAccountValidateResponse;
};

/**
 * @summary Retrieves a list of Maas zones for a particular account uid
 */
export type MaasZonesGetResponse200 = {
  data: MaasZones;
  status: 200;
};

export type MaasZonesGetResponseComposite = MaasZonesGetResponse200;

export type MaasZonesGetResponse = MaasZonesGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasZonesGetUrl = (params?: MaasZonesGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/azs`;
};

export const MaasZonesGet = async (
  params?: MaasZonesGetParams,
  options?: RequestInit,
): Promise<MaasZonesGetResponse> => {
  const res = await fetch(getV1MaasZonesGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasZonesGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasZonesGetResponse;
};

/**
 * @summary Retrieves a list of Maas domains
 */
export type MaasDomainsGetResponse200 = {
  data: MaasDomains;
  status: 200;
};

export type MaasDomainsGetResponseComposite = MaasDomainsGetResponse200;

export type MaasDomainsGetResponse = MaasDomainsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasDomainsGetUrl = (params?: MaasDomainsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/domains?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/domains`;
};

export const MaasDomainsGet = async (
  params?: MaasDomainsGetParams,
  options?: RequestInit,
): Promise<MaasDomainsGetResponse> => {
  const res = await fetch(getV1MaasDomainsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasDomainsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasDomainsGetResponse;
};

/**
 * @summary Retrieves a list of Maas pools for a particular account uid
 */
export type MaasPoolsGetResponse200 = {
  data: MaasPools;
  status: 200;
};

export type MaasPoolsGetResponseComposite = MaasPoolsGetResponse200;

export type MaasPoolsGetResponse = MaasPoolsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasPoolsGetUrl = (params?: MaasPoolsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/resourcePools?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/resourcePools`;
};

export const MaasPoolsGet = async (
  params?: MaasPoolsGetParams,
  options?: RequestInit,
): Promise<MaasPoolsGetResponse> => {
  const res = await fetch(getV1MaasPoolsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasPoolsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasPoolsGetResponse;
};

/**
 * @summary Retrieves a list of Maas subnets for a particular account uid
 */
export type MaasSubnetsGetResponse200 = {
  data: MaasSubnets;
  status: 200;
};

export type MaasSubnetsGetResponseComposite = MaasSubnetsGetResponse200;

export type MaasSubnetsGetResponse = MaasSubnetsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasSubnetsGetUrl = (params?: MaasSubnetsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/subnets?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/subnets`;
};

export const MaasSubnetsGet = async (
  params?: MaasSubnetsGetParams,
  options?: RequestInit,
): Promise<MaasSubnetsGetResponse> => {
  const res = await fetch(getV1MaasSubnetsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasSubnetsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasSubnetsGetResponse;
};

/**
 * @summary Retrieves a list of Maas tags for a particular account uid
 */
export type MaasTagsGetResponse200 = {
  data: MaasTags;
  status: 200;
};

export type MaasTagsGetResponseComposite = MaasTagsGetResponse200;

export type MaasTagsGetResponse = MaasTagsGetResponseComposite & {
  headers: Headers;
};

export const getV1MaasTagsGetUrl = (params?: MaasTagsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/maas/tags?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/maas/tags`;
};

export const MaasTagsGet = async (
  params?: MaasTagsGetParams,
  options?: RequestInit,
): Promise<MaasTagsGetResponse> => {
  const res = await fetch(getV1MaasTagsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: MaasTagsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as MaasTagsGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if OpenStack account is valid
 */
export type OpenStackAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type OpenStackAccountValidateResponseComposite =
  OpenStackAccountValidateResponse204;

export type OpenStackAccountValidateResponse =
  OpenStackAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/openstack/account/validate`;
};

export const OpenStackAccountValidate = async (
  OpenStackCloudAccount: OpenStackCloudAccount,
  options?: RequestInit,
): Promise<OpenStackAccountValidateResponse> => {
  const res = await fetch(getV1OpenStackAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(OpenStackCloudAccount),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenStackAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenStackAccountValidateResponse;
};

/**
 * @summary Retrieves a list of OpenStack azs for a particular account uid
 */
export type OpenStackAzsGetResponse200 = {
  data: OpenStackAzs;
  status: 200;
};

export type OpenStackAzsGetResponseComposite = OpenStackAzsGetResponse200;

export type OpenStackAzsGetResponse = OpenStackAzsGetResponseComposite & {
  headers: Headers;
};

export const getV1OpenStackAzsGetUrl = (params?: OpenStackAzsGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/azs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/azs`;
};

export const OpenStackAzsGet = async (
  params?: OpenStackAzsGetParams,
  options?: RequestInit,
): Promise<OpenStackAzsGetResponse> => {
  const res = await fetch(getV1OpenStackAzsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenStackAzsGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenStackAzsGetResponse;
};

/**
 * @summary Returns the OpenStack flavors
 */
export type OpenStackFlavorsGetResponse200 = {
  data: OpenStackFlavors;
  status: 200;
};

export type OpenStackFlavorsGetResponseComposite =
  OpenStackFlavorsGetResponse200;

export type OpenStackFlavorsGetResponse =
  OpenStackFlavorsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackFlavorsGetUrl = (
  params?: OpenStackFlavorsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/flavors?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/flavors`;
};

export const OpenStackFlavorsGet = async (
  params?: OpenStackFlavorsGetParams,
  options?: RequestInit,
): Promise<OpenStackFlavorsGetResponse> => {
  const res = await fetch(getV1OpenStackFlavorsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenStackFlavorsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenStackFlavorsGetResponse;
};

/**
 * @summary Returns the OpenStack keypair
 */
export type OpenStackKeypairsGetResponse200 = {
  data: OpenStackKeypairs;
  status: 200;
};

export type OpenStackKeypairsGetResponseComposite =
  OpenStackKeypairsGetResponse200;

export type OpenStackKeypairsGetResponse =
  OpenStackKeypairsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackKeypairsGetUrl = (
  params?: OpenStackKeypairsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/keypairs?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/keypairs`;
};

export const OpenStackKeypairsGet = async (
  params?: OpenStackKeypairsGetParams,
  options?: RequestInit,
): Promise<OpenStackKeypairsGetResponse> => {
  const res = await fetch(getV1OpenStackKeypairsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenStackKeypairsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenStackKeypairsGetResponse;
};

/**
 * @summary Returns the OpenStack networks
 */
export type OpenStackNetworksGetResponse200 = {
  data: OpenStackNetworks;
  status: 200;
};

export type OpenStackNetworksGetResponseComposite =
  OpenStackNetworksGetResponse200;

export type OpenStackNetworksGetResponse =
  OpenStackNetworksGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackNetworksGetUrl = (
  params?: OpenStackNetworksGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/networks?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/networks`;
};

export const OpenStackNetworksGet = async (
  params?: OpenStackNetworksGetParams,
  options?: RequestInit,
): Promise<OpenStackNetworksGetResponse> => {
  const res = await fetch(getV1OpenStackNetworksGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenStackNetworksGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenStackNetworksGetResponse;
};

/**
 * @summary Returns the OpenStack projects
 */
export type OpenStackProjectsGetResponse200 = {
  data: OpenStackProjects;
  status: 200;
};

export type OpenStackProjectsGetResponseComposite =
  OpenStackProjectsGetResponse200;

export type OpenStackProjectsGetResponse =
  OpenStackProjectsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackProjectsGetUrl = (
  params?: OpenStackProjectsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/projects?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/projects`;
};

export const OpenStackProjectsGet = async (
  params?: OpenStackProjectsGetParams,
  options?: RequestInit,
): Promise<OpenStackProjectsGetResponse> => {
  const res = await fetch(getV1OpenStackProjectsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenStackProjectsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenStackProjectsGetResponse;
};

/**
 * @summary Returns the OpenStack regions
 */
export type OpenStackRegionsGetResponse200 = {
  data: OpenStackRegions;
  status: 200;
};

export type OpenStackRegionsGetResponseComposite =
  OpenStackRegionsGetResponse200;

export type OpenStackRegionsGetResponse =
  OpenStackRegionsGetResponseComposite & {
    headers: Headers;
  };

export const getV1OpenStackRegionsGetUrl = (
  params?: OpenStackRegionsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/openstack/regions?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/openstack/regions`;
};

export const OpenStackRegionsGet = async (
  params?: OpenStackRegionsGetParams,
  options?: RequestInit,
): Promise<OpenStackRegionsGetResponse> => {
  const res = await fetch(getV1OpenStackRegionsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: OpenStackRegionsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as OpenStackRegionsGetResponse;
};

/**
 * Returns no contents if account is valid else error.
 * @summary Check if Vsphere account is valid
 */
export type VsphereAccountValidateResponse204 = {
  data: void;
  status: 204;
};

export type VsphereAccountValidateResponseComposite =
  VsphereAccountValidateResponse204;

export type VsphereAccountValidateResponse =
  VsphereAccountValidateResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereAccountValidateUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/vsphere/account/validate`;
};

export const VsphereAccountValidate = async (
  VsphereCloudAccountBody: VsphereCloudAccountBody,
  options?: RequestInit,
): Promise<VsphereAccountValidateResponse> => {
  const res = await fetch(getV1VsphereAccountValidateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VsphereCloudAccountBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereAccountValidateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereAccountValidateResponse;
};

/**
 * @summary Returns the vsphere data centers
 */
export type VsphereDatacentersResponse200 = {
  data: VsphereDatacenters;
  status: 200;
};

export type VsphereDatacentersResponseComposite = VsphereDatacentersResponse200;

export type VsphereDatacentersResponse = VsphereDatacentersResponseComposite & {
  headers: Headers;
};

export const getV1VsphereDatacentersUrl = (
  params?: VsphereDatacentersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters`;
};

export const VsphereDatacenters = async (
  params?: VsphereDatacentersParams,
  options?: RequestInit,
): Promise<VsphereDatacentersResponse> => {
  const res = await fetch(getV1VsphereDatacentersUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereDatacentersResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereDatacentersResponse;
};

/**
 * @summary Returns the resources for vsphere compute cluster
 */
export type VsphereComputeClusterResourcesResponse200 = {
  data: VsphereComputeClusterResources;
  status: 200;
};

export type VsphereComputeClusterResourcesResponseComposite =
  VsphereComputeClusterResourcesResponse200;

export type VsphereComputeClusterResourcesResponse =
  VsphereComputeClusterResourcesResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereComputeClusterResourcesUrl = (
  uid: string,
  computecluster: string,
  params: VsphereComputeClusterResourcesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters/${uid}/computeclusters/${computecluster}?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/vsphere/datacenters/${uid}/computeclusters/${computecluster}`;
};

export const VsphereComputeClusterResources = async (
  uid: string,
  computecluster: string,
  params: VsphereComputeClusterResourcesParams,
  options?: RequestInit,
): Promise<VsphereComputeClusterResourcesResponse> => {
  const res = await fetch(
    getV1VsphereComputeClusterResourcesUrl(uid, computecluster, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereComputeClusterResourcesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereComputeClusterResourcesResponse;
};

/**
 * @summary Retrieves vsphere env
 */
export type VsphereEnvResponse200 = {
  data: VsphereEnv;
  status: 200;
};

export type VsphereEnvResponseComposite = VsphereEnvResponse200;

export type VsphereEnvResponse = VsphereEnvResponseComposite & {
  headers: Headers;
};

export const getV1VsphereEnvUrl = () => {
  return `https://api.spectrocloud.com/v1/clouds/vsphere/env`;
};

export const VsphereEnv = async (
  VsphereCloudAccountBody: VsphereCloudAccountBody,
  options?: RequestInit,
): Promise<VsphereEnvResponse> => {
  const res = await fetch(getV1VsphereEnvUrl(), {
    ...options,
    method: "GET",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VsphereCloudAccountBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereEnvResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereEnvResponse;
};

/**
 * @summary Returns the cloud compute rate
 */
export type CloudComputeRateResponse200 = {
  data: CloudCost;
  status: 200;
};

export type CloudComputeRateResponseComposite = CloudComputeRateResponse200;

export type CloudComputeRateResponse = CloudComputeRateResponseComposite & {
  headers: Headers;
};

export const getV1CloudComputeRateUrl = (
  cloud: string,
  type: string,
  params: CloudComputeRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/${cloud}/compute/${type}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/${cloud}/compute/${type}/rate`;
};

export const CloudComputeRate = async (
  cloud: string,
  type: string,
  params: CloudComputeRateParams,
  options?: RequestInit,
): Promise<CloudComputeRateResponse> => {
  const res = await fetch(getV1CloudComputeRateUrl(cloud, type, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudComputeRateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudComputeRateResponse;
};

/**
 * @summary Returns the cloud storage rate
 */
export type CloudStorageRateResponse200 = {
  data: CloudCost;
  status: 200;
};

export type CloudStorageRateResponseComposite = CloudStorageRateResponse200;

export type CloudStorageRateResponse = CloudStorageRateResponseComposite & {
  headers: Headers;
};

export const getV1CloudStorageRateUrl = (
  cloud: string,
  type: string,
  params: CloudStorageRateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/clouds/${cloud}/storage/${type}/rate?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/clouds/${cloud}/storage/${type}/rate`;
};

export const CloudStorageRate = async (
  cloud: string,
  type: string,
  params: CloudStorageRateParams,
  options?: RequestInit,
): Promise<CloudStorageRateResponse> => {
  const res = await fetch(getV1CloudStorageRateUrl(cloud, type, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: CloudStorageRateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as CloudStorageRateResponse;
};
