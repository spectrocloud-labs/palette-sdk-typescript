/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  ClusterRbacBody,
  ObjectMetaBody,
  Uid,
  Workspace,
  WorkspaceBackup,
  WorkspaceBackupConfigEntityBody,
  WorkspaceBackupDeleteEntity,
  WorkspaceClusterNamespacesEntity,
  WorkspaceEntity,
  WorkspaceOpsBackupGetParams,
  WorkspaceOpsRestoreGetParams,
  WorkspaceRestore,
  WorkspaceRestoreConfigEntity,
  WorkspaceScopeRoles,
  WorkspacesRolesPatchBody,
  WorkspacesValidateNameParams,
} from ".././schemas";

/**
 * @summary Create workspace
 */
export type WorkspacesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type WorkspacesCreateResponseComposite = WorkspacesCreateResponse201;

export type WorkspacesCreateResponse = WorkspacesCreateResponseComposite & {
  headers: Headers;
};

export const getV1WorkspacesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/workspaces`;
};

export const WorkspacesCreate = async (
  WorkspaceEntity: WorkspaceEntity,
  options?: RequestInit,
): Promise<WorkspacesCreateResponse> => {
  const res = await fetch(getV1WorkspacesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspaceEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesCreateResponse;
};

/**
 * @summary Returns the specified team's workspaces and roles data
 */
export type TeamsWorkspaceGetRolesResponse200 = {
  data: WorkspaceScopeRoles;
  status: 200;
};

export type TeamsWorkspaceGetRolesResponseComposite =
  TeamsWorkspaceGetRolesResponse200;

export type TeamsWorkspaceGetRolesResponse =
  TeamsWorkspaceGetRolesResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsWorkspaceGetRolesUrl = (teamUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/teams/${teamUid}/roles`;
};

export const TeamsWorkspaceGetRoles = async (
  teamUid: string,
  options?: RequestInit,
): Promise<TeamsWorkspaceGetRolesResponse> => {
  const res = await fetch(getV1TeamsWorkspaceGetRolesUrl(teamUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsWorkspaceGetRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsWorkspaceGetRolesResponse;
};

/**
 * @summary Updates the workspace roles for the specified team
 */
export type TeamsWorkspaceRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type TeamsWorkspaceRolesPutResponseComposite =
  TeamsWorkspaceRolesPutResponse204;

export type TeamsWorkspaceRolesPutResponse =
  TeamsWorkspaceRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1TeamsWorkspaceRolesPutUrl = (teamUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/teams/${teamUid}/roles`;
};

export const TeamsWorkspaceRolesPut = async (
  teamUid: string,
  WorkspacesRolesPatchBody: WorkspacesRolesPatchBody,
  options?: RequestInit,
): Promise<TeamsWorkspaceRolesPutResponse> => {
  const res = await fetch(getV1TeamsWorkspaceRolesPutUrl(teamUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspacesRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: TeamsWorkspaceRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as TeamsWorkspaceRolesPutResponse;
};

/**
 * Returns a User with workspaces and roles
 * @summary Returns the specified User workspaces and Roles information
 */
export type UsersWorkspaceGetRolesResponse200 = {
  data: WorkspaceScopeRoles;
  status: 200;
};

export type UsersWorkspaceGetRolesResponseComposite =
  UsersWorkspaceGetRolesResponse200;

export type UsersWorkspaceGetRolesResponse =
  UsersWorkspaceGetRolesResponseComposite & {
    headers: Headers;
  };

export const getV1UsersWorkspaceGetRolesUrl = (userUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/users/${userUid}/roles`;
};

export const UsersWorkspaceGetRoles = async (
  userUid: string,
  options?: RequestInit,
): Promise<UsersWorkspaceGetRolesResponse> => {
  const res = await fetch(getV1UsersWorkspaceGetRolesUrl(userUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersWorkspaceGetRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersWorkspaceGetRolesResponse;
};

/**
 * User is updated with workspace roles
 * @summary Updates the workspace roles for user
 */
export type UsersWorkspaceRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type UsersWorkspaceRolesPutResponseComposite =
  UsersWorkspaceRolesPutResponse204;

export type UsersWorkspaceRolesPutResponse =
  UsersWorkspaceRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1UsersWorkspaceRolesPutUrl = (userUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/users/${userUid}/roles`;
};

export const UsersWorkspaceRolesPut = async (
  userUid: string,
  WorkspacesRolesPatchBody: WorkspacesRolesPatchBody,
  options?: RequestInit,
): Promise<UsersWorkspaceRolesPutResponse> => {
  const res = await fetch(getV1UsersWorkspaceRolesPutUrl(userUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspacesRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersWorkspaceRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersWorkspaceRolesPutResponse;
};

/**
 * @summary Validates the workspace name
 */
export type WorkspacesValidateNameResponse204 = {
  data: void;
  status: 204;
};

export type WorkspacesValidateNameResponseComposite =
  WorkspacesValidateNameResponse204;

export type WorkspacesValidateNameResponse =
  WorkspacesValidateNameResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesValidateNameUrl = (
  params: WorkspacesValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/validate/name`;
};

export const WorkspacesValidateName = async (
  params: WorkspacesValidateNameParams,
  options?: RequestInit,
): Promise<WorkspacesValidateNameResponse> => {
  const res = await fetch(getV1WorkspacesValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesValidateNameResponse;
};

/**
 * @summary Deletes the specified workspace
 */
export type WorkspacesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type WorkspacesUidDeleteResponseComposite =
  WorkspacesUidDeleteResponse204;

export type WorkspacesUidDeleteResponse =
  WorkspacesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}`;
};

export const WorkspacesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<WorkspacesUidDeleteResponse> => {
  const res = await fetch(getV1WorkspacesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesUidDeleteResponse;
};

/**
 * @summary Returns the specified workspace
 */
export type WorkspacesUidGetResponse200 = {
  data: Workspace;
  status: 200;
};

export type WorkspacesUidGetResponseComposite = WorkspacesUidGetResponse200;

export type WorkspacesUidGetResponse = WorkspacesUidGetResponseComposite & {
  headers: Headers;
};

export const getV1WorkspacesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}`;
};

export const WorkspacesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<WorkspacesUidGetResponse> => {
  const res = await fetch(getV1WorkspacesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesUidGetResponse;
};

/**
 * @summary Delete workspace backup
 */
export type WorkspaceOpsBackupDeleteResponse204 = {
  data: void;
  status: 204;
};

export type WorkspaceOpsBackupDeleteResponseComposite =
  WorkspaceOpsBackupDeleteResponse204;

export type WorkspaceOpsBackupDeleteResponse =
  WorkspaceOpsBackupDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const WorkspaceOpsBackupDelete = async (
  uid: string,
  WorkspaceBackupDeleteEntity: WorkspaceBackupDeleteEntity,
  options?: RequestInit,
): Promise<WorkspaceOpsBackupDeleteResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupDeleteUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspaceBackupDeleteEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspaceOpsBackupDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspaceOpsBackupDeleteResponse;
};

/**
 * @summary Returns the  workspace backup result
 */
export type WorkspaceOpsBackupGetResponse200 = {
  data: WorkspaceBackup;
  status: 200;
};

export type WorkspaceOpsBackupGetResponseComposite =
  WorkspaceOpsBackupGetResponse200;

export type WorkspaceOpsBackupGetResponse =
  WorkspaceOpsBackupGetResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupGetUrl = (
  uid: string,
  params?: WorkspaceOpsBackupGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/${uid}/backup?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const WorkspaceOpsBackupGet = async (
  uid: string,
  params?: WorkspaceOpsBackupGetParams,
  options?: RequestInit,
): Promise<WorkspaceOpsBackupGetResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspaceOpsBackupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspaceOpsBackupGetResponse;
};

/**
 * @summary Create workspace backup settings
 */
export type WorkspaceOpsBackupCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type WorkspaceOpsBackupCreateResponseComposite =
  WorkspaceOpsBackupCreateResponse201;

export type WorkspaceOpsBackupCreateResponse =
  WorkspaceOpsBackupCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const WorkspaceOpsBackupCreate = async (
  uid: string,
  WorkspaceBackupConfigEntityBody: WorkspaceBackupConfigEntityBody,
  options?: RequestInit,
): Promise<WorkspaceOpsBackupCreateResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspaceBackupConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspaceOpsBackupCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspaceOpsBackupCreateResponse;
};

/**
 * @summary Update workspace backup settings
 */
export type WorkspaceOpsBackupUpdateResponse204 = {
  data: void;
  status: 204;
};

export type WorkspaceOpsBackupUpdateResponseComposite =
  WorkspaceOpsBackupUpdateResponse204;

export type WorkspaceOpsBackupUpdateResponse =
  WorkspaceOpsBackupUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const WorkspaceOpsBackupUpdate = async (
  uid: string,
  WorkspaceBackupConfigEntityBody: WorkspaceBackupConfigEntityBody,
  options?: RequestInit,
): Promise<WorkspaceOpsBackupUpdateResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspaceBackupConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspaceOpsBackupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspaceOpsBackupUpdateResponse;
};

/**
 * @summary Create On demand Workspace Backup
 */
export type WorkspaceOpsBackupOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type WorkspaceOpsBackupOnDemandCreateResponseComposite =
  WorkspaceOpsBackupOnDemandCreateResponse201;

export type WorkspaceOpsBackupOnDemandCreateResponse =
  WorkspaceOpsBackupOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsBackupOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup/onDemand`;
};

export const WorkspaceOpsBackupOnDemandCreate = async (
  uid: string,
  WorkspaceBackupConfigEntityBody: WorkspaceBackupConfigEntityBody,
  options?: RequestInit,
): Promise<WorkspaceOpsBackupOnDemandCreateResponse> => {
  const res = await fetch(getV1WorkspaceOpsBackupOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspaceBackupConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspaceOpsBackupOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspaceOpsBackupOnDemandCreateResponse;
};

/**
 * @summary Updates the specified workspace namespaces
 */
export type WorkspacesUidClusterNamespacesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type WorkspacesUidClusterNamespacesUpdateResponseComposite =
  WorkspacesUidClusterNamespacesUpdateResponse204;

export type WorkspacesUidClusterNamespacesUpdateResponse =
  WorkspacesUidClusterNamespacesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidClusterNamespacesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterNamespaces`;
};

export const WorkspacesUidClusterNamespacesUpdate = async (
  uid: string,
  WorkspaceClusterNamespacesEntity: WorkspaceClusterNamespacesEntity,
  options?: RequestInit,
): Promise<WorkspacesUidClusterNamespacesUpdateResponse> => {
  const res = await fetch(getV1WorkspacesUidClusterNamespacesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspaceClusterNamespacesEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesUidClusterNamespacesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesUidClusterNamespacesUpdateResponse;
};

/**
 * @summary Create cluster rbac in workspace
 */
export type WorkspacesClusterRbacCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type WorkspacesClusterRbacCreateResponseComposite =
  WorkspacesClusterRbacCreateResponse201;

export type WorkspacesClusterRbacCreateResponse =
  WorkspacesClusterRbacCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesClusterRbacCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs`;
};

export const WorkspacesClusterRbacCreate = async (
  uid: string,
  ClusterRbacBody: ClusterRbacBody,
  options?: RequestInit,
): Promise<WorkspacesClusterRbacCreateResponse> => {
  const res = await fetch(getV1WorkspacesClusterRbacCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ClusterRbacBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesClusterRbacCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesClusterRbacCreateResponse;
};

/**
 * @summary Deletes the specified workspace cluster rbac
 */
export type WorkspacesUidClusterRbacDeleteResponse204 = {
  data: void;
  status: 204;
};

export type WorkspacesUidClusterRbacDeleteResponseComposite =
  WorkspacesUidClusterRbacDeleteResponse204;

export type WorkspacesUidClusterRbacDeleteResponse =
  WorkspacesUidClusterRbacDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidClusterRbacDeleteUrl = (
  uid: string,
  clusterRbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs/${clusterRbacUid}`;
};

export const WorkspacesUidClusterRbacDelete = async (
  uid: string,
  clusterRbacUid: string,
  options?: RequestInit,
): Promise<WorkspacesUidClusterRbacDeleteResponse> => {
  const res = await fetch(
    getV1WorkspacesUidClusterRbacDeleteUrl(uid, clusterRbacUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesUidClusterRbacDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesUidClusterRbacDeleteResponse;
};

/**
 * @summary Updates the specified workspace cluster rbac
 */
export type WorkspacesUidClusterRbacUpdateResponse204 = {
  data: void;
  status: 204;
};

export type WorkspacesUidClusterRbacUpdateResponseComposite =
  WorkspacesUidClusterRbacUpdateResponse204;

export type WorkspacesUidClusterRbacUpdateResponse =
  WorkspacesUidClusterRbacUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidClusterRbacUpdateUrl = (
  uid: string,
  clusterRbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs/${clusterRbacUid}`;
};

export const WorkspacesUidClusterRbacUpdate = async (
  uid: string,
  clusterRbacUid: string,
  ClusterRbacBody: ClusterRbacBody,
  options?: RequestInit,
): Promise<WorkspacesUidClusterRbacUpdateResponse> => {
  const res = await fetch(
    getV1WorkspacesUidClusterRbacUpdateUrl(uid, clusterRbacUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ClusterRbacBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesUidClusterRbacUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesUidClusterRbacUpdateResponse;
};

/**
 * @summary Updates the specified workspace meta
 */
export type WorkspacesUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type WorkspacesUidMetaUpdateResponseComposite =
  WorkspacesUidMetaUpdateResponse204;

export type WorkspacesUidMetaUpdateResponse =
  WorkspacesUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspacesUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/meta`;
};

export const WorkspacesUidMetaUpdate = async (
  uid: string,
  ObjectMetaBody: ObjectMetaBody,
  options?: RequestInit,
): Promise<WorkspacesUidMetaUpdateResponse> => {
  const res = await fetch(getV1WorkspacesUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ObjectMetaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspacesUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspacesUidMetaUpdateResponse;
};

/**
 * @summary Returns the  workspace restore result
 */
export type WorkspaceOpsRestoreGetResponse200 = {
  data: WorkspaceRestore;
  status: 200;
};

export type WorkspaceOpsRestoreGetResponseComposite =
  WorkspaceOpsRestoreGetResponse200;

export type WorkspaceOpsRestoreGetResponse =
  WorkspaceOpsRestoreGetResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsRestoreGetUrl = (
  uid: string,
  params?: WorkspaceOpsRestoreGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/${uid}/restore?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/${uid}/restore`;
};

export const WorkspaceOpsRestoreGet = async (
  uid: string,
  params?: WorkspaceOpsRestoreGetParams,
  options?: RequestInit,
): Promise<WorkspaceOpsRestoreGetResponse> => {
  const res = await fetch(getV1WorkspaceOpsRestoreGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspaceOpsRestoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspaceOpsRestoreGetResponse;
};

/**
 * @summary Create On demand Workspace Restore
 */
export type WorkspaceOpsRestoreOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type WorkspaceOpsRestoreOnDemandCreateResponseComposite =
  WorkspaceOpsRestoreOnDemandCreateResponse201;

export type WorkspaceOpsRestoreOnDemandCreateResponse =
  WorkspaceOpsRestoreOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getV1WorkspaceOpsRestoreOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/restore/onDemand`;
};

export const WorkspaceOpsRestoreOnDemandCreate = async (
  uid: string,
  WorkspaceRestoreConfigEntity: WorkspaceRestoreConfigEntity,
  options?: RequestInit,
): Promise<WorkspaceOpsRestoreOnDemandCreateResponse> => {
  const res = await fetch(getV1WorkspaceOpsRestoreOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(WorkspaceRestoreConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: WorkspaceOpsRestoreOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as WorkspaceOpsRestoreOnDemandCreateResponse;
};
