/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  Uid,
  V1ClusterRbacBody,
  V1ObjectMetaBody,
  V1WorkspaceBackupConfigEntityBody,
  V1WorkspacesRolesPatchBody,
  Workspace,
  WorkspaceBackup,
  WorkspaceBackupDeleteEntity,
  WorkspaceClusterNamespacesEntity,
  WorkspaceEntity,
  WorkspaceOpsBackupGetParams,
  WorkspaceOpsRestoreGetParams,
  WorkspaceRestore,
  WorkspaceRestoreConfigEntity,
  WorkspaceScopeRoles,
  WorkspacesValidateNameParams,
} from ".././schemas";

/**
 * @summary Create workspace
 */
export type workspacesCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type workspacesCreateResponseComposite = workspacesCreateResponse201;

export type workspacesCreateResponse = workspacesCreateResponseComposite & {
  headers: Headers;
};

export const getWorkspacesCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/workspaces`;
};

export const workspacesCreate = async (
  workspaceEntity: WorkspaceEntity,
  options?: RequestInit,
): Promise<workspacesCreateResponse> => {
  const res = await fetch(getWorkspacesCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(workspaceEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesCreateResponse;
};

/**
 * @summary Returns the specified team's workspaces and roles data
 */
export type teamsWorkspaceGetRolesResponse200 = {
  data: WorkspaceScopeRoles;
  status: 200;
};

export type teamsWorkspaceGetRolesResponseComposite =
  teamsWorkspaceGetRolesResponse200;

export type teamsWorkspaceGetRolesResponse =
  teamsWorkspaceGetRolesResponseComposite & {
    headers: Headers;
  };

export const getTeamsWorkspaceGetRolesUrl = (teamUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/teams/${teamUid}/roles`;
};

export const teamsWorkspaceGetRoles = async (
  teamUid: string,
  options?: RequestInit,
): Promise<teamsWorkspaceGetRolesResponse> => {
  const res = await fetch(getTeamsWorkspaceGetRolesUrl(teamUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsWorkspaceGetRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsWorkspaceGetRolesResponse;
};

/**
 * @summary Updates the workspace roles for the specified team
 */
export type teamsWorkspaceRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type teamsWorkspaceRolesPutResponseComposite =
  teamsWorkspaceRolesPutResponse204;

export type teamsWorkspaceRolesPutResponse =
  teamsWorkspaceRolesPutResponseComposite & {
    headers: Headers;
  };

export const getTeamsWorkspaceRolesPutUrl = (teamUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/teams/${teamUid}/roles`;
};

export const teamsWorkspaceRolesPut = async (
  teamUid: string,
  v1WorkspacesRolesPatchBody: V1WorkspacesRolesPatchBody,
  options?: RequestInit,
): Promise<teamsWorkspaceRolesPutResponse> => {
  const res = await fetch(getTeamsWorkspaceRolesPutUrl(teamUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspacesRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: teamsWorkspaceRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as teamsWorkspaceRolesPutResponse;
};

/**
 * Returns a User with workspaces and roles
 * @summary Returns the specified User workspaces and Roles information
 */
export type usersWorkspaceGetRolesResponse200 = {
  data: WorkspaceScopeRoles;
  status: 200;
};

export type usersWorkspaceGetRolesResponseComposite =
  usersWorkspaceGetRolesResponse200;

export type usersWorkspaceGetRolesResponse =
  usersWorkspaceGetRolesResponseComposite & {
    headers: Headers;
  };

export const getUsersWorkspaceGetRolesUrl = (userUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/users/${userUid}/roles`;
};

export const usersWorkspaceGetRoles = async (
  userUid: string,
  options?: RequestInit,
): Promise<usersWorkspaceGetRolesResponse> => {
  const res = await fetch(getUsersWorkspaceGetRolesUrl(userUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersWorkspaceGetRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersWorkspaceGetRolesResponse;
};

/**
 * User is updated with workspace roles
 * @summary Updates the workspace roles for user
 */
export type usersWorkspaceRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type usersWorkspaceRolesPutResponseComposite =
  usersWorkspaceRolesPutResponse204;

export type usersWorkspaceRolesPutResponse =
  usersWorkspaceRolesPutResponseComposite & {
    headers: Headers;
  };

export const getUsersWorkspaceRolesPutUrl = (userUid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/users/${userUid}/roles`;
};

export const usersWorkspaceRolesPut = async (
  userUid: string,
  v1WorkspacesRolesPatchBody: V1WorkspacesRolesPatchBody,
  options?: RequestInit,
): Promise<usersWorkspaceRolesPutResponse> => {
  const res = await fetch(getUsersWorkspaceRolesPutUrl(userUid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspacesRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersWorkspaceRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersWorkspaceRolesPutResponse;
};

/**
 * @summary Validates the workspace name
 */
export type workspacesValidateNameResponse204 = {
  data: void;
  status: 204;
};

export type workspacesValidateNameResponseComposite =
  workspacesValidateNameResponse204;

export type workspacesValidateNameResponse =
  workspacesValidateNameResponseComposite & {
    headers: Headers;
  };

export const getWorkspacesValidateNameUrl = (
  params: WorkspacesValidateNameParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/validate/name?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/validate/name`;
};

export const workspacesValidateName = async (
  params: WorkspacesValidateNameParams,
  options?: RequestInit,
): Promise<workspacesValidateNameResponse> => {
  const res = await fetch(getWorkspacesValidateNameUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesValidateNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesValidateNameResponse;
};

/**
 * @summary Deletes the specified workspace
 */
export type workspacesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type workspacesUidDeleteResponseComposite =
  workspacesUidDeleteResponse204;

export type workspacesUidDeleteResponse =
  workspacesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getWorkspacesUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}`;
};

export const workspacesUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<workspacesUidDeleteResponse> => {
  const res = await fetch(getWorkspacesUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesUidDeleteResponse;
};

/**
 * @summary Returns the specified workspace
 */
export type workspacesUidGetResponse200 = {
  data: Workspace;
  status: 200;
};

export type workspacesUidGetResponseComposite = workspacesUidGetResponse200;

export type workspacesUidGetResponse = workspacesUidGetResponseComposite & {
  headers: Headers;
};

export const getWorkspacesUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}`;
};

export const workspacesUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<workspacesUidGetResponse> => {
  const res = await fetch(getWorkspacesUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesUidGetResponse;
};

/**
 * @summary Delete workspace backup
 */
export type workspaceOpsBackupDeleteResponse204 = {
  data: void;
  status: 204;
};

export type workspaceOpsBackupDeleteResponseComposite =
  workspaceOpsBackupDeleteResponse204;

export type workspaceOpsBackupDeleteResponse =
  workspaceOpsBackupDeleteResponseComposite & {
    headers: Headers;
  };

export const getWorkspaceOpsBackupDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const workspaceOpsBackupDelete = async (
  uid: string,
  workspaceBackupDeleteEntity: WorkspaceBackupDeleteEntity,
  options?: RequestInit,
): Promise<workspaceOpsBackupDeleteResponse> => {
  const res = await fetch(getWorkspaceOpsBackupDeleteUrl(uid), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(workspaceBackupDeleteEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspaceOpsBackupDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspaceOpsBackupDeleteResponse;
};

/**
 * @summary Returns the  workspace backup result
 */
export type workspaceOpsBackupGetResponse200 = {
  data: WorkspaceBackup;
  status: 200;
};

export type workspaceOpsBackupGetResponseComposite =
  workspaceOpsBackupGetResponse200;

export type workspaceOpsBackupGetResponse =
  workspaceOpsBackupGetResponseComposite & {
    headers: Headers;
  };

export const getWorkspaceOpsBackupGetUrl = (
  uid: string,
  params?: WorkspaceOpsBackupGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/${uid}/backup?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const workspaceOpsBackupGet = async (
  uid: string,
  params?: WorkspaceOpsBackupGetParams,
  options?: RequestInit,
): Promise<workspaceOpsBackupGetResponse> => {
  const res = await fetch(getWorkspaceOpsBackupGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspaceOpsBackupGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspaceOpsBackupGetResponse;
};

/**
 * @summary Create workspace backup settings
 */
export type workspaceOpsBackupCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type workspaceOpsBackupCreateResponseComposite =
  workspaceOpsBackupCreateResponse201;

export type workspaceOpsBackupCreateResponse =
  workspaceOpsBackupCreateResponseComposite & {
    headers: Headers;
  };

export const getWorkspaceOpsBackupCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const workspaceOpsBackupCreate = async (
  uid: string,
  v1WorkspaceBackupConfigEntityBody: V1WorkspaceBackupConfigEntityBody,
  options?: RequestInit,
): Promise<workspaceOpsBackupCreateResponse> => {
  const res = await fetch(getWorkspaceOpsBackupCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceBackupConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspaceOpsBackupCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspaceOpsBackupCreateResponse;
};

/**
 * @summary Update workspace backup settings
 */
export type workspaceOpsBackupUpdateResponse204 = {
  data: void;
  status: 204;
};

export type workspaceOpsBackupUpdateResponseComposite =
  workspaceOpsBackupUpdateResponse204;

export type workspaceOpsBackupUpdateResponse =
  workspaceOpsBackupUpdateResponseComposite & {
    headers: Headers;
  };

export const getWorkspaceOpsBackupUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup`;
};

export const workspaceOpsBackupUpdate = async (
  uid: string,
  v1WorkspaceBackupConfigEntityBody: V1WorkspaceBackupConfigEntityBody,
  options?: RequestInit,
): Promise<workspaceOpsBackupUpdateResponse> => {
  const res = await fetch(getWorkspaceOpsBackupUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceBackupConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspaceOpsBackupUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspaceOpsBackupUpdateResponse;
};

/**
 * @summary Create On demand Workspace Backup
 */
export type workspaceOpsBackupOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type workspaceOpsBackupOnDemandCreateResponseComposite =
  workspaceOpsBackupOnDemandCreateResponse201;

export type workspaceOpsBackupOnDemandCreateResponse =
  workspaceOpsBackupOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getWorkspaceOpsBackupOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/backup/onDemand`;
};

export const workspaceOpsBackupOnDemandCreate = async (
  uid: string,
  v1WorkspaceBackupConfigEntityBody: V1WorkspaceBackupConfigEntityBody,
  options?: RequestInit,
): Promise<workspaceOpsBackupOnDemandCreateResponse> => {
  const res = await fetch(getWorkspaceOpsBackupOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1WorkspaceBackupConfigEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspaceOpsBackupOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspaceOpsBackupOnDemandCreateResponse;
};

/**
 * @summary Updates the specified workspace namespaces
 */
export type workspacesUidClusterNamespacesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type workspacesUidClusterNamespacesUpdateResponseComposite =
  workspacesUidClusterNamespacesUpdateResponse204;

export type workspacesUidClusterNamespacesUpdateResponse =
  workspacesUidClusterNamespacesUpdateResponseComposite & {
    headers: Headers;
  };

export const getWorkspacesUidClusterNamespacesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterNamespaces`;
};

export const workspacesUidClusterNamespacesUpdate = async (
  uid: string,
  workspaceClusterNamespacesEntity: WorkspaceClusterNamespacesEntity,
  options?: RequestInit,
): Promise<workspacesUidClusterNamespacesUpdateResponse> => {
  const res = await fetch(getWorkspacesUidClusterNamespacesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(workspaceClusterNamespacesEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesUidClusterNamespacesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesUidClusterNamespacesUpdateResponse;
};

/**
 * @summary Create cluster rbac in workspace
 */
export type workspacesClusterRbacCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type workspacesClusterRbacCreateResponseComposite =
  workspacesClusterRbacCreateResponse201;

export type workspacesClusterRbacCreateResponse =
  workspacesClusterRbacCreateResponseComposite & {
    headers: Headers;
  };

export const getWorkspacesClusterRbacCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs`;
};

export const workspacesClusterRbacCreate = async (
  uid: string,
  v1ClusterRbacBody: V1ClusterRbacBody,
  options?: RequestInit,
): Promise<workspacesClusterRbacCreateResponse> => {
  const res = await fetch(getWorkspacesClusterRbacCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ClusterRbacBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesClusterRbacCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesClusterRbacCreateResponse;
};

/**
 * @summary Deletes the specified workspace cluster rbac
 */
export type workspacesUidClusterRbacDeleteResponse204 = {
  data: void;
  status: 204;
};

export type workspacesUidClusterRbacDeleteResponseComposite =
  workspacesUidClusterRbacDeleteResponse204;

export type workspacesUidClusterRbacDeleteResponse =
  workspacesUidClusterRbacDeleteResponseComposite & {
    headers: Headers;
  };

export const getWorkspacesUidClusterRbacDeleteUrl = (
  uid: string,
  clusterRbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs/${clusterRbacUid}`;
};

export const workspacesUidClusterRbacDelete = async (
  uid: string,
  clusterRbacUid: string,
  options?: RequestInit,
): Promise<workspacesUidClusterRbacDeleteResponse> => {
  const res = await fetch(
    getWorkspacesUidClusterRbacDeleteUrl(uid, clusterRbacUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesUidClusterRbacDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesUidClusterRbacDeleteResponse;
};

/**
 * @summary Updates the specified workspace cluster rbac
 */
export type workspacesUidClusterRbacUpdateResponse204 = {
  data: void;
  status: 204;
};

export type workspacesUidClusterRbacUpdateResponseComposite =
  workspacesUidClusterRbacUpdateResponse204;

export type workspacesUidClusterRbacUpdateResponse =
  workspacesUidClusterRbacUpdateResponseComposite & {
    headers: Headers;
  };

export const getWorkspacesUidClusterRbacUpdateUrl = (
  uid: string,
  clusterRbacUid: string,
) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/clusterRbacs/${clusterRbacUid}`;
};

export const workspacesUidClusterRbacUpdate = async (
  uid: string,
  clusterRbacUid: string,
  v1ClusterRbacBody: V1ClusterRbacBody,
  options?: RequestInit,
): Promise<workspacesUidClusterRbacUpdateResponse> => {
  const res = await fetch(
    getWorkspacesUidClusterRbacUpdateUrl(uid, clusterRbacUid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ClusterRbacBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesUidClusterRbacUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesUidClusterRbacUpdateResponse;
};

/**
 * @summary Updates the specified workspace meta
 */
export type workspacesUidMetaUpdateResponse204 = {
  data: void;
  status: 204;
};

export type workspacesUidMetaUpdateResponseComposite =
  workspacesUidMetaUpdateResponse204;

export type workspacesUidMetaUpdateResponse =
  workspacesUidMetaUpdateResponseComposite & {
    headers: Headers;
  };

export const getWorkspacesUidMetaUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/meta`;
};

export const workspacesUidMetaUpdate = async (
  uid: string,
  v1ObjectMetaBody: V1ObjectMetaBody,
  options?: RequestInit,
): Promise<workspacesUidMetaUpdateResponse> => {
  const res = await fetch(getWorkspacesUidMetaUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ObjectMetaBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspacesUidMetaUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspacesUidMetaUpdateResponse;
};

/**
 * @summary Returns the  workspace restore result
 */
export type workspaceOpsRestoreGetResponse200 = {
  data: WorkspaceRestore;
  status: 200;
};

export type workspaceOpsRestoreGetResponseComposite =
  workspaceOpsRestoreGetResponse200;

export type workspaceOpsRestoreGetResponse =
  workspaceOpsRestoreGetResponseComposite & {
    headers: Headers;
  };

export const getWorkspaceOpsRestoreGetUrl = (
  uid: string,
  params?: WorkspaceOpsRestoreGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/workspaces/${uid}/restore?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/workspaces/${uid}/restore`;
};

export const workspaceOpsRestoreGet = async (
  uid: string,
  params?: WorkspaceOpsRestoreGetParams,
  options?: RequestInit,
): Promise<workspaceOpsRestoreGetResponse> => {
  const res = await fetch(getWorkspaceOpsRestoreGetUrl(uid, params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspaceOpsRestoreGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspaceOpsRestoreGetResponse;
};

/**
 * @summary Create On demand Workspace Restore
 */
export type workspaceOpsRestoreOnDemandCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type workspaceOpsRestoreOnDemandCreateResponseComposite =
  workspaceOpsRestoreOnDemandCreateResponse201;

export type workspaceOpsRestoreOnDemandCreateResponse =
  workspaceOpsRestoreOnDemandCreateResponseComposite & {
    headers: Headers;
  };

export const getWorkspaceOpsRestoreOnDemandCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/workspaces/${uid}/restore/onDemand`;
};

export const workspaceOpsRestoreOnDemandCreate = async (
  uid: string,
  workspaceRestoreConfigEntity: WorkspaceRestoreConfigEntity,
  options?: RequestInit,
): Promise<workspaceOpsRestoreOnDemandCreateResponse> => {
  const res = await fetch(getWorkspaceOpsRestoreOnDemandCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(workspaceRestoreConfigEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: workspaceOpsRestoreOnDemandCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as workspaceOpsRestoreOnDemandCreateResponse;
};
