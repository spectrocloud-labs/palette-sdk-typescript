/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AuthTokenRevoke,
  Macros,
  MacrosBody,
  ProjectRolesEntity,
  ProjectRolesPatchBody,
  ResourceRoles,
  ResourceRolesUpdateEntityBody,
  SystemFeatures,
  SystemScarSpec,
  Uid,
  User,
  UserAssetSsh,
  UserAssetSshEntity,
  UserAssetsLocationAzure,
  UserAssetsLocationAzureBody,
  UserAssetsLocationGcp,
  UserAssetsLocationGcpBody,
  UserAssetsLocationS3,
  UserAssetsLocationS3Body,
  UserAssetsLocations,
  UserAssetsSsh,
  UserEntity,
  UserInfo,
  UserKubectlSession,
  UserPatch,
  UserRoleUIDs,
  UserRolesEntity,
  UserStatusLoginMode,
  UserUpdateEntity,
  Users,
  UsersAssetsLocationGetParams,
  UsersAssetsSshGetParams,
  UsersEmailPasswordResetBody,
  UsersListParams,
  UsersMetadata,
  UsersPasswordChangeBody,
  UsersSummaryList,
  UsersSummarySpec,
  UsersUidPasswordChangeBody,
  VsphereDnsMapping,
  VsphereDnsMappingBody,
  VsphereDnsMappings,
  VsphereDnsMappingsGetParams,
  VsphereMappingGetParams,
} from ".././schemas";

/**
 * Lists users the given user context
 * @summary Lists users
 */
export type UsersListResponse200 = {
  data: Users;
  status: 200;
};

export type UsersListResponseComposite = UsersListResponse200;

export type UsersListResponse = UsersListResponseComposite & {
  headers: Headers;
};

export const getV1UsersListUrl = (params?: UsersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users`;
};

export const UsersList = async (
  params?: UsersListParams,
  options?: RequestInit,
): Promise<UsersListResponse> => {
  const res = await fetch(getV1UsersListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersListResponse;
};

/**
 * A user is created for the given user context
 * @summary Create User
 */
export type UsersCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type UsersCreateResponseComposite = UsersCreateResponse201;

export type UsersCreateResponse = UsersCreateResponseComposite & {
  headers: Headers;
};

export const getV1UsersCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users`;
};

export const UsersCreate = async (
  UserEntity: UserEntity,
  options?: RequestInit,
): Promise<UsersCreateResponse> => {
  const res = await fetch(getV1UsersCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersCreateResponse;
};

/**
 * @summary Returns the specified users location
 */
export type UsersAssetsLocationGetResponse200 = {
  data: UserAssetsLocations;
  status: 200;
};

export type UsersAssetsLocationGetResponseComposite =
  UsersAssetsLocationGetResponse200;

export type UsersAssetsLocationGetResponse =
  UsersAssetsLocationGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGetUrl = (
  params?: UsersAssetsLocationGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/locations?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/locations`;
};

export const UsersAssetsLocationGet = async (
  params?: UsersAssetsLocationGetParams,
  options?: RequestInit,
): Promise<UsersAssetsLocationGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationGetResponse;
};

/**
 * @summary Create a Azure location
 */
export type UsersAssetsLocationAzureCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type UsersAssetsLocationAzureCreateResponseComposite =
  UsersAssetsLocationAzureCreateResponse201;

export type UsersAssetsLocationAzureCreateResponse =
  UsersAssetsLocationAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure`;
};

export const UsersAssetsLocationAzureCreate = async (
  UserAssetsLocationAzureBody: UserAssetsLocationAzureBody,
  options?: RequestInit,
): Promise<UsersAssetsLocationAzureCreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationAzureCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationAzureBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationAzureCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationAzureCreateResponse;
};

/**
 * @summary Returns the specified Azure location
 */
export type UsersAssetsLocationAzureGetResponse200 = {
  data: UserAssetsLocationAzure;
  status: 200;
};

export type UsersAssetsLocationAzureGetResponseComposite =
  UsersAssetsLocationAzureGetResponse200;

export type UsersAssetsLocationAzureGetResponse =
  UsersAssetsLocationAzureGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationAzureGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure/${uid}`;
};

export const UsersAssetsLocationAzureGet = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetsLocationAzureGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationAzureGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationAzureGetResponse;
};

/**
 * @summary Updates the specified Azure location
 */
export type UsersAssetsLocationAzureUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetsLocationAzureUpdateResponseComposite =
  UsersAssetsLocationAzureUpdateResponse204;

export type UsersAssetsLocationAzureUpdateResponse =
  UsersAssetsLocationAzureUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationAzureUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure/${uid}`;
};

export const UsersAssetsLocationAzureUpdate = async (
  uid: string,
  UserAssetsLocationAzureBody: UserAssetsLocationAzureBody,
  options?: RequestInit,
): Promise<UsersAssetsLocationAzureUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationAzureUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationAzureBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationAzureUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationAzureUpdateResponse;
};

/**
 * @summary Create a GCP location
 */
export type UsersAssetsLocationGcpCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type UsersAssetsLocationGcpCreateResponseComposite =
  UsersAssetsLocationGcpCreateResponse201;

export type UsersAssetsLocationGcpCreateResponse =
  UsersAssetsLocationGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp`;
};

export const UsersAssetsLocationGcpCreate = async (
  UserAssetsLocationGcpBody: UserAssetsLocationGcpBody,
  options?: RequestInit,
): Promise<UsersAssetsLocationGcpCreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGcpCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationGcpBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationGcpCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationGcpCreateResponse;
};

/**
 * @summary Returns the specified GCP location
 */
export type UsersAssetsLocationGcpGetResponse200 = {
  data: UserAssetsLocationGcp;
  status: 200;
};

export type UsersAssetsLocationGcpGetResponseComposite =
  UsersAssetsLocationGcpGetResponse200;

export type UsersAssetsLocationGcpGetResponse =
  UsersAssetsLocationGcpGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGcpGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp/${uid}`;
};

export const UsersAssetsLocationGcpGet = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetsLocationGcpGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGcpGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationGcpGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationGcpGetResponse;
};

/**
 * @summary Updates the specified GCP location
 */
export type UsersAssetsLocationGcpUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetsLocationGcpUpdateResponseComposite =
  UsersAssetsLocationGcpUpdateResponse204;

export type UsersAssetsLocationGcpUpdateResponse =
  UsersAssetsLocationGcpUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationGcpUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp/${uid}`;
};

export const UsersAssetsLocationGcpUpdate = async (
  uid: string,
  UserAssetsLocationGcpBody: UserAssetsLocationGcpBody,
  options?: RequestInit,
): Promise<UsersAssetsLocationGcpUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationGcpUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationGcpBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationGcpUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationGcpUpdateResponse;
};

/**
 * @summary Create a MinIO location
 */
export type UsersAssetsLocationMinioCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type UsersAssetsLocationMinioCreateResponseComposite =
  UsersAssetsLocationMinioCreateResponse201;

export type UsersAssetsLocationMinioCreateResponse =
  UsersAssetsLocationMinioCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationMinioCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio`;
};

export const UsersAssetsLocationMinioCreate = async (
  UserAssetsLocationS3Body: UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<UsersAssetsLocationMinioCreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationMinioCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationMinioCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationMinioCreateResponse;
};

/**
 * @summary Returns the specified MinIO location
 */
export type UsersAssetsLocationMinioGetResponse200 = {
  data: UserAssetsLocationS3;
  status: 200;
};

export type UsersAssetsLocationMinioGetResponseComposite =
  UsersAssetsLocationMinioGetResponse200;

export type UsersAssetsLocationMinioGetResponse =
  UsersAssetsLocationMinioGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationMinioGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio/${uid}`;
};

export const UsersAssetsLocationMinioGet = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetsLocationMinioGetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationMinioGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationMinioGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationMinioGetResponse;
};

/**
 * @summary Updates the specified MinIO location
 */
export type UsersAssetsLocationMinioUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetsLocationMinioUpdateResponseComposite =
  UsersAssetsLocationMinioUpdateResponse204;

export type UsersAssetsLocationMinioUpdateResponse =
  UsersAssetsLocationMinioUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationMinioUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio/${uid}`;
};

export const UsersAssetsLocationMinioUpdate = async (
  uid: string,
  UserAssetsLocationS3Body: UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<UsersAssetsLocationMinioUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationMinioUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationMinioUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationMinioUpdateResponse;
};

/**
 * @summary Create a S3 location
 */
export type UsersAssetsLocationS3CreateResponse201 = {
  data: Uid;
  status: 201;
};

export type UsersAssetsLocationS3CreateResponseComposite =
  UsersAssetsLocationS3CreateResponse201;

export type UsersAssetsLocationS3CreateResponse =
  UsersAssetsLocationS3CreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3CreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3`;
};

export const UsersAssetsLocationS3Create = async (
  UserAssetsLocationS3Body: UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<UsersAssetsLocationS3CreateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3CreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationS3CreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationS3CreateResponse;
};

/**
 * @summary Returns the specified S3 location
 */
export type UsersAssetsLocationS3DeleteResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetsLocationS3DeleteResponseComposite =
  UsersAssetsLocationS3DeleteResponse204;

export type UsersAssetsLocationS3DeleteResponse =
  UsersAssetsLocationS3DeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3DeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const UsersAssetsLocationS3Delete = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetsLocationS3DeleteResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3DeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationS3DeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationS3DeleteResponse;
};

/**
 * @summary Returns the specified S3 location
 */
export type UsersAssetsLocationS3GetResponse200 = {
  data: UserAssetsLocationS3;
  status: 200;
};

export type UsersAssetsLocationS3GetResponseComposite =
  UsersAssetsLocationS3GetResponse200;

export type UsersAssetsLocationS3GetResponse =
  UsersAssetsLocationS3GetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3GetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const UsersAssetsLocationS3Get = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetsLocationS3GetResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3GetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationS3GetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationS3GetResponse;
};

/**
 * @summary Updates the specified S3 location
 */
export type UsersAssetsLocationS3UpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetsLocationS3UpdateResponseComposite =
  UsersAssetsLocationS3UpdateResponse204;

export type UsersAssetsLocationS3UpdateResponse =
  UsersAssetsLocationS3UpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationS3UpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const UsersAssetsLocationS3Update = async (
  uid: string,
  UserAssetsLocationS3Body: UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<UsersAssetsLocationS3UpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationS3UpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationS3UpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationS3UpdateResponse;
};

/**
 * @summary Update the default backup location
 */
export type UsersAssetsLocationDefaultUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetsLocationDefaultUpdateResponseComposite =
  UsersAssetsLocationDefaultUpdateResponse204;

export type UsersAssetsLocationDefaultUpdateResponse =
  UsersAssetsLocationDefaultUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationDefaultUpdateUrl = (
  type: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/${type}/${uid}/default`;
};

export const UsersAssetsLocationDefaultUpdate = async (
  type: string,
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetsLocationDefaultUpdateResponse> => {
  const res = await fetch(getV1UsersAssetsLocationDefaultUpdateUrl(type, uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationDefaultUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationDefaultUpdateResponse;
};

/**
 * @summary Deletes the specified location
 */
export type UsersAssetsLocationDeleteResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetsLocationDeleteResponseComposite =
  UsersAssetsLocationDeleteResponse204;

export type UsersAssetsLocationDeleteResponse =
  UsersAssetsLocationDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetsLocationDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/${uid}`;
};

export const UsersAssetsLocationDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetsLocationDeleteResponse> => {
  const res = await fetch(getV1UsersAssetsLocationDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsLocationDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsLocationDeleteResponse;
};

/**
 * @summary Returns the SSH keys
 */
export type UsersAssetsSshGetResponse200 = {
  data: UserAssetsSsh;
  status: 200;
};

export type UsersAssetsSshGetResponseComposite = UsersAssetsSshGetResponse200;

export type UsersAssetsSshGetResponse = UsersAssetsSshGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersAssetsSshGetUrl = (params?: UsersAssetsSshGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/sshkeys?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/sshkeys`;
};

export const UsersAssetsSshGet = async (
  params?: UsersAssetsSshGetParams,
  options?: RequestInit,
): Promise<UsersAssetsSshGetResponse> => {
  const res = await fetch(getV1UsersAssetsSshGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetsSshGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetsSshGetResponse;
};

/**
 * @summary Creates a SSH key
 */
export type UserAssetsSshCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type UserAssetsSshCreateResponseComposite =
  UserAssetsSshCreateResponse201;

export type UserAssetsSshCreateResponse =
  UserAssetsSshCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UserAssetsSshCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys`;
};

export const UserAssetsSshCreate = async (
  UserAssetSshEntity: UserAssetSshEntity,
  options?: RequestInit,
): Promise<UserAssetsSshCreateResponse> => {
  const res = await fetch(getV1UserAssetsSshCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetSshEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UserAssetsSshCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UserAssetsSshCreateResponse;
};

/**
 * @summary Returns the specified user ssh key
 */
export type UsersAssetSshDeleteResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetSshDeleteResponseComposite =
  UsersAssetSshDeleteResponse204;

export type UsersAssetSshDeleteResponse =
  UsersAssetSshDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetSshDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const UsersAssetSshDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetSshDeleteResponse> => {
  const res = await fetch(getV1UsersAssetSshDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetSshDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetSshDeleteResponse;
};

/**
 * @summary Returns the specified user ssh key
 */
export type UsersAssetSshGetUidResponse200 = {
  data: UserAssetSsh;
  status: 200;
};

export type UsersAssetSshGetUidResponseComposite =
  UsersAssetSshGetUidResponse200;

export type UsersAssetSshGetUidResponse =
  UsersAssetSshGetUidResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetSshGetUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const UsersAssetSshGetUid = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersAssetSshGetUidResponse> => {
  const res = await fetch(getV1UsersAssetSshGetUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetSshGetUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetSshGetUidResponse;
};

/**
 * @summary Updates the specified user ssh key
 */
export type UsersAssetSshUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersAssetSshUpdateResponseComposite =
  UsersAssetSshUpdateResponse204;

export type UsersAssetSshUpdateResponse =
  UsersAssetSshUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAssetSshUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const UsersAssetSshUpdate = async (
  uid: string,
  UserAssetSsh: UserAssetSsh,
  options?: RequestInit,
): Promise<UsersAssetSshUpdateResponse> => {
  const res = await fetch(getV1UsersAssetSshUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserAssetSsh),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAssetSshUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAssetSshUpdateResponse;
};

/**
 * @summary Returns the specified vSphere DNS mapping
 */
export type VsphereMappingGetResponse200 = {
  data: VsphereDnsMapping;
  status: 200;
};

export type VsphereMappingGetResponseComposite = VsphereMappingGetResponse200;

export type VsphereMappingGetResponse = VsphereMappingGetResponseComposite & {
  headers: Headers;
};

export const getV1VsphereMappingGetUrl = (params: VsphereMappingGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMapping?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMapping`;
};

export const VsphereMappingGet = async (
  params: VsphereMappingGetParams,
  options?: RequestInit,
): Promise<VsphereMappingGetResponse> => {
  const res = await fetch(getV1VsphereMappingGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereMappingGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereMappingGetResponse;
};

/**
 * @summary Returns the specified vSphere DNS mappings
 */
export type VsphereDnsMappingsGetResponse200 = {
  data: VsphereDnsMappings;
  status: 200;
};

export type VsphereDnsMappingsGetResponseComposite =
  VsphereDnsMappingsGetResponse200;

export type VsphereDnsMappingsGetResponse =
  VsphereDnsMappingsGetResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingsGetUrl = (
  params?: VsphereDnsMappingsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings`;
};

export const VsphereDnsMappingsGet = async (
  params?: VsphereDnsMappingsGetParams,
  options?: RequestInit,
): Promise<VsphereDnsMappingsGetResponse> => {
  const res = await fetch(getV1VsphereDnsMappingsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereDnsMappingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereDnsMappingsGetResponse;
};

/**
 * @summary Create a vSphere DNS mapping
 */
export type VsphereDnsMappingCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type VsphereDnsMappingCreateResponseComposite =
  VsphereDnsMappingCreateResponse201;

export type VsphereDnsMappingCreateResponse =
  VsphereDnsMappingCreateResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings`;
};

export const VsphereDnsMappingCreate = async (
  VsphereDnsMappingBody: VsphereDnsMappingBody,
  options?: RequestInit,
): Promise<VsphereDnsMappingCreateResponse> => {
  const res = await fetch(getV1VsphereDnsMappingCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VsphereDnsMappingBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereDnsMappingCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereDnsMappingCreateResponse;
};

/**
 * @summary Deletes the specified vSphere DNS mapping
 */
export type VsphereDnsMappingDeleteResponse204 = {
  data: void;
  status: 204;
};

export type VsphereDnsMappingDeleteResponseComposite =
  VsphereDnsMappingDeleteResponse204;

export type VsphereDnsMappingDeleteResponse =
  VsphereDnsMappingDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const VsphereDnsMappingDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<VsphereDnsMappingDeleteResponse> => {
  const res = await fetch(getV1VsphereDnsMappingDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereDnsMappingDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereDnsMappingDeleteResponse;
};

/**
 * @summary Returns the specified vSphere DNS mapping
 */
export type VsphereDnsMappingGetResponse200 = {
  data: VsphereDnsMapping;
  status: 200;
};

export type VsphereDnsMappingGetResponseComposite =
  VsphereDnsMappingGetResponse200;

export type VsphereDnsMappingGetResponse =
  VsphereDnsMappingGetResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const VsphereDnsMappingGet = async (
  uid: string,
  options?: RequestInit,
): Promise<VsphereDnsMappingGetResponse> => {
  const res = await fetch(getV1VsphereDnsMappingGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereDnsMappingGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereDnsMappingGetResponse;
};

/**
 * @summary Updates the specified vSphere DNS mapping
 */
export type VsphereDnsMappingUpdateResponse204 = {
  data: void;
  status: 204;
};

export type VsphereDnsMappingUpdateResponseComposite =
  VsphereDnsMappingUpdateResponse204;

export type VsphereDnsMappingUpdateResponse =
  VsphereDnsMappingUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1VsphereDnsMappingUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const VsphereDnsMappingUpdate = async (
  uid: string,
  VsphereDnsMappingBody: VsphereDnsMappingBody,
  options?: RequestInit,
): Promise<VsphereDnsMappingUpdateResponse> => {
  const res = await fetch(getV1VsphereDnsMappingUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(VsphereDnsMappingBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: VsphereDnsMappingUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as VsphereDnsMappingUpdateResponse;
};

/**
 * @summary Revoke access of specific token(s)
 */
export type UsersAuthTokensRevokeResponse204 = {
  data: void;
  status: 204;
};

export type UsersAuthTokensRevokeResponseComposite =
  UsersAuthTokensRevokeResponse204;

export type UsersAuthTokensRevokeResponse =
  UsersAuthTokensRevokeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersAuthTokensRevokeUrl = () => {
  return `https://api.spectrocloud.com/v1/users/auth/tokens/revoke`;
};

export const UsersAuthTokensRevoke = async (
  AuthTokenRevoke: AuthTokenRevoke,
  options?: RequestInit,
): Promise<UsersAuthTokensRevokeResponse> => {
  const res = await fetch(getV1UsersAuthTokensRevokeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(AuthTokenRevoke),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersAuthTokensRevokeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersAuthTokensRevokeResponse;
};

/**
 * @summary Get the system Spectro repository. Restricted to edge services
 */
export type UsersConfigScarGetResponse200 = {
  data: SystemScarSpec;
  status: 200;
};

export type UsersConfigScarGetResponseComposite = UsersConfigScarGetResponse200;

export type UsersConfigScarGetResponse = UsersConfigScarGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersConfigScarGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/config/scar`;
};

export const UsersConfigScarGet = async (
  options?: RequestInit,
): Promise<UsersConfigScarGetResponse> => {
  const res = await fetch(getV1UsersConfigScarGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersConfigScarGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersConfigScarGetResponse;
};

/**
 * Returns a basic information of User for the specified uid.
 * @summary Returns the base information of specified User
 */
export type UsersInfoGetResponse200 = {
  data: UserInfo;
  status: 200;
};

export type UsersInfoGetResponseComposite = UsersInfoGetResponse200;

export type UsersInfoGetResponse = UsersInfoGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersInfoGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/info`;
};

export const UsersInfoGet = async (
  options?: RequestInit,
): Promise<UsersInfoGetResponse> => {
  const res = await fetch(getV1UsersInfoGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersInfoGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersInfoGetResponse;
};

/**
 * gets users kubectl session
 * @summary gets users kubectl session
 */
export type UsersKubectlSessionUidResponse200 = {
  data: UserKubectlSession;
  status: 200;
};

export type UsersKubectlSessionUidResponseComposite =
  UsersKubectlSessionUidResponse200;

export type UsersKubectlSessionUidResponse =
  UsersKubectlSessionUidResponseComposite & {
    headers: Headers;
  };

export const getV1UsersKubectlSessionUidUrl = (sessionUid: string) => {
  return `https://api.spectrocloud.com/v1/users/kubectl/session/${sessionUid}`;
};

export const UsersKubectlSessionUid = async (
  sessionUid: string,
  options?: RequestInit,
): Promise<UsersKubectlSessionUidResponse> => {
  const res = await fetch(getV1UsersKubectlSessionUidUrl(sessionUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersKubectlSessionUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersKubectlSessionUidResponse;
};

/**
 * @summary Retrieves a list of users metadata
 */
export type UsersMetadataResponse200 = {
  data: UsersMetadata;
  status: 200;
};

export type UsersMetadataResponseComposite = UsersMetadataResponse200;

export type UsersMetadataResponse = UsersMetadataResponseComposite & {
  headers: Headers;
};

export const getV1UsersMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/users/meta`;
};

export const UsersMetadata = async (
  options?: RequestInit,
): Promise<UsersMetadataResponse> => {
  const res = await fetch(getV1UsersMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersMetadataResponse;
};

/**
 * User password change request via current password and emailId
 * @summary User password change request using the user emailId
 */
export type UsersPasswordChangeResponse204 = {
  data: void;
  status: 204;
};

export type UsersPasswordChangeResponseComposite =
  UsersPasswordChangeResponse204;

export type UsersPasswordChangeResponse =
  UsersPasswordChangeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersPasswordChangeUrl = () => {
  return `https://api.spectrocloud.com/v1/users/password/change`;
};

export const UsersPasswordChange = async (
  UsersPasswordChangeBody: UsersPasswordChangeBody,
  options?: RequestInit,
): Promise<UsersPasswordChangeResponse> => {
  const res = await fetch(getV1UsersPasswordChangeUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UsersPasswordChangeBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersPasswordChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersPasswordChangeResponse;
};

/**
 * User password request will be sent to the supplied emailId
 * @summary User password reset request using the email id
 */
export type UsersEmailPasswordResetResponse204 = {
  data: void;
  status: 204;
};

export type UsersEmailPasswordResetResponseComposite =
  UsersEmailPasswordResetResponse204;

export type UsersEmailPasswordResetResponse =
  UsersEmailPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersEmailPasswordResetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/password/reset`;
};

export const UsersEmailPasswordReset = async (
  UsersEmailPasswordResetBody: UsersEmailPasswordResetBody,
  options?: RequestInit,
): Promise<UsersEmailPasswordResetResponse> => {
  const res = await fetch(getV1UsersEmailPasswordResetUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UsersEmailPasswordResetBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersEmailPasswordResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersEmailPasswordResetResponse;
};

/**
 * @summary Retrieves a list of users summary with provided filter spec
 */
export type UsersSummaryGetResponse200 = {
  data: UsersSummaryList;
  status: 200;
};

export type UsersSummaryGetResponseComposite = UsersSummaryGetResponse200;

export type UsersSummaryGetResponse = UsersSummaryGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersSummaryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/summary`;
};

export const UsersSummaryGet = async (
  UsersSummarySpec: UsersSummarySpec,
  options?: RequestInit,
): Promise<UsersSummaryGetResponse> => {
  const res = await fetch(getV1UsersSummaryGetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UsersSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersSummaryGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersSummaryGetResponse;
};

/**
 * Returns the users system feature
 * @summary Returns the users system feature
 */
export type UsersSystemFeatureResponse200 = {
  data: SystemFeatures;
  status: 200;
};

export type UsersSystemFeatureResponseComposite = UsersSystemFeatureResponse200;

export type UsersSystemFeatureResponse = UsersSystemFeatureResponseComposite & {
  headers: Headers;
};

export const getV1UsersSystemFeatureUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/features`;
};

export const UsersSystemFeature = async (
  options?: RequestInit,
): Promise<UsersSystemFeatureResponse> => {
  const res = await fetch(getV1UsersSystemFeatureUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersSystemFeatureResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersSystemFeatureResponse;
};

/**
 * @summary Delete the macros for the system user by macro name
 */
export type UsersSystemMacrosDeleteByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type UsersSystemMacrosDeleteByMacroNameResponseComposite =
  UsersSystemMacrosDeleteByMacroNameResponse204;

export type UsersSystemMacrosDeleteByMacroNameResponse =
  UsersSystemMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosDeleteByMacroNameUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const UsersSystemMacrosDeleteByMacroName = async (
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<UsersSystemMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(getV1UsersSystemMacrosDeleteByMacroNameUrl(), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersSystemMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersSystemMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the system
 */
export type UsersSystemMacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type UsersSystemMacrosListResponseComposite =
  UsersSystemMacrosListResponse200;

export type UsersSystemMacrosListResponse =
  UsersSystemMacrosListResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const UsersSystemMacrosList = async (
  options?: RequestInit,
): Promise<UsersSystemMacrosListResponse> => {
  const res = await fetch(getV1UsersSystemMacrosListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersSystemMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersSystemMacrosListResponse;
};

/**
 * @summary Update the macros for the system user by macro name
 */
export type UsersSystemMacrosUpdateByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type UsersSystemMacrosUpdateByMacroNameResponseComposite =
  UsersSystemMacrosUpdateByMacroNameResponse204;

export type UsersSystemMacrosUpdateByMacroNameResponse =
  UsersSystemMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosUpdateByMacroNameUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const UsersSystemMacrosUpdateByMacroName = async (
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<UsersSystemMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(getV1UsersSystemMacrosUpdateByMacroNameUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersSystemMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersSystemMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the system user
 */
export type UsersSystemMacrosCreateResponse204 = {
  data: void;
  status: 204;
};

export type UsersSystemMacrosCreateResponseComposite =
  UsersSystemMacrosCreateResponse204;

export type UsersSystemMacrosCreateResponse =
  UsersSystemMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const UsersSystemMacrosCreate = async (
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<UsersSystemMacrosCreateResponse> => {
  const res = await fetch(getV1UsersSystemMacrosCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersSystemMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersSystemMacrosCreateResponse;
};

/**
 * @summary Update the macros of the system
 */
export type UsersSystemMacrosUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersSystemMacrosUpdateResponseComposite =
  UsersSystemMacrosUpdateResponse204;

export type UsersSystemMacrosUpdateResponse =
  UsersSystemMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersSystemMacrosUpdateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const UsersSystemMacrosUpdate = async (
  MacrosBody: MacrosBody,
  options?: RequestInit,
): Promise<UsersSystemMacrosUpdateResponse> => {
  const res = await fetch(getV1UsersSystemMacrosUpdateUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersSystemMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersSystemMacrosUpdateResponse;
};

/**
 * Deletes the specified User for given uid
 * @summary Deletes the specified User
 */
export type UsersUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidDeleteResponseComposite = UsersUidDeleteResponse204;

export type UsersUidDeleteResponse = UsersUidDeleteResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const UsersUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersUidDeleteResponse> => {
  const res = await fetch(getV1UsersUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidDeleteResponse;
};

/**
 * Returns a User for the specified uid.
 * @summary Returns the specified User
 */
export type UsersUidGetResponse200 = {
  data: User;
  status: 200;
};

export type UsersUidGetResponseComposite = UsersUidGetResponse200;

export type UsersUidGetResponse = UsersUidGetResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const UsersUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersUidGetResponse> => {
  const res = await fetch(getV1UsersUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidGetResponse;
};

/**
 * User is patched for the specified information
 * @summary Patches the specified User
 */
export type UsersUidPatchResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidPatchResponseComposite = UsersUidPatchResponse204;

export type UsersUidPatchResponse = UsersUidPatchResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const UsersUidPatch = async (
  uid: string,
  UserPatch: UserPatch,
  options?: RequestInit,
): Promise<UsersUidPatchResponse> => {
  const res = await fetch(getV1UsersUidPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidPatchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidPatchResponse;
};

/**
 * A user is created for the given user context
 * @summary Update User
 */
export type UsersUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidUpdateResponseComposite = UsersUidUpdateResponse204;

export type UsersUidUpdateResponse = UsersUidUpdateResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const UsersUidUpdate = async (
  uid: string,
  UserUpdateEntity: UserUpdateEntity,
  options?: RequestInit,
): Promise<UsersUidUpdateResponse> => {
  const res = await fetch(getV1UsersUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidUpdateResponse;
};

/**
 * User password change request via current password
 * @summary User password change request using the user uid
 */
export type UsersUidPasswordChangeResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidPasswordChangeResponseComposite =
  UsersUidPasswordChangeResponse204;

export type UsersUidPasswordChangeResponse =
  UsersUidPasswordChangeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidPasswordChangeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/password/change`;
};

export const UsersUidPasswordChange = async (
  uid: string,
  UsersUidPasswordChangeBody: UsersUidPasswordChangeBody,
  options?: RequestInit,
): Promise<UsersUidPasswordChangeResponse> => {
  const res = await fetch(getV1UsersUidPasswordChangeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UsersUidPasswordChangeBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidPasswordChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidPasswordChangeResponse;
};

/**
 * User password reset request, will send the password reset option through the emailId
 * @summary User password reset request using the user uid
 */
export type UsersUidPasswordResetResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidPasswordResetResponseComposite =
  UsersUidPasswordResetResponse204;

export type UsersUidPasswordResetResponse =
  UsersUidPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidPasswordResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/password/reset`;
};

export const UsersUidPasswordReset = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersUidPasswordResetResponse> => {
  const res = await fetch(getV1UsersUidPasswordResetUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidPasswordResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidPasswordResetResponse;
};

/**
 * Returns a User with projects and roles
 * @summary Returns the specified User Projects and Roles information
 */
export type UsersProjectRolesResponse200 = {
  data: ProjectRolesEntity;
  status: 200;
};

export type UsersProjectRolesResponseComposite = UsersProjectRolesResponse200;

export type UsersProjectRolesResponse = UsersProjectRolesResponseComposite & {
  headers: Headers;
};

export const getV1UsersProjectRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/projects`;
};

export const UsersProjectRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersProjectRolesResponse> => {
  const res = await fetch(getV1UsersProjectRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersProjectRolesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersProjectRolesResponse;
};

/**
 * User is updated with projects and roles
 * @summary Updates the projects and roles for user
 */
export type UsersProjectRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type UsersProjectRolesPutResponseComposite =
  UsersProjectRolesPutResponse204;

export type UsersProjectRolesPutResponse =
  UsersProjectRolesPutResponseComposite & {
    headers: Headers;
  };

export const getV1UsersProjectRolesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/projects`;
};

export const UsersProjectRolesPut = async (
  uid: string,
  ProjectRolesPatchBody: ProjectRolesPatchBody,
  options?: RequestInit,
): Promise<UsersProjectRolesPutResponse> => {
  const res = await fetch(getV1UsersProjectRolesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ProjectRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersProjectRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersProjectRolesPutResponse;
};

/**
 * Returns resource roles for user
 * @summary Returns the specified individual and resource roles for a user
 */
export type UsersUidResourceRolesResponse200 = {
  data: ResourceRoles;
  status: 200;
};

export type UsersUidResourceRolesResponseComposite =
  UsersUidResourceRolesResponse200;

export type UsersUidResourceRolesResponse =
  UsersUidResourceRolesResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidResourceRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles`;
};

export const UsersUidResourceRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersUidResourceRolesResponse> => {
  const res = await fetch(getV1UsersUidResourceRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidResourceRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidResourceRolesResponse;
};

/**
 * Resource roles added to specific user
 * @summary Add resource roles for user
 */
export type UsersUidResourceRolesCreateResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidResourceRolesCreateResponseComposite =
  UsersUidResourceRolesCreateResponse204;

export type UsersUidResourceRolesCreateResponse =
  UsersUidResourceRolesCreateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidResourceRolesCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles`;
};

export const UsersUidResourceRolesCreate = async (
  uid: string,
  ResourceRolesUpdateEntityBody: ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<UsersUidResourceRolesCreateResponse> => {
  const res = await fetch(getV1UsersUidResourceRolesCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(ResourceRolesUpdateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidResourceRolesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidResourceRolesCreateResponse;
};

/**
 * @summary Deleted the resource roles from user
 */
export type UsersUidResourceRolesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidResourceRolesUidDeleteResponseComposite =
  UsersUidResourceRolesUidDeleteResponse204;

export type UsersUidResourceRolesUidDeleteResponse =
  UsersUidResourceRolesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidResourceRolesUidDeleteUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const UsersUidResourceRolesUidDelete = async (
  uid: string,
  resourceRoleUid: string,
  options?: RequestInit,
): Promise<UsersUidResourceRolesUidDeleteResponse> => {
  const res = await fetch(
    getV1UsersUidResourceRolesUidDeleteUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidResourceRolesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidResourceRolesUidDeleteResponse;
};

/**
 * Specific resource roles fo user is updated
 * @summary Updates the resource roles for user
 */
export type UsersResourceRolesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersResourceRolesUidUpdateResponseComposite =
  UsersResourceRolesUidUpdateResponse204;

export type UsersResourceRolesUidUpdateResponse =
  UsersResourceRolesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersResourceRolesUidUpdateUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const UsersResourceRolesUidUpdate = async (
  uid: string,
  resourceRoleUid: string,
  ResourceRolesUpdateEntityBody: ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<UsersResourceRolesUidUpdateResponse> => {
  const res = await fetch(
    getV1UsersResourceRolesUidUpdateUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(ResourceRolesUpdateEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersResourceRolesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersResourceRolesUidUpdateResponse;
};

/**
 * Returns roles clubbed from team
 * @summary Returns the specified individual and team roles for a user
 */
export type UsersUidRolesResponse200 = {
  data: UserRolesEntity;
  status: 200;
};

export type UsersUidRolesResponseComposite = UsersUidRolesResponse200;

export type UsersUidRolesResponse = UsersUidRolesResponseComposite & {
  headers: Headers;
};

export const getV1UsersUidRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/roles`;
};

export const UsersUidRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<UsersUidRolesResponse> => {
  const res = await fetch(getV1UsersUidRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidRolesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidRolesResponse;
};

/**
 * User is updated with roles
 * @summary Updates the roles for user
 */
export type UsersUidRolesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type UsersUidRolesUpdateResponseComposite =
  UsersUidRolesUpdateResponse204;

export type UsersUidRolesUpdateResponse =
  UsersUidRolesUpdateResponseComposite & {
    headers: Headers;
  };

export const getV1UsersUidRolesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/roles`;
};

export const UsersUidRolesUpdate = async (
  uid: string,
  UserRoleUIDs: UserRoleUIDs,
  options?: RequestInit,
): Promise<UsersUidRolesUpdateResponse> => {
  const res = await fetch(getV1UsersUidRolesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserRoleUIDs),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersUidRolesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersUidRolesUpdateResponse;
};

/**
 * @summary Users status login mode
 */
export type UsersStatusLoginModeResponse204 = {
  data: void;
  status: 204;
};

export type UsersStatusLoginModeResponseComposite =
  UsersStatusLoginModeResponse204;

export type UsersStatusLoginModeResponse =
  UsersStatusLoginModeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersStatusLoginModeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/status/loginMode`;
};

export const UsersStatusLoginMode = async (
  uid: string,
  UserStatusLoginMode: UserStatusLoginMode,
  options?: RequestInit,
): Promise<UsersStatusLoginModeResponse> => {
  const res = await fetch(getV1UsersStatusLoginModeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(UserStatusLoginMode),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: UsersStatusLoginModeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as UsersStatusLoginModeResponse;
};
