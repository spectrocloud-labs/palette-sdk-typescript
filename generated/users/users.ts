/**
 * Copyright (c) Spectro Cloud
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Palette APIs - 4.6
 * OpenAPI spec version: v1
 */
import type {
  AuthTokenRevoke,
  Macros,
  ProjectRolesEntity,
  ResourceRoles,
  SystemFeatures,
  SystemScarSpec,
  Uid,
  User,
  UserAssetSsh,
  UserAssetSshEntity,
  UserAssetsLocationAzure,
  UserAssetsLocationGcp,
  UserAssetsLocationS3,
  UserAssetsLocations,
  UserAssetsSsh,
  UserEntity,
  UserInfo,
  UserKubectlSession,
  UserPatch,
  UserRoleUIDs,
  UserRolesEntity,
  UserStatusLoginMode,
  UserUpdateEntity,
  Users,
  UsersAssetsLocationGetParams,
  UsersAssetsSshGetParams,
  UsersEmailPasswordResetBody,
  UsersListParams,
  UsersMetadata,
  UsersSummaryList,
  UsersSummarySpec,
  UsersUidPasswordChangeBody,
  V1MacrosBody,
  V1ProjectRolesPatchBody,
  V1ResourceRolesUpdateEntityBody,
  V1UserAssetsLocationAzureBody,
  V1UserAssetsLocationGcpBody,
  V1UserAssetsLocationS3Body,
  V1UsersPasswordChangeBody,
  V1VsphereDnsMappingBody,
  VsphereDnsMapping,
  VsphereDnsMappings,
  VsphereDnsMappingsGetParams,
  VsphereMappingGetParams,
} from ".././schemas";

/**
 * Lists users the given user context
 * @summary Lists users
 */
export type usersListResponse200 = {
  data: Users;
  status: 200;
};

export type usersListResponseComposite = usersListResponse200;

export type usersListResponse = usersListResponseComposite & {
  headers: Headers;
};

export const getUsersListUrl = (params?: UsersListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users`;
};

export const usersList = async (
  params?: UsersListParams,
  options?: RequestInit,
): Promise<usersListResponse> => {
  const res = await fetch(getUsersListUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersListResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersListResponse;
};

/**
 * A user is created for the given user context
 * @summary Create User
 */
export type usersCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type usersCreateResponseComposite = usersCreateResponse201;

export type usersCreateResponse = usersCreateResponseComposite & {
  headers: Headers;
};

export const getUsersCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users`;
};

export const usersCreate = async (
  userEntity: UserEntity,
  options?: RequestInit,
): Promise<usersCreateResponse> => {
  const res = await fetch(getUsersCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersCreateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersCreateResponse;
};

/**
 * @summary Returns the specified users location
 */
export type usersAssetsLocationGetResponse200 = {
  data: UserAssetsLocations;
  status: 200;
};

export type usersAssetsLocationGetResponseComposite =
  usersAssetsLocationGetResponse200;

export type usersAssetsLocationGetResponse =
  usersAssetsLocationGetResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationGetUrl = (
  params?: UsersAssetsLocationGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/locations?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/locations`;
};

export const usersAssetsLocationGet = async (
  params?: UsersAssetsLocationGetParams,
  options?: RequestInit,
): Promise<usersAssetsLocationGetResponse> => {
  const res = await fetch(getUsersAssetsLocationGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationGetResponse;
};

/**
 * @summary Create a Azure location
 */
export type usersAssetsLocationAzureCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type usersAssetsLocationAzureCreateResponseComposite =
  usersAssetsLocationAzureCreateResponse201;

export type usersAssetsLocationAzureCreateResponse =
  usersAssetsLocationAzureCreateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationAzureCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure`;
};

export const usersAssetsLocationAzureCreate = async (
  v1UserAssetsLocationAzureBody: V1UserAssetsLocationAzureBody,
  options?: RequestInit,
): Promise<usersAssetsLocationAzureCreateResponse> => {
  const res = await fetch(getUsersAssetsLocationAzureCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationAzureBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationAzureCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationAzureCreateResponse;
};

/**
 * @summary Returns the specified Azure location
 */
export type usersAssetsLocationAzureGetResponse200 = {
  data: UserAssetsLocationAzure;
  status: 200;
};

export type usersAssetsLocationAzureGetResponseComposite =
  usersAssetsLocationAzureGetResponse200;

export type usersAssetsLocationAzureGetResponse =
  usersAssetsLocationAzureGetResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationAzureGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure/${uid}`;
};

export const usersAssetsLocationAzureGet = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetsLocationAzureGetResponse> => {
  const res = await fetch(getUsersAssetsLocationAzureGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationAzureGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationAzureGetResponse;
};

/**
 * @summary Updates the specified Azure location
 */
export type usersAssetsLocationAzureUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetsLocationAzureUpdateResponseComposite =
  usersAssetsLocationAzureUpdateResponse204;

export type usersAssetsLocationAzureUpdateResponse =
  usersAssetsLocationAzureUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationAzureUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/azure/${uid}`;
};

export const usersAssetsLocationAzureUpdate = async (
  uid: string,
  v1UserAssetsLocationAzureBody: V1UserAssetsLocationAzureBody,
  options?: RequestInit,
): Promise<usersAssetsLocationAzureUpdateResponse> => {
  const res = await fetch(getUsersAssetsLocationAzureUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationAzureBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationAzureUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationAzureUpdateResponse;
};

/**
 * @summary Create a GCP location
 */
export type usersAssetsLocationGcpCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type usersAssetsLocationGcpCreateResponseComposite =
  usersAssetsLocationGcpCreateResponse201;

export type usersAssetsLocationGcpCreateResponse =
  usersAssetsLocationGcpCreateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationGcpCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp`;
};

export const usersAssetsLocationGcpCreate = async (
  v1UserAssetsLocationGcpBody: V1UserAssetsLocationGcpBody,
  options?: RequestInit,
): Promise<usersAssetsLocationGcpCreateResponse> => {
  const res = await fetch(getUsersAssetsLocationGcpCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationGcpBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationGcpCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationGcpCreateResponse;
};

/**
 * @summary Returns the specified GCP location
 */
export type usersAssetsLocationGcpGetResponse200 = {
  data: UserAssetsLocationGcp;
  status: 200;
};

export type usersAssetsLocationGcpGetResponseComposite =
  usersAssetsLocationGcpGetResponse200;

export type usersAssetsLocationGcpGetResponse =
  usersAssetsLocationGcpGetResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationGcpGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp/${uid}`;
};

export const usersAssetsLocationGcpGet = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetsLocationGcpGetResponse> => {
  const res = await fetch(getUsersAssetsLocationGcpGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationGcpGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationGcpGetResponse;
};

/**
 * @summary Updates the specified GCP location
 */
export type usersAssetsLocationGcpUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetsLocationGcpUpdateResponseComposite =
  usersAssetsLocationGcpUpdateResponse204;

export type usersAssetsLocationGcpUpdateResponse =
  usersAssetsLocationGcpUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationGcpUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/gcp/${uid}`;
};

export const usersAssetsLocationGcpUpdate = async (
  uid: string,
  v1UserAssetsLocationGcpBody: V1UserAssetsLocationGcpBody,
  options?: RequestInit,
): Promise<usersAssetsLocationGcpUpdateResponse> => {
  const res = await fetch(getUsersAssetsLocationGcpUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationGcpBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationGcpUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationGcpUpdateResponse;
};

/**
 * @summary Create a MinIO location
 */
export type usersAssetsLocationMinioCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type usersAssetsLocationMinioCreateResponseComposite =
  usersAssetsLocationMinioCreateResponse201;

export type usersAssetsLocationMinioCreateResponse =
  usersAssetsLocationMinioCreateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationMinioCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio`;
};

export const usersAssetsLocationMinioCreate = async (
  v1UserAssetsLocationS3Body: V1UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<usersAssetsLocationMinioCreateResponse> => {
  const res = await fetch(getUsersAssetsLocationMinioCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationMinioCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationMinioCreateResponse;
};

/**
 * @summary Returns the specified MinIO location
 */
export type usersAssetsLocationMinioGetResponse200 = {
  data: UserAssetsLocationS3;
  status: 200;
};

export type usersAssetsLocationMinioGetResponseComposite =
  usersAssetsLocationMinioGetResponse200;

export type usersAssetsLocationMinioGetResponse =
  usersAssetsLocationMinioGetResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationMinioGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio/${uid}`;
};

export const usersAssetsLocationMinioGet = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetsLocationMinioGetResponse> => {
  const res = await fetch(getUsersAssetsLocationMinioGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationMinioGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationMinioGetResponse;
};

/**
 * @summary Updates the specified MinIO location
 */
export type usersAssetsLocationMinioUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetsLocationMinioUpdateResponseComposite =
  usersAssetsLocationMinioUpdateResponse204;

export type usersAssetsLocationMinioUpdateResponse =
  usersAssetsLocationMinioUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationMinioUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/minio/${uid}`;
};

export const usersAssetsLocationMinioUpdate = async (
  uid: string,
  v1UserAssetsLocationS3Body: V1UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<usersAssetsLocationMinioUpdateResponse> => {
  const res = await fetch(getUsersAssetsLocationMinioUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationMinioUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationMinioUpdateResponse;
};

/**
 * @summary Create a S3 location
 */
export type usersAssetsLocationS3CreateResponse201 = {
  data: Uid;
  status: 201;
};

export type usersAssetsLocationS3CreateResponseComposite =
  usersAssetsLocationS3CreateResponse201;

export type usersAssetsLocationS3CreateResponse =
  usersAssetsLocationS3CreateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationS3CreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3`;
};

export const usersAssetsLocationS3Create = async (
  v1UserAssetsLocationS3Body: V1UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<usersAssetsLocationS3CreateResponse> => {
  const res = await fetch(getUsersAssetsLocationS3CreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationS3CreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationS3CreateResponse;
};

/**
 * @summary Returns the specified S3 location
 */
export type usersAssetsLocationS3DeleteResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetsLocationS3DeleteResponseComposite =
  usersAssetsLocationS3DeleteResponse204;

export type usersAssetsLocationS3DeleteResponse =
  usersAssetsLocationS3DeleteResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationS3DeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const usersAssetsLocationS3Delete = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetsLocationS3DeleteResponse> => {
  const res = await fetch(getUsersAssetsLocationS3DeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationS3DeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationS3DeleteResponse;
};

/**
 * @summary Returns the specified S3 location
 */
export type usersAssetsLocationS3GetResponse200 = {
  data: UserAssetsLocationS3;
  status: 200;
};

export type usersAssetsLocationS3GetResponseComposite =
  usersAssetsLocationS3GetResponse200;

export type usersAssetsLocationS3GetResponse =
  usersAssetsLocationS3GetResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationS3GetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const usersAssetsLocationS3Get = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetsLocationS3GetResponse> => {
  const res = await fetch(getUsersAssetsLocationS3GetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationS3GetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationS3GetResponse;
};

/**
 * @summary Updates the specified S3 location
 */
export type usersAssetsLocationS3UpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetsLocationS3UpdateResponseComposite =
  usersAssetsLocationS3UpdateResponse204;

export type usersAssetsLocationS3UpdateResponse =
  usersAssetsLocationS3UpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationS3UpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/s3/${uid}`;
};

export const usersAssetsLocationS3Update = async (
  uid: string,
  v1UserAssetsLocationS3Body: V1UserAssetsLocationS3Body,
  options?: RequestInit,
): Promise<usersAssetsLocationS3UpdateResponse> => {
  const res = await fetch(getUsersAssetsLocationS3UpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UserAssetsLocationS3Body),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationS3UpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationS3UpdateResponse;
};

/**
 * @summary Update the default backup location
 */
export type usersAssetsLocationDefaultUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetsLocationDefaultUpdateResponseComposite =
  usersAssetsLocationDefaultUpdateResponse204;

export type usersAssetsLocationDefaultUpdateResponse =
  usersAssetsLocationDefaultUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationDefaultUpdateUrl = (
  type: string,
  uid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/${type}/${uid}/default`;
};

export const usersAssetsLocationDefaultUpdate = async (
  type: string,
  uid: string,
  options?: RequestInit,
): Promise<usersAssetsLocationDefaultUpdateResponse> => {
  const res = await fetch(getUsersAssetsLocationDefaultUpdateUrl(type, uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationDefaultUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationDefaultUpdateResponse;
};

/**
 * @summary Deletes the specified location
 */
export type usersAssetsLocationDeleteResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetsLocationDeleteResponseComposite =
  usersAssetsLocationDeleteResponse204;

export type usersAssetsLocationDeleteResponse =
  usersAssetsLocationDeleteResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetsLocationDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/locations/${uid}`;
};

export const usersAssetsLocationDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetsLocationDeleteResponse> => {
  const res = await fetch(getUsersAssetsLocationDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsLocationDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsLocationDeleteResponse;
};

/**
 * @summary Returns the SSH keys
 */
export type usersAssetsSshGetResponse200 = {
  data: UserAssetsSsh;
  status: 200;
};

export type usersAssetsSshGetResponseComposite = usersAssetsSshGetResponse200;

export type usersAssetsSshGetResponse = usersAssetsSshGetResponseComposite & {
  headers: Headers;
};

export const getUsersAssetsSshGetUrl = (params?: UsersAssetsSshGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/sshkeys?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/sshkeys`;
};

export const usersAssetsSshGet = async (
  params?: UsersAssetsSshGetParams,
  options?: RequestInit,
): Promise<usersAssetsSshGetResponse> => {
  const res = await fetch(getUsersAssetsSshGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetsSshGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetsSshGetResponse;
};

/**
 * @summary Creates a SSH key
 */
export type userAssetsSshCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type userAssetsSshCreateResponseComposite =
  userAssetsSshCreateResponse201;

export type userAssetsSshCreateResponse =
  userAssetsSshCreateResponseComposite & {
    headers: Headers;
  };

export const getUserAssetsSshCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys`;
};

export const userAssetsSshCreate = async (
  userAssetSshEntity: UserAssetSshEntity,
  options?: RequestInit,
): Promise<userAssetsSshCreateResponse> => {
  const res = await fetch(getUserAssetsSshCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userAssetSshEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: userAssetsSshCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as userAssetsSshCreateResponse;
};

/**
 * @summary Returns the specified user ssh key
 */
export type usersAssetSshDeleteResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetSshDeleteResponseComposite =
  usersAssetSshDeleteResponse204;

export type usersAssetSshDeleteResponse =
  usersAssetSshDeleteResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetSshDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const usersAssetSshDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetSshDeleteResponse> => {
  const res = await fetch(getUsersAssetSshDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetSshDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetSshDeleteResponse;
};

/**
 * @summary Returns the specified user ssh key
 */
export type usersAssetSshGetUidResponse200 = {
  data: UserAssetSsh;
  status: 200;
};

export type usersAssetSshGetUidResponseComposite =
  usersAssetSshGetUidResponse200;

export type usersAssetSshGetUidResponse =
  usersAssetSshGetUidResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetSshGetUidUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const usersAssetSshGetUid = async (
  uid: string,
  options?: RequestInit,
): Promise<usersAssetSshGetUidResponse> => {
  const res = await fetch(getUsersAssetSshGetUidUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetSshGetUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetSshGetUidResponse;
};

/**
 * @summary Updates the specified user ssh key
 */
export type usersAssetSshUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersAssetSshUpdateResponseComposite =
  usersAssetSshUpdateResponse204;

export type usersAssetSshUpdateResponse =
  usersAssetSshUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersAssetSshUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/sshkeys/${uid}`;
};

export const usersAssetSshUpdate = async (
  uid: string,
  userAssetSsh: UserAssetSsh,
  options?: RequestInit,
): Promise<usersAssetSshUpdateResponse> => {
  const res = await fetch(getUsersAssetSshUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userAssetSsh),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAssetSshUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAssetSshUpdateResponse;
};

/**
 * @summary Returns the specified vSphere DNS mapping
 */
export type vsphereMappingGetResponse200 = {
  data: VsphereDnsMapping;
  status: 200;
};

export type vsphereMappingGetResponseComposite = vsphereMappingGetResponse200;

export type vsphereMappingGetResponse = vsphereMappingGetResponseComposite & {
  headers: Headers;
};

export const getVsphereMappingGetUrl = (params: VsphereMappingGetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMapping?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMapping`;
};

export const vsphereMappingGet = async (
  params: VsphereMappingGetParams,
  options?: RequestInit,
): Promise<vsphereMappingGetResponse> => {
  const res = await fetch(getVsphereMappingGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: vsphereMappingGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as vsphereMappingGetResponse;
};

/**
 * @summary Returns the specified vSphere DNS mappings
 */
export type vsphereDnsMappingsGetResponse200 = {
  data: VsphereDnsMappings;
  status: 200;
};

export type vsphereDnsMappingsGetResponseComposite =
  vsphereDnsMappingsGetResponse200;

export type vsphereDnsMappingsGetResponse =
  vsphereDnsMappingsGetResponseComposite & {
    headers: Headers;
  };

export const getVsphereDnsMappingsGetUrl = (
  params?: VsphereDnsMappingsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings?${stringifiedParams}`
    : `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings`;
};

export const vsphereDnsMappingsGet = async (
  params?: VsphereDnsMappingsGetParams,
  options?: RequestInit,
): Promise<vsphereDnsMappingsGetResponse> => {
  const res = await fetch(getVsphereDnsMappingsGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: vsphereDnsMappingsGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as vsphereDnsMappingsGetResponse;
};

/**
 * @summary Create a vSphere DNS mapping
 */
export type vsphereDnsMappingCreateResponse201 = {
  data: Uid;
  status: 201;
};

export type vsphereDnsMappingCreateResponseComposite =
  vsphereDnsMappingCreateResponse201;

export type vsphereDnsMappingCreateResponse =
  vsphereDnsMappingCreateResponseComposite & {
    headers: Headers;
  };

export const getVsphereDnsMappingCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings`;
};

export const vsphereDnsMappingCreate = async (
  v1VsphereDnsMappingBody: V1VsphereDnsMappingBody,
  options?: RequestInit,
): Promise<vsphereDnsMappingCreateResponse> => {
  const res = await fetch(getVsphereDnsMappingCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereDnsMappingBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: vsphereDnsMappingCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as vsphereDnsMappingCreateResponse;
};

/**
 * @summary Deletes the specified vSphere DNS mapping
 */
export type vsphereDnsMappingDeleteResponse204 = {
  data: void;
  status: 204;
};

export type vsphereDnsMappingDeleteResponseComposite =
  vsphereDnsMappingDeleteResponse204;

export type vsphereDnsMappingDeleteResponse =
  vsphereDnsMappingDeleteResponseComposite & {
    headers: Headers;
  };

export const getVsphereDnsMappingDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const vsphereDnsMappingDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<vsphereDnsMappingDeleteResponse> => {
  const res = await fetch(getVsphereDnsMappingDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: vsphereDnsMappingDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as vsphereDnsMappingDeleteResponse;
};

/**
 * @summary Returns the specified vSphere DNS mapping
 */
export type vsphereDnsMappingGetResponse200 = {
  data: VsphereDnsMapping;
  status: 200;
};

export type vsphereDnsMappingGetResponseComposite =
  vsphereDnsMappingGetResponse200;

export type vsphereDnsMappingGetResponse =
  vsphereDnsMappingGetResponseComposite & {
    headers: Headers;
  };

export const getVsphereDnsMappingGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const vsphereDnsMappingGet = async (
  uid: string,
  options?: RequestInit,
): Promise<vsphereDnsMappingGetResponse> => {
  const res = await fetch(getVsphereDnsMappingGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: vsphereDnsMappingGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as vsphereDnsMappingGetResponse;
};

/**
 * @summary Updates the specified vSphere DNS mapping
 */
export type vsphereDnsMappingUpdateResponse204 = {
  data: void;
  status: 204;
};

export type vsphereDnsMappingUpdateResponseComposite =
  vsphereDnsMappingUpdateResponse204;

export type vsphereDnsMappingUpdateResponse =
  vsphereDnsMappingUpdateResponseComposite & {
    headers: Headers;
  };

export const getVsphereDnsMappingUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/assets/vsphere/dnsMappings/${uid}`;
};

export const vsphereDnsMappingUpdate = async (
  uid: string,
  v1VsphereDnsMappingBody: V1VsphereDnsMappingBody,
  options?: RequestInit,
): Promise<vsphereDnsMappingUpdateResponse> => {
  const res = await fetch(getVsphereDnsMappingUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1VsphereDnsMappingBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: vsphereDnsMappingUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as vsphereDnsMappingUpdateResponse;
};

/**
 * @summary Revoke access of specific token(s)
 */
export type usersAuthTokensRevokeResponse204 = {
  data: void;
  status: 204;
};

export type usersAuthTokensRevokeResponseComposite =
  usersAuthTokensRevokeResponse204;

export type usersAuthTokensRevokeResponse =
  usersAuthTokensRevokeResponseComposite & {
    headers: Headers;
  };

export const getUsersAuthTokensRevokeUrl = () => {
  return `https://api.spectrocloud.com/v1/users/auth/tokens/revoke`;
};

export const usersAuthTokensRevoke = async (
  authTokenRevoke: AuthTokenRevoke,
  options?: RequestInit,
): Promise<usersAuthTokensRevokeResponse> => {
  const res = await fetch(getUsersAuthTokensRevokeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(authTokenRevoke),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersAuthTokensRevokeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersAuthTokensRevokeResponse;
};

/**
 * @summary Get the system Spectro repository. Restricted to edge services
 */
export type v1UsersConfigScarGetResponse200 = {
  data: SystemScarSpec;
  status: 200;
};

export type v1UsersConfigScarGetResponseComposite =
  v1UsersConfigScarGetResponse200;

export type v1UsersConfigScarGetResponse =
  v1UsersConfigScarGetResponseComposite & {
    headers: Headers;
  };

export const getV1UsersConfigScarGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/config/scar`;
};

export const v1UsersConfigScarGet = async (
  options?: RequestInit,
): Promise<v1UsersConfigScarGetResponse> => {
  const res = await fetch(getV1UsersConfigScarGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersConfigScarGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersConfigScarGetResponse;
};

/**
 * Returns a basic information of User for the specified uid.
 * @summary Returns the base information of specified User
 */
export type usersInfoGetResponse200 = {
  data: UserInfo;
  status: 200;
};

export type usersInfoGetResponseComposite = usersInfoGetResponse200;

export type usersInfoGetResponse = usersInfoGetResponseComposite & {
  headers: Headers;
};

export const getUsersInfoGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/info`;
};

export const usersInfoGet = async (
  options?: RequestInit,
): Promise<usersInfoGetResponse> => {
  const res = await fetch(getUsersInfoGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersInfoGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersInfoGetResponse;
};

/**
 * gets users kubectl session
 * @summary gets users kubectl session
 */
export type v1UsersKubectlSessionUidResponse200 = {
  data: UserKubectlSession;
  status: 200;
};

export type v1UsersKubectlSessionUidResponseComposite =
  v1UsersKubectlSessionUidResponse200;

export type v1UsersKubectlSessionUidResponse =
  v1UsersKubectlSessionUidResponseComposite & {
    headers: Headers;
  };

export const getV1UsersKubectlSessionUidUrl = (sessionUid: string) => {
  return `https://api.spectrocloud.com/v1/users/kubectl/session/${sessionUid}`;
};

export const v1UsersKubectlSessionUid = async (
  sessionUid: string,
  options?: RequestInit,
): Promise<v1UsersKubectlSessionUidResponse> => {
  const res = await fetch(getV1UsersKubectlSessionUidUrl(sessionUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersKubectlSessionUidResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersKubectlSessionUidResponse;
};

/**
 * @summary Retrieves a list of users metadata
 */
export type usersMetadataResponse200 = {
  data: UsersMetadata;
  status: 200;
};

export type usersMetadataResponseComposite = usersMetadataResponse200;

export type usersMetadataResponse = usersMetadataResponseComposite & {
  headers: Headers;
};

export const getUsersMetadataUrl = () => {
  return `https://api.spectrocloud.com/v1/users/meta`;
};

export const usersMetadata = async (
  options?: RequestInit,
): Promise<usersMetadataResponse> => {
  const res = await fetch(getUsersMetadataUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersMetadataResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersMetadataResponse;
};

/**
 * User password change request via current password and emailId
 * @summary User password change request using the user emailId
 */
export type v1UsersPasswordChangeResponse204 = {
  data: void;
  status: 204;
};

export type v1UsersPasswordChangeResponseComposite =
  v1UsersPasswordChangeResponse204;

export type v1UsersPasswordChangeResponse =
  v1UsersPasswordChangeResponseComposite & {
    headers: Headers;
  };

export const getV1UsersPasswordChangeUrl = () => {
  return `https://api.spectrocloud.com/v1/users/password/change`;
};

export const v1UsersPasswordChange = async (
  v1UsersPasswordChangeBody: V1UsersPasswordChangeBody,
  options?: RequestInit,
): Promise<v1UsersPasswordChangeResponse> => {
  const res = await fetch(getV1UsersPasswordChangeUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1UsersPasswordChangeBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: v1UsersPasswordChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as v1UsersPasswordChangeResponse;
};

/**
 * User password request will be sent to the supplied emailId
 * @summary User password reset request using the email id
 */
export type usersEmailPasswordResetResponse204 = {
  data: void;
  status: 204;
};

export type usersEmailPasswordResetResponseComposite =
  usersEmailPasswordResetResponse204;

export type usersEmailPasswordResetResponse =
  usersEmailPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getUsersEmailPasswordResetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/password/reset`;
};

export const usersEmailPasswordReset = async (
  usersEmailPasswordResetBody: UsersEmailPasswordResetBody,
  options?: RequestInit,
): Promise<usersEmailPasswordResetResponse> => {
  const res = await fetch(getUsersEmailPasswordResetUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(usersEmailPasswordResetBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersEmailPasswordResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersEmailPasswordResetResponse;
};

/**
 * @summary Retrieves a list of users summary with provided filter spec
 */
export type usersSummaryGetResponse200 = {
  data: UsersSummaryList;
  status: 200;
};

export type usersSummaryGetResponseComposite = usersSummaryGetResponse200;

export type usersSummaryGetResponse = usersSummaryGetResponseComposite & {
  headers: Headers;
};

export const getUsersSummaryGetUrl = () => {
  return `https://api.spectrocloud.com/v1/users/summary`;
};

export const usersSummaryGet = async (
  usersSummarySpec: UsersSummarySpec,
  options?: RequestInit,
): Promise<usersSummaryGetResponse> => {
  const res = await fetch(getUsersSummaryGetUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(usersSummarySpec),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersSummaryGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersSummaryGetResponse;
};

/**
 * Returns the users system feature
 * @summary Returns the users system feature
 */
export type usersSystemFeatureResponse200 = {
  data: SystemFeatures;
  status: 200;
};

export type usersSystemFeatureResponseComposite = usersSystemFeatureResponse200;

export type usersSystemFeatureResponse = usersSystemFeatureResponseComposite & {
  headers: Headers;
};

export const getUsersSystemFeatureUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/features`;
};

export const usersSystemFeature = async (
  options?: RequestInit,
): Promise<usersSystemFeatureResponse> => {
  const res = await fetch(getUsersSystemFeatureUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersSystemFeatureResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersSystemFeatureResponse;
};

/**
 * @summary Delete the macros for the system user by macro name
 */
export type usersSystemMacrosDeleteByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type usersSystemMacrosDeleteByMacroNameResponseComposite =
  usersSystemMacrosDeleteByMacroNameResponse204;

export type usersSystemMacrosDeleteByMacroNameResponse =
  usersSystemMacrosDeleteByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getUsersSystemMacrosDeleteByMacroNameUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const usersSystemMacrosDeleteByMacroName = async (
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<usersSystemMacrosDeleteByMacroNameResponse> => {
  const res = await fetch(getUsersSystemMacrosDeleteByMacroNameUrl(), {
    ...options,
    method: "DELETE",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersSystemMacrosDeleteByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersSystemMacrosDeleteByMacroNameResponse;
};

/**
 * @summary List the macros of the system
 */
export type usersSystemMacrosListResponse200 = {
  data: Macros;
  status: 200;
};

export type usersSystemMacrosListResponseComposite =
  usersSystemMacrosListResponse200;

export type usersSystemMacrosListResponse =
  usersSystemMacrosListResponseComposite & {
    headers: Headers;
  };

export const getUsersSystemMacrosListUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const usersSystemMacrosList = async (
  options?: RequestInit,
): Promise<usersSystemMacrosListResponse> => {
  const res = await fetch(getUsersSystemMacrosListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersSystemMacrosListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersSystemMacrosListResponse;
};

/**
 * @summary Update the macros for the system user by macro name
 */
export type usersSystemMacrosUpdateByMacroNameResponse204 = {
  data: void;
  status: 204;
};

export type usersSystemMacrosUpdateByMacroNameResponseComposite =
  usersSystemMacrosUpdateByMacroNameResponse204;

export type usersSystemMacrosUpdateByMacroNameResponse =
  usersSystemMacrosUpdateByMacroNameResponseComposite & {
    headers: Headers;
  };

export const getUsersSystemMacrosUpdateByMacroNameUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const usersSystemMacrosUpdateByMacroName = async (
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<usersSystemMacrosUpdateByMacroNameResponse> => {
  const res = await fetch(getUsersSystemMacrosUpdateByMacroNameUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersSystemMacrosUpdateByMacroNameResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersSystemMacrosUpdateByMacroNameResponse;
};

/**
 * @summary Create or add new macros for the system user
 */
export type usersSystemMacrosCreateResponse204 = {
  data: void;
  status: 204;
};

export type usersSystemMacrosCreateResponseComposite =
  usersSystemMacrosCreateResponse204;

export type usersSystemMacrosCreateResponse =
  usersSystemMacrosCreateResponseComposite & {
    headers: Headers;
  };

export const getUsersSystemMacrosCreateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const usersSystemMacrosCreate = async (
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<usersSystemMacrosCreateResponse> => {
  const res = await fetch(getUsersSystemMacrosCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersSystemMacrosCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersSystemMacrosCreateResponse;
};

/**
 * @summary Update the macros of the system
 */
export type usersSystemMacrosUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersSystemMacrosUpdateResponseComposite =
  usersSystemMacrosUpdateResponse204;

export type usersSystemMacrosUpdateResponse =
  usersSystemMacrosUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersSystemMacrosUpdateUrl = () => {
  return `https://api.spectrocloud.com/v1/users/system/macros`;
};

export const usersSystemMacrosUpdate = async (
  v1MacrosBody: V1MacrosBody,
  options?: RequestInit,
): Promise<usersSystemMacrosUpdateResponse> => {
  const res = await fetch(getUsersSystemMacrosUpdateUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1MacrosBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersSystemMacrosUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersSystemMacrosUpdateResponse;
};

/**
 * Deletes the specified User for given uid
 * @summary Deletes the specified User
 */
export type usersUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type usersUidDeleteResponseComposite = usersUidDeleteResponse204;

export type usersUidDeleteResponse = usersUidDeleteResponseComposite & {
  headers: Headers;
};

export const getUsersUidDeleteUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const usersUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<usersUidDeleteResponse> => {
  const res = await fetch(getUsersUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidDeleteResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidDeleteResponse;
};

/**
 * Returns a User for the specified uid.
 * @summary Returns the specified User
 */
export type usersUidGetResponse200 = {
  data: User;
  status: 200;
};

export type usersUidGetResponseComposite = usersUidGetResponse200;

export type usersUidGetResponse = usersUidGetResponseComposite & {
  headers: Headers;
};

export const getUsersUidGetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const usersUidGet = async (
  uid: string,
  options?: RequestInit,
): Promise<usersUidGetResponse> => {
  const res = await fetch(getUsersUidGetUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidGetResponse;
};

/**
 * User is patched for the specified information
 * @summary Patches the specified User
 */
export type usersUidPatchResponse204 = {
  data: void;
  status: 204;
};

export type usersUidPatchResponseComposite = usersUidPatchResponse204;

export type usersUidPatchResponse = usersUidPatchResponseComposite & {
  headers: Headers;
};

export const getUsersUidPatchUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const usersUidPatch = async (
  uid: string,
  userPatch: UserPatch,
  options?: RequestInit,
): Promise<usersUidPatchResponse> => {
  const res = await fetch(getUsersUidPatchUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userPatch),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidPatchResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidPatchResponse;
};

/**
 * A user is created for the given user context
 * @summary Update User
 */
export type usersUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersUidUpdateResponseComposite = usersUidUpdateResponse204;

export type usersUidUpdateResponse = usersUidUpdateResponseComposite & {
  headers: Headers;
};

export const getUsersUidUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}`;
};

export const usersUidUpdate = async (
  uid: string,
  userUpdateEntity: UserUpdateEntity,
  options?: RequestInit,
): Promise<usersUidUpdateResponse> => {
  const res = await fetch(getUsersUidUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userUpdateEntity),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidUpdateResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidUpdateResponse;
};

/**
 * User password change request via current password
 * @summary User password change request using the user uid
 */
export type usersUidPasswordChangeResponse204 = {
  data: void;
  status: 204;
};

export type usersUidPasswordChangeResponseComposite =
  usersUidPasswordChangeResponse204;

export type usersUidPasswordChangeResponse =
  usersUidPasswordChangeResponseComposite & {
    headers: Headers;
  };

export const getUsersUidPasswordChangeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/password/change`;
};

export const usersUidPasswordChange = async (
  uid: string,
  usersUidPasswordChangeBody: UsersUidPasswordChangeBody,
  options?: RequestInit,
): Promise<usersUidPasswordChangeResponse> => {
  const res = await fetch(getUsersUidPasswordChangeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(usersUidPasswordChangeBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidPasswordChangeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidPasswordChangeResponse;
};

/**
 * User password reset request, will send the password reset option through the emailId
 * @summary User password reset request using the user uid
 */
export type usersUidPasswordResetResponse204 = {
  data: void;
  status: 204;
};

export type usersUidPasswordResetResponseComposite =
  usersUidPasswordResetResponse204;

export type usersUidPasswordResetResponse =
  usersUidPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getUsersUidPasswordResetUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/password/reset`;
};

export const usersUidPasswordReset = async (
  uid: string,
  options?: RequestInit,
): Promise<usersUidPasswordResetResponse> => {
  const res = await fetch(getUsersUidPasswordResetUrl(uid), {
    ...options,
    method: "PATCH",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidPasswordResetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidPasswordResetResponse;
};

/**
 * Returns a User with projects and roles
 * @summary Returns the specified User Projects and Roles information
 */
export type usersProjectRolesResponse200 = {
  data: ProjectRolesEntity;
  status: 200;
};

export type usersProjectRolesResponseComposite = usersProjectRolesResponse200;

export type usersProjectRolesResponse = usersProjectRolesResponseComposite & {
  headers: Headers;
};

export const getUsersProjectRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/projects`;
};

export const usersProjectRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<usersProjectRolesResponse> => {
  const res = await fetch(getUsersProjectRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersProjectRolesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersProjectRolesResponse;
};

/**
 * User is updated with projects and roles
 * @summary Updates the projects and roles for user
 */
export type usersProjectRolesPutResponse204 = {
  data: void;
  status: 204;
};

export type usersProjectRolesPutResponseComposite =
  usersProjectRolesPutResponse204;

export type usersProjectRolesPutResponse =
  usersProjectRolesPutResponseComposite & {
    headers: Headers;
  };

export const getUsersProjectRolesPutUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/projects`;
};

export const usersProjectRolesPut = async (
  uid: string,
  v1ProjectRolesPatchBody: V1ProjectRolesPatchBody,
  options?: RequestInit,
): Promise<usersProjectRolesPutResponse> => {
  const res = await fetch(getUsersProjectRolesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ProjectRolesPatchBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersProjectRolesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersProjectRolesPutResponse;
};

/**
 * Returns resource roles for user
 * @summary Returns the specified individual and resource roles for a user
 */
export type usersUidResourceRolesResponse200 = {
  data: ResourceRoles;
  status: 200;
};

export type usersUidResourceRolesResponseComposite =
  usersUidResourceRolesResponse200;

export type usersUidResourceRolesResponse =
  usersUidResourceRolesResponseComposite & {
    headers: Headers;
  };

export const getUsersUidResourceRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles`;
};

export const usersUidResourceRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<usersUidResourceRolesResponse> => {
  const res = await fetch(getUsersUidResourceRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidResourceRolesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidResourceRolesResponse;
};

/**
 * Resource roles added to specific user
 * @summary Add resource roles for user
 */
export type usersUidResourceRolesCreateResponse204 = {
  data: void;
  status: 204;
};

export type usersUidResourceRolesCreateResponseComposite =
  usersUidResourceRolesCreateResponse204;

export type usersUidResourceRolesCreateResponse =
  usersUidResourceRolesCreateResponseComposite & {
    headers: Headers;
  };

export const getUsersUidResourceRolesCreateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles`;
};

export const usersUidResourceRolesCreate = async (
  uid: string,
  v1ResourceRolesUpdateEntityBody: V1ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<usersUidResourceRolesCreateResponse> => {
  const res = await fetch(getUsersUidResourceRolesCreateUrl(uid), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(v1ResourceRolesUpdateEntityBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidResourceRolesCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidResourceRolesCreateResponse;
};

/**
 * @summary Deleted the resource roles from user
 */
export type usersUidResourceRolesUidDeleteResponse204 = {
  data: void;
  status: 204;
};

export type usersUidResourceRolesUidDeleteResponseComposite =
  usersUidResourceRolesUidDeleteResponse204;

export type usersUidResourceRolesUidDeleteResponse =
  usersUidResourceRolesUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getUsersUidResourceRolesUidDeleteUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const usersUidResourceRolesUidDelete = async (
  uid: string,
  resourceRoleUid: string,
  options?: RequestInit,
): Promise<usersUidResourceRolesUidDeleteResponse> => {
  const res = await fetch(
    getUsersUidResourceRolesUidDeleteUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidResourceRolesUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidResourceRolesUidDeleteResponse;
};

/**
 * Specific resource roles fo user is updated
 * @summary Updates the resource roles for user
 */
export type usersResourceRolesUidUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersResourceRolesUidUpdateResponseComposite =
  usersResourceRolesUidUpdateResponse204;

export type usersResourceRolesUidUpdateResponse =
  usersResourceRolesUidUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersResourceRolesUidUpdateUrl = (
  uid: string,
  resourceRoleUid: string,
) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/resourceRoles/${resourceRoleUid}`;
};

export const usersResourceRolesUidUpdate = async (
  uid: string,
  resourceRoleUid: string,
  v1ResourceRolesUpdateEntityBody: V1ResourceRolesUpdateEntityBody,
  options?: RequestInit,
): Promise<usersResourceRolesUidUpdateResponse> => {
  const res = await fetch(
    getUsersResourceRolesUidUpdateUrl(uid, resourceRoleUid),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(v1ResourceRolesUpdateEntityBody),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersResourceRolesUidUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersResourceRolesUidUpdateResponse;
};

/**
 * Returns roles clubbed from team
 * @summary Returns the specified individual and team roles for a user
 */
export type usersUidRolesResponse200 = {
  data: UserRolesEntity;
  status: 200;
};

export type usersUidRolesResponseComposite = usersUidRolesResponse200;

export type usersUidRolesResponse = usersUidRolesResponseComposite & {
  headers: Headers;
};

export const getUsersUidRolesUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/roles`;
};

export const usersUidRoles = async (
  uid: string,
  options?: RequestInit,
): Promise<usersUidRolesResponse> => {
  const res = await fetch(getUsersUidRolesUrl(uid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidRolesResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidRolesResponse;
};

/**
 * User is updated with roles
 * @summary Updates the roles for user
 */
export type usersUidRolesUpdateResponse204 = {
  data: void;
  status: 204;
};

export type usersUidRolesUpdateResponseComposite =
  usersUidRolesUpdateResponse204;

export type usersUidRolesUpdateResponse =
  usersUidRolesUpdateResponseComposite & {
    headers: Headers;
  };

export const getUsersUidRolesUpdateUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/roles`;
};

export const usersUidRolesUpdate = async (
  uid: string,
  userRoleUIDs: UserRoleUIDs,
  options?: RequestInit,
): Promise<usersUidRolesUpdateResponse> => {
  const res = await fetch(getUsersUidRolesUpdateUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userRoleUIDs),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUidRolesUpdateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUidRolesUpdateResponse;
};

/**
 * @summary Users status login mode
 */
export type usersStatusLoginModeResponse204 = {
  data: void;
  status: 204;
};

export type usersStatusLoginModeResponseComposite =
  usersStatusLoginModeResponse204;

export type usersStatusLoginModeResponse =
  usersStatusLoginModeResponseComposite & {
    headers: Headers;
  };

export const getUsersStatusLoginModeUrl = (uid: string) => {
  return `https://api.spectrocloud.com/v1/users/${uid}/status/loginMode`;
};

export const usersStatusLoginMode = async (
  uid: string,
  userStatusLoginMode: UserStatusLoginMode,
  options?: RequestInit,
): Promise<usersStatusLoginModeResponse> => {
  const res = await fetch(getUsersStatusLoginModeUrl(uid), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userStatusLoginMode),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersStatusLoginModeResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersStatusLoginModeResponse;
};
